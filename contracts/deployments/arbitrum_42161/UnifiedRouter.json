{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.22\"},\"sources\":{\"contracts/UnifiedRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// LayerZero Composer Interface\\ninterface IOAppComposer {\\n    function lzCompose(\\n        address _oApp,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\\n// CCTP Interfaces\\ninterface ITokenMessenger {\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 nonce);\\n    \\n    function depositForBurnWithCaller(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller\\n    ) external returns (uint64 nonce);\\n}\\n\\n// CCTP V2 Interface\\ninterface ITokenMessengerV2 {\\n    // CCTP V2 Enhanced depositForBurn with fast transfer support\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller,\\n        uint256 maxFee,\\n        uint32 minFinalityThreshold\\n    ) external returns (uint64 nonce);\\n}\\n\\n// CCTP V2 Message Transmitter for hooks\\ninterface IMessageTransmitter {\\n    function sendMessage(\\n        uint32 destinationDomain,\\n        bytes32 recipient,\\n        bytes calldata messageBody\\n    ) external returns (uint64);\\n}\\n\\n// LayerZero Interfaces\\ninterface ILayerZeroEndpoint {\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n    \\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n}\\n\\n// Stargate Interfaces\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n    \\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n}\\n\\n/**\\n * @title UnifiedRouter\\n * @notice Simplified cross-chain router for stablecoin transfers\\n * @dev Single entry point for all cross-chain transfers with dynamic routing\\n */\\ncontract UnifiedRouter is Ownable, Pausable, ReentrancyGuard, IOAppComposer {\\n    using SafeERC20 for IERC20;\\n    \\n    // Protocol types\\n    enum Protocol {\\n        NONE,\\n        CCTP,              // CCTP V1 - same token only\\n        CCTP_HOOKS,        // CCTP V2 with hooks - cross-token swaps\\n        LAYERZERO,\\n        STARGATE\\n    }\\n    \\n    // Route configuration\\n    struct Route {\\n        Protocol protocol;\\n        uint32 protocolDomain;  // CCTP domain or LZ/Stargate chain ID\\n        address bridgeContract; // Protocol's bridge/messenger address\\n        uint256 poolId;        // For Stargate pools\\n        address swapPool;      // Curve/DEX pool for destination swaps\\n        bytes extraData;       // Protocol-specific configuration\\n    }\\n    \\n    // Events\\n    event RouteConfigured(\\n        address indexed fromToken,\\n        uint256 indexed fromChainId,\\n        address toToken,\\n        uint256 indexed toChainId,\\n        Protocol protocol\\n    );\\n    \\n    event TransferInitiated(\\n        bytes32 indexed transferId,\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 toChainId,\\n        address recipient,\\n        Protocol protocol\\n    );\\n    \\n    event SameChainSwapExecuted(\\n        bytes32 indexed transferId,\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address indexed recipient\\n    );\\n    \\n    // State variables\\n    mapping(bytes32 => Route) public routes; // routeKey => Route\\n    mapping(Protocol => address) public protocolContracts; // Protocol => contract address\\n    mapping(uint256 => address) public cctpHookReceivers; // chainId => hook receiver address\\n    mapping(bytes32 => address) public sameChainSwapPools; // swapKey => DEX pool address\\n    \\n    uint256 private transferNonce;\\n    \\n    constructor(address _owner) Ownable(_owner) {}\\n    \\n    /**\\n     * @notice Main transfer function - send any token to any chain\\n     * @param fromToken Source token address\\n     * @param toToken Destination token address (can be different)\\n     * @param amount Amount to send (in fromToken decimals)\\n     * @param toChainId Destination chain ID\\n     * @param recipient Who receives the tokens\\n     * @return transferId Unique transfer identifier\\n     */\\n    function transfer(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 toChainId,\\n        address recipient\\n    ) external payable whenNotPaused returns (bytes32 transferId) {\\n        bytes memory emptyData;\\n        return transferWithSwap(fromToken, toToken, amount, toChainId, recipient, 0, emptyData);\\n    }\\n\\n    /**\\n     * @notice Transfer with destination swap support\\n     * @param fromToken Source token address\\n     * @param toToken Destination token address (can be different)\\n     * @param amount Amount to send (in fromToken decimals)\\n     * @param toChainId Destination chain ID\\n     * @param recipient Who receives the tokens\\n     * @param minAmountOut Minimum amount to receive (0 for same-token transfers)\\n     * @param swapData Encoded swap data for DEX on destination chain\\n     * @return transferId Unique transfer identifier\\n     */\\n    function transferWithSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 toChainId,\\n        address recipient,\\n        uint256 minAmountOut,\\n        bytes memory swapData\\n    ) public payable whenNotPaused returns (bytes32 transferId) {\\n        require(amount > 0, \\\"Amount must be > 0\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        \\n        // Generate transfer ID\\n        transferId = keccak256(abi.encodePacked(msg.sender, transferNonce++, block.timestamp));\\n        \\n        // Check if this is a same-chain swap\\n        if (toChainId == block.chainid) {\\n            // Same-chain swap - no cross-chain transfer needed\\n            uint256 amountOut = _executeSameChainSwap(\\n                fromToken,\\n                toToken, \\n                amount,\\n                minAmountOut,\\n                recipient,\\n                swapData\\n            );\\n            \\n            emit SameChainSwapExecuted(\\n                transferId,\\n                msg.sender,\\n                fromToken,\\n                toToken,\\n                amount,\\n                amountOut,\\n                recipient\\n            );\\n            \\n            return transferId;\\n        }\\n        \\n        // Cross-chain transfer - get route configuration\\n        bytes32 routeKey = getRouteKey(fromToken, block.chainid, toToken, toChainId);\\n        Route memory route = routes[routeKey];\\n        require(route.protocol != Protocol.NONE, \\\"Route not configured\\\");\\n        \\n        // Pull tokens from sender\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Execute transfer based on protocol\\n        if (route.protocol == Protocol.CCTP) {\\n            // CCTP is for USDC transfers - the route configuration ensures compatibility\\n            // Note: fromToken and toToken will have different addresses on different chains\\n            _executeCCTP(fromToken, amount, recipient, route);\\n        } else if (route.protocol == Protocol.CCTP_HOOKS) {\\n            // CCTP V2 with hooks supports cross-token swaps\\n            _executeCCTPWithHooks(fromToken, amount, recipient, route, toToken, minAmountOut, toChainId);\\n        } else if (route.protocol == Protocol.LAYERZERO) {\\n            _executeLayerZero(fromToken, amount, recipient, route, toToken, minAmountOut);\\n        } else if (route.protocol == Protocol.STARGATE) {\\n            _executeStargate(fromToken, amount, recipient, route);\\n        } else {\\n            revert(\\\"Unsupported protocol\\\");\\n        }\\n        \\n        emit TransferInitiated(\\n            transferId,\\n            msg.sender,\\n            fromToken,\\n            toToken,\\n            amount,\\n            toChainId,\\n            recipient,\\n            route.protocol\\n        );\\n    }\\n    \\n    /**\\n     * @notice Execute CCTP transfer (primarily for USDC)\\n     */\\n    function _executeCCTP(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        Route memory route\\n    ) private {\\n        ITokenMessengerV2 messenger = ITokenMessengerV2(route.bridgeContract);\\n        \\n        // Approve token to messenger\\n        IERC20(token).forceApprove(route.bridgeContract, amount);\\n        \\n        // Convert recipient to bytes32 - properly zero-padded\\n        bytes32 mintRecipient = bytes32(bytes20(recipient));\\n        \\n        // Execute CCTP v2 fast transfer\\n        messenger.depositForBurn(\\n            amount,\\n            route.protocolDomain,\\n            mintRecipient,\\n            token,\\n            bytes32(0),  // No destination caller (standard transfer)\\n            0,           // No max fee limit (accept any fee)\\n            1000         // Fast finality threshold (8-20 seconds)\\n        );\\n    }\\n    \\n    /**\\n     * @notice Execute CCTP V2 with hooks for cross-token swaps\\n     */\\n    function _executeCCTPWithHooks(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        Route memory route,\\n        address toToken,\\n        uint256 minAmountOut,\\n        uint256 toChainId\\n    ) private {\\n        require(token != toToken, \\\"Use regular CCTP for same token\\\");\\n        require(route.swapPool != address(0), \\\"Swap pool required\\\");\\n        \\n        // Get hook receiver on destination chain\\n        address hookReceiver = cctpHookReceivers[toChainId];\\n        require(hookReceiver != address(0), \\\"Hook receiver not configured\\\");\\n        \\n        ITokenMessenger messenger = ITokenMessenger(route.bridgeContract);\\n        IMessageTransmitter transmitter = IMessageTransmitter(protocolContracts[Protocol.CCTP_HOOKS]);\\n        \\n        // Approve token to messenger\\n        IERC20(token).forceApprove(route.bridgeContract, amount);\\n        \\n        // Create hook data for destination swap\\n        bytes memory hookData = abi.encode(\\n            toToken,        // Token to swap to\\n            minAmountOut,   // Minimum amount out\\n            recipient,      // Final recipient\\n            route.swapPool  // DEX pool for swap\\n        );\\n        \\n        // Convert hook receiver to bytes32 - properly zero-padded\\n        bytes32 mintRecipient = bytes32(bytes20(hookReceiver));\\n        bytes32 destinationCaller = bytes32(bytes20(hookReceiver));\\n        \\n        // Execute burn with caller restriction\\n        messenger.depositForBurnWithCaller(\\n            amount,\\n            route.protocolDomain,\\n            mintRecipient,      // Hook receiver gets the USDC\\n            token,\\n            destinationCaller   // Only hook receiver can call\\n        );\\n        \\n        // Send hook data via message transmitter\\n        transmitter.sendMessage(\\n            route.protocolDomain,\\n            destinationCaller,\\n            hookData\\n        );\\n    }\\n    \\n    /**\\n     * @notice Execute LayerZero transfer (for OFT tokens)\\n     */\\n    function _executeLayerZero(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        Route memory route,\\n        address toToken,\\n        uint256 minAmountOut\\n    ) private {\\n        ILayerZeroEndpoint endpoint = ILayerZeroEndpoint(route.bridgeContract);\\n        \\n        // Check if this is a cross-token swap\\n        bool isCrossTokenSwap = token != toToken && route.swapPool != address(0);\\n        \\n        bytes memory payload;\\n        bytes memory adapterParams;\\n        \\n        bytes memory composeMsg;\\n        bytes32 destinationAddress;\\n        \\n        if (isCrossTokenSwap) {\\n            // Cross-token swap: send to UnifiedRouter for compose execution\\n            destinationAddress = bytes32(uint256(uint160(address(this)))); // Send to this router\\n            \\n            // Create compose message with swap data\\n            composeMsg = abi.encode(\\n                toToken,            // target token to swap to\\n                minAmountOut,       // minimum amount out\\n                recipient,          // final recipient\\n                route.swapPool      // DEX pool address\\n            );\\n            \\n            // Version 2 with compose for cross-token swaps\\n            adapterParams = abi.encodePacked(\\n                uint16(2),          // version 2 (compose)\\n                uint256(200000),    // gas for lzReceive\\n                uint256(300000),    // gas for lzCompose (swap execution)\\n                uint256(0),         // no native value\\n                composeMsg          // compose message\\n            );\\n        } else {\\n            // Same token transfer: send directly to recipient\\n            destinationAddress = bytes32(uint256(uint160(recipient)));\\n            \\n            // Version 1 for simple transfers\\n            adapterParams = abi.encodePacked(\\n                uint16(1),          // version 1\\n                uint256(200000)     // gas for destination\\n            );\\n        }\\n        \\n        // Use OFT send instead of direct LayerZero endpoint\\n        // This is a simplified approach - in practice, we'd need to interact\\n        // with the specific OFT contract for PYUSD/USDe\\n        \\n        // For now, create a generic payload for the OFT\\n        payload = abi.encode(destinationAddress, amount, composeMsg);\\n        \\n        // Send via LayerZero\\n        endpoint.send{value: msg.value}(\\n            uint16(route.protocolDomain), // destination chain ID\\n            abi.encodePacked(destinationAddress), // destination address (router for compose, recipient for direct)\\n            payload,                      // transfer payload\\n            payable(msg.sender),          // refund address\\n            address(0),                   // no ZRO payment\\n            adapterParams                 // gas params including compose data\\n        );\\n    }\\n    \\n    /**\\n     * @notice Execute Stargate transfer (for USDT and other pools)\\n     */\\n    function _executeStargate(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        Route memory route\\n    ) private {\\n        IStargateRouter router = IStargateRouter(route.bridgeContract);\\n        \\n        // Approve token to router\\n        IERC20(token).forceApprove(route.bridgeContract, amount);\\n        \\n        // Prepare LayerZero transaction object\\n        IStargateRouter.lzTxObj memory lzTxParams = IStargateRouter.lzTxObj({\\n            dstGasForCall: 0,\\n            dstNativeAmount: 0,\\n            dstNativeAddr: abi.encodePacked(recipient)\\n        });\\n        \\n        // Execute swap\\n        router.swap{value: msg.value}(\\n            uint16(route.protocolDomain), // destination chain ID\\n            route.poolId,                  // source pool ID\\n            route.poolId,                  // destination pool ID (same for same token)\\n            payable(msg.sender),          // refund address\\n            amount,                        // amount to transfer\\n            amount * 99 / 100,            // min amount (1% slippage)\\n            lzTxParams,                   // gas params\\n            abi.encodePacked(recipient),  // recipient\\n            bytes(\\\"\\\")                     // no payload\\n        );\\n    }\\n    \\n    /**\\n     * @notice Configure a route for token transfers\\n     * @param fromToken Source token address\\n     * @param fromChainId Source chain ID\\n     * @param toToken Destination token address\\n     * @param toChainId Destination chain ID\\n     * @param route Route configuration\\n     */\\n    function configureRoute(\\n        address fromToken,\\n        uint256 fromChainId,\\n        address toToken,\\n        uint256 toChainId,\\n        Route calldata route\\n    ) external onlyOwner {\\n        require(route.protocol != Protocol.NONE, \\\"Invalid protocol\\\");\\n        require(route.bridgeContract != address(0), \\\"Invalid bridge contract\\\");\\n        \\n        bytes32 routeKey = getRouteKey(fromToken, fromChainId, toToken, toChainId);\\n        routes[routeKey] = route;\\n        \\n        emit RouteConfigured(fromToken, fromChainId, toToken, toChainId, route.protocol);\\n    }\\n    \\n    /**\\n     * @notice Set protocol contract addresses\\n     * @param protocol Protocol type\\n     * @param contractAddress Protocol contract address\\n     */\\n    function setProtocolContract(Protocol protocol, address contractAddress) external onlyOwner {\\n        require(protocol != Protocol.NONE, \\\"Invalid protocol\\\");\\n        require(contractAddress != address(0), \\\"Invalid address\\\");\\n        protocolContracts[protocol] = contractAddress;\\n    }\\n    \\n    /**\\n     * @notice Set CCTP hook receiver address for a chain\\n     * @param chainId Destination chain ID\\n     * @param hookReceiver Hook receiver contract address\\n     */\\n    function setCCTPHookReceiver(uint256 chainId, address hookReceiver) external onlyOwner {\\n        require(hookReceiver != address(0), \\\"Invalid hook receiver\\\");\\n        cctpHookReceivers[chainId] = hookReceiver;\\n    }\\n    \\n    /**\\n     * @notice Configure swap pool for same-chain token swaps\\n     * @param tokenA First token address\\n     * @param tokenB Second token address\\n     * @param swapPool DEX pool address for swapping between tokenA and tokenB\\n     */\\n    function setSameChainSwapPool(\\n        address tokenA,\\n        address tokenB,\\n        address swapPool\\n    ) external onlyOwner {\\n        require(tokenA != address(0) && tokenB != address(0), \\\"Invalid tokens\\\");\\n        require(swapPool != address(0), \\\"Invalid swap pool\\\");\\n        \\n        // Store both directions for easier lookup\\n        bytes32 swapKey = keccak256(abi.encodePacked(tokenA, tokenB, block.chainid));\\n        sameChainSwapPools[swapKey] = swapPool;\\n        \\n        // Also store reverse for convenience\\n        swapKey = keccak256(abi.encodePacked(tokenB, tokenA, block.chainid));\\n        sameChainSwapPools[swapKey] = swapPool;\\n    }\\n    \\n    /**\\n     * @notice Generate route key for mapping\\n     */\\n    function getRouteKey(\\n        address fromToken,\\n        uint256 fromChainId,\\n        address toToken,\\n        uint256 toChainId\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(fromToken, fromChainId, toToken, toChainId));\\n    }\\n    \\n    /**\\n     * @notice Check if a route is configured\\n     */\\n    function isRouteConfigured(\\n        address fromToken,\\n        uint256 fromChainId,\\n        address toToken,\\n        uint256 toChainId\\n    ) external view returns (bool) {\\n        bytes32 routeKey = getRouteKey(fromToken, fromChainId, toToken, toChainId);\\n        return routes[routeKey].protocol != Protocol.NONE;\\n    }\\n    \\n    /**\\n     * @notice Estimate fees for a transfer\\n     */\\n    function estimateFees(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 toChainId,\\n        address recipient\\n    ) external view returns (uint256 nativeFee) {\\n        bytes32 routeKey = getRouteKey(fromToken, block.chainid, toToken, toChainId);\\n        Route memory route = routes[routeKey];\\n        \\n        if (route.protocol == Protocol.CCTP) {\\n            return 0; // CCTP doesn't require native fees\\n        } else if (route.protocol == Protocol.LAYERZERO) {\\n            ILayerZeroEndpoint endpoint = ILayerZeroEndpoint(route.bridgeContract);\\n            bytes memory payload = abi.encode(recipient, amount);\\n            bytes memory adapterParams = abi.encodePacked(uint16(1), uint256(200000));\\n            (nativeFee, ) = endpoint.estimateFees(\\n                uint16(route.protocolDomain),\\n                address(this),\\n                payload,\\n                false,\\n                adapterParams\\n            );\\n        }\\n        // Add Stargate fee estimation if needed\\n        \\n        return nativeFee;\\n    }\\n    \\n    // Admin functions\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n    \\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n    \\n    // Emergency functions\\n    function rescueTokens(address token, uint256 amount, address to) external onlyOwner {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n    \\n    function rescueETH(uint256 amount, address payable to) external onlyOwner {\\n        to.transfer(amount);\\n    }\\n    \\n    /**\\n     * @notice Handle LayerZero composed messages for cross-token swaps\\n     * @param _oApp The originating OApp (OFT contract)\\n     * @param _guid Unique message identifier\\n     * @param _message Encoded compose message with swap data\\n     * @param _executor Executor address (unused)\\n     * @param _extraData Additional data (unused)\\n     */\\n    function lzCompose(\\n        address _oApp,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable override nonReentrant whenNotPaused {\\n        // Security: Verify the message comes from LayerZero endpoint\\n        require(protocolContracts[Protocol.LAYERZERO] != address(0), \\\"LayerZero not configured\\\");\\n        require(msg.sender == protocolContracts[Protocol.LAYERZERO], \\\"Unauthorized composer call\\\");\\n        \\n        // TODO: Add OApp authorization check\\n        // require(authorizedOApps[_oApp], \\\"Unauthorized OApp\\\");\\n        \\n        _handleLayerZeroCompose(_oApp, _guid, _message);\\n    }\\n    \\n    /**\\n     * @notice Internal handler for LayerZero compose messages\\n     */\\n    function _handleLayerZeroCompose(\\n        address _oApp,\\n        bytes32 _guid,\\n        bytes calldata _message\\n    ) internal {\\n        // Decode the compose message using LayerZero codec\\n        // For now, we'll use a simple encoding scheme\\n        // In production, use OFTComposeMsgCodec from LayerZero\\n        \\n        try this._decodeAndExecuteCompose(_message) {\\n            // Compose executed successfully\\n        } catch {\\n            // Handle compose failure - tokens are already credited to this contract\\n            // Could implement fallback logic here\\n        }\\n    }\\n    \\n    /**\\n     * @notice Decode compose message and execute swap\\n     * @dev External function to enable try-catch error handling\\n     */\\n    function _decodeAndExecuteCompose(bytes calldata _message) external {\\n        require(msg.sender == address(this), \\\"Internal only\\\");\\n        \\n        // Decode compose message\\n        // Expected format: abi.encode(toToken, minAmountOut, recipient, swapPool)\\n        (\\n            address toToken,\\n            uint256 minAmountOut,\\n            address recipient,\\n            address swapPool\\n        ) = abi.decode(_message, (address, uint256, address, address));\\n        \\n        // Get the source token balance (tokens already received from OFT)\\n        // For this example, we'll assume it's one of our supported tokens\\n        address fromToken = _detectReceivedToken();\\n        uint256 balance = IERC20(fromToken).balanceOf(address(this));\\n        \\n        require(balance > 0, \\\"No tokens received\\\");\\n        require(swapPool != address(0), \\\"Swap pool required\\\");\\n        \\n        if (fromToken == toToken) {\\n            // Same token - just transfer\\n            IERC20(fromToken).safeTransfer(recipient, balance);\\n        } else {\\n            // Execute swap via configured DEX\\n            _executeSwap(fromToken, toToken, balance, minAmountOut, recipient, swapPool);\\n        }\\n    }\\n    \\n    /**\\n     * @notice Detect which token was received by checking balances\\n     * @dev Simple implementation - in production, use LayerZero message context\\n     */\\n    function _detectReceivedToken() internal view returns (address) {\\n        // Check common tokens for non-zero balance\\n        // This is a simplified approach - LayerZero compose messages\\n        // include the token information in the message context\\n        \\n        // For now, return a placeholder - this would be determined\\n        // from the LayerZero compose message context\\n        return address(0); // TODO: Implement proper token detection\\n    }\\n    \\n    /**\\n     * @notice Execute same-chain swap without cross-chain transfer\\n     * @param fromToken Source token address\\n     * @param toToken Destination token address  \\n     * @param amount Amount to swap\\n     * @param minAmountOut Minimum amount to receive\\n     * @param recipient Who receives the tokens\\n     * @param swapData Optional swap data for complex routing\\n     */\\n    function _executeSameChainSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        address recipient,\\n        bytes memory swapData\\n    ) internal returns (uint256 amountOut) {\\n        // Pull tokens from sender\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // If same token, just transfer to recipient\\n        if (fromToken == toToken) {\\n            IERC20(fromToken).safeTransfer(recipient, amount);\\n            return amount;\\n        }\\n        \\n        // Check if we have a configured swap pool for this pair\\n        bytes32 swapKey = keccak256(abi.encodePacked(fromToken, toToken, block.chainid));\\n        address swapPool = sameChainSwapPools[swapKey];\\n        \\n        if (swapPool == address(0)) {\\n            // Try reverse pair\\n            swapKey = keccak256(abi.encodePacked(toToken, fromToken, block.chainid));\\n            swapPool = sameChainSwapPools[swapKey];\\n        }\\n        \\n        require(swapPool != address(0), \\\"No swap pool configured for this pair\\\");\\n        \\n        // Execute the swap and get output amount\\n        uint256 balanceBefore = IERC20(toToken).balanceOf(recipient);\\n        _executeSwap(fromToken, toToken, amount, minAmountOut, recipient, swapPool);\\n        uint256 balanceAfter = IERC20(toToken).balanceOf(recipient);\\n        amountOut = balanceAfter - balanceBefore;\\n        \\n        return amountOut;\\n    }\\n    \\n    /**\\n     * @notice Execute token swap via DEX\\n     */\\n    function _executeSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        address swapPool\\n    ) internal {\\n        // Approve DEX to spend tokens\\n        IERC20(fromToken).forceApprove(swapPool, amountIn);\\n        \\n        // Execute swap - using simple DEX interface\\n        // In production, this would support multiple DEX protocols\\n        IDEX dex = IDEX(swapPool);\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = fromToken;\\n        path[1] = toToken;\\n        \\n        dex.swapExactTokensForTokens(\\n            amountIn,\\n            minAmountOut,\\n            path,\\n            recipient,\\n            block.timestamp + 300 // 5 minute deadline\\n        );\\n    }\\n    \\n    receive() external payable {}\\n}\\n\\n// Simple DEX interface for swaps\\ninterface IDEX {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\",\"versionPragma\":\"^0.8.22\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.6.2\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0xD1e60637cA70C786B857452E50DE8353a01DabBb","bytecode":"0x608034620000c657601f6200302e38819003918201601f19168301916001600160401b03831184841017620000cb57808492602094604052833981010312620000c657516001600160a01b039081811690819003620000c6578015620000ad57600080546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055612f4c9081620000e28239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60808060405260048036101561001f575b5050361561001d57600080fd5b005b600091823560e01c90816304aff38d1461115757508063066e9481146110c7578063098977e01461108c5780630ae57fab1461105b5780631ef9120314611029578063226b0ba814610f9c5780632ce1fc9b14610c505780633280af1f14610afa5780633f4ba83a14610a8a57806347338bc314610a635780635c975abb14610a3e578063715018a6146109e4578063720977b0146109985780638456cb5914610937578063899063011461050d5780638da5cb5b146104e657828163a0558c3f1461048957508063af330cff1461046c578063b37fd1901461042a578063d0a102601461027d578063dad61f46146101dd578063e60efc51146101b55763f2fde38b0361001057346101b15760203660031901126101b157610140611222565b610148612cf3565b6001600160a01b039081169182156101995750600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b8152908101849052602490fd5b5080fd5b82346101da5760206101d26101c936611511565b92919091612595565b604051908152f35b80fd5b50346101b15760403660031901126101b157803560058110156102795761020261123d565b61020a612cf3565b6102158215156122f7565b6001600160a01b0316918215610243575061022f906114b3565b80546001600160a01b031916909117905580f35b60649060206040519162461bcd60e51b8352820152600f60248201526e496e76616c6964206164647265737360881b6044820152fd5b8280fd5b5060a03660031901126101b157610292611222565b506001600160401b039060448035838111610426576102b49036908401611549565b90939092906001600160a01b03906064358281160361042257608435908111610422576102e49036908401611549565b50506002600154146104125760026001556102fd6125d8565b60038652600360205280604087205416156103cf57600386526003602052604086205416330361038d5790849291303b1561038957826020936040519687958694638990630160e01b8652850152816024850152848401378181018301859052601f01601f1916810103018183305af161037a575b506001805580f35b6103839061127d565b38610372565b8380fd5b7f556e617574686f72697a656420636f6d706f7365722063616c6c00000000000060649260206040519362461bcd60e51b8552840152601a6024840152820152fd5b507f4c617965725a65726f206e6f7420636f6e66696775726564000000000000000060649260206040519362461bcd60e51b855284015260186024840152820152fd5b50604051633ee5aeb560e01b8152fd5b8680fd5b8480fd5b82346101da5760603660031901126101da57610469610447611222565b61044f611253565b610457612cf3565b602435916001600160a01b0316612d69565b80f35b82346101da5760206101d2610480366114cc565b939290926123b4565b8083346104e35760403660031901126104e35781808092356104a961123d565b6104b1612cf3565b829082156104d9575b6001600160a01b031690f1156104cd5780f35b604051903d90823e3d90fd5b6108fc91506104ba565b50fd5b82346101da57806003193601126101da57546040516001600160a01b039091168152602090f35b50346101b15760209081600319360112610279576001600160401b03918135838111610426576105409036908401611549565b9390933033036109035784608091810103126104265761055f84611269565b61056b60408601611269565b9161057860608701611269565b6040516370a0823160e01b815230878201526024976001600160a01b039586169591949282169282169187868b818e5afa9586156108f8578b966108c5575b50851561088d576105c9841515612373565b826106625750506040805163a9059cbb60e01b8882019081526001600160a01b039097168a820190815260208101969096528a96959094506106199350849250015b03601f198101835282611348565b519082805af1156106575782513d61064e5750823b155b61063957505080f35b604051635274afe760e01b8152908101839052fd5b60011415610630565b6040513d84823e3d90fd5b90939699988a6040999396999794975188828d8d6106b8856106aa8582019363095ea7b360e01b978886528b840160209093929193604081019460018060a01b031681520152565b03601f198101875286611348565b84519082805af18d513d8f8361086f575b5050501561083b575b505050604051906106e2826112c1565b600282528b82019660403689378b6106f984612d36565b5261070383612d59565b5261012c4201958642116108295799969492918b989694918d6040519c8d9a6338ed173960e01b8c5260a48c01958c015201359089015260a060448901525180915260c48701949188905b8d8383106108095750505050508492869284926064840152608483015203925af180156107fe57610781575b5050905080f35b3d8084843e6107908184611348565b8201918481840312610389578051918211610389570181601f820112156102795780519084806107bf84612d1f565b6107cc6040519182611348565b848152019260051b820101928311610389578401905b8282106107ef575061077a565b815181529084019084016107e2565b6040513d85823e3d90fd5b8451821688528d9a508c995096870196939093019260019091019061074e565b50634e487b7160e01b8b52601184528afd5b6108679261086291604051918201528a858201528d604482015260448152610862816112dc565b612da2565b8a38806106d2565b5090915061088557508c3b15155b38808f6106c9565b60011461087d565b60405162461bcd60e51b8152808a018990526012818c015271139bc81d1bdad95b9cc81c9958d95a5d995960721b6044820152606490fd5b9095508781813d83116108f1575b6108dd8183611348565b810103126108ed575194386105b7565b8a80fd5b503d6108d3565b6040513d8d823e3d90fd5b60405162461bcd60e51b8152808501849052600d60248201526c496e7465726e616c206f6e6c7960981b6044820152606490fd5b82346101da57806003193601126101da57610950612cf3565b6109586125d8565b805460ff60a01b1916600160a01b1781556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a180f35b5090346101da576109ab6101c936611511565b8152600260205260ff6040822054169160058310156109d1576020836040519015158152f35b634e487b7160e01b825260219052602490fd5b82346101da57806003193601126101da576109fd612cf3565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b82346101da57806003193601126101da5760ff6020915460a01c166040519015158152f35b60206101d2610a71366114cc565b93610a7d9391936125d8565b610a856125d8565b611576565b50346101b157816003193601126101b157610aa3612cf3565b81549060ff8260a01c1615610aeb575060ff60a01b191681556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b604051638dfc202b60e01b8152fd5b50346101b15760603660031901126101b157610b14611222565b90610b1d61123d565b91610b26611253565b610b2e612cf3565b6001600160a01b0390828216151580610c45575b15610c105716918215610bd85750610bb4610bc06040516020810181610b6a4689888561234a565b0391610b7e601f1993848101835282611348565b5190208752600560205260408720956001600160601b0360a01b968688825416179055604051938491602083019646918861234a565b03908101835282611348565b51902083526005602052604083209182541617905580f35b60649060206040519162461bcd60e51b83528201526011602482015270125b9d985b1a59081cddd85c081c1bdbdb607a1b6044820152fd5b60405162461bcd60e51b8152602081860152600e60248201526d496e76616c696420746f6b656e7360901b6044820152606490fd5b508185161515610b42565b50346101b15760031960a03682011261027957610c6b611222565b9160243591610c78611253565b916084356001600160401b0392838211610f985760c082360391820112610f9857610ca1612cf3565b6005828401351015610f9857610cbb8284013515156122f7565b60448201906001600160a01b03610cd183612336565b1615610f5457610ce560643587898b612595565b89526002602052604089209182549060248501359063ffffffff82168203610f505764ffffffff009065010000000000600160c81b0390610d2590612336565b60281b169260ff87890135169066ffffffffffffff60c81b16179160081b16171782556001946064840135868401556002830160018060a01b03610d6b60848701612336565b82546001600160a01b031916911617905560a48401359160221901821215610f4c5784828501013511610f4857838184010135360360248285010113610f4857610db86003830154611369565b601f8111610ef7575b508894601f85838601013511600114610e695790610e22956003928b91878488010135610e59575b50868387010135901b91866000199187010135841b1c1916179101555b6040516001600160a01b03909416845260208401910135611448565b606435926001600160a01b0316907f071d41edc8350121eb532bf7a0c10bb42f80fb0720f02ebda24f591acedc6a0390604090a480f35b8684010160240135915038610de9565b91929394601f198683870101351690600385018b5260208b20918b5b818110610edc575092869594928897926003958984610e229c9601013511610eb9575b505085010135811b01910155610e06565b602460001960f886868c010135891b161c1991848a010101351690553880610ea8565b87850183016024013584559285019260209283019201610e85565b600383018a526020808b20858401870135601f810160051c820193919211610f3e575b601f0160051c019086905b828110610f33575050610dc1565b8b8155018690610f25565b9091508190610f1a565b8880fd5b8980fd5b8b80fd5b60405162461bcd60e51b8152602081860152601760248201527f496e76616c69642062726964676520636f6e74726163740000000000000000006044820152606490fd5b8780fd5b50346101b15760403660031901126101b157610fb661123d565b610fbe612cf3565b6001600160a01b0316908115610fed57803583526020526040822080546001600160a01b031916909117905580f35b60649060206040519162461bcd60e51b8352820152601560248201527424b73b30b634b2103437b7b5903932b1b2b4bb32b960591b6044820152fd5b50346101b15760203660031901126101b1579060209135815260058252604060018060a01b0391205416604051908152f35b50346101b15760203660031901126101b15790816020923582528252604060018060a01b0391205416604051908152f35b50346101b15760203660031901126101b1573560058110156101b1576020906001600160a01b03906110bd906114b3565b5416604051908152f35b50346101b15760203660031901126101b15790604091358152600260205220805461115360018060a01b039260018101549061110c60038660028401541692016113a3565b9160405195856111208860ff819916611448565b63ffffffff8160081c16602088015260281c1660408601526060850152608084015260c060a084015260c083019061148e565b0390f35b905060e03660031901126102795761116d611222565b9161117661123d565b608435929091906001600160a01b038416840361121e5760c4356001600160401b0392838211610f985736602383011215610f98578181013593841161120b57506111cb601f8401601f191660200183611348565b82825236602484830101116104225782602097926101d29796959460248a9401848301370101526111fa6125d8565b60a435926064359160443591611fa4565b634e487b7160e01b885260419052602487fd5b8580fd5b600435906001600160a01b038216820361123857565b600080fd5b602435906001600160a01b038216820361123857565b604435906001600160a01b038216820361123857565b35906001600160a01b038216820361123857565b6001600160401b03811161129057604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761129057604052565b606081019081106001600160401b0382111761129057604052565b608081019081106001600160401b0382111761129057604052565b604081019081106001600160401b0382111761129057604052565b602081019081106001600160401b0382111761129057604052565b60a081019081106001600160401b0382111761129057604052565b90601f801991011681019081106001600160401b0382111761129057604052565b90600182811c92168015611399575b602083101461138357565b634e487b7160e01b600052602260045260246000fd5b91607f1691611378565b906040519182600082546113b681611369565b9081845260209460019160018116908160001461142657506001146113e7575b5050506113e592500383611348565b565b600090815285812095935091905b81831061140e5750506113e593508201013880806113d6565b855488840185015294850194879450918301916113f5565b925050506113e594925060ff191682840152151560051b8201013880806113d6565b9060058210156114555752565b634e487b7160e01b600052602160045260246000fd5b60005b83811061147e5750506000910152565b818101518382015260200161146e565b906020916114a78151809281855285808601910161146b565b601f01601f1916010190565b6005811015611455576000526003602052604060002090565b60a0906003190112611238576001600160a01b036004358181168103611238579160243582811681036112385791604435916064359160843590811681036112385790565b6080906003190112611238576001600160a01b0360043581811681036112385791602435916044359081168103611238579060643590565b9181601f84011215611238578235916001600160401b038311611238576020838186019501011161123857565b91939492946000958515611f6a576001600160a01b03821615611f31576006546000198114611f1d576001810160065560405160208101913360601b83526034820152426054820152605481526115cc816112dc565b51902095468214611eb6576115e382854688612595565b8852600260205260408820604051906115fb826112a6565b805460ff81166005811015611ea2578352600881901c63ffffffff16602084015260281c6001600160a01b039081166040840152600182015460608401526002820154166080830152611650906003016113a3565b60a082015280516005811015611e525715611e665761167a8230336001600160a01b038a16612c8d565b80516005811015611e52576001036117e157604081015189906020906001600160a01b03908116906116b190869083908c16612e52565b60e463ffffffff83860151166040519485938492634701287760e11b845289600485015260248401526001600160601b03198b60601b16604484015260018060a01b038d1660648401528160848401528160a48401526103e860c48401525af180156117d6576117a7575b505b5193600585101561179357604080516001600160a01b0397881681529187166020830152810191909152606081019190915292166080830152929350909161176a9060a0830190611448565b827fd4c70693fd7b756f25f0274cd386472ab2e8654609a1aca260cee1e9bf63459b60c03393a3565b634e487b7160e01b89526021600452602489fd5b6117c89060203d6020116117cf575b6117c08183611348565b810190612cd4565b503861171c565b503d6117b6565b6040513d8c823e3d90fd5b80516005811015611e5257600203611a5e576001600160a01b0386811690861614611a1957608081015161181f906001600160a01b03161515612373565b828952600460205260408920546001600160a01b038116156119d45789808360208a60a488966118d88d6118ca8e61189160018060a01b0360408b0151169c600260005260038a5260018060a01b03604060002054169a604060018060a01b039101511660018060a01b038a16612e52565b6080808e0151604080516001600160a01b039687168c8201908152602081019e909e52938616908d015290931660608b01529889920190565b03601f198101885287611348565b6001600160601b03199060601b169563ffffffff848a015116906040519889948593637c2b6edb60e11b85528d6004860152602485015289604485015260018060a01b031660648401528860848401525af19283156119c957611978946020946119ac575b508d63ffffffff8588015116604051968795869485936302e91a6f60e21b85526004850152602484015260606044840152606483019061148e565b03925af180156117d65761198d575b5061171e565b6119a59060203d6020116117cf576117c08183611348565b5038611987565b6119c290853d87116117cf576117c08183611348565b503861193d565b6040513d8f823e3d90fd5b60405162461bcd60e51b815260206004820152601c60248201527f486f6f6b207265636569766572206e6f7420636f6e66696775726564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f55736520726567756c6172204343545020666f722073616d6520746f6b656e006044820152606490fd5b80516005811015611e5257600303611c7357604081015189906001600160a01b0390811690888116908816141580611c5d575b60609015611c1f5750608083810151604080516001600160a01b038b8116602083019081529282018790528a81166060830152909216928201929092523092611b5a91611b6890611b2690611b3690608290611af08160a0810161060b565b8097604051948592600160f11b602085015262030d406022850152620493e060428501528c60628501525180928585019061146b565b8101036062810184520182611348565b935b6040519384918760208401528a6040840152606080840152608083019061148e565b03601f198101845283611348565b61ffff6020870151169360405190602082015260208152611b88816112f7565b813b1561121e57611bd894611bf3611bc59488966040519889978896879662c5803160e81b8852600488015260c0602488015260c487019061148e565b600319938487830301604488015261148e565b913360648601528860848601528483030160a485015261148e565b039134905af1801561065757611c0b575b505061171e565b611c149061127d565b610f48578838611c04565b604051600160f01b602082015262030d4060228083019190915281526001600160a01b03881692611b5a91611b6890611c57816112c1565b93611b38565b5060808301516001600160a01b03161515611a91565b80516005811015611e5257600403611e165760408101516001600160a01b0390811690611ca590849083908a16612e52565b6040516001600160601b03198660601b16602082015260148152611cc8816112f7565b60405190611cd5826112c1565b8b82528b6020830152604082015261ffff602084015116916060840151856063810204606303611e0257908c9291604051946001600160601b03198a60601b16602087015260148652611d27866112f7565b60405193611d3485611312565b858552833b1561121e576063968995611dc9611db66040611dd995606482519d8e9c8d9b8c9b6327efc43f60e21b8d5260048d01528060248d015260448c015233838c01528060848c0152020460a489015261012060c4890152805161012489015260208101516101448901520151606061016488015261018487019061148e565b60031993848783030160e488015261148e565b918483030161010485015261148e565b039134905af180156117d657611def575061171e565b611dfb9099919961127d565b9738611987565b634e487b7160e01b8d52601160045260248dfd5b60405162461bcd60e51b8152602060048201526014602482015273155b9cdd5c1c1bdc9d1959081c1c9bdd1bd8dbdb60621b6044820152606490fd5b634e487b7160e01b8a52602160045260248afd5b60405162461bcd60e51b8152602060048201526014602482015273149bdd5d19481b9bdd0818dbdb999a59dd5c995960621b6044820152606490fd5b634e487b7160e01b8c52602160045260248cfd5b9184959750611ec99150828482966125f9565b604080516001600160a01b03968716815293861660208501528301919091526060820152911690339083907f65fdef9f34ed63dcf4f0724ebb49b462136f938b37473ccdc6c294b06983185a90608090a490565b634e487b7160e01b88526011600452602488fd5b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606490fd5b9295939091956000968015611f6a576001600160a01b03831615611f315760065460001981146122e3576001810160065560405160208101913360601b8352603482015242605482015260548152611ffb816112dc565b519020964683146122ce5761201283864689612595565b8952600260205260408920906040519161202b836112a6565b805460ff811660058110156122ba578452600881901c63ffffffff16602085015260281c6001600160a01b039081166040850152600182015460608501526002820154166080840152612080906003016113a3565b60a0830152815160058110156122a65715611e66576120aa8330336001600160a01b038b16612c8d565b815160058110156122a6576001036120e25750604081015189906020906001600160a01b03908116906116b190869083908c16612e52565b815160058110156122a657600203612192576001600160a01b0387811690871614611a19576080820151612120906001600160a01b03161515612373565b838a52600460205260408a20546001600160a01b038116156119d45783918360208a60a48f956118d88d6118ca8e61189160018060a01b0360408b0151169c600260005260038a5260018060a01b03604060002054169a604060018060a01b039101511660018060a01b038a16612e52565b815160058110156122a6578a919060030361227257604083015187906001600160a01b03908116908a811690831614158061225c575b606090156122255750608080860151604080516001600160a01b039586166020820190815291810196909652848b1660608701529316908401523092611b5a9190611b6890611b2690611b3690608290611af08160a0810161060b565b91509150611b5a60018060a01b03881692611b68604051600160f01b602082015262030d40602282015260228152611c57816112c1565b5060808501516001600160a01b031615156121c8565b505080516005811015611e5257600403611e165760408101516001600160a01b0390811690611ca590849083908a16612e52565b634e487b7160e01b8b52602160045260248bfd5b634e487b7160e01b8d52602160045260248dfd5b85969850611ec992508185859795939561297c565b634e487b7160e01b89526011600452602489fd5b156122fe57565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081c1c9bdd1bd8dbdb60821b6044820152606490fd5b356001600160a01b03811681036112385790565b9190604893916001600160601b0319809260601b16845260601b16601483015260288201520190565b1561237a57565b60405162461bcd60e51b815260206004820152601260248201527114ddd85c081c1bdbdb081c995c5d5a5c995960721b6044820152606490fd5b600094938593926123c6924690612595565b84526002602052604090818520938251916123e0836112a6565b855460ff81166005811015611793578452602084019363ffffffff8260081c168552612436600360018060a01b03998a8985019560281c168552600181015460608501528a6002820154166080850152016113a3565b60a082015280516005811015611e525760010361245857505050505050505090565b9793949596975160058110156125815760031461247b575b505050505050905090565b5185516001600160a01b039093166020840152604083019190915293959294509092859261250d929116906124b3816060810161060b565b61ffff845196600160f01b602089015262030d406022890152602288526124d9886112c1565b511661252585519788958694859463040a7bb160e41b8652600486015230602486015260a0604486015260a485019061148e565b9088606485015260031984830301608485015261148e565b03915afa928315612577578193612546575b50505080388080808080612470565b9091809350813d8311612570575b61255e8183611348565b810103126101da575051388080612537565b503d612554565b51903d90823e3d90fd5b634e487b7160e01b85526021600452602485fd5b9290926040519260208401946001600160601b0319809360601b168652603485015260601b1660548301526068820152606881526125d28161132d565b51902090565b60ff60005460a01c166125e757565b60405163d93c066560e01b8152600490fd5b91926001600160a01b0380841693909261261586303388612c8d565b838116928684871461296a57506040968751966020948589018961263b4688858561234a565b039961264f601f199b8c8101835282611348565b519020986000998a5260058752888b8b205416958615612935575b5050508684169081156128e357895197806370a0823160e01b95868b5216958660048b0152878a6024818c5afa998a156128d9578b9a6128aa575b50846126b19184612e52565b8a51936126bd856112c1565b60028552878501928c3685376126d286612d36565b52886126dd86612d59565b5261012c42019182421161289657918b94928d96949296519687956338ed173960e01b875260a4870191600488015287602488015260a060448801525180915260c48601939187905b8c83831061287057505050505083809286928a6064840152608483015203925af180156128665790849392916127d6575b5060249088519586938492835260048301525afa9485156127cd5750839461279d575b50508203918211612789575090565b634e487b7160e01b81526011600452602490fd5b9080929450813d83116127c6575b6127b58183611348565b810103126101b1575191388061277a565b503d6127ab565b513d85823e3d90fd5b909192503d8088833e6127e98183611348565b8101908481830312610f98578051906001600160401b038211610f48570181601f82011215610f9857805190858061282084612d1f565b61282c8d519182611348565b848152019260051b820101928311610f48579085809594939201905b828210612856575050612757565b8151815286959182019101612848565b88513d89823e3d90fd5b919496985092965080600192958489511681520196019201928795938e97959392612726565b634e487b7160e01b8c52601160045260248cfd5b9099508781813d83116128d2575b6128c28183611348565b810103126108ed575198846126a5565b503d6128b8565b8c513d8d823e3d90fd5b895162461bcd60e51b815260048101879052602560248201527f4e6f207377617020706f6f6c20636f6e6669677572656420666f722074686973604482015264103830b4b960d91b6064820152608490fd5b610bb49293965090612952918c519384918a83019646918861234a565b5190208752600584528588882054169238808061266a565b94509250505061297992612d69565b90565b6001600160a01b039485821694929061299785303389612c8d565b86821693848714612c7c57604097885197602095868a018a6129bb4689858561234a565b039a6129cf601f199c8d8101835282611348565b5190209960009a8b5260058852838c8c205416968715612c47575b505050818516918215612bf5578a5198816370a0823160e01b96878c5216968760048c0152888b6024818d5afa9a8b15612beb578c9b612bbc575b5081612a319185612e52565b8b5191612a3d836112c1565b60028352888301938d368637612a5284612d36565b5289612a5d84612d59565b5261012c420192834211611e0257959391908c9593918e519788966338ed173960e01b885260a48801926004890152602488015260a060448801525180915260c48601939187905b8c838310612b9657505050505083809286928a6064840152608483015203925af18015612866579084939291612b06575060249088519586938492835260048301525afa9485156127cd5750839461279d5750508203918211612789575090565b909192503d8088833e612b198183611348565b8101908481830312610f98578051906001600160401b038211610f48570181601f82011215610f98578051908580612b5084612d1f565b612b5c8d519182611348565b848152019260051b820101928311610f48579085809594939201905b828210612b86575050612757565b8151815286959182019101612b78565b919496985092965080600192958489511681520196019201928795938e97959392612aa5565b909a508881813d8311612be4575b612bd48183611348565b81010312610f5057519981612a25565b503d612bca565b8d513d8e823e3d90fd5b8a5162461bcd60e51b815260048101889052602560248201527f4e6f207377617020706f6f6c20636f6e6669677572656420666f722074686973604482015264103830b4b960d91b6064820152608490fd5b610bb49293975090612c64918d519384918b83019646918861234a565b519020885260058552808989205416933880806129ea565b509250505081935061297992612d69565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526113e591612ccf8261132d565b612dea565b9081602091031261123857516001600160401b03811681036112385790565b6000546001600160a01b03163303612d0757565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160401b0381116112905760051b60200190565b805115612d435760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015612d435760400190565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526113e591612ccf8260648101611b5a565b602060008282829451910182805af1156104cd5780513d612de15750803b155b612dc95750565b60249060405190635274afe760e01b82526004820152fd5b60011415612dc2565b906000602091828151910182855af115612e46576000513d612e3d57506001600160a01b0381163b155b612e1b5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612e14565b6040513d6000823e3d90fd5b60405163095ea7b360e01b60208083018281526001600160a01b038616602485015260448401969096529094919391600090612e9186606481016118ca565b85519082865af16000513d82612ef1575b505015612eb0575b50505050565b612ee893612ccf9160405191602083015260018060a01b031660248201526000604482015260448152612ee2816112dc565b82612dea565b38808080612eaa565b909150612f0e57506001600160a01b0382163b15155b3880612ea2565b600114612f0756fea26469706673582212209a498570f1f08a5a3785a7c05ebf438448e5eeb8afe378f6466b835589af50a464736f6c63430008160033","deployedBytecode":"0x60808060405260048036101561001f575b5050361561001d57600080fd5b005b600091823560e01c90816304aff38d1461115757508063066e9481146110c7578063098977e01461108c5780630ae57fab1461105b5780631ef9120314611029578063226b0ba814610f9c5780632ce1fc9b14610c505780633280af1f14610afa5780633f4ba83a14610a8a57806347338bc314610a635780635c975abb14610a3e578063715018a6146109e4578063720977b0146109985780638456cb5914610937578063899063011461050d5780638da5cb5b146104e657828163a0558c3f1461048957508063af330cff1461046c578063b37fd1901461042a578063d0a102601461027d578063dad61f46146101dd578063e60efc51146101b55763f2fde38b0361001057346101b15760203660031901126101b157610140611222565b610148612cf3565b6001600160a01b039081169182156101995750600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b8152908101849052602490fd5b5080fd5b82346101da5760206101d26101c936611511565b92919091612595565b604051908152f35b80fd5b50346101b15760403660031901126101b157803560058110156102795761020261123d565b61020a612cf3565b6102158215156122f7565b6001600160a01b0316918215610243575061022f906114b3565b80546001600160a01b031916909117905580f35b60649060206040519162461bcd60e51b8352820152600f60248201526e496e76616c6964206164647265737360881b6044820152fd5b8280fd5b5060a03660031901126101b157610292611222565b506001600160401b039060448035838111610426576102b49036908401611549565b90939092906001600160a01b03906064358281160361042257608435908111610422576102e49036908401611549565b50506002600154146104125760026001556102fd6125d8565b60038652600360205280604087205416156103cf57600386526003602052604086205416330361038d5790849291303b1561038957826020936040519687958694638990630160e01b8652850152816024850152848401378181018301859052601f01601f1916810103018183305af161037a575b506001805580f35b6103839061127d565b38610372565b8380fd5b7f556e617574686f72697a656420636f6d706f7365722063616c6c00000000000060649260206040519362461bcd60e51b8552840152601a6024840152820152fd5b507f4c617965725a65726f206e6f7420636f6e66696775726564000000000000000060649260206040519362461bcd60e51b855284015260186024840152820152fd5b50604051633ee5aeb560e01b8152fd5b8680fd5b8480fd5b82346101da5760603660031901126101da57610469610447611222565b61044f611253565b610457612cf3565b602435916001600160a01b0316612d69565b80f35b82346101da5760206101d2610480366114cc565b939290926123b4565b8083346104e35760403660031901126104e35781808092356104a961123d565b6104b1612cf3565b829082156104d9575b6001600160a01b031690f1156104cd5780f35b604051903d90823e3d90fd5b6108fc91506104ba565b50fd5b82346101da57806003193601126101da57546040516001600160a01b039091168152602090f35b50346101b15760209081600319360112610279576001600160401b03918135838111610426576105409036908401611549565b9390933033036109035784608091810103126104265761055f84611269565b61056b60408601611269565b9161057860608701611269565b6040516370a0823160e01b815230878201526024976001600160a01b039586169591949282169282169187868b818e5afa9586156108f8578b966108c5575b50851561088d576105c9841515612373565b826106625750506040805163a9059cbb60e01b8882019081526001600160a01b039097168a820190815260208101969096528a96959094506106199350849250015b03601f198101835282611348565b519082805af1156106575782513d61064e5750823b155b61063957505080f35b604051635274afe760e01b8152908101839052fd5b60011415610630565b6040513d84823e3d90fd5b90939699988a6040999396999794975188828d8d6106b8856106aa8582019363095ea7b360e01b978886528b840160209093929193604081019460018060a01b031681520152565b03601f198101875286611348565b84519082805af18d513d8f8361086f575b5050501561083b575b505050604051906106e2826112c1565b600282528b82019660403689378b6106f984612d36565b5261070383612d59565b5261012c4201958642116108295799969492918b989694918d6040519c8d9a6338ed173960e01b8c5260a48c01958c015201359089015260a060448901525180915260c48701949188905b8d8383106108095750505050508492869284926064840152608483015203925af180156107fe57610781575b5050905080f35b3d8084843e6107908184611348565b8201918481840312610389578051918211610389570181601f820112156102795780519084806107bf84612d1f565b6107cc6040519182611348565b848152019260051b820101928311610389578401905b8282106107ef575061077a565b815181529084019084016107e2565b6040513d85823e3d90fd5b8451821688528d9a508c995096870196939093019260019091019061074e565b50634e487b7160e01b8b52601184528afd5b6108679261086291604051918201528a858201528d604482015260448152610862816112dc565b612da2565b8a38806106d2565b5090915061088557508c3b15155b38808f6106c9565b60011461087d565b60405162461bcd60e51b8152808a018990526012818c015271139bc81d1bdad95b9cc81c9958d95a5d995960721b6044820152606490fd5b9095508781813d83116108f1575b6108dd8183611348565b810103126108ed575194386105b7565b8a80fd5b503d6108d3565b6040513d8d823e3d90fd5b60405162461bcd60e51b8152808501849052600d60248201526c496e7465726e616c206f6e6c7960981b6044820152606490fd5b82346101da57806003193601126101da57610950612cf3565b6109586125d8565b805460ff60a01b1916600160a01b1781556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a180f35b5090346101da576109ab6101c936611511565b8152600260205260ff6040822054169160058310156109d1576020836040519015158152f35b634e487b7160e01b825260219052602490fd5b82346101da57806003193601126101da576109fd612cf3565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b82346101da57806003193601126101da5760ff6020915460a01c166040519015158152f35b60206101d2610a71366114cc565b93610a7d9391936125d8565b610a856125d8565b611576565b50346101b157816003193601126101b157610aa3612cf3565b81549060ff8260a01c1615610aeb575060ff60a01b191681556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b604051638dfc202b60e01b8152fd5b50346101b15760603660031901126101b157610b14611222565b90610b1d61123d565b91610b26611253565b610b2e612cf3565b6001600160a01b0390828216151580610c45575b15610c105716918215610bd85750610bb4610bc06040516020810181610b6a4689888561234a565b0391610b7e601f1993848101835282611348565b5190208752600560205260408720956001600160601b0360a01b968688825416179055604051938491602083019646918861234a565b03908101835282611348565b51902083526005602052604083209182541617905580f35b60649060206040519162461bcd60e51b83528201526011602482015270125b9d985b1a59081cddd85c081c1bdbdb607a1b6044820152fd5b60405162461bcd60e51b8152602081860152600e60248201526d496e76616c696420746f6b656e7360901b6044820152606490fd5b508185161515610b42565b50346101b15760031960a03682011261027957610c6b611222565b9160243591610c78611253565b916084356001600160401b0392838211610f985760c082360391820112610f9857610ca1612cf3565b6005828401351015610f9857610cbb8284013515156122f7565b60448201906001600160a01b03610cd183612336565b1615610f5457610ce560643587898b612595565b89526002602052604089209182549060248501359063ffffffff82168203610f505764ffffffff009065010000000000600160c81b0390610d2590612336565b60281b169260ff87890135169066ffffffffffffff60c81b16179160081b16171782556001946064840135868401556002830160018060a01b03610d6b60848701612336565b82546001600160a01b031916911617905560a48401359160221901821215610f4c5784828501013511610f4857838184010135360360248285010113610f4857610db86003830154611369565b601f8111610ef7575b508894601f85838601013511600114610e695790610e22956003928b91878488010135610e59575b50868387010135901b91866000199187010135841b1c1916179101555b6040516001600160a01b03909416845260208401910135611448565b606435926001600160a01b0316907f071d41edc8350121eb532bf7a0c10bb42f80fb0720f02ebda24f591acedc6a0390604090a480f35b8684010160240135915038610de9565b91929394601f198683870101351690600385018b5260208b20918b5b818110610edc575092869594928897926003958984610e229c9601013511610eb9575b505085010135811b01910155610e06565b602460001960f886868c010135891b161c1991848a010101351690553880610ea8565b87850183016024013584559285019260209283019201610e85565b600383018a526020808b20858401870135601f810160051c820193919211610f3e575b601f0160051c019086905b828110610f33575050610dc1565b8b8155018690610f25565b9091508190610f1a565b8880fd5b8980fd5b8b80fd5b60405162461bcd60e51b8152602081860152601760248201527f496e76616c69642062726964676520636f6e74726163740000000000000000006044820152606490fd5b8780fd5b50346101b15760403660031901126101b157610fb661123d565b610fbe612cf3565b6001600160a01b0316908115610fed57803583526020526040822080546001600160a01b031916909117905580f35b60649060206040519162461bcd60e51b8352820152601560248201527424b73b30b634b2103437b7b5903932b1b2b4bb32b960591b6044820152fd5b50346101b15760203660031901126101b1579060209135815260058252604060018060a01b0391205416604051908152f35b50346101b15760203660031901126101b15790816020923582528252604060018060a01b0391205416604051908152f35b50346101b15760203660031901126101b1573560058110156101b1576020906001600160a01b03906110bd906114b3565b5416604051908152f35b50346101b15760203660031901126101b15790604091358152600260205220805461115360018060a01b039260018101549061110c60038660028401541692016113a3565b9160405195856111208860ff819916611448565b63ffffffff8160081c16602088015260281c1660408601526060850152608084015260c060a084015260c083019061148e565b0390f35b905060e03660031901126102795761116d611222565b9161117661123d565b608435929091906001600160a01b038416840361121e5760c4356001600160401b0392838211610f985736602383011215610f98578181013593841161120b57506111cb601f8401601f191660200183611348565b82825236602484830101116104225782602097926101d29796959460248a9401848301370101526111fa6125d8565b60a435926064359160443591611fa4565b634e487b7160e01b885260419052602487fd5b8580fd5b600435906001600160a01b038216820361123857565b600080fd5b602435906001600160a01b038216820361123857565b604435906001600160a01b038216820361123857565b35906001600160a01b038216820361123857565b6001600160401b03811161129057604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761129057604052565b606081019081106001600160401b0382111761129057604052565b608081019081106001600160401b0382111761129057604052565b604081019081106001600160401b0382111761129057604052565b602081019081106001600160401b0382111761129057604052565b60a081019081106001600160401b0382111761129057604052565b90601f801991011681019081106001600160401b0382111761129057604052565b90600182811c92168015611399575b602083101461138357565b634e487b7160e01b600052602260045260246000fd5b91607f1691611378565b906040519182600082546113b681611369565b9081845260209460019160018116908160001461142657506001146113e7575b5050506113e592500383611348565b565b600090815285812095935091905b81831061140e5750506113e593508201013880806113d6565b855488840185015294850194879450918301916113f5565b925050506113e594925060ff191682840152151560051b8201013880806113d6565b9060058210156114555752565b634e487b7160e01b600052602160045260246000fd5b60005b83811061147e5750506000910152565b818101518382015260200161146e565b906020916114a78151809281855285808601910161146b565b601f01601f1916010190565b6005811015611455576000526003602052604060002090565b60a0906003190112611238576001600160a01b036004358181168103611238579160243582811681036112385791604435916064359160843590811681036112385790565b6080906003190112611238576001600160a01b0360043581811681036112385791602435916044359081168103611238579060643590565b9181601f84011215611238578235916001600160401b038311611238576020838186019501011161123857565b91939492946000958515611f6a576001600160a01b03821615611f31576006546000198114611f1d576001810160065560405160208101913360601b83526034820152426054820152605481526115cc816112dc565b51902095468214611eb6576115e382854688612595565b8852600260205260408820604051906115fb826112a6565b805460ff81166005811015611ea2578352600881901c63ffffffff16602084015260281c6001600160a01b039081166040840152600182015460608401526002820154166080830152611650906003016113a3565b60a082015280516005811015611e525715611e665761167a8230336001600160a01b038a16612c8d565b80516005811015611e52576001036117e157604081015189906020906001600160a01b03908116906116b190869083908c16612e52565b60e463ffffffff83860151166040519485938492634701287760e11b845289600485015260248401526001600160601b03198b60601b16604484015260018060a01b038d1660648401528160848401528160a48401526103e860c48401525af180156117d6576117a7575b505b5193600585101561179357604080516001600160a01b0397881681529187166020830152810191909152606081019190915292166080830152929350909161176a9060a0830190611448565b827fd4c70693fd7b756f25f0274cd386472ab2e8654609a1aca260cee1e9bf63459b60c03393a3565b634e487b7160e01b89526021600452602489fd5b6117c89060203d6020116117cf575b6117c08183611348565b810190612cd4565b503861171c565b503d6117b6565b6040513d8c823e3d90fd5b80516005811015611e5257600203611a5e576001600160a01b0386811690861614611a1957608081015161181f906001600160a01b03161515612373565b828952600460205260408920546001600160a01b038116156119d45789808360208a60a488966118d88d6118ca8e61189160018060a01b0360408b0151169c600260005260038a5260018060a01b03604060002054169a604060018060a01b039101511660018060a01b038a16612e52565b6080808e0151604080516001600160a01b039687168c8201908152602081019e909e52938616908d015290931660608b01529889920190565b03601f198101885287611348565b6001600160601b03199060601b169563ffffffff848a015116906040519889948593637c2b6edb60e11b85528d6004860152602485015289604485015260018060a01b031660648401528860848401525af19283156119c957611978946020946119ac575b508d63ffffffff8588015116604051968795869485936302e91a6f60e21b85526004850152602484015260606044840152606483019061148e565b03925af180156117d65761198d575b5061171e565b6119a59060203d6020116117cf576117c08183611348565b5038611987565b6119c290853d87116117cf576117c08183611348565b503861193d565b6040513d8f823e3d90fd5b60405162461bcd60e51b815260206004820152601c60248201527f486f6f6b207265636569766572206e6f7420636f6e66696775726564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f55736520726567756c6172204343545020666f722073616d6520746f6b656e006044820152606490fd5b80516005811015611e5257600303611c7357604081015189906001600160a01b0390811690888116908816141580611c5d575b60609015611c1f5750608083810151604080516001600160a01b038b8116602083019081529282018790528a81166060830152909216928201929092523092611b5a91611b6890611b2690611b3690608290611af08160a0810161060b565b8097604051948592600160f11b602085015262030d406022850152620493e060428501528c60628501525180928585019061146b565b8101036062810184520182611348565b935b6040519384918760208401528a6040840152606080840152608083019061148e565b03601f198101845283611348565b61ffff6020870151169360405190602082015260208152611b88816112f7565b813b1561121e57611bd894611bf3611bc59488966040519889978896879662c5803160e81b8852600488015260c0602488015260c487019061148e565b600319938487830301604488015261148e565b913360648601528860848601528483030160a485015261148e565b039134905af1801561065757611c0b575b505061171e565b611c149061127d565b610f48578838611c04565b604051600160f01b602082015262030d4060228083019190915281526001600160a01b03881692611b5a91611b6890611c57816112c1565b93611b38565b5060808301516001600160a01b03161515611a91565b80516005811015611e5257600403611e165760408101516001600160a01b0390811690611ca590849083908a16612e52565b6040516001600160601b03198660601b16602082015260148152611cc8816112f7565b60405190611cd5826112c1565b8b82528b6020830152604082015261ffff602084015116916060840151856063810204606303611e0257908c9291604051946001600160601b03198a60601b16602087015260148652611d27866112f7565b60405193611d3485611312565b858552833b1561121e576063968995611dc9611db66040611dd995606482519d8e9c8d9b8c9b6327efc43f60e21b8d5260048d01528060248d015260448c015233838c01528060848c0152020460a489015261012060c4890152805161012489015260208101516101448901520151606061016488015261018487019061148e565b60031993848783030160e488015261148e565b918483030161010485015261148e565b039134905af180156117d657611def575061171e565b611dfb9099919961127d565b9738611987565b634e487b7160e01b8d52601160045260248dfd5b60405162461bcd60e51b8152602060048201526014602482015273155b9cdd5c1c1bdc9d1959081c1c9bdd1bd8dbdb60621b6044820152606490fd5b634e487b7160e01b8a52602160045260248afd5b60405162461bcd60e51b8152602060048201526014602482015273149bdd5d19481b9bdd0818dbdb999a59dd5c995960621b6044820152606490fd5b634e487b7160e01b8c52602160045260248cfd5b9184959750611ec99150828482966125f9565b604080516001600160a01b03968716815293861660208501528301919091526060820152911690339083907f65fdef9f34ed63dcf4f0724ebb49b462136f938b37473ccdc6c294b06983185a90608090a490565b634e487b7160e01b88526011600452602488fd5b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606490fd5b9295939091956000968015611f6a576001600160a01b03831615611f315760065460001981146122e3576001810160065560405160208101913360601b8352603482015242605482015260548152611ffb816112dc565b519020964683146122ce5761201283864689612595565b8952600260205260408920906040519161202b836112a6565b805460ff811660058110156122ba578452600881901c63ffffffff16602085015260281c6001600160a01b039081166040850152600182015460608501526002820154166080840152612080906003016113a3565b60a0830152815160058110156122a65715611e66576120aa8330336001600160a01b038b16612c8d565b815160058110156122a6576001036120e25750604081015189906020906001600160a01b03908116906116b190869083908c16612e52565b815160058110156122a657600203612192576001600160a01b0387811690871614611a19576080820151612120906001600160a01b03161515612373565b838a52600460205260408a20546001600160a01b038116156119d45783918360208a60a48f956118d88d6118ca8e61189160018060a01b0360408b0151169c600260005260038a5260018060a01b03604060002054169a604060018060a01b039101511660018060a01b038a16612e52565b815160058110156122a6578a919060030361227257604083015187906001600160a01b03908116908a811690831614158061225c575b606090156122255750608080860151604080516001600160a01b039586166020820190815291810196909652848b1660608701529316908401523092611b5a9190611b6890611b2690611b3690608290611af08160a0810161060b565b91509150611b5a60018060a01b03881692611b68604051600160f01b602082015262030d40602282015260228152611c57816112c1565b5060808501516001600160a01b031615156121c8565b505080516005811015611e5257600403611e165760408101516001600160a01b0390811690611ca590849083908a16612e52565b634e487b7160e01b8b52602160045260248bfd5b634e487b7160e01b8d52602160045260248dfd5b85969850611ec992508185859795939561297c565b634e487b7160e01b89526011600452602489fd5b156122fe57565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081c1c9bdd1bd8dbdb60821b6044820152606490fd5b356001600160a01b03811681036112385790565b9190604893916001600160601b0319809260601b16845260601b16601483015260288201520190565b1561237a57565b60405162461bcd60e51b815260206004820152601260248201527114ddd85c081c1bdbdb081c995c5d5a5c995960721b6044820152606490fd5b600094938593926123c6924690612595565b84526002602052604090818520938251916123e0836112a6565b855460ff81166005811015611793578452602084019363ffffffff8260081c168552612436600360018060a01b03998a8985019560281c168552600181015460608501528a6002820154166080850152016113a3565b60a082015280516005811015611e525760010361245857505050505050505090565b9793949596975160058110156125815760031461247b575b505050505050905090565b5185516001600160a01b039093166020840152604083019190915293959294509092859261250d929116906124b3816060810161060b565b61ffff845196600160f01b602089015262030d406022890152602288526124d9886112c1565b511661252585519788958694859463040a7bb160e41b8652600486015230602486015260a0604486015260a485019061148e565b9088606485015260031984830301608485015261148e565b03915afa928315612577578193612546575b50505080388080808080612470565b9091809350813d8311612570575b61255e8183611348565b810103126101da575051388080612537565b503d612554565b51903d90823e3d90fd5b634e487b7160e01b85526021600452602485fd5b9290926040519260208401946001600160601b0319809360601b168652603485015260601b1660548301526068820152606881526125d28161132d565b51902090565b60ff60005460a01c166125e757565b60405163d93c066560e01b8152600490fd5b91926001600160a01b0380841693909261261586303388612c8d565b838116928684871461296a57506040968751966020948589018961263b4688858561234a565b039961264f601f199b8c8101835282611348565b519020986000998a5260058752888b8b205416958615612935575b5050508684169081156128e357895197806370a0823160e01b95868b5216958660048b0152878a6024818c5afa998a156128d9578b9a6128aa575b50846126b19184612e52565b8a51936126bd856112c1565b60028552878501928c3685376126d286612d36565b52886126dd86612d59565b5261012c42019182421161289657918b94928d96949296519687956338ed173960e01b875260a4870191600488015287602488015260a060448801525180915260c48601939187905b8c83831061287057505050505083809286928a6064840152608483015203925af180156128665790849392916127d6575b5060249088519586938492835260048301525afa9485156127cd5750839461279d575b50508203918211612789575090565b634e487b7160e01b81526011600452602490fd5b9080929450813d83116127c6575b6127b58183611348565b810103126101b1575191388061277a565b503d6127ab565b513d85823e3d90fd5b909192503d8088833e6127e98183611348565b8101908481830312610f98578051906001600160401b038211610f48570181601f82011215610f9857805190858061282084612d1f565b61282c8d519182611348565b848152019260051b820101928311610f48579085809594939201905b828210612856575050612757565b8151815286959182019101612848565b88513d89823e3d90fd5b919496985092965080600192958489511681520196019201928795938e97959392612726565b634e487b7160e01b8c52601160045260248cfd5b9099508781813d83116128d2575b6128c28183611348565b810103126108ed575198846126a5565b503d6128b8565b8c513d8d823e3d90fd5b895162461bcd60e51b815260048101879052602560248201527f4e6f207377617020706f6f6c20636f6e6669677572656420666f722074686973604482015264103830b4b960d91b6064820152608490fd5b610bb49293965090612952918c519384918a83019646918861234a565b5190208752600584528588882054169238808061266a565b94509250505061297992612d69565b90565b6001600160a01b039485821694929061299785303389612c8d565b86821693848714612c7c57604097885197602095868a018a6129bb4689858561234a565b039a6129cf601f199c8d8101835282611348565b5190209960009a8b5260058852838c8c205416968715612c47575b505050818516918215612bf5578a5198816370a0823160e01b96878c5216968760048c0152888b6024818d5afa9a8b15612beb578c9b612bbc575b5081612a319185612e52565b8b5191612a3d836112c1565b60028352888301938d368637612a5284612d36565b5289612a5d84612d59565b5261012c420192834211611e0257959391908c9593918e519788966338ed173960e01b885260a48801926004890152602488015260a060448801525180915260c48601939187905b8c838310612b9657505050505083809286928a6064840152608483015203925af18015612866579084939291612b06575060249088519586938492835260048301525afa9485156127cd5750839461279d5750508203918211612789575090565b909192503d8088833e612b198183611348565b8101908481830312610f98578051906001600160401b038211610f48570181601f82011215610f98578051908580612b5084612d1f565b612b5c8d519182611348565b848152019260051b820101928311610f48579085809594939201905b828210612b86575050612757565b8151815286959182019101612b78565b919496985092965080600192958489511681520196019201928795938e97959392612aa5565b909a508881813d8311612be4575b612bd48183611348565b81010312610f5057519981612a25565b503d612bca565b8d513d8e823e3d90fd5b8a5162461bcd60e51b815260048101889052602560248201527f4e6f207377617020706f6f6c20636f6e6669677572656420666f722074686973604482015264103830b4b960d91b6064820152608490fd5b610bb49293975090612c64918d519384918b83019646918861234a565b519020885260058552808989205416933880806129ea565b509250505081935061297992612d69565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526113e591612ccf8261132d565b612dea565b9081602091031261123857516001600160401b03811681036112385790565b6000546001600160a01b03163303612d0757565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160401b0381116112905760051b60200190565b805115612d435760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015612d435760400190565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526113e591612ccf8260648101611b5a565b602060008282829451910182805af1156104cd5780513d612de15750803b155b612dc95750565b60249060405190635274afe760e01b82526004820152fd5b60011415612dc2565b906000602091828151910182855af115612e46576000513d612e3d57506001600160a01b0381163b155b612e1b5750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612e14565b6040513d6000823e3d90fd5b60405163095ea7b360e01b60208083018281526001600160a01b038616602485015260448401969096529094919391600090612e9186606481016118ca565b85519082865af16000513d82612ef1575b505015612eb0575b50505050565b612ee893612ccf9160405191602083015260018060a01b031660248201526000604482015260448152612ee2816112dc565b82612dea565b38808080612eaa565b909150612f0e57506001600160a01b0382163b15155b3880612ea2565b600114612f0756fea26469706673582212209a498570f1f08a5a3785a7c05ebf438448e5eeb8afe378f6466b835589af50a464736f6c63430008160033","abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"fromToken","type":"address"},{"indexed":true,"internalType":"uint256","name":"fromChainId","type":"uint256"},{"indexed":false,"internalType":"address","name":"toToken","type":"address"},{"indexed":true,"internalType":"uint256","name":"toChainId","type":"uint256"},{"indexed":false,"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"}],"name":"RouteConfigured","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transferId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"fromToken","type":"address"},{"indexed":false,"internalType":"address","name":"toToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"}],"name":"SameChainSwapExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transferId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"fromToken","type":"address"},{"indexed":false,"internalType":"address","name":"toToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toChainId","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"}],"name":"TransferInitiated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"_decodeAndExecuteCompose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"cctpHookReceivers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"uint256","name":"fromChainId","type":"uint256"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"toChainId","type":"uint256"},{"components":[{"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"},{"internalType":"uint32","name":"protocolDomain","type":"uint32"},{"internalType":"address","name":"bridgeContract","type":"address"},{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"address","name":"swapPool","type":"address"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct UnifiedRouter.Route","name":"route","type":"tuple"}],"name":"configureRoute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"toChainId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"estimateFees","outputs":[{"internalType":"uint256","name":"nativeFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"uint256","name":"fromChainId","type":"uint256"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"toChainId","type":"uint256"}],"name":"getRouteKey","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"uint256","name":"fromChainId","type":"uint256"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"toChainId","type":"uint256"}],"name":"isRouteConfigured","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oApp","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzCompose","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum UnifiedRouter.Protocol","name":"","type":"uint8"}],"name":"protocolContracts","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"to","type":"address"}],"name":"rescueETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"rescueTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"routes","outputs":[{"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"},{"internalType":"uint32","name":"protocolDomain","type":"uint32"},{"internalType":"address","name":"bridgeContract","type":"address"},{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"address","name":"swapPool","type":"address"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"sameChainSwapPools","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"hookReceiver","type":"address"}],"name":"setCCTPHookReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"setProtocolContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"address","name":"swapPool","type":"address"}],"name":"setSameChainSwapPool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"toChainId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"transfer","outputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"toChainId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"bytes","name":"swapData","type":"bytes"}],"name":"transferWithSwap","outputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}
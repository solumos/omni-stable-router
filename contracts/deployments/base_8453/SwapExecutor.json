{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.22\"},\"sources\":{\"contracts/SwapExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./base/EmergencyWithdrawable.sol\\\";\\nimport \\\"./libraries/SharedInterfaces.sol\\\";\\nimport \\\"./libraries/ValidationLibrary.sol\\\";\\n\\ncontract SwapExecutor is EmergencyWithdrawable, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n    using ValidationLibrary for uint256;\\n    using ValidationLibrary for address;\\n    \\n    uint256 public constant MAX_BATCH_SIZE = 10; // Prevent DoS via gas exhaustion\\n\\n    enum DexType {\\n        Curve,\\n        UniswapV3,\\n        Balancer\\n    }\\n\\n    struct PoolConfig {\\n        address pool;\\n        DexType dexType;\\n        bytes poolData; // Additional pool-specific data\\n    }\\n\\n    mapping(bytes32 => PoolConfig) public poolConfigs;\\n    mapping(address => bool) public whitelistedPools;\\n\\n    IUniswapV3Router public immutable uniswapV3Router;\\n    \\n    // Add configurable addresses instead of hardcoding\\n    constructor(address _uniswapV3Router) EmergencyWithdrawable() {\\n        ValidationLibrary.validateAddress(_uniswapV3Router);\\n        uniswapV3Router = IUniswapV3Router(_uniswapV3Router);\\n    }\\n    \\n    event SwapExecuted(\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address pool\\n    );\\n\\n    event PoolConfigured(\\n        address indexed tokenA,\\n        address indexed tokenB,\\n        address pool,\\n        DexType dexType\\n    );\\n\\n\\n    function executeSwap(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address pool,\\n        bytes calldata swapData,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256 amountOut) {\\n        // Add deadline protection\\n        ValidationLibrary.validateDeadline(deadline);\\n        require(whitelistedPools[pool], \\\"Pool not whitelisted\\\");\\n        ValidationLibrary.validateAmount(amountIn);\\n        \\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\\n        \\n        bytes32 poolKey = keccak256(abi.encodePacked(tokenIn, tokenOut));\\n        PoolConfig memory config = poolConfigs[poolKey];\\n        \\n        if (config.dexType == DexType.Curve) {\\n            amountOut = _swapOnCurve(\\n                tokenIn,\\n                tokenOut,\\n                amountIn,\\n                minAmountOut,\\n                config.pool,\\n                swapData\\n            );\\n        } else if (config.dexType == DexType.UniswapV3) {\\n            amountOut = _swapOnUniswapV3(\\n                tokenIn,\\n                tokenOut,\\n                amountIn,\\n                minAmountOut,\\n                swapData,\\n                deadline\\n            );\\n        } else {\\n            revert(\\\"Unsupported DEX\\\");\\n        }\\n        \\n        ValidationLibrary.validateSlippage(amountOut, minAmountOut);\\n        \\n        IERC20(tokenOut).safeTransfer(msg.sender, amountOut);\\n        \\n        emit SwapExecuted(tokenIn, tokenOut, amountIn, amountOut, pool);\\n        \\n        return amountOut;\\n    }\\n\\n    function executeBatchSwaps(\\n        address[] calldata tokensIn,\\n        address[] calldata tokensOut,\\n        uint256[] calldata amountsIn,\\n        uint256[] calldata minAmountsOut,\\n        address[] calldata pools,\\n        bytes[] calldata swapData,\\n        uint256 deadline\\n    ) external nonReentrant whenNotPaused returns (uint256[] memory amountsOut) {\\n        // Add deadline protection for batch\\n        ValidationLibrary.validateDeadline(deadline);\\n        \\n        // Prevent DoS via unbounded loop\\n        ValidationLibrary.validateArrayBounds(tokensIn.length, MAX_BATCH_SIZE);\\n        \\n        // Validate all arrays have same length\\n        uint256[] memory lengths = new uint256[](6);\\n        lengths[0] = tokensIn.length;\\n        lengths[1] = tokensOut.length;\\n        lengths[2] = amountsIn.length;\\n        lengths[3] = minAmountsOut.length;\\n        lengths[4] = pools.length;\\n        lengths[5] = swapData.length;\\n        ValidationLibrary.validateMultipleArrayLengths(lengths);\\n        \\n        amountsOut = new uint256[](tokensIn.length);\\n        \\n        for (uint256 i = 0; i < tokensIn.length; i++) {\\n            // Fix reentrancy: use internal function instead of external call\\n            amountsOut[i] = _executeSwapInternal(\\n                tokensIn[i],\\n                tokensOut[i],\\n                amountsIn[i],\\n                minAmountsOut[i],\\n                pools[i],\\n                swapData[i],\\n                deadline\\n            );\\n        }\\n        \\n        return amountsOut;\\n    }\\n\\n    /**\\n     * @notice Internal swap execution to prevent reentrancy in batch operations\\n     */\\n    function _executeSwapInternal(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address pool,\\n        bytes calldata swapData,\\n        uint256 deadline\\n    ) internal returns (uint256 amountOut) {\\n        require(whitelistedPools[pool], \\\"Pool not whitelisted\\\");\\n        ValidationLibrary.validateAmount(amountIn);\\n        \\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\\n        \\n        bytes32 poolKey = keccak256(abi.encodePacked(tokenIn, tokenOut));\\n        PoolConfig memory config = poolConfigs[poolKey];\\n        \\n        // Verify pool matches configuration\\n        require(config.pool == pool, \\\"Pool mismatch\\\");\\n        \\n        if (config.dexType == DexType.Curve) {\\n            amountOut = _swapOnCurve(\\n                tokenIn,\\n                tokenOut,\\n                amountIn,\\n                minAmountOut,\\n                config.pool,\\n                swapData\\n            );\\n        } else if (config.dexType == DexType.UniswapV3) {\\n            amountOut = _swapOnUniswapV3(\\n                tokenIn,\\n                tokenOut,\\n                amountIn,\\n                minAmountOut,\\n                swapData,\\n                deadline\\n            );\\n        } else {\\n            revert(\\\"Unsupported DEX\\\");\\n        }\\n        \\n        ValidationLibrary.validateSlippage(amountOut, minAmountOut);\\n        \\n        IERC20(tokenOut).safeTransfer(msg.sender, amountOut);\\n        \\n        emit SwapExecuted(tokenIn, tokenOut, amountIn, amountOut, pool);\\n        \\n        return amountOut;\\n    }\\n    \\n    function _swapOnCurve(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address pool,\\n        bytes calldata swapData\\n    ) internal returns (uint256) {\\n        // Use safeIncreaseAllowance to avoid race conditions\\n        IERC20(tokenIn).safeIncreaseAllowance(pool, amountIn);\\n        \\n        (int128 i, int128 j) = abi.decode(swapData, (int128, int128));\\n        \\n        uint256 amountOut = ICurvePool(pool).exchange(\\n            i,\\n            j,\\n            amountIn,\\n            minAmountOut\\n        );\\n        \\n        return amountOut;\\n    }\\n\\n    function _swapOnUniswapV3(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        bytes calldata swapData,\\n        uint256 deadline\\n    ) internal returns (uint256) {\\n        uint24 fee = abi.decode(swapData, (uint24));\\n        \\n        // Use safeIncreaseAllowance to avoid race conditions\\n        IERC20(tokenIn).safeIncreaseAllowance(address(uniswapV3Router), amountIn);\\n        \\n        IUniswapV3Router.ExactInputSingleParams memory params = IUniswapV3Router.ExactInputSingleParams({\\n            tokenIn: tokenIn,\\n            tokenOut: tokenOut,\\n            fee: fee,\\n            recipient: address(this),\\n            deadline: deadline, // Use provided deadline instead of block.timestamp\\n            amountIn: amountIn,\\n            amountOutMinimum: minAmountOut,\\n            sqrtPriceLimitX96: 0\\n        });\\n        \\n        uint256 amountOut = uniswapV3Router.exactInputSingle(params);\\n        \\n        return amountOut;\\n    }\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address pool\\n    ) external view returns (uint256) {\\n        bytes32 poolKey = keccak256(abi.encodePacked(tokenIn, tokenOut));\\n        PoolConfig memory config = poolConfigs[poolKey];\\n        \\n        if (config.dexType == DexType.Curve) {\\n            // Get Curve quote\\n            // This would need the correct i,j indices for the pool\\n            return ICurvePool(config.pool).get_dy(0, 1, amountIn);\\n        }\\n        \\n        // For other DEXs, would need to implement quoter\\n        return amountIn; // Simplified\\n    }\\n\\n    function configurePool(\\n        address tokenA,\\n        address tokenB,\\n        address pool,\\n        DexType dexType,\\n        bytes calldata poolData\\n    ) external onlyOwner {\\n        bytes32 poolKey = keccak256(abi.encodePacked(tokenA, tokenB));\\n        \\n        poolConfigs[poolKey] = PoolConfig({\\n            pool: pool,\\n            dexType: dexType,\\n            poolData: poolData\\n        });\\n        \\n        whitelistedPools[pool] = true;\\n        \\n        emit PoolConfigured(tokenA, tokenB, pool, dexType);\\n    }\\n\\n    function configurePools(\\n        address[] calldata tokenAs,\\n        address[] calldata tokenBs,\\n        address[] calldata pools,\\n        DexType[] calldata dexTypes,\\n        bytes[] calldata poolDatas\\n    ) external onlyOwner {\\n        require(\\n            tokenAs.length == tokenBs.length &&\\n            tokenAs.length == pools.length &&\\n            tokenAs.length == dexTypes.length &&\\n            tokenAs.length == poolDatas.length,\\n            \\\"Array length mismatch\\\"\\n        );\\n        \\n        for (uint256 i = 0; i < tokenAs.length; i++) {\\n            bytes32 poolKey = keccak256(abi.encodePacked(tokenAs[i], tokenBs[i]));\\n            \\n            poolConfigs[poolKey] = PoolConfig({\\n                pool: pools[i],\\n                dexType: dexTypes[i],\\n                poolData: poolDatas[i]\\n            });\\n            \\n            whitelistedPools[pools[i]] = true;\\n            \\n            emit PoolConfigured(tokenAs[i], tokenBs[i], pools[i], dexTypes[i]);\\n        }\\n    }\\n\\n    function removePool(address tokenA, address tokenB) external onlyOwner {\\n        bytes32 poolKey = keccak256(abi.encodePacked(tokenA, tokenB));\\n        address pool = poolConfigs[poolKey].pool;\\n        \\n        delete poolConfigs[poolKey];\\n        whitelistedPools[pool] = false;\\n    }\\n\\n    // Emergency withdrawal is now inherited from EmergencyWithdrawable\\n    \\n    // Add pause functionality\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n    \\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\",\"versionPragma\":\"0.8.22\"},\"contracts/libraries/ValidationLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/**\\n * @title ValidationLibrary\\n * @notice Centralized validation logic to eliminate duplication\\n * @dev Use this library for all common validation patterns\\n */\\nlibrary ValidationLibrary {\\n    \\n    /**\\n     * @notice Validates that amount is greater than zero\\n     * @param amount The amount to validate\\n     */\\n    function validateAmount(uint256 amount) internal pure {\\n        require(amount > 0, \\\"VL: Invalid amount\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates that address is not zero\\n     * @param addr The address to validate\\n     */\\n    function validateAddress(address addr) internal pure {\\n        require(addr != address(0), \\\"VL: Zero address\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates recipient address\\n     * @param recipient The recipient address to validate\\n     */\\n    function validateRecipient(address recipient) internal pure {\\n        require(recipient != address(0), \\\"VL: Invalid recipient\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates array lengths match\\n     * @param length1 First array length\\n     * @param length2 Second array length\\n     */\\n    function validateArrayLengths(uint256 length1, uint256 length2) internal pure {\\n        require(length1 == length2, \\\"VL: Array length mismatch\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates multiple array lengths match\\n     * @param lengths Array of lengths to compare\\n     */\\n    function validateMultipleArrayLengths(uint256[] memory lengths) internal pure {\\n        if (lengths.length == 0) return;\\n        uint256 expectedLength = lengths[0];\\n        for (uint256 i = 1; i < lengths.length; i++) {\\n            require(lengths[i] == expectedLength, \\\"VL: Array length mismatch\\\");\\n        }\\n    }\\n    \\n    /**\\n     * @notice Validates array is not empty and within bounds\\n     * @param length Array length\\n     * @param maxLength Maximum allowed length\\n     */\\n    function validateArrayBounds(uint256 length, uint256 maxLength) internal pure {\\n        require(length > 0, \\\"VL: Empty array\\\");\\n        require(length <= maxLength, \\\"VL: Array too large\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates deadline has not passed\\n     * @param deadline The deadline timestamp\\n     */\\n    function validateDeadline(uint256 deadline) internal view {\\n        require(deadline >= block.timestamp, \\\"VL: Deadline passed\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates slippage is within acceptable range\\n     * @param amountOut Actual output amount\\n     * @param minAmountOut Minimum acceptable amount\\n     */\\n    function validateSlippage(uint256 amountOut, uint256 minAmountOut) internal pure {\\n        require(amountOut >= minAmountOut, \\\"VL: Slippage exceeded\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates fee is within acceptable range (max 10%)\\n     * @param fee Fee in basis points\\n     */\\n    function validateFeeBps(uint256 fee) internal pure {\\n        require(fee <= 1000, \\\"VL: Fee too high\\\"); // Max 10%\\n    }\\n    \\n    /**\\n     * @notice Validates chain ID is supported\\n     * @param chainId The chain ID to validate\\n     * @param isSupported Whether the chain is supported\\n     */\\n    function validateChainId(uint256 chainId, bool isSupported) internal pure {\\n        require(isSupported, \\\"VL: Unsupported chain\\\");\\n        require(chainId > 0, \\\"VL: Invalid chain ID\\\");\\n    }\\n}\",\"versionPragma\":\"0.8.22\"},\"contracts/libraries/SharedInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/**\\n * @title SharedInterfaces\\n * @notice Consolidated external protocol interfaces to eliminate duplication\\n * @dev Import this library instead of redefining interfaces\\n */\\n\\n// ============ CCTP Interfaces ============\\n\\ninterface ITokenMessenger {\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 nonce);\\n\\n    function depositForBurnWithCaller(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller\\n    ) external returns (uint64 nonce);\\n}\\n\\ninterface IMessageTransmitter {\\n    function sendMessage(\\n        uint32 destinationDomain,\\n        bytes32 recipient,\\n        bytes calldata messageBody\\n    ) external returns (uint64);\\n    \\n    function receiveMessage(\\n        bytes calldata message,\\n        bytes calldata signature\\n    ) external returns (bool);\\n}\\n\\ninterface IMessageHandler {\\n    function handleReceiveMessage(\\n        uint32 sourceDomain,\\n        bytes32 sender,\\n        bytes calldata messageBody\\n    ) external returns (bool);\\n}\\n\\n// ============ LayerZero Interfaces ============\\n\\ninterface IOFT {\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n}\\n\\ninterface ILayerZeroEndpoint {\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n}\\n\\n// ============ Stargate Interfaces ============\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n    \\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n    \\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\\n// ============ DEX Interfaces ============\\n\\ninterface ICurvePool {\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n    \\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\\ninterface IUniswapV3Router {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n    \\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n}\",\"versionPragma\":\"0.8.22\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.6.2\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/base/EmergencyWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title EmergencyWithdrawable\\n * @notice Base contract providing standardized emergency withdrawal functionality\\n * @dev Inherit this to add consistent emergency functions across all contracts\\n */\\nabstract contract EmergencyWithdrawable is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    using SafeERC20 for IERC20;\\n    \\n    event EmergencyWithdrawToken(address indexed token, uint256 amount, address indexed to);\\n    event EmergencyWithdrawETH(uint256 amount, address indexed to);\\n    \\n    /**\\n     * @notice Emergency withdraw tokens\\n     * @param token Token address (address(0) for ETH)\\n     * @param amount Amount to withdraw (0 for full balance)\\n     * @param to Recipient address\\n     */\\n    function emergencyWithdraw(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOwner {\\n        require(to != address(0), \\\"EW: Invalid recipient\\\");\\n        \\n        if (token == address(0)) {\\n            // Withdraw ETH\\n            uint256 balance = address(this).balance;\\n            if (amount == 0) amount = balance;\\n            require(amount <= balance, \\\"EW: Insufficient ETH\\\");\\n            \\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"EW: ETH transfer failed\\\");\\n            \\n            emit EmergencyWithdrawETH(amount, to);\\n        } else {\\n            // Withdraw ERC20\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            if (amount == 0) amount = balance;\\n            require(amount <= balance, \\\"EW: Insufficient tokens\\\");\\n            \\n            IERC20(token).safeTransfer(to, amount);\\n            \\n            emit EmergencyWithdrawToken(token, amount, to);\\n        }\\n    }\\n    \\n    /**\\n     * @notice Emergency withdraw multiple tokens\\n     * @param tokens Array of token addresses\\n     * @param to Recipient address\\n     */\\n    function emergencyWithdrawMultiple(\\n        address[] calldata tokens,\\n        address to\\n    ) external onlyOwner {\\n        require(to != address(0), \\\"EW: Invalid recipient\\\");\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == address(0)) {\\n                // Withdraw all ETH\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    (bool success, ) = to.call{value: balance}(\\\"\\\");\\n                    require(success, \\\"EW: ETH transfer failed\\\");\\n                    emit EmergencyWithdrawETH(balance, to);\\n                }\\n            } else {\\n                // Withdraw all tokens\\n                uint256 balance = IERC20(tokens[i]).balanceOf(address(this));\\n                if (balance > 0) {\\n                    IERC20(tokens[i]).safeTransfer(to, balance);\\n                    emit EmergencyWithdrawToken(tokens[i], balance, to);\\n                }\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"0.8.22\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0xE2ea3f454e12362212b1734eD0218E7691bd985c","bytecode":"0x60a03461011a57601f6200253838819003918201601f19168301916001600160401b0383118484101761011f5780849260209460405283398101031261011a57516001600160a01b038082169182900361011a573315610101576000543360018060a01b0319821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001805581156100cc5750608052604051612402908162000136823960805181818161122c0152818161205b015261213e0152f35b62461bcd60e51b815260206004820152601060248201526f564c3a205a65726f206164647265737360801b6044820152606490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe610160604052600436101561001357600080fd5b60003560e01c806307ef21901461183457806320b3ff3b1461125b5780632c76d7a6146112165780633f4ba83a146111ac578063551512de14610fd95780635c975abb14610fb65780635d1e560214610ce057806367bea49314610ca1578063715018a614610c48578063744b92e214610b915780638456cb5914610b3757806388030a9814610aec5780638da5cb5b14610ac3578063a30813c71461063d578063b88a5bc314610364578063cfdbf25414610348578063eaf7406a146101715763f2fde38b146100e357600080fd5b3461016c57602036600319011261016c576100fc611a32565b610104611f1d565b6001600160a01b0390811690811561015357600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b3461016c57604036600319011261016c576004356001600160401b03811161016c576101a1903690600401611a02565b6101a9611a5e565b906101b2611f1d565b6001600160a01b0391808316916101ca831515611b3e565b60005b8181106101d657005b846101ea6101e583858a611ad9565b611ae9565b1661024f57600190844780610203575b50505b016101cd565b60208161024160008080807f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9978d5af161023b611b9d565b50611bcd565b604051908152a284886101fa565b8461025e6101e583858a611ad9565b169060405180926370a0823160e01b825230600483015281602460209586935afa801561033c57848792600092610309575b50600194898b8987866102ab575b50505050505050506101fd565b85836102ee896101e595886102e86101e5887f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c9e6102f39c611ad9565b16611f49565b611ad9565b1692604051908152a384888481898b898761029e565b925050508281813d8311610335575b610322818361192f565b8101031261016c57518590846001610290565b503d610318565b6040513d6000823e3d90fd5b3461016c57600036600319011261016c576020604051600a8152f35b3461016c5760a036600319011261016c5761037d611a32565b610385611a5e565b9061038e611a48565b60643592600384101561016c576001600160401b039060843582811161016c576103bc903690600401611a74565b9590926103c7611f1d565b60405196602091828901896103fa878b84906028926001600160601b0319809260601b16835260601b1660148201520190565b039961040e601f199b8c810183528261192f565b51902090604051998a9361042185611914565b61044760018060a01b0399878b8d169788815201926104408a85611c5c565b3691611dad565b9360408d01948552600052600386528860406000209c51168c54915160038110156106275760ff60a01b9060a01b16916affffffffffffffffffffff60a81b1617178b556001809b0192519a8b51928311610611576104a684546118da565b601f81116105d6575b508591601f84116001146105475750509161050f82600495936105379897957f1499960aa396b70c1f355843d1c3d271851878139f328ca7fda1378e871ea1ba9c9d9e60009261053c575b50508160011b916000199060031b1c19161790565b90555b600052526040600020600160ff19825416179055836040519485941697169583611de4565b0390a3005b015190508e806104fa565b60008581528781209d92918516915b8282106105bf575050927f1499960aa396b70c1f355843d1c3d271851878139f328ca7fda1378e871ea1ba9a9b9c610537989795936001938360049997106105a6575b505050811b019055610512565b015160001960f88460031b161c191690558d8080610599565b848401518f559d8e019d9388019390880190610556565b610601908560005287600020601f860160051c810191898710610607575b601f0160051c0190611c68565b8c6104af565b90915081906105f4565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b3461016c5760a036600319011261016c576004356001600160401b03811161016c5761066d903690600401611a02565b60a052608052602480356001600160401b03811161016c57610693903690600401611a02565b60c052610140526044356001600160401b03811161016c576106b9903690600401611a02565b60e052906064356001600160401b03811161016c576106dc903690600401611a02565b61010052610120526084356001600160401b03811161016c57610703903690600401611a02565b9161070c611f1d565b60c05160a0511480610ab6575b80610aa8575b80610a9d575b15610a605760005b60a051811061073857005b61074a6101e58260a051608051611ad9565b61079161079f6107636101e58560c05161014051611ad9565b604051928391602083019586906028926001600160601b0319809260601b16835260601b1660148201520190565b03601f19810183528261192f565b5190206107b26101e58360e05189611ad9565b906107c4836101005161012051611ad9565b35600381101561016c576108036107dc858989611afd565b604051956107e987611914565b6001600160a01b0316865260208601936104409085611c5c565b9160408401928352600052600360205260406000209260018060a01b03905116835491516003811015610a4b576001600160a81b03199092161760a09190911b60ff60a01b16178255518051906001600160401b038211610a365761086b60018401546118da565b90601f918281116109f9575b5060209183116001146109895791806108a99260019460009261097e5750508160011b916000199060031b1c19161790565b9101555b60018060a01b036108c46101e58360e05189611ad9565b1660005260046020526040600020600160ff198254161790556108ef6101e58260a051608051611ad9565b906109036101e58260c05161014051611ad9565b916109146101e58360e0518a611ad9565b610925836101005161012051611ad9565b3593600385101561016c576040516001956001600160a01b0392831694909216927f1499960aa396b70c1f355843d1c3d271851878139f328ca7fda1378e871ea1ba928291610975919083611de4565b0390a30161072d565b015190508a806104fa565b906001840160005260206000209160005b601f19851681106109e15750918391600194938594601f198116106109c8575b505050811b019101556108ad565b015160001960f88460031b161c191690558980806109ba565b9192602060018192868501518155019401920161099a565b610a2790600186016000526020600020600585808801821c83019360208910610a2d575b01901c0190611c68565b89610877565b93508293610a1d565b84634e487b7160e01b60005260416004526000fd5b86634e487b7160e01b60005260216004526000fd5b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b508260a05114610725565b506101005160a0511461071f565b5060e05160a05114610719565b3461016c57600036600319011261016c576000546040516001600160a01b039091168152602090f35b3461016c57608036600319011261016c57610b05611a32565b610b0d611a5e565b6064356001600160a01b0381160361016c57602091610b2f9160443591611c7f565b604051908152f35b3461016c57600036600319011261016c57610b50611f1d565b610b58611e27565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461016c57604036600319011261016c57610baa611a32565b610791610bc0610bb8611a5e565b610763611f1d565b519020600052600360205260406000206001808060a01b03825416916000815501610beb81546118da565b9081610c0a575b6000838152600460205260409020805460ff19169055005b81601f60009311600114610c225750555b8180610bf2565b908083918252610c41601f60208420940160051c840160018501611c68565b5555610c1b565b3461016c57600036600319011261016c57610c61611f1d565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461016c57602036600319011261016c576001600160a01b03610cc2611a32565b166000526004602052602060ff604060002054166040519015158152f35b3461016c5760e036600319011261016c57610cf9611a32565b610d01611a5e565b6084356001600160a01b03818116939092606435906044359086850361016c5760a4356001600160401b03811161016c57610d40903690600401611a74565b9060c43598610d4d611e04565b610d55611e27565b610d5e8a611e45565b6000526020809960048252610d7a60ff60406000205416611c19565b610d8386611f8a565b89881697610d938730338c611fcb565b604051606082811b6bffffffffffffffffffffffff199081168684019081529189901b16601482015290610dca8160288401610791565b519020600052600383528a610e0b60016040600020610e0560ff60405198610df18a611914565b83549687168a5289019560a01c1685611c5c565b01611950565b60408501528051600381101561062757610f38575050508189604092511693610e3587868b61224b565b8101031261016c57806084610e558b610e4e819561219d565b930161219d565b9160006040519586948593630f7c084960e21b8552600f0b6004850152600f0b60248401528860448401528960648401525af190811561033c57600091610f01575b50610ebc966000805160206123ad833981519152949392610ef2929889955b866121ab565b1695610ec9843389611f49565b6040805193845260208401949094526001600160a01b0316928201929092529081906060820190565b0390a360018055604051908152f35b9050878181959493953d8311610f31575b610f1c818361192f565b8101031261016c575191929091610ebc610e97565b503d610f12565b90919a9394979695925051600381101561062757600103610f7f57610ebc996000805160206123ad83398151915297610ef295888886610f7796612023565b988995610eb6565b60405162461bcd60e51b815260206004820152600f60248201526e0aadce6eae0e0dee4e8cac840888ab608b1b6044820152606490fd5b3461016c57600036600319011261016c57602060ff600254166040519015158152f35b3461016c57606036600319011261016c57610ff2611a32565b602435610ffd611a48565b611005611f1d565b6001600160a01b038181169383919061101f861515611b3e565b1690816110bb5750504782156110b3575b8211611077578161106e60008080807f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9976020975af161023b611b9d565b604051908152a2005b60405162461bcd60e51b815260206004820152601460248201527308aae744092dce6eaccccd2c6d2cadce8408aa8960631b6044820152606490fd5b915081611030565b916040939193516370a0823160e01b81523060048201526020938482602481895afa91821561033c5760009261117d575b5015611175575b82116111305790611127817f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c949386611f49565b604051908152a3005b60405162461bcd60e51b815260048101849052601760248201527f45573a20496e73756666696369656e7420746f6b656e730000000000000000006044820152606490fd5b9150816110f3565b9091508481813d83116111a5575b611195818361192f565b8101031261016c575190876110ec565b503d61118b565b3461016c57600036600319011261016c576111c5611f1d565b60025460ff8116156112045760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b3461016c57600036600319011261016c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461016c5760e036600319011261016c576004356001600160401b03811161016c5761128b903690600401611a02565b6024356001600160401b03811161016c576112aa903690600401611a02565b916044356001600160401b03811161016c576112ca903690600401611a02565b9190936064356001600160401b03811161016c576112ec903690600401611a02565b93906084356001600160401b03811161016c5761130d903690600401611a02565b949060a4356001600160401b03811161016c5761132e903690600401611a02565b989093611339611e04565b611341611e27565b61134c60c435611e45565b83156117fd57600a84116117c2576040518060e08101106001600160401b0360e0830111176106115760e081016040526006815260c03660208301378461139282611ab8565b528051600110156117ac578760408201528051600210156117ac578660608201528051600310156117ac578960808201528051600410156117ac578860a08201528051600510156117ac57808b60c06113ec930152611e88565b6113f584611aa1565b9b6114036040519d8e61192f565b848d5261140f85611aa1565b601f19013660208f01378c60005b86811061146e57506001805560405180916020820160208352815180915260206040840192019060005b818110611455575050500390f35b8251845285945060209384019390920191600101611447565b8c8c8f8c8c8f92868c8f928f838f928f928f9483611490818098948195611ad9565b61149990611ae9565b9b6114a392611ad9565b6114ac90611ae9565b986114b692611ad9565b35996114c192611ad9565b35966114cc92611ad9565b6114d590611ae9565b966114df92611afd565b6001600160a01b0387166000908152600460205260409020549091906115079060ff16611c19565b61151086611f8a565b6115258630336001600160a01b038816611fcb565b604051606085811b6bffffffffffffffffffffffff19908116602084019081529186901b166034830152602882529061155f60488261192f565b519020600052600360205260406000206040519061157c82611914565b80546001600160a01b038116835261159d9060a01c60ff1660208401611c5c565b6001016115a990611950565b604082015280516001600160a01b0389811691160361177757602081015160038110156106275761172057516001600160a01b03908116926040918391906115f6908a9087908a1661224b565b8101031261016c578060846116106020610e4e819561219d565b9160006040519586948593630f7c084960e21b8552600f90810b60048601520b60248401528a60448401528960648401525af190811561033c576000916116d2575b50936000805160206123ad8339815191528794600199946116c161167f99956116c9999a8b945b856121ab565b8c8060a01b031695611692843389611f49565b6040519384938e8060a01b031696849192604091949360608401958452602084015260018060a01b0316910152565b0390a3611ac5565b52018d9061141d565b93959197929490506020843d602011611718575b816116f36020938361192f565b8101031261016c579251919690949293916000805160206123ad833981519152611652565b3d91506116e6565b602090999497939599969291960151600381101561062757600103610f7f5760019861167f976116c18a9761176f6116c99a6000805160206123ad8339815191529660c43591878a8689612023565b9a8b94611679565b60405162461bcd60e51b815260206004820152600d60248201526c0a0deded840dad2e6dac2e8c6d609b1b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b8152602060048201526013602482015272564c3a20417272617920746f6f206c6172676560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e564c3a20456d70747920617272617960881b6044820152606490fd5b3461016c5760208060031936011261016c5761188a9060043560005260036020526040600020611868600182549201611950565b9160405193849260018060a01b038116845260ff602085019160a01c166119f5565b606060408301528251908160608401526000935b8285106118c1575050608092506000838284010152601f80199101168101030190f35b848101820151868601608001529381019385935061189e565b90600182811c9216801561190a575b60208310146118f457565b634e487b7160e01b600052602260045260246000fd5b91607f16916118e9565b606081019081106001600160401b0382111761061157604052565b90601f801991011681019081106001600160401b0382111761061157604052565b90604051918260008254611963816118da565b908184526020946001916001811690816000146119d35750600114611994575b5050506119929250038361192f565b565b600090815285812095935091905b8183106119bb5750506119929350820101388080611983565b855488840185015294850194879450918301916119a2565b9250505061199294925060ff191682840152151560051b820101388080611983565b9060038210156106275752565b9181601f8401121561016c578235916001600160401b03831161016c576020808501948460051b01011161016c57565b600435906001600160a01b038216820361016c57565b604435906001600160a01b038216820361016c57565b602435906001600160a01b038216820361016c57565b9181601f8401121561016c578235916001600160401b03831161016c576020838186019501011161016c57565b6001600160401b0381116106115760051b60200190565b8051156117ac5760200190565b80518210156117ac5760209160051b010190565b91908110156117ac5760051b0190565b356001600160a01b038116810361016c5790565b91908110156117ac5760051b81013590601e198136030182121561016c5701908135916001600160401b03831161016c57602001823603811361016c579190565b15611b4557565b60405162461bcd60e51b81526020600482015260156024820152741155ce88125b9d985b1a59081c9958da5c1a595b9d605a1b6044820152606490fd5b6001600160401b03811161061157601f01601f191660200190565b3d15611bc8573d90611bae82611b82565b91611bbc604051938461192f565b82523d6000602084013e565b606090565b15611bd457565b60405162461bcd60e51b815260206004820152601760248201527f45573a20455448207472616e73666572206661696c65640000000000000000006044820152606490fd5b15611c2057565b60405162461bcd60e51b8152602060048201526014602482015273141bdbdb081b9bdd081dda1a5d195b1a5cdd195960621b6044820152606490fd5b60038210156106275752565b818110611c73575050565b60008155600101611c68565b91906040928351611cb7816107916020958683019586906028926001600160601b0319809260601b16835260601b1660148201520190565b519020906000918252600381528382208451611cd281611914565b81546001600160a01b0380821683529284830191611cfd91600191610e059060a01c60ff1685611c5c565b87830152516003811015611d995715611d195750505050905090565b9082915116936064865180968193635e0d443f60e01b83528760048401526001602484015260448301525afa938415611d8e57508193611d5a575b50505090565b9091809350813d8311611d87575b611d72818361192f565b81010312611d84575051388080611d54565b80fd5b503d611d68565b51913d9150823e3d90fd5b634e487b7160e01b85526021600452602485fd5b929192611db982611b82565b91611dc7604051938461192f565b82948184528183011161016c578281602093846000960137010152565b6001600160a01b03909116815260408101929161199291602001906119f5565b600260015414611e15576002600155565b604051633ee5aeb560e01b8152600490fd5b60ff60025416611e3357565b60405163d93c066560e01b8152600490fd5b4211611e4d57565b60405162461bcd60e51b815260206004820152601360248201527215930e88111958591b1a5b99481c185cdcd959606a1b6044820152606490fd5b805115611f1a57611e9881611ab8565b51600191829190825b611eac575b50505050565b8051831015611f155781611ec08483611ac5565b5103611ed0578380930192611ea1565b60405162461bcd60e51b815260206004820152601960248201527f564c3a204172726179206c656e677468206d69736d61746368000000000000006044820152606490fd5b611ea6565b50565b6000546001600160a01b03163303611f3157565b60405163118cdaa760e01b8152336004820152602490fd5b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261199291611f8560648361192f565b6121ef565b15611f9157565b60405162461bcd60e51b815260206004820152601260248201527115930e88125b9d985b1a5908185b5bdd5b9d60721b6044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b0384111761061157611992926040526121ef565b94938096919460209788918101031261016c573562ffffff9586821680920361016c576001600160a01b0390811695906120819085907f0000000000000000000000000000000000000000000000000000000000000000168861224b565b6040519561010087018781106001600160401b038211176106115760409081529087526001600160a01b0391821689880190815287820193845230606089019081526080890195865260a0890196875260c08901978852600060e08a01818152935163414bf38960e01b81529951851660048b01529151841660248a01529351909816604488015291518116606487015291516084860152915160a4850152915160c484015251811660e4830152909183918391610104918391907f0000000000000000000000000000000000000000000000000000000000000000165af191821561033c5760009261217357505090565b90809250813d8311612196575b61218a818361192f565b8101031261016c575190565b503d612180565b359081600f0b820361016c57565b106121b257565b60405162461bcd60e51b815260206004820152601560248201527415930e8814db1a5c1c1859d948195e18d959591959605a1b6044820152606490fd5b906000602091828151910182855af11561033c576000513d61224257506001600160a01b0381163b155b6122205750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612219565b604051636eb1769f60e11b81523060048201526001600160a01b03838116602483018190526020959294909290918416908686604481855afa95861561033c5760009661237d575b5085018095116123675760405163095ea7b360e01b8782018181526001600160a01b03949094166024830152604480830197909752958152949186906000906122dd60648961192f565b87519082885af1903d6000519083612348575b50505015612300575b5050505050565b6040519485015260248401526000604484015260448352608083018381106001600160401b038211176106115761233e93611f8591604052826121ef565b38808080806122f9565b9192509061235d57503b15155b3880806122f0565b6001915014612355565b634e487b7160e01b600052601160045260246000fd5b9095508681813d83116123a5575b612395818361192f565b8101031261016c57519438612293565b503d61238b56feee4825a7988c5519a874be79f2a84d13d02cfe5f74cad97cda2d5b55d2b13bfaa264697066735822122037fd4e2ece0c671004dfbff7836e767992ca7d583b48248b9f5c43c24e782ede64736f6c63430008160033","deployedBytecode":"0x610160604052600436101561001357600080fd5b60003560e01c806307ef21901461183457806320b3ff3b1461125b5780632c76d7a6146112165780633f4ba83a146111ac578063551512de14610fd95780635c975abb14610fb65780635d1e560214610ce057806367bea49314610ca1578063715018a614610c48578063744b92e214610b915780638456cb5914610b3757806388030a9814610aec5780638da5cb5b14610ac3578063a30813c71461063d578063b88a5bc314610364578063cfdbf25414610348578063eaf7406a146101715763f2fde38b146100e357600080fd5b3461016c57602036600319011261016c576100fc611a32565b610104611f1d565b6001600160a01b0390811690811561015357600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b3461016c57604036600319011261016c576004356001600160401b03811161016c576101a1903690600401611a02565b6101a9611a5e565b906101b2611f1d565b6001600160a01b0391808316916101ca831515611b3e565b60005b8181106101d657005b846101ea6101e583858a611ad9565b611ae9565b1661024f57600190844780610203575b50505b016101cd565b60208161024160008080807f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9978d5af161023b611b9d565b50611bcd565b604051908152a284886101fa565b8461025e6101e583858a611ad9565b169060405180926370a0823160e01b825230600483015281602460209586935afa801561033c57848792600092610309575b50600194898b8987866102ab575b50505050505050506101fd565b85836102ee896101e595886102e86101e5887f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c9e6102f39c611ad9565b16611f49565b611ad9565b1692604051908152a384888481898b898761029e565b925050508281813d8311610335575b610322818361192f565b8101031261016c57518590846001610290565b503d610318565b6040513d6000823e3d90fd5b3461016c57600036600319011261016c576020604051600a8152f35b3461016c5760a036600319011261016c5761037d611a32565b610385611a5e565b9061038e611a48565b60643592600384101561016c576001600160401b039060843582811161016c576103bc903690600401611a74565b9590926103c7611f1d565b60405196602091828901896103fa878b84906028926001600160601b0319809260601b16835260601b1660148201520190565b039961040e601f199b8c810183528261192f565b51902090604051998a9361042185611914565b61044760018060a01b0399878b8d169788815201926104408a85611c5c565b3691611dad565b9360408d01948552600052600386528860406000209c51168c54915160038110156106275760ff60a01b9060a01b16916affffffffffffffffffffff60a81b1617178b556001809b0192519a8b51928311610611576104a684546118da565b601f81116105d6575b508591601f84116001146105475750509161050f82600495936105379897957f1499960aa396b70c1f355843d1c3d271851878139f328ca7fda1378e871ea1ba9c9d9e60009261053c575b50508160011b916000199060031b1c19161790565b90555b600052526040600020600160ff19825416179055836040519485941697169583611de4565b0390a3005b015190508e806104fa565b60008581528781209d92918516915b8282106105bf575050927f1499960aa396b70c1f355843d1c3d271851878139f328ca7fda1378e871ea1ba9a9b9c610537989795936001938360049997106105a6575b505050811b019055610512565b015160001960f88460031b161c191690558d8080610599565b848401518f559d8e019d9388019390880190610556565b610601908560005287600020601f860160051c810191898710610607575b601f0160051c0190611c68565b8c6104af565b90915081906105f4565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b3461016c5760a036600319011261016c576004356001600160401b03811161016c5761066d903690600401611a02565b60a052608052602480356001600160401b03811161016c57610693903690600401611a02565b60c052610140526044356001600160401b03811161016c576106b9903690600401611a02565b60e052906064356001600160401b03811161016c576106dc903690600401611a02565b61010052610120526084356001600160401b03811161016c57610703903690600401611a02565b9161070c611f1d565b60c05160a0511480610ab6575b80610aa8575b80610a9d575b15610a605760005b60a051811061073857005b61074a6101e58260a051608051611ad9565b61079161079f6107636101e58560c05161014051611ad9565b604051928391602083019586906028926001600160601b0319809260601b16835260601b1660148201520190565b03601f19810183528261192f565b5190206107b26101e58360e05189611ad9565b906107c4836101005161012051611ad9565b35600381101561016c576108036107dc858989611afd565b604051956107e987611914565b6001600160a01b0316865260208601936104409085611c5c565b9160408401928352600052600360205260406000209260018060a01b03905116835491516003811015610a4b576001600160a81b03199092161760a09190911b60ff60a01b16178255518051906001600160401b038211610a365761086b60018401546118da565b90601f918281116109f9575b5060209183116001146109895791806108a99260019460009261097e5750508160011b916000199060031b1c19161790565b9101555b60018060a01b036108c46101e58360e05189611ad9565b1660005260046020526040600020600160ff198254161790556108ef6101e58260a051608051611ad9565b906109036101e58260c05161014051611ad9565b916109146101e58360e0518a611ad9565b610925836101005161012051611ad9565b3593600385101561016c576040516001956001600160a01b0392831694909216927f1499960aa396b70c1f355843d1c3d271851878139f328ca7fda1378e871ea1ba928291610975919083611de4565b0390a30161072d565b015190508a806104fa565b906001840160005260206000209160005b601f19851681106109e15750918391600194938594601f198116106109c8575b505050811b019101556108ad565b015160001960f88460031b161c191690558980806109ba565b9192602060018192868501518155019401920161099a565b610a2790600186016000526020600020600585808801821c83019360208910610a2d575b01901c0190611c68565b89610877565b93508293610a1d565b84634e487b7160e01b60005260416004526000fd5b86634e487b7160e01b60005260216004526000fd5b60405162461bcd60e51b8152602060048201526015602482015274082e4e4c2f240d8cadccee8d040dad2e6dac2e8c6d605b1b6044820152606490fd5b508260a05114610725565b506101005160a0511461071f565b5060e05160a05114610719565b3461016c57600036600319011261016c576000546040516001600160a01b039091168152602090f35b3461016c57608036600319011261016c57610b05611a32565b610b0d611a5e565b6064356001600160a01b0381160361016c57602091610b2f9160443591611c7f565b604051908152f35b3461016c57600036600319011261016c57610b50611f1d565b610b58611e27565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461016c57604036600319011261016c57610baa611a32565b610791610bc0610bb8611a5e565b610763611f1d565b519020600052600360205260406000206001808060a01b03825416916000815501610beb81546118da565b9081610c0a575b6000838152600460205260409020805460ff19169055005b81601f60009311600114610c225750555b8180610bf2565b908083918252610c41601f60208420940160051c840160018501611c68565b5555610c1b565b3461016c57600036600319011261016c57610c61611f1d565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461016c57602036600319011261016c576001600160a01b03610cc2611a32565b166000526004602052602060ff604060002054166040519015158152f35b3461016c5760e036600319011261016c57610cf9611a32565b610d01611a5e565b6084356001600160a01b03818116939092606435906044359086850361016c5760a4356001600160401b03811161016c57610d40903690600401611a74565b9060c43598610d4d611e04565b610d55611e27565b610d5e8a611e45565b6000526020809960048252610d7a60ff60406000205416611c19565b610d8386611f8a565b89881697610d938730338c611fcb565b604051606082811b6bffffffffffffffffffffffff199081168684019081529189901b16601482015290610dca8160288401610791565b519020600052600383528a610e0b60016040600020610e0560ff60405198610df18a611914565b83549687168a5289019560a01c1685611c5c565b01611950565b60408501528051600381101561062757610f38575050508189604092511693610e3587868b61224b565b8101031261016c57806084610e558b610e4e819561219d565b930161219d565b9160006040519586948593630f7c084960e21b8552600f0b6004850152600f0b60248401528860448401528960648401525af190811561033c57600091610f01575b50610ebc966000805160206123ad833981519152949392610ef2929889955b866121ab565b1695610ec9843389611f49565b6040805193845260208401949094526001600160a01b0316928201929092529081906060820190565b0390a360018055604051908152f35b9050878181959493953d8311610f31575b610f1c818361192f565b8101031261016c575191929091610ebc610e97565b503d610f12565b90919a9394979695925051600381101561062757600103610f7f57610ebc996000805160206123ad83398151915297610ef295888886610f7796612023565b988995610eb6565b60405162461bcd60e51b815260206004820152600f60248201526e0aadce6eae0e0dee4e8cac840888ab608b1b6044820152606490fd5b3461016c57600036600319011261016c57602060ff600254166040519015158152f35b3461016c57606036600319011261016c57610ff2611a32565b602435610ffd611a48565b611005611f1d565b6001600160a01b038181169383919061101f861515611b3e565b1690816110bb5750504782156110b3575b8211611077578161106e60008080807f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9976020975af161023b611b9d565b604051908152a2005b60405162461bcd60e51b815260206004820152601460248201527308aae744092dce6eaccccd2c6d2cadce8408aa8960631b6044820152606490fd5b915081611030565b916040939193516370a0823160e01b81523060048201526020938482602481895afa91821561033c5760009261117d575b5015611175575b82116111305790611127817f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c949386611f49565b604051908152a3005b60405162461bcd60e51b815260048101849052601760248201527f45573a20496e73756666696369656e7420746f6b656e730000000000000000006044820152606490fd5b9150816110f3565b9091508481813d83116111a5575b611195818361192f565b8101031261016c575190876110ec565b503d61118b565b3461016c57600036600319011261016c576111c5611f1d565b60025460ff8116156112045760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b3461016c57600036600319011261016c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461016c5760e036600319011261016c576004356001600160401b03811161016c5761128b903690600401611a02565b6024356001600160401b03811161016c576112aa903690600401611a02565b916044356001600160401b03811161016c576112ca903690600401611a02565b9190936064356001600160401b03811161016c576112ec903690600401611a02565b93906084356001600160401b03811161016c5761130d903690600401611a02565b949060a4356001600160401b03811161016c5761132e903690600401611a02565b989093611339611e04565b611341611e27565b61134c60c435611e45565b83156117fd57600a84116117c2576040518060e08101106001600160401b0360e0830111176106115760e081016040526006815260c03660208301378461139282611ab8565b528051600110156117ac578760408201528051600210156117ac578660608201528051600310156117ac578960808201528051600410156117ac578860a08201528051600510156117ac57808b60c06113ec930152611e88565b6113f584611aa1565b9b6114036040519d8e61192f565b848d5261140f85611aa1565b601f19013660208f01378c60005b86811061146e57506001805560405180916020820160208352815180915260206040840192019060005b818110611455575050500390f35b8251845285945060209384019390920191600101611447565b8c8c8f8c8c8f92868c8f928f838f928f928f9483611490818098948195611ad9565b61149990611ae9565b9b6114a392611ad9565b6114ac90611ae9565b986114b692611ad9565b35996114c192611ad9565b35966114cc92611ad9565b6114d590611ae9565b966114df92611afd565b6001600160a01b0387166000908152600460205260409020549091906115079060ff16611c19565b61151086611f8a565b6115258630336001600160a01b038816611fcb565b604051606085811b6bffffffffffffffffffffffff19908116602084019081529186901b166034830152602882529061155f60488261192f565b519020600052600360205260406000206040519061157c82611914565b80546001600160a01b038116835261159d9060a01c60ff1660208401611c5c565b6001016115a990611950565b604082015280516001600160a01b0389811691160361177757602081015160038110156106275761172057516001600160a01b03908116926040918391906115f6908a9087908a1661224b565b8101031261016c578060846116106020610e4e819561219d565b9160006040519586948593630f7c084960e21b8552600f90810b60048601520b60248401528a60448401528960648401525af190811561033c576000916116d2575b50936000805160206123ad8339815191528794600199946116c161167f99956116c9999a8b945b856121ab565b8c8060a01b031695611692843389611f49565b6040519384938e8060a01b031696849192604091949360608401958452602084015260018060a01b0316910152565b0390a3611ac5565b52018d9061141d565b93959197929490506020843d602011611718575b816116f36020938361192f565b8101031261016c579251919690949293916000805160206123ad833981519152611652565b3d91506116e6565b602090999497939599969291960151600381101561062757600103610f7f5760019861167f976116c18a9761176f6116c99a6000805160206123ad8339815191529660c43591878a8689612023565b9a8b94611679565b60405162461bcd60e51b815260206004820152600d60248201526c0a0deded840dad2e6dac2e8c6d609b1b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b8152602060048201526013602482015272564c3a20417272617920746f6f206c6172676560681b6044820152606490fd5b60405162461bcd60e51b815260206004820152600f60248201526e564c3a20456d70747920617272617960881b6044820152606490fd5b3461016c5760208060031936011261016c5761188a9060043560005260036020526040600020611868600182549201611950565b9160405193849260018060a01b038116845260ff602085019160a01c166119f5565b606060408301528251908160608401526000935b8285106118c1575050608092506000838284010152601f80199101168101030190f35b848101820151868601608001529381019385935061189e565b90600182811c9216801561190a575b60208310146118f457565b634e487b7160e01b600052602260045260246000fd5b91607f16916118e9565b606081019081106001600160401b0382111761061157604052565b90601f801991011681019081106001600160401b0382111761061157604052565b90604051918260008254611963816118da565b908184526020946001916001811690816000146119d35750600114611994575b5050506119929250038361192f565b565b600090815285812095935091905b8183106119bb5750506119929350820101388080611983565b855488840185015294850194879450918301916119a2565b9250505061199294925060ff191682840152151560051b820101388080611983565b9060038210156106275752565b9181601f8401121561016c578235916001600160401b03831161016c576020808501948460051b01011161016c57565b600435906001600160a01b038216820361016c57565b604435906001600160a01b038216820361016c57565b602435906001600160a01b038216820361016c57565b9181601f8401121561016c578235916001600160401b03831161016c576020838186019501011161016c57565b6001600160401b0381116106115760051b60200190565b8051156117ac5760200190565b80518210156117ac5760209160051b010190565b91908110156117ac5760051b0190565b356001600160a01b038116810361016c5790565b91908110156117ac5760051b81013590601e198136030182121561016c5701908135916001600160401b03831161016c57602001823603811361016c579190565b15611b4557565b60405162461bcd60e51b81526020600482015260156024820152741155ce88125b9d985b1a59081c9958da5c1a595b9d605a1b6044820152606490fd5b6001600160401b03811161061157601f01601f191660200190565b3d15611bc8573d90611bae82611b82565b91611bbc604051938461192f565b82523d6000602084013e565b606090565b15611bd457565b60405162461bcd60e51b815260206004820152601760248201527f45573a20455448207472616e73666572206661696c65640000000000000000006044820152606490fd5b15611c2057565b60405162461bcd60e51b8152602060048201526014602482015273141bdbdb081b9bdd081dda1a5d195b1a5cdd195960621b6044820152606490fd5b60038210156106275752565b818110611c73575050565b60008155600101611c68565b91906040928351611cb7816107916020958683019586906028926001600160601b0319809260601b16835260601b1660148201520190565b519020906000918252600381528382208451611cd281611914565b81546001600160a01b0380821683529284830191611cfd91600191610e059060a01c60ff1685611c5c565b87830152516003811015611d995715611d195750505050905090565b9082915116936064865180968193635e0d443f60e01b83528760048401526001602484015260448301525afa938415611d8e57508193611d5a575b50505090565b9091809350813d8311611d87575b611d72818361192f565b81010312611d84575051388080611d54565b80fd5b503d611d68565b51913d9150823e3d90fd5b634e487b7160e01b85526021600452602485fd5b929192611db982611b82565b91611dc7604051938461192f565b82948184528183011161016c578281602093846000960137010152565b6001600160a01b03909116815260408101929161199291602001906119f5565b600260015414611e15576002600155565b604051633ee5aeb560e01b8152600490fd5b60ff60025416611e3357565b60405163d93c066560e01b8152600490fd5b4211611e4d57565b60405162461bcd60e51b815260206004820152601360248201527215930e88111958591b1a5b99481c185cdcd959606a1b6044820152606490fd5b805115611f1a57611e9881611ab8565b51600191829190825b611eac575b50505050565b8051831015611f155781611ec08483611ac5565b5103611ed0578380930192611ea1565b60405162461bcd60e51b815260206004820152601960248201527f564c3a204172726179206c656e677468206d69736d61746368000000000000006044820152606490fd5b611ea6565b50565b6000546001600160a01b03163303611f3157565b60405163118cdaa760e01b8152336004820152602490fd5b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261199291611f8560648361192f565b6121ef565b15611f9157565b60405162461bcd60e51b815260206004820152601260248201527115930e88125b9d985b1a5908185b5bdd5b9d60721b6044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b0384111761061157611992926040526121ef565b94938096919460209788918101031261016c573562ffffff9586821680920361016c576001600160a01b0390811695906120819085907f0000000000000000000000000000000000000000000000000000000000000000168861224b565b6040519561010087018781106001600160401b038211176106115760409081529087526001600160a01b0391821689880190815287820193845230606089019081526080890195865260a0890196875260c08901978852600060e08a01818152935163414bf38960e01b81529951851660048b01529151841660248a01529351909816604488015291518116606487015291516084860152915160a4850152915160c484015251811660e4830152909183918391610104918391907f0000000000000000000000000000000000000000000000000000000000000000165af191821561033c5760009261217357505090565b90809250813d8311612196575b61218a818361192f565b8101031261016c575190565b503d612180565b359081600f0b820361016c57565b106121b257565b60405162461bcd60e51b815260206004820152601560248201527415930e8814db1a5c1c1859d948195e18d959591959605a1b6044820152606490fd5b906000602091828151910182855af11561033c576000513d61224257506001600160a01b0381163b155b6122205750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612219565b604051636eb1769f60e11b81523060048201526001600160a01b03838116602483018190526020959294909290918416908686604481855afa95861561033c5760009661237d575b5085018095116123675760405163095ea7b360e01b8782018181526001600160a01b03949094166024830152604480830197909752958152949186906000906122dd60648961192f565b87519082885af1903d6000519083612348575b50505015612300575b5050505050565b6040519485015260248401526000604484015260448352608083018381106001600160401b038211176106115761233e93611f8591604052826121ef565b38808080806122f9565b9192509061235d57503b15155b3880806122f0565b6001915014612355565b634e487b7160e01b600052601160045260246000fd5b9095508681813d83116123a5575b612395818361192f565b8101031261016c57519438612293565b503d61238b56feee4825a7988c5519a874be79f2a84d13d02cfe5f74cad97cda2d5b55d2b13bfaa264697066735822122037fd4e2ece0c671004dfbff7836e767992ca7d583b48248b9f5c43c24e782ede64736f6c63430008160033","abi":[{"inputs":[{"internalType":"address","name":"_uniswapV3Router","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"EmergencyWithdrawETH","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"EmergencyWithdrawToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenA","type":"address"},{"indexed":true,"internalType":"address","name":"tokenB","type":"address"},{"indexed":false,"internalType":"address","name":"pool","type":"address"},{"indexed":false,"internalType":"enum SwapExecutor.DexType","name":"dexType","type":"uint8"}],"name":"PoolConfigured","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"address","name":"pool","type":"address"}],"name":"SwapExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"MAX_BATCH_SIZE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum SwapExecutor.DexType","name":"dexType","type":"uint8"},{"internalType":"bytes","name":"poolData","type":"bytes"}],"name":"configurePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokenAs","type":"address[]"},{"internalType":"address[]","name":"tokenBs","type":"address[]"},{"internalType":"address[]","name":"pools","type":"address[]"},{"internalType":"enum SwapExecutor.DexType[]","name":"dexTypes","type":"uint8[]"},{"internalType":"bytes[]","name":"poolDatas","type":"bytes[]"}],"name":"configurePools","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"name":"emergencyWithdrawMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokensIn","type":"address[]"},{"internalType":"address[]","name":"tokensOut","type":"address[]"},{"internalType":"uint256[]","name":"amountsIn","type":"uint256[]"},{"internalType":"uint256[]","name":"minAmountsOut","type":"uint256[]"},{"internalType":"address[]","name":"pools","type":"address[]"},{"internalType":"bytes[]","name":"swapData","type":"bytes[]"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"executeBatchSwaps","outputs":[{"internalType":"uint256[]","name":"amountsOut","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"bytes","name":"swapData","type":"bytes"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"executeSwap","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"address","name":"pool","type":"address"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"poolConfigs","outputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"enum SwapExecutor.DexType","name":"dexType","type":"uint8"},{"internalType":"bytes","name":"poolData","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"removePool","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"uniswapV3Router","outputs":[{"internalType":"contract IUniswapV3Router","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistedPools","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}]}
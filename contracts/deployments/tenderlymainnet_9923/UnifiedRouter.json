{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.22\"},\"sources\":{\"contracts/UnifiedRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// LayerZero Composer Interface\\ninterface IOAppComposer {\\n    function lzCompose(\\n        address _oApp,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\\n// CCTP Interfaces\\ninterface ITokenMessenger {\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 nonce);\\n    \\n    function depositForBurnWithCaller(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller\\n    ) external returns (uint64 nonce);\\n}\\n\\n// CCTP V2 Message Transmitter for hooks\\ninterface IMessageTransmitter {\\n    function sendMessage(\\n        uint32 destinationDomain,\\n        bytes32 recipient,\\n        bytes calldata messageBody\\n    ) external returns (uint64);\\n}\\n\\n// LayerZero Interfaces\\ninterface ILayerZeroEndpoint {\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n    \\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n}\\n\\n// Stargate Interfaces\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n    \\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n}\\n\\n/**\\n * @title UnifiedRouter\\n * @notice Simplified cross-chain router for stablecoin transfers\\n * @dev Single entry point for all cross-chain transfers with dynamic routing\\n */\\ncontract UnifiedRouter is Ownable, Pausable, ReentrancyGuard, IOAppComposer {\\n    using SafeERC20 for IERC20;\\n    \\n    // Protocol types\\n    enum Protocol {\\n        NONE,\\n        CCTP,              // CCTP V1 - same token only\\n        CCTP_HOOKS,        // CCTP V2 with hooks - cross-token swaps\\n        LAYERZERO,\\n        STARGATE\\n    }\\n    \\n    // Route configuration\\n    struct Route {\\n        Protocol protocol;\\n        uint32 protocolDomain;  // CCTP domain or LZ/Stargate chain ID\\n        address bridgeContract; // Protocol's bridge/messenger address\\n        uint256 poolId;        // For Stargate pools\\n        address swapPool;      // Curve/DEX pool for destination swaps\\n        bytes extraData;       // Protocol-specific configuration\\n    }\\n    \\n    // Events\\n    event RouteConfigured(\\n        address indexed fromToken,\\n        uint256 indexed fromChainId,\\n        address toToken,\\n        uint256 indexed toChainId,\\n        Protocol protocol\\n    );\\n    \\n    event TransferInitiated(\\n        bytes32 indexed transferId,\\n        address indexed sender,\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 toChainId,\\n        address recipient,\\n        Protocol protocol\\n    );\\n    \\n    // State variables\\n    mapping(bytes32 => Route) public routes; // routeKey => Route\\n    mapping(Protocol => address) public protocolContracts; // Protocol => contract address\\n    mapping(uint256 => address) public cctpHookReceivers; // chainId => hook receiver address\\n    \\n    uint256 private transferNonce;\\n    \\n    constructor(address _owner) Ownable(_owner) {}\\n    \\n    /**\\n     * @notice Main transfer function - send any token to any chain\\n     * @param fromToken Source token address\\n     * @param toToken Destination token address (can be different)\\n     * @param amount Amount to send (in fromToken decimals)\\n     * @param toChainId Destination chain ID\\n     * @param recipient Who receives the tokens\\n     * @return transferId Unique transfer identifier\\n     */\\n    function transfer(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 toChainId,\\n        address recipient\\n    ) external payable nonReentrant whenNotPaused returns (bytes32 transferId) {\\n        bytes memory emptyData;\\n        return transferWithSwap(fromToken, toToken, amount, toChainId, recipient, 0, emptyData);\\n    }\\n\\n    /**\\n     * @notice Transfer with destination swap support\\n     * @param fromToken Source token address\\n     * @param toToken Destination token address (can be different)\\n     * @param amount Amount to send (in fromToken decimals)\\n     * @param toChainId Destination chain ID\\n     * @param recipient Who receives the tokens\\n     * @param minAmountOut Minimum amount to receive (0 for same-token transfers)\\n     * @param swapData Encoded swap data for DEX on destination chain\\n     * @return transferId Unique transfer identifier\\n     */\\n    function transferWithSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 toChainId,\\n        address recipient,\\n        uint256 minAmountOut,\\n        bytes memory swapData\\n    ) public payable nonReentrant whenNotPaused returns (bytes32 transferId) {\\n        require(amount > 0, \\\"Amount must be > 0\\\");\\n        require(recipient != address(0), \\\"Invalid recipient\\\");\\n        require(toChainId != block.chainid, \\\"Cannot transfer to same chain\\\");\\n        \\n        // Generate route key and transfer ID\\n        bytes32 routeKey = getRouteKey(fromToken, block.chainid, toToken, toChainId);\\n        transferId = keccak256(abi.encodePacked(msg.sender, transferNonce++, block.timestamp));\\n        \\n        // Get route configuration\\n        Route memory route = routes[routeKey];\\n        require(route.protocol != Protocol.NONE, \\\"Route not configured\\\");\\n        \\n        // Pull tokens from sender\\n        IERC20(fromToken).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Execute transfer based on protocol\\n        if (route.protocol == Protocol.CCTP) {\\n            // CCTP V1 doesn't support cross-token swaps natively\\n            require(fromToken == toToken, \\\"CCTP requires same token\\\");\\n            _executeCCTP(fromToken, amount, recipient, route);\\n        } else if (route.protocol == Protocol.CCTP_HOOKS) {\\n            // CCTP V2 with hooks supports cross-token swaps\\n            _executeCCTPWithHooks(fromToken, amount, recipient, route, toToken, minAmountOut, toChainId);\\n        } else if (route.protocol == Protocol.LAYERZERO) {\\n            _executeLayerZero(fromToken, amount, recipient, route, toToken, minAmountOut);\\n        } else if (route.protocol == Protocol.STARGATE) {\\n            _executeStargate(fromToken, amount, recipient, route);\\n        } else {\\n            revert(\\\"Unsupported protocol\\\");\\n        }\\n        \\n        emit TransferInitiated(\\n            transferId,\\n            msg.sender,\\n            fromToken,\\n            toToken,\\n            amount,\\n            toChainId,\\n            recipient,\\n            route.protocol\\n        );\\n    }\\n    \\n    /**\\n     * @notice Execute CCTP transfer (primarily for USDC)\\n     */\\n    function _executeCCTP(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        Route memory route\\n    ) private {\\n        ITokenMessenger messenger = ITokenMessenger(route.bridgeContract);\\n        \\n        // Approve token to messenger\\n        IERC20(token).forceApprove(route.bridgeContract, amount);\\n        \\n        // Convert recipient to bytes32\\n        bytes32 mintRecipient = bytes32(uint256(uint160(recipient)));\\n        \\n        // Execute burn and transfer\\n        messenger.depositForBurn(\\n            amount,\\n            route.protocolDomain,\\n            mintRecipient,\\n            token\\n        );\\n    }\\n    \\n    /**\\n     * @notice Execute CCTP V2 with hooks for cross-token swaps\\n     */\\n    function _executeCCTPWithHooks(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        Route memory route,\\n        address toToken,\\n        uint256 minAmountOut,\\n        uint256 toChainId\\n    ) private {\\n        require(token != toToken, \\\"Use regular CCTP for same token\\\");\\n        require(route.swapPool != address(0), \\\"Swap pool required\\\");\\n        \\n        // Get hook receiver on destination chain\\n        address hookReceiver = cctpHookReceivers[toChainId];\\n        require(hookReceiver != address(0), \\\"Hook receiver not configured\\\");\\n        \\n        ITokenMessenger messenger = ITokenMessenger(route.bridgeContract);\\n        IMessageTransmitter transmitter = IMessageTransmitter(protocolContracts[Protocol.CCTP_HOOKS]);\\n        \\n        // Approve token to messenger\\n        IERC20(token).forceApprove(route.bridgeContract, amount);\\n        \\n        // Create hook data for destination swap\\n        bytes memory hookData = abi.encode(\\n            toToken,        // Token to swap to\\n            minAmountOut,   // Minimum amount out\\n            recipient,      // Final recipient\\n            route.swapPool  // DEX pool for swap\\n        );\\n        \\n        // Convert hook receiver to bytes32\\n        bytes32 mintRecipient = bytes32(uint256(uint160(hookReceiver)));\\n        bytes32 destinationCaller = bytes32(uint256(uint160(hookReceiver)));\\n        \\n        // Execute burn with caller restriction\\n        messenger.depositForBurnWithCaller(\\n            amount,\\n            route.protocolDomain,\\n            mintRecipient,      // Hook receiver gets the USDC\\n            token,\\n            destinationCaller   // Only hook receiver can call\\n        );\\n        \\n        // Send hook data via message transmitter\\n        transmitter.sendMessage(\\n            route.protocolDomain,\\n            destinationCaller,\\n            hookData\\n        );\\n    }\\n    \\n    /**\\n     * @notice Execute LayerZero transfer (for OFT tokens)\\n     */\\n    function _executeLayerZero(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        Route memory route,\\n        address toToken,\\n        uint256 minAmountOut\\n    ) private {\\n        ILayerZeroEndpoint endpoint = ILayerZeroEndpoint(route.bridgeContract);\\n        \\n        // Check if this is a cross-token swap\\n        bool isCrossTokenSwap = token != toToken && route.swapPool != address(0);\\n        \\n        bytes memory payload;\\n        bytes memory adapterParams;\\n        \\n        bytes memory composeMsg;\\n        bytes32 destinationAddress;\\n        \\n        if (isCrossTokenSwap) {\\n            // Cross-token swap: send to UnifiedRouter for compose execution\\n            destinationAddress = bytes32(uint256(uint160(address(this)))); // Send to this router\\n            \\n            // Create compose message with swap data\\n            composeMsg = abi.encode(\\n                toToken,            // target token to swap to\\n                minAmountOut,       // minimum amount out\\n                recipient,          // final recipient\\n                route.swapPool      // DEX pool address\\n            );\\n            \\n            // Version 2 with compose for cross-token swaps\\n            adapterParams = abi.encodePacked(\\n                uint16(2),          // version 2 (compose)\\n                uint256(200000),    // gas for lzReceive\\n                uint256(300000),    // gas for lzCompose (swap execution)\\n                uint256(0),         // no native value\\n                composeMsg          // compose message\\n            );\\n        } else {\\n            // Same token transfer: send directly to recipient\\n            destinationAddress = bytes32(uint256(uint160(recipient)));\\n            \\n            // Version 1 for simple transfers\\n            adapterParams = abi.encodePacked(\\n                uint16(1),          // version 1\\n                uint256(200000)     // gas for destination\\n            );\\n        }\\n        \\n        // Use OFT send instead of direct LayerZero endpoint\\n        // This is a simplified approach - in practice, we'd need to interact\\n        // with the specific OFT contract for PYUSD/USDe\\n        \\n        // For now, create a generic payload for the OFT\\n        payload = abi.encode(destinationAddress, amount, composeMsg);\\n        \\n        // Send via LayerZero\\n        endpoint.send{value: msg.value}(\\n            uint16(route.protocolDomain), // destination chain ID\\n            abi.encodePacked(destinationAddress), // destination address (router for compose, recipient for direct)\\n            payload,                      // transfer payload\\n            payable(msg.sender),          // refund address\\n            address(0),                   // no ZRO payment\\n            adapterParams                 // gas params including compose data\\n        );\\n    }\\n    \\n    /**\\n     * @notice Execute Stargate transfer (for USDT and other pools)\\n     */\\n    function _executeStargate(\\n        address token,\\n        uint256 amount,\\n        address recipient,\\n        Route memory route\\n    ) private {\\n        IStargateRouter router = IStargateRouter(route.bridgeContract);\\n        \\n        // Approve token to router\\n        IERC20(token).forceApprove(route.bridgeContract, amount);\\n        \\n        // Prepare LayerZero transaction object\\n        IStargateRouter.lzTxObj memory lzTxParams = IStargateRouter.lzTxObj({\\n            dstGasForCall: 0,\\n            dstNativeAmount: 0,\\n            dstNativeAddr: abi.encodePacked(recipient)\\n        });\\n        \\n        // Execute swap\\n        router.swap{value: msg.value}(\\n            uint16(route.protocolDomain), // destination chain ID\\n            route.poolId,                  // source pool ID\\n            route.poolId,                  // destination pool ID (same for same token)\\n            payable(msg.sender),          // refund address\\n            amount,                        // amount to transfer\\n            amount * 99 / 100,            // min amount (1% slippage)\\n            lzTxParams,                   // gas params\\n            abi.encodePacked(recipient),  // recipient\\n            bytes(\\\"\\\")                     // no payload\\n        );\\n    }\\n    \\n    /**\\n     * @notice Configure a route for token transfers\\n     * @param fromToken Source token address\\n     * @param fromChainId Source chain ID\\n     * @param toToken Destination token address\\n     * @param toChainId Destination chain ID\\n     * @param route Route configuration\\n     */\\n    function configureRoute(\\n        address fromToken,\\n        uint256 fromChainId,\\n        address toToken,\\n        uint256 toChainId,\\n        Route calldata route\\n    ) external onlyOwner {\\n        require(route.protocol != Protocol.NONE, \\\"Invalid protocol\\\");\\n        require(route.bridgeContract != address(0), \\\"Invalid bridge contract\\\");\\n        \\n        bytes32 routeKey = getRouteKey(fromToken, fromChainId, toToken, toChainId);\\n        routes[routeKey] = route;\\n        \\n        emit RouteConfigured(fromToken, fromChainId, toToken, toChainId, route.protocol);\\n    }\\n    \\n    /**\\n     * @notice Set protocol contract addresses\\n     * @param protocol Protocol type\\n     * @param contractAddress Protocol contract address\\n     */\\n    function setProtocolContract(Protocol protocol, address contractAddress) external onlyOwner {\\n        require(protocol != Protocol.NONE, \\\"Invalid protocol\\\");\\n        require(contractAddress != address(0), \\\"Invalid address\\\");\\n        protocolContracts[protocol] = contractAddress;\\n    }\\n    \\n    /**\\n     * @notice Set CCTP hook receiver address for a chain\\n     * @param chainId Destination chain ID\\n     * @param hookReceiver Hook receiver contract address\\n     */\\n    function setCCTPHookReceiver(uint256 chainId, address hookReceiver) external onlyOwner {\\n        require(hookReceiver != address(0), \\\"Invalid hook receiver\\\");\\n        cctpHookReceivers[chainId] = hookReceiver;\\n    }\\n    \\n    /**\\n     * @notice Generate route key for mapping\\n     */\\n    function getRouteKey(\\n        address fromToken,\\n        uint256 fromChainId,\\n        address toToken,\\n        uint256 toChainId\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(fromToken, fromChainId, toToken, toChainId));\\n    }\\n    \\n    /**\\n     * @notice Check if a route is configured\\n     */\\n    function isRouteConfigured(\\n        address fromToken,\\n        uint256 fromChainId,\\n        address toToken,\\n        uint256 toChainId\\n    ) external view returns (bool) {\\n        bytes32 routeKey = getRouteKey(fromToken, fromChainId, toToken, toChainId);\\n        return routes[routeKey].protocol != Protocol.NONE;\\n    }\\n    \\n    /**\\n     * @notice Estimate fees for a transfer\\n     */\\n    function estimateFees(\\n        address fromToken,\\n        address toToken,\\n        uint256 amount,\\n        uint256 toChainId,\\n        address recipient\\n    ) external view returns (uint256 nativeFee) {\\n        bytes32 routeKey = getRouteKey(fromToken, block.chainid, toToken, toChainId);\\n        Route memory route = routes[routeKey];\\n        \\n        if (route.protocol == Protocol.CCTP) {\\n            return 0; // CCTP doesn't require native fees\\n        } else if (route.protocol == Protocol.LAYERZERO) {\\n            ILayerZeroEndpoint endpoint = ILayerZeroEndpoint(route.bridgeContract);\\n            bytes memory payload = abi.encode(recipient, amount);\\n            bytes memory adapterParams = abi.encodePacked(uint16(1), uint256(200000));\\n            (nativeFee, ) = endpoint.estimateFees(\\n                uint16(route.protocolDomain),\\n                address(this),\\n                payload,\\n                false,\\n                adapterParams\\n            );\\n        }\\n        // Add Stargate fee estimation if needed\\n        \\n        return nativeFee;\\n    }\\n    \\n    // Admin functions\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n    \\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n    \\n    // Emergency functions\\n    function rescueTokens(address token, uint256 amount, address to) external onlyOwner {\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n    \\n    function rescueETH(uint256 amount, address payable to) external onlyOwner {\\n        to.transfer(amount);\\n    }\\n    \\n    /**\\n     * @notice Handle LayerZero composed messages for cross-token swaps\\n     * @param _oApp The originating OApp (OFT contract)\\n     * @param _guid Unique message identifier\\n     * @param _message Encoded compose message with swap data\\n     * @param _executor Executor address (unused)\\n     * @param _extraData Additional data (unused)\\n     */\\n    function lzCompose(\\n        address _oApp,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable override nonReentrant whenNotPaused {\\n        // Security: Verify the message comes from LayerZero endpoint\\n        require(protocolContracts[Protocol.LAYERZERO] != address(0), \\\"LayerZero not configured\\\");\\n        require(msg.sender == protocolContracts[Protocol.LAYERZERO], \\\"Unauthorized composer call\\\");\\n        \\n        // TODO: Add OApp authorization check\\n        // require(authorizedOApps[_oApp], \\\"Unauthorized OApp\\\");\\n        \\n        _handleLayerZeroCompose(_oApp, _guid, _message);\\n    }\\n    \\n    /**\\n     * @notice Internal handler for LayerZero compose messages\\n     */\\n    function _handleLayerZeroCompose(\\n        address _oApp,\\n        bytes32 _guid,\\n        bytes calldata _message\\n    ) internal {\\n        // Decode the compose message using LayerZero codec\\n        // For now, we'll use a simple encoding scheme\\n        // In production, use OFTComposeMsgCodec from LayerZero\\n        \\n        try this._decodeAndExecuteCompose(_message) {\\n            // Compose executed successfully\\n        } catch {\\n            // Handle compose failure - tokens are already credited to this contract\\n            // Could implement fallback logic here\\n        }\\n    }\\n    \\n    /**\\n     * @notice Decode compose message and execute swap\\n     * @dev External function to enable try-catch error handling\\n     */\\n    function _decodeAndExecuteCompose(bytes calldata _message) external {\\n        require(msg.sender == address(this), \\\"Internal only\\\");\\n        \\n        // Decode compose message\\n        // Expected format: abi.encode(toToken, minAmountOut, recipient, swapPool)\\n        (\\n            address toToken,\\n            uint256 minAmountOut,\\n            address recipient,\\n            address swapPool\\n        ) = abi.decode(_message, (address, uint256, address, address));\\n        \\n        // Get the source token balance (tokens already received from OFT)\\n        // For this example, we'll assume it's one of our supported tokens\\n        address fromToken = _detectReceivedToken();\\n        uint256 balance = IERC20(fromToken).balanceOf(address(this));\\n        \\n        require(balance > 0, \\\"No tokens received\\\");\\n        require(swapPool != address(0), \\\"Swap pool required\\\");\\n        \\n        if (fromToken == toToken) {\\n            // Same token - just transfer\\n            IERC20(fromToken).safeTransfer(recipient, balance);\\n        } else {\\n            // Execute swap via configured DEX\\n            _executeSwap(fromToken, toToken, balance, minAmountOut, recipient, swapPool);\\n        }\\n    }\\n    \\n    /**\\n     * @notice Detect which token was received by checking balances\\n     * @dev Simple implementation - in production, use LayerZero message context\\n     */\\n    function _detectReceivedToken() internal view returns (address) {\\n        // Check common tokens for non-zero balance\\n        // This is a simplified approach - LayerZero compose messages\\n        // include the token information in the message context\\n        \\n        // For now, return a placeholder - this would be determined\\n        // from the LayerZero compose message context\\n        return address(0); // TODO: Implement proper token detection\\n    }\\n    \\n    /**\\n     * @notice Execute token swap via DEX\\n     */\\n    function _executeSwap(\\n        address fromToken,\\n        address toToken,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address recipient,\\n        address swapPool\\n    ) internal {\\n        // Approve DEX to spend tokens\\n        IERC20(fromToken).forceApprove(swapPool, amountIn);\\n        \\n        // Execute swap - using simple DEX interface\\n        // In production, this would support multiple DEX protocols\\n        IDEX dex = IDEX(swapPool);\\n        \\n        address[] memory path = new address[](2);\\n        path[0] = fromToken;\\n        path[1] = toToken;\\n        \\n        dex.swapExactTokensForTokens(\\n            amountIn,\\n            minAmountOut,\\n            path,\\n            recipient,\\n            block.timestamp + 300 // 5 minute deadline\\n        );\\n    }\\n    \\n    receive() external payable {}\\n}\\n\\n// Simple DEX interface for swaps\\ninterface IDEX {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\",\"versionPragma\":\"^0.8.22\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.6.2\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0xb0Ed1E3ECb0742B3Ef6be49770FD19A6522F4567","bytecode":"0x608034620000c657601f62002c7138819003918201601f19168301916001600160401b03831184841017620000cb57808492602094604052833981010312620000c657516001600160a01b039081811690819003620000c6578015620000ad57600080546001600160a01b03198116831782556040519316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055612b8f9081620000e28239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c806304aff38d14611a74578063066e9481146119e3578063098977e0146119a65780630ae57fab14611973578063226b0ba8146118e45780632ce1fc9b146115705780633f4ba83a146114ff57806347338bc314610a705780635c975abb14610a4b578063715018a6146109f1578063720977b0146109a55780638456cb5914610944578063899063011461051f5780638da5cb5b146104f8578063a0558c3f1461049d578063af330cff14610480578063b37fd190146103fa578063d0a1026014610261578063dad61f46146101c0578063e60efc511461019b5763f2fde38b1461010e575061000e565b346101985760203660031901126101985761012761231b565b61012f6129b2565b6001600160a01b0390811690811561017f57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b50346101985760206101b86101af3661260a565b9291909161290c565b604051908152f35b503461019857604036600319011261019857600435600581101561025d576101e6612336565b6101ee6129b2565b6101f982151561266f565b6001600160a01b031690811561022657610212906125ac565b80546001600160a01b031916909117905580f35b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b5080fd5b5060a03660031901126101985761027661231b565b5060446001600160401b0381358181116103f657610298903690600401612642565b9290916001600160a01b0390606435828116036103f2576084359081116103f2576102c7903690600401612642565b50506102d161294f565b6102d9612972565b60038552600360205280604086205416156103ae57600385526003602052604085205416330361036a57908391303b156103665783916040519485938492638990630160e01b845260206004850152816024850152848401378181018301859052601f01601f1916810103018183305af1610357575b506001805580f35b61036090612376565b3861034f565b8280fd5b6064907f556e617574686f72697a656420636f6d706f7365722063616c6c0000000000006040519162461bcd60e51b835260206004840152601a6024840152820152fd5b60405162461bcd60e51b815260206004820152601860248201527f4c617965725a65726f206e6f7420636f6e66696775726564000000000000000081840152606490fd5b8580fd5b8380fd5b50346101985760603660031901126101985761047d61046161041a61231b565b61046f61042561234c565b61042d6129b2565b60405163a9059cbb60e01b60208201526001600160a01b039091166024808301919091523560448201529283906064820190565b03601f198101845283612441565b6001600160a01b0316612a26565b80f35b50346101985760206101b8610494366125c5565b93929092612703565b503461019857604036600319011261019857808080806004356104be612336565b6104c66129b2565b829082156104ee575b6001600160a01b031690f1156104e25780f35b604051903d90823e3d90fd5b6108fc91506104cf565b5034610198578060031936011261019857546040516001600160a01b039091168152602090f35b5034610198576020366003190112610198576004356001600160401b03811161025d57610550903690600401612642565b30330361090f57816080918101031261025d5761056c81612362565b61057860408301612362565b9161058560608201612362565b6040516370a0823160e01b8152306004820152926001600160a01b0316602084602481895afa9384156109045786946108d0575b508315610896576105d46001600160a01b03831615156126c2565b8061062157505060405163a9059cbb60e01b60208201526001600160a01b03909316602484015250604482015261047d9061061c81606481015b03601f198101835282612441565b6129de565b60405163095ea7b360e01b60208083018281526001600160a01b038616602485015260448401889052959794969395919291899061066c84606481015b03601f198101865285612441565b83519082805af188513d8261087a575b505015610842575b505060405192610693846123ba565b60028452604036602086013783511561082e5786602085015283516001101561082e57604084015261012c4201421161081a5791859391602095936040519687956338ed173960e01b875260a487019260048801520135602486015260a060448601528251809152602060c48601930190865b8181106107f5575050506001600160a01b0390811660648501524261012c016084850152908390039183918591165af180156107ea57610744575080f35b3d8083833e6107538183612441565b810190602081830312610366578051906001600160401b0382116103f6570181601f82011215610366578051906001600160401b0382116107d6576020808360051b93604051906107a683870183612441565b815201928201019283116103f657602001905b8282106107c65750505080f35b81518152602091820191016107b9565b634e487b7160e01b84526041600452602484fd5b6040513d84823e3d90fd5b82516001600160a01b0316855289975088965060209485019490920191600101610706565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b87526032600452602487fd5b61061c6108739260405190602082015260018060a01b03881660248201528960448201526044815261061c816123d5565b3880610684565b90915061088e5750873b15155b388061067c565b600114610887565b60405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c9958d95a5d995960721b6044820152606490fd5b9093506020813d6020116108fc575b816108ec60209383612441565b810103126103f2575192386105b9565b3d91506108df565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e7465726e616c206f6e6c7960981b6044820152606490fd5b503461019857806003193601126101985761095d6129b2565b610965612972565b805460ff60a01b1916600160a01b1781556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a180f35b5034610198576109b76101af3661260a565b8152600260205260ff6040822054169060058210156109dd576020826040519015158152f35b634e487b7160e01b81526021600452602490fd5b5034610198578060031936011261019857610a0a6129b2565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461019857806003193601126101985760ff6020915460a01c166040519015158152f35b50610a7a366125c5565b91610a879594939561294f565b610a8f612972565b8495610a9961294f565b610aa1612972565b81156114c5576001600160a01b0384161561148c5746831461144757610ac98382468861290c565b956005546000198114611433576001810160055560405160208101913360601b8352603482015242605482015260548152610b03816123d5565b5190209681526002602052604081209060405191610b208361239f565b8054600560ff8216101561141f5760ff81168452600881901c63ffffffff16602085015260281c6001600160a01b039081166040850152600182015460608501526002820154166080840152610b789060030161249c565b60a0830152815160058110156113cf57156113e357610bce6040516323b872dd60e01b602082015233602482015230604482015285606482015260648152610bbf816123f0565b6001600160a01b038916612a26565b815160058110156113cf57600103610d6f57506001600160a01b0382811690871603610d2a57604081015188906020906001600160a01b0390811690610c1990879083908c16612a8e565b818401516040516337e9a82760e11b81526004810188905263ffffffff90911660248201526001600160a01b0389811660448301528a16606482015292839160849183915af18015610d1f57610cf0575b505b519660058810156109dd575091610cbd9391602097936040519660018060a01b0316875260018060a01b0316888701526040860152606085015260018060a01b0316608084015260a0830190612541565b817fd4c70693fd7b756f25f0274cd386472ab2e8654609a1aca260cee1e9bf63459b60c03393a360018055604051908152f35b610d119060203d602011610d18575b610d098183612441565b810190612993565b5038610c6a565b503d610cff565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260206004820152601860248201527f434354502072657175697265732073616d6520746f6b656e00000000000000006044820152606490fd5b815160058110156113cf57600203610fde576001600160a01b0387811690841614610f99576080820151610dad906001600160a01b031615156126c2565b848952600460205260408920546001600160a01b03168015610f5457898360208a9460a48985610e688b8f610e5a90610e21868e8c604060018060a01b03910151169a6002815260038d52604060018060a01b03912054169c604060018060a01b03910151169060018060a01b0316612a8e565b6080808f0151604080516001600160a01b039687168d8201908152602081019f909f52938616908e015290931660608c0152998a920190565b03601f198101895288612441565b63ffffffff858b01511693604051998a958694637c2b6edb60e11b86526004860152602485015289604485015260018060a01b031660648401528860848401525af1928315610f4957610ef894602094610f2c575b508c63ffffffff8588015116604051968795869485936302e91a6f60e21b855260048501526024840152606060448401526064830190612587565b03925af18015610d1f57610f0d575b50610c6c565b610f259060203d602011610d1857610d098183612441565b5038610f07565b610f4290853d8711610d1857610d098183612441565b5038610ebd565b6040513d8e823e3d90fd5b60405162461bcd60e51b815260206004820152601c60248201527f486f6f6b207265636569766572206e6f7420636f6e66696775726564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f55736520726567756c6172204343545020666f722073616d6520746f6b656e006044820152606490fd5b815160058110156113cf576003036111ea5750604081015188906001600160a01b03908116908881169085161415806111d4575b606090156111965750608083810151604080516001600160a01b03888116602083019081529282018790528b81166060830152909216928201929092523092610461916110db906110a7906110b7906082906110718160a0810161060e565b8097604051948592600160f11b602085015262030d406022850152620493e060428501528c606285015251809285850190612564565b8101036062810184520182612441565b935b6040519384918760208401528b60408401526060808401526080830190612587565b61ffff60208701511693604051906020820152602081526110fb8161240b565b813b156103f25761114b946111666111389488966040519889978896879662c5803160e81b8852600488015260c0602488015260c4870190612587565b6003199384878303016044880152612587565b913360648601528860848601528483030160a4850152612587565b039134905af180156107ea5761117e575b5050610c6c565b61118790612376565b611192578738611177565b8780fd5b604051600160f01b602082015262030d4060228083019190915281526001600160a01b03891692610461916110db906111ce816123ba565b936110b9565b5060808301516001600160a01b03161515611012565b815160058110156113cf576004036113935760408201516001600160a01b039081169061121c90869083908b16612a8e565b6040516001600160601b03198860601b1660208201526014815261123f8161240b565b6040519061124c826123ba565b838252836020830152604082015261ffff60208501511660608501519187606381020460630361137f57604051906001600160601b03198b60601b1660208301526014825261129a8261240b565b604051906112a782612426565b868252853b1561137b57926113506063969388969361134061132d60408f99606482519d8e9c8d9b8c9b6327efc43f60e21b8d5260048d01528060248d015260448c015233838c01528060848c0152020460a489015261012060c48901528051610124890152602081015161014489015201516060610164880152610184870190612587565b60031993848783030160e4880152612587565b9184830301610104850152612587565b039134905af180156107ea57611367575050610c6c565b61137391929950612376565b963880611177565b8680fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b8152602060048201526014602482015273155b9cdd5c1c1bdc9d1959081c1c9bdd1bd8dbdb60621b6044820152606490fd5b634e487b7160e01b82526021600452602482fd5b60405162461bcd60e51b8152602060048201526014602482015273149bdd5d19481b9bdd0818dbdb999a59dd5c995960621b6044820152606490fd5b634e487b7160e01b83526021600452602483fd5b634e487b7160e01b82526011600452602482fd5b60405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f74207472616e7366657220746f2073616d6520636861696e0000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606490fd5b50346101985780600319360112610198576115186129b2565b805460ff8160a01c161561155e5760ff60a01b191681556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b604051638dfc202b60e01b8152600490fd5b50346101985760031960a03682011261025d5761158b61231b565b6024359061159761234c565b9060643593608435906001600160401b03908183116111925760c083360391820112611192576115c56129b2565b600583600401351015611192576115e18360040135151561266f565b60448301916001600160a01b036115f7846126ae565b161561189f576116098887898861290c565b89526002602052604089209283549060248601359063ffffffff8216820361189b5764ffffffff009065010000000000600160c81b0390611649906126ae565b60281b169260ff8860040135169066ffffffffffffff60c81b16179160081b16171783556001906064850135828501556002840160018060a01b03611690608488016126ae565b82546001600160a01b031916911617905560a485013592602219018312156118975760048386010135116118935760048285010135360360248386010113611893576116df6003840154612462565b601f8111611841575b508890601f60048487010135116001146117925792600361177493604096937f071d41edc8350121eb532bf7a0c10bb42f80fb0720f02ebda24f591acedc6a0398968d9160048488010135611782575b5060048387010135901b9160046000199187010135841b1c1916179101555b83516001600160a01b039096168652602086019060040135612541565b6001600160a01b031692a480f35b8684010160240135915038611738565b600384018a5260208a2090929185830160040135601f19168b5b8181106118265750936004847f071d41edc8350121eb532bf7a0c10bb42f80fb0720f02ebda24f591acedc6a0399979460039461177498848c9960409d01013511611803575b505085010135811b01910155611757565b602460001960f886868c010135891b161c1991848a0101013516905538806117f2565b878501830160240135845592850192602092830192016117ac565b600384018a526020808b2086850160040135601f810160051c820193919211611889575b601f0160051c019082905b82811061187e5750506116e8565b8b8155018290611870565b9091508190611865565b8880fd5b8980fd5b8b80fd5b60405162461bcd60e51b815260206004820152601760248201527f496e76616c69642062726964676520636f6e74726163740000000000000000006044820152606490fd5b5034610198576040366003190112610198576118fe612336565b6119066129b2565b6001600160a01b03168015611936576004803583526020526040822080546001600160a01b031916909117905580f35b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103437b7b5903932b1b2b4bb32b960591b6044820152606490fd5b503461019857602036600319011261019857602090600435815260048252604060018060a01b0391205416604051908152f35b503461019857602036600319011261019857600435600581101561025d576020906001600160a01b03906119d9906125ac565b5416604051908152f35b50346101985760203660031901126101985760409060043581526002602052208054611a7060018060a01b0392600181015490611a29600386600284015416920161249c565b916040519585611a3d8860ff819916612541565b63ffffffff8160081c16602088015260281c1660408601526060850152608084015260c060a084015260c0830190612587565b0390f35b5060e036600319011261019857611a8961231b565b90611a92612336565b916084356001600160a01b038116900361025d576001600160401b0360c4351161025d5736602360c43501121561025d576001600160401b0360c435600401351161230757611af2600460c4350135601f01601f19166020016080612441565b600460c4359081013560808190523691016024011161025d5760c43560048101359060240160a03781602060c4356004013560800101528192611b3361294f565b611b3b612972565b604435156114c5576084356001600160a01b03161561148c57466064351461144757611b6b60643582468561290c565b9260055460001981146114335760018101600555604051903360601b6020830152603482015242605482015260548152611ba4816123d5565b602081519101209381526002602052604081209060405191611bc58361239f565b8054600560ff8216101561141f5760ff81168452600881901c63ffffffff16602085015260281c6001600160a01b039081166040850152600182015460608501526002820154166080840152611c1d9060030161249c565b60a0830152815160058110156113cf57156113e357611c756040516323b872dd60e01b6020820152336024820152306044820152604435606482015260648152611c66816123f0565b6001600160a01b038616612a26565b815160058110156113cf57600103611d8e57506001600160a01b0382811690841603610d2a57604081015185906020906001600160a01b0390811690611cc2906044359083908916612a8e565b608463ffffffff838601511660405194859384926337e9a82760e11b84526044356004850152602484015260018060a01b03843516604484015260018060a01b038a1660648401525af1801561090457611d6f575b505b519360058510156109dd5750604080516001600160a01b03938416815291831660208381019190915260443591830191909152606435606083015260843590921660808201529092610cbd9060a0830190612541565b611d879060203d602011610d1857610d098183612441565b5038611d17565b815160058110156113cf57600203611f56576001600160a01b0384811690841614610f99576080820151611dcc906001600160a01b031615156126c2565b6064358652600460205260408620546001600160a01b03168015610f545760408381018051600285526003602090815292909420549051899461065e936001600160a01b0393841693909291811691611e2d91604435918116908c16612a8e565b608087810151604080516001600160a01b038c811687830190815260a435602082015260843582169381019390935290921660608201529095611e709287920190565b60a463ffffffff83890151166040519788938492637c2b6edb60e11b84526044356004850152602484015288604484015260018060a01b038d1660648401528860848401525af1928315610d1f57611f0594602094611f39575b508963ffffffff8588015116604051968795869485936302e91a6f60e21b855260048501526024840152606060448401526064830190612587565b03925af1801561090457611f1a575b50611d19565b611f329060203d602011610d1857610d098183612441565b5038611f14565b611f4f90853d8711610d1857610d098183612441565b5038611eca565b815160058110156113cf5760030361215b57506040810151859061065e906001600160a01b0390811690868116908616141580612145575b606090156121085750608084810151604080516001600160a01b038981166020830190815260a43593830193909352608435811660608301529092169282019290925230929061204c906110a79061202690608290611ff08160a0810161060e565b8096604051948592600160f11b602085015262030d406022850152620493e060428501528c606285015251809285850190612564565b925b60405195869186602084015260443560408401526060808401526080830190612587565b61ffff602087015116926040519060208201526020815261206c8161240b565b813b156103f25785936120d86120a8946120ba6040519889978896879662c5803160e81b8852600488015260c0602488015260c4870190612587565b85810360031901604487015290612587565b903360648501528760848501526003198483030160a4850152612587565b039134905af180156107ea576120f0575b5050611d19565b6120f990612376565b6121045784386120e9565b8480fd5b604051600160f01b602082015262030d4060228083019190915281526084356001600160a01b0316929061204c9061213f816123ba565b92612028565b5060808401516001600160a01b03161515611f8e565b815160058110156113cf576004036113935760408201516001600160a01b039081169061218f906044359083908816612a8e565b60405160843560601b6bffffffffffffffffffffffff1916602082015260148152906121ba8261240b565b604051916121c7836123ba565b838352836020840152604083015261ffff6020850151166060850151906044356063604435020460630361137f5760405160843560601b6bffffffffffffffffffffffff191660208201526014815261221f8161240b565b6040519061222c82612426565b868252843b1561137b57916122dc60409694926122c98997956122b78a519a8b998a9889986327efc43f60e21b8a5260048a01528060248a01526044890152336064890152604435608489015260646063604435020460a489015261012060c48901528051610124890152602081015161014489015201516060610164880152610184870190612587565b8581036003190160e487015290612587565b8381036003190161010485015290612587565b039134905af180156107ea576122f3575050611d19565b6122ff91929650612376565b9338806120e9565b634e487b7160e01b82526041600452602482fd5b600435906001600160a01b038216820361233157565b600080fd5b602435906001600160a01b038216820361233157565b604435906001600160a01b038216820361233157565b35906001600160a01b038216820361233157565b6001600160401b03811161238957604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761238957604052565b606081019081106001600160401b0382111761238957604052565b608081019081106001600160401b0382111761238957604052565b60a081019081106001600160401b0382111761238957604052565b604081019081106001600160401b0382111761238957604052565b602081019081106001600160401b0382111761238957604052565b90601f801991011681019081106001600160401b0382111761238957604052565b90600182811c92168015612492575b602083101461247c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612471565b906040519182600082546124af81612462565b9081845260209460019160018116908160001461251f57506001146124e0575b5050506124de92500383612441565b565b600090815285812095935091905b8183106125075750506124de93508201013880806124cf565b855488840185015294850194879450918301916124ee565b925050506124de94925060ff191682840152151560051b8201013880806124cf565b90600582101561254e5752565b634e487b7160e01b600052602160045260246000fd5b60005b8381106125775750506000910152565b8181015183820152602001612567565b906020916125a081518092818552858086019101612564565b601f01601f1916010190565b600581101561254e576000526003602052604060002090565b60a0906003190112612331576001600160a01b036004358181168103612331579160243582811681036123315791604435916064359160843590811681036123315790565b6080906003190112612331576001600160a01b0360043581811681036123315791602435916044359081168103612331579060643590565b9181601f84011215612331578235916001600160401b038311612331576020838186019501011161233157565b1561267657565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081c1c9bdd1bd8dbdb60821b6044820152606490fd5b356001600160a01b03811681036123315790565b156126c957565b60405162461bcd60e51b815260206004820152601260248201527114ddd85c081c1bdbdb081c995c5d5a5c995960721b6044820152606490fd5b6000949385939261271592469061290c565b845260026020526040908185209382519161272f8361239f565b855460ff811660058110156128f8578452602084019363ffffffff8260081c168552612785600360018060a01b03998a8985019560281c168552600181015460608501528a60028201541660808501520161249c565b60a0820152805160058110156128e4576001036127a757505050505050505090565b9793949596975160058110156128d0576003146127ca575b505050505050905090565b5185516001600160a01b039093166020840152604083019190915293959294509092859261285c92911690612802816060810161060e565b61ffff845196600160f01b602089015262030d40602289015260228852612828886123ba565b511661287485519788958694859463040a7bb160e41b8652600486015230602486015260a0604486015260a4850190612587565b90886064850152600319848303016084850152612587565b03915afa9283156128c6578193612895575b505050803880808080806127bf565b9091809350813d83116128bf575b6128ad8183612441565b81010312610198575051388080612886565b503d6128a3565b51903d90823e3d90fd5b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b8a52602160045260248afd5b634e487b7160e01b89526021600452602489fd5b9290926040519260208401946001600160601b0319809360601b168652603485015260601b166054830152606882015260688152612949816123f0565b51902090565b600260015414612960576002600155565b604051633ee5aeb560e01b8152600490fd5b60ff60005460a01c1661298157565b60405163d93c066560e01b8152600490fd5b9081602091031261233157516001600160401b03811681036123315790565b6000546001600160a01b031633036129c657565b60405163118cdaa760e01b8152336004820152602490fd5b602060008282829451910182805af1156104e25780513d612a1d5750803b155b612a055750565b60249060405190635274afe760e01b82526004820152fd5b600114156129fe565b906000602091828151910182855af115612a82576000513d612a7957506001600160a01b0381163b155b612a575750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612a50565b6040513d6000823e3d90fd5b60405163095ea7b360e01b60208083018281526001600160a01b03861660248501526044808501979097529583529094919391600090612acf606487612441565b85519082865af16000513d82612b34575b505015612aee575b50505050565b612b2b93612b269160405191602083015260018060a01b031660248201526000604482015260448152612b20816123d5565b82612a26565b612a26565b38808080612ae8565b909150612b5157506001600160a01b0382163b15155b3880612ae0565b600114612b4a56fea2646970667358221220514225c43521df49e1cb3997c0e98f10717b1deef0cc6d15527d794d6566830564736f6c63430008160033","deployedBytecode":"0x6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c806304aff38d14611a74578063066e9481146119e3578063098977e0146119a65780630ae57fab14611973578063226b0ba8146118e45780632ce1fc9b146115705780633f4ba83a146114ff57806347338bc314610a705780635c975abb14610a4b578063715018a6146109f1578063720977b0146109a55780638456cb5914610944578063899063011461051f5780638da5cb5b146104f8578063a0558c3f1461049d578063af330cff14610480578063b37fd190146103fa578063d0a1026014610261578063dad61f46146101c0578063e60efc511461019b5763f2fde38b1461010e575061000e565b346101985760203660031901126101985761012761231b565b61012f6129b2565b6001600160a01b0390811690811561017f57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b50346101985760206101b86101af3661260a565b9291909161290c565b604051908152f35b503461019857604036600319011261019857600435600581101561025d576101e6612336565b6101ee6129b2565b6101f982151561266f565b6001600160a01b031690811561022657610212906125ac565b80546001600160a01b031916909117905580f35b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b5080fd5b5060a03660031901126101985761027661231b565b5060446001600160401b0381358181116103f657610298903690600401612642565b9290916001600160a01b0390606435828116036103f2576084359081116103f2576102c7903690600401612642565b50506102d161294f565b6102d9612972565b60038552600360205280604086205416156103ae57600385526003602052604085205416330361036a57908391303b156103665783916040519485938492638990630160e01b845260206004850152816024850152848401378181018301859052601f01601f1916810103018183305af1610357575b506001805580f35b61036090612376565b3861034f565b8280fd5b6064907f556e617574686f72697a656420636f6d706f7365722063616c6c0000000000006040519162461bcd60e51b835260206004840152601a6024840152820152fd5b60405162461bcd60e51b815260206004820152601860248201527f4c617965725a65726f206e6f7420636f6e66696775726564000000000000000081840152606490fd5b8580fd5b8380fd5b50346101985760603660031901126101985761047d61046161041a61231b565b61046f61042561234c565b61042d6129b2565b60405163a9059cbb60e01b60208201526001600160a01b039091166024808301919091523560448201529283906064820190565b03601f198101845283612441565b6001600160a01b0316612a26565b80f35b50346101985760206101b8610494366125c5565b93929092612703565b503461019857604036600319011261019857808080806004356104be612336565b6104c66129b2565b829082156104ee575b6001600160a01b031690f1156104e25780f35b604051903d90823e3d90fd5b6108fc91506104cf565b5034610198578060031936011261019857546040516001600160a01b039091168152602090f35b5034610198576020366003190112610198576004356001600160401b03811161025d57610550903690600401612642565b30330361090f57816080918101031261025d5761056c81612362565b61057860408301612362565b9161058560608201612362565b6040516370a0823160e01b8152306004820152926001600160a01b0316602084602481895afa9384156109045786946108d0575b508315610896576105d46001600160a01b03831615156126c2565b8061062157505060405163a9059cbb60e01b60208201526001600160a01b03909316602484015250604482015261047d9061061c81606481015b03601f198101835282612441565b6129de565b60405163095ea7b360e01b60208083018281526001600160a01b038616602485015260448401889052959794969395919291899061066c84606481015b03601f198101865285612441565b83519082805af188513d8261087a575b505015610842575b505060405192610693846123ba565b60028452604036602086013783511561082e5786602085015283516001101561082e57604084015261012c4201421161081a5791859391602095936040519687956338ed173960e01b875260a487019260048801520135602486015260a060448601528251809152602060c48601930190865b8181106107f5575050506001600160a01b0390811660648501524261012c016084850152908390039183918591165af180156107ea57610744575080f35b3d8083833e6107538183612441565b810190602081830312610366578051906001600160401b0382116103f6570181601f82011215610366578051906001600160401b0382116107d6576020808360051b93604051906107a683870183612441565b815201928201019283116103f657602001905b8282106107c65750505080f35b81518152602091820191016107b9565b634e487b7160e01b84526041600452602484fd5b6040513d84823e3d90fd5b82516001600160a01b0316855289975088965060209485019490920191600101610706565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b87526032600452602487fd5b61061c6108739260405190602082015260018060a01b03881660248201528960448201526044815261061c816123d5565b3880610684565b90915061088e5750873b15155b388061067c565b600114610887565b60405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c9958d95a5d995960721b6044820152606490fd5b9093506020813d6020116108fc575b816108ec60209383612441565b810103126103f2575192386105b9565b3d91506108df565b6040513d88823e3d90fd5b60405162461bcd60e51b815260206004820152600d60248201526c496e7465726e616c206f6e6c7960981b6044820152606490fd5b503461019857806003193601126101985761095d6129b2565b610965612972565b805460ff60a01b1916600160a01b1781556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a180f35b5034610198576109b76101af3661260a565b8152600260205260ff6040822054169060058210156109dd576020826040519015158152f35b634e487b7160e01b81526021600452602490fd5b5034610198578060031936011261019857610a0a6129b2565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461019857806003193601126101985760ff6020915460a01c166040519015158152f35b50610a7a366125c5565b91610a879594939561294f565b610a8f612972565b8495610a9961294f565b610aa1612972565b81156114c5576001600160a01b0384161561148c5746831461144757610ac98382468861290c565b956005546000198114611433576001810160055560405160208101913360601b8352603482015242605482015260548152610b03816123d5565b5190209681526002602052604081209060405191610b208361239f565b8054600560ff8216101561141f5760ff81168452600881901c63ffffffff16602085015260281c6001600160a01b039081166040850152600182015460608501526002820154166080840152610b789060030161249c565b60a0830152815160058110156113cf57156113e357610bce6040516323b872dd60e01b602082015233602482015230604482015285606482015260648152610bbf816123f0565b6001600160a01b038916612a26565b815160058110156113cf57600103610d6f57506001600160a01b0382811690871603610d2a57604081015188906020906001600160a01b0390811690610c1990879083908c16612a8e565b818401516040516337e9a82760e11b81526004810188905263ffffffff90911660248201526001600160a01b0389811660448301528a16606482015292839160849183915af18015610d1f57610cf0575b505b519660058810156109dd575091610cbd9391602097936040519660018060a01b0316875260018060a01b0316888701526040860152606085015260018060a01b0316608084015260a0830190612541565b817fd4c70693fd7b756f25f0274cd386472ab2e8654609a1aca260cee1e9bf63459b60c03393a360018055604051908152f35b610d119060203d602011610d18575b610d098183612441565b810190612993565b5038610c6a565b503d610cff565b6040513d8b823e3d90fd5b60405162461bcd60e51b815260206004820152601860248201527f434354502072657175697265732073616d6520746f6b656e00000000000000006044820152606490fd5b815160058110156113cf57600203610fde576001600160a01b0387811690841614610f99576080820151610dad906001600160a01b031615156126c2565b848952600460205260408920546001600160a01b03168015610f5457898360208a9460a48985610e688b8f610e5a90610e21868e8c604060018060a01b03910151169a6002815260038d52604060018060a01b03912054169c604060018060a01b03910151169060018060a01b0316612a8e565b6080808f0151604080516001600160a01b039687168d8201908152602081019f909f52938616908e015290931660608c0152998a920190565b03601f198101895288612441565b63ffffffff858b01511693604051998a958694637c2b6edb60e11b86526004860152602485015289604485015260018060a01b031660648401528860848401525af1928315610f4957610ef894602094610f2c575b508c63ffffffff8588015116604051968795869485936302e91a6f60e21b855260048501526024840152606060448401526064830190612587565b03925af18015610d1f57610f0d575b50610c6c565b610f259060203d602011610d1857610d098183612441565b5038610f07565b610f4290853d8711610d1857610d098183612441565b5038610ebd565b6040513d8e823e3d90fd5b60405162461bcd60e51b815260206004820152601c60248201527f486f6f6b207265636569766572206e6f7420636f6e66696775726564000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f55736520726567756c6172204343545020666f722073616d6520746f6b656e006044820152606490fd5b815160058110156113cf576003036111ea5750604081015188906001600160a01b03908116908881169085161415806111d4575b606090156111965750608083810151604080516001600160a01b03888116602083019081529282018790528b81166060830152909216928201929092523092610461916110db906110a7906110b7906082906110718160a0810161060e565b8097604051948592600160f11b602085015262030d406022850152620493e060428501528c606285015251809285850190612564565b8101036062810184520182612441565b935b6040519384918760208401528b60408401526060808401526080830190612587565b61ffff60208701511693604051906020820152602081526110fb8161240b565b813b156103f25761114b946111666111389488966040519889978896879662c5803160e81b8852600488015260c0602488015260c4870190612587565b6003199384878303016044880152612587565b913360648601528860848601528483030160a4850152612587565b039134905af180156107ea5761117e575b5050610c6c565b61118790612376565b611192578738611177565b8780fd5b604051600160f01b602082015262030d4060228083019190915281526001600160a01b03891692610461916110db906111ce816123ba565b936110b9565b5060808301516001600160a01b03161515611012565b815160058110156113cf576004036113935760408201516001600160a01b039081169061121c90869083908b16612a8e565b6040516001600160601b03198860601b1660208201526014815261123f8161240b565b6040519061124c826123ba565b838252836020830152604082015261ffff60208501511660608501519187606381020460630361137f57604051906001600160601b03198b60601b1660208301526014825261129a8261240b565b604051906112a782612426565b868252853b1561137b57926113506063969388969361134061132d60408f99606482519d8e9c8d9b8c9b6327efc43f60e21b8d5260048d01528060248d015260448c015233838c01528060848c0152020460a489015261012060c48901528051610124890152602081015161014489015201516060610164880152610184870190612587565b60031993848783030160e4880152612587565b9184830301610104850152612587565b039134905af180156107ea57611367575050610c6c565b61137391929950612376565b963880611177565b8680fd5b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b8152602060048201526014602482015273155b9cdd5c1c1bdc9d1959081c1c9bdd1bd8dbdb60621b6044820152606490fd5b634e487b7160e01b82526021600452602482fd5b60405162461bcd60e51b8152602060048201526014602482015273149bdd5d19481b9bdd0818dbdb999a59dd5c995960621b6044820152606490fd5b634e487b7160e01b83526021600452602483fd5b634e487b7160e01b82526011600452602482fd5b60405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f74207472616e7366657220746f2073616d6520636861696e0000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081c9958da5c1a595b9d607a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606490fd5b50346101985780600319360112610198576115186129b2565b805460ff8160a01c161561155e5760ff60a01b191681556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b604051638dfc202b60e01b8152600490fd5b50346101985760031960a03682011261025d5761158b61231b565b6024359061159761234c565b9060643593608435906001600160401b03908183116111925760c083360391820112611192576115c56129b2565b600583600401351015611192576115e18360040135151561266f565b60448301916001600160a01b036115f7846126ae565b161561189f576116098887898861290c565b89526002602052604089209283549060248601359063ffffffff8216820361189b5764ffffffff009065010000000000600160c81b0390611649906126ae565b60281b169260ff8860040135169066ffffffffffffff60c81b16179160081b16171783556001906064850135828501556002840160018060a01b03611690608488016126ae565b82546001600160a01b031916911617905560a485013592602219018312156118975760048386010135116118935760048285010135360360248386010113611893576116df6003840154612462565b601f8111611841575b508890601f60048487010135116001146117925792600361177493604096937f071d41edc8350121eb532bf7a0c10bb42f80fb0720f02ebda24f591acedc6a0398968d9160048488010135611782575b5060048387010135901b9160046000199187010135841b1c1916179101555b83516001600160a01b039096168652602086019060040135612541565b6001600160a01b031692a480f35b8684010160240135915038611738565b600384018a5260208a2090929185830160040135601f19168b5b8181106118265750936004847f071d41edc8350121eb532bf7a0c10bb42f80fb0720f02ebda24f591acedc6a0399979460039461177498848c9960409d01013511611803575b505085010135811b01910155611757565b602460001960f886868c010135891b161c1991848a0101013516905538806117f2565b878501830160240135845592850192602092830192016117ac565b600384018a526020808b2086850160040135601f810160051c820193919211611889575b601f0160051c019082905b82811061187e5750506116e8565b8b8155018290611870565b9091508190611865565b8880fd5b8980fd5b8b80fd5b60405162461bcd60e51b815260206004820152601760248201527f496e76616c69642062726964676520636f6e74726163740000000000000000006044820152606490fd5b5034610198576040366003190112610198576118fe612336565b6119066129b2565b6001600160a01b03168015611936576004803583526020526040822080546001600160a01b031916909117905580f35b60405162461bcd60e51b815260206004820152601560248201527424b73b30b634b2103437b7b5903932b1b2b4bb32b960591b6044820152606490fd5b503461019857602036600319011261019857602090600435815260048252604060018060a01b0391205416604051908152f35b503461019857602036600319011261019857600435600581101561025d576020906001600160a01b03906119d9906125ac565b5416604051908152f35b50346101985760203660031901126101985760409060043581526002602052208054611a7060018060a01b0392600181015490611a29600386600284015416920161249c565b916040519585611a3d8860ff819916612541565b63ffffffff8160081c16602088015260281c1660408601526060850152608084015260c060a084015260c0830190612587565b0390f35b5060e036600319011261019857611a8961231b565b90611a92612336565b916084356001600160a01b038116900361025d576001600160401b0360c4351161025d5736602360c43501121561025d576001600160401b0360c435600401351161230757611af2600460c4350135601f01601f19166020016080612441565b600460c4359081013560808190523691016024011161025d5760c43560048101359060240160a03781602060c4356004013560800101528192611b3361294f565b611b3b612972565b604435156114c5576084356001600160a01b03161561148c57466064351461144757611b6b60643582468561290c565b9260055460001981146114335760018101600555604051903360601b6020830152603482015242605482015260548152611ba4816123d5565b602081519101209381526002602052604081209060405191611bc58361239f565b8054600560ff8216101561141f5760ff81168452600881901c63ffffffff16602085015260281c6001600160a01b039081166040850152600182015460608501526002820154166080840152611c1d9060030161249c565b60a0830152815160058110156113cf57156113e357611c756040516323b872dd60e01b6020820152336024820152306044820152604435606482015260648152611c66816123f0565b6001600160a01b038616612a26565b815160058110156113cf57600103611d8e57506001600160a01b0382811690841603610d2a57604081015185906020906001600160a01b0390811690611cc2906044359083908916612a8e565b608463ffffffff838601511660405194859384926337e9a82760e11b84526044356004850152602484015260018060a01b03843516604484015260018060a01b038a1660648401525af1801561090457611d6f575b505b519360058510156109dd5750604080516001600160a01b03938416815291831660208381019190915260443591830191909152606435606083015260843590921660808201529092610cbd9060a0830190612541565b611d879060203d602011610d1857610d098183612441565b5038611d17565b815160058110156113cf57600203611f56576001600160a01b0384811690841614610f99576080820151611dcc906001600160a01b031615156126c2565b6064358652600460205260408620546001600160a01b03168015610f545760408381018051600285526003602090815292909420549051899461065e936001600160a01b0393841693909291811691611e2d91604435918116908c16612a8e565b608087810151604080516001600160a01b038c811687830190815260a435602082015260843582169381019390935290921660608201529095611e709287920190565b60a463ffffffff83890151166040519788938492637c2b6edb60e11b84526044356004850152602484015288604484015260018060a01b038d1660648401528860848401525af1928315610d1f57611f0594602094611f39575b508963ffffffff8588015116604051968795869485936302e91a6f60e21b855260048501526024840152606060448401526064830190612587565b03925af1801561090457611f1a575b50611d19565b611f329060203d602011610d1857610d098183612441565b5038611f14565b611f4f90853d8711610d1857610d098183612441565b5038611eca565b815160058110156113cf5760030361215b57506040810151859061065e906001600160a01b0390811690868116908616141580612145575b606090156121085750608084810151604080516001600160a01b038981166020830190815260a43593830193909352608435811660608301529092169282019290925230929061204c906110a79061202690608290611ff08160a0810161060e565b8096604051948592600160f11b602085015262030d406022850152620493e060428501528c606285015251809285850190612564565b925b60405195869186602084015260443560408401526060808401526080830190612587565b61ffff602087015116926040519060208201526020815261206c8161240b565b813b156103f25785936120d86120a8946120ba6040519889978896879662c5803160e81b8852600488015260c0602488015260c4870190612587565b85810360031901604487015290612587565b903360648501528760848501526003198483030160a4850152612587565b039134905af180156107ea576120f0575b5050611d19565b6120f990612376565b6121045784386120e9565b8480fd5b604051600160f01b602082015262030d4060228083019190915281526084356001600160a01b0316929061204c9061213f816123ba565b92612028565b5060808401516001600160a01b03161515611f8e565b815160058110156113cf576004036113935760408201516001600160a01b039081169061218f906044359083908816612a8e565b60405160843560601b6bffffffffffffffffffffffff1916602082015260148152906121ba8261240b565b604051916121c7836123ba565b838352836020840152604083015261ffff6020850151166060850151906044356063604435020460630361137f5760405160843560601b6bffffffffffffffffffffffff191660208201526014815261221f8161240b565b6040519061222c82612426565b868252843b1561137b57916122dc60409694926122c98997956122b78a519a8b998a9889986327efc43f60e21b8a5260048a01528060248a01526044890152336064890152604435608489015260646063604435020460a489015261012060c48901528051610124890152602081015161014489015201516060610164880152610184870190612587565b8581036003190160e487015290612587565b8381036003190161010485015290612587565b039134905af180156107ea576122f3575050611d19565b6122ff91929650612376565b9338806120e9565b634e487b7160e01b82526041600452602482fd5b600435906001600160a01b038216820361233157565b600080fd5b602435906001600160a01b038216820361233157565b604435906001600160a01b038216820361233157565b35906001600160a01b038216820361233157565b6001600160401b03811161238957604052565b634e487b7160e01b600052604160045260246000fd5b60c081019081106001600160401b0382111761238957604052565b606081019081106001600160401b0382111761238957604052565b608081019081106001600160401b0382111761238957604052565b60a081019081106001600160401b0382111761238957604052565b604081019081106001600160401b0382111761238957604052565b602081019081106001600160401b0382111761238957604052565b90601f801991011681019081106001600160401b0382111761238957604052565b90600182811c92168015612492575b602083101461247c57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612471565b906040519182600082546124af81612462565b9081845260209460019160018116908160001461251f57506001146124e0575b5050506124de92500383612441565b565b600090815285812095935091905b8183106125075750506124de93508201013880806124cf565b855488840185015294850194879450918301916124ee565b925050506124de94925060ff191682840152151560051b8201013880806124cf565b90600582101561254e5752565b634e487b7160e01b600052602160045260246000fd5b60005b8381106125775750506000910152565b8181015183820152602001612567565b906020916125a081518092818552858086019101612564565b601f01601f1916010190565b600581101561254e576000526003602052604060002090565b60a0906003190112612331576001600160a01b036004358181168103612331579160243582811681036123315791604435916064359160843590811681036123315790565b6080906003190112612331576001600160a01b0360043581811681036123315791602435916044359081168103612331579060643590565b9181601f84011215612331578235916001600160401b038311612331576020838186019501011161233157565b1561267657565b60405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a59081c1c9bdd1bd8dbdb60821b6044820152606490fd5b356001600160a01b03811681036123315790565b156126c957565b60405162461bcd60e51b815260206004820152601260248201527114ddd85c081c1bdbdb081c995c5d5a5c995960721b6044820152606490fd5b6000949385939261271592469061290c565b845260026020526040908185209382519161272f8361239f565b855460ff811660058110156128f8578452602084019363ffffffff8260081c168552612785600360018060a01b03998a8985019560281c168552600181015460608501528a60028201541660808501520161249c565b60a0820152805160058110156128e4576001036127a757505050505050505090565b9793949596975160058110156128d0576003146127ca575b505050505050905090565b5185516001600160a01b039093166020840152604083019190915293959294509092859261285c92911690612802816060810161060e565b61ffff845196600160f01b602089015262030d40602289015260228852612828886123ba565b511661287485519788958694859463040a7bb160e41b8652600486015230602486015260a0604486015260a4850190612587565b90886064850152600319848303016084850152612587565b03915afa9283156128c6578193612895575b505050803880808080806127bf565b9091809350813d83116128bf575b6128ad8183612441565b81010312610198575051388080612886565b503d6128a3565b51903d90823e3d90fd5b634e487b7160e01b85526021600452602485fd5b634e487b7160e01b8a52602160045260248afd5b634e487b7160e01b89526021600452602489fd5b9290926040519260208401946001600160601b0319809360601b168652603485015260601b166054830152606882015260688152612949816123f0565b51902090565b600260015414612960576002600155565b604051633ee5aeb560e01b8152600490fd5b60ff60005460a01c1661298157565b60405163d93c066560e01b8152600490fd5b9081602091031261233157516001600160401b03811681036123315790565b6000546001600160a01b031633036129c657565b60405163118cdaa760e01b8152336004820152602490fd5b602060008282829451910182805af1156104e25780513d612a1d5750803b155b612a055750565b60249060405190635274afe760e01b82526004820152fd5b600114156129fe565b906000602091828151910182855af115612a82576000513d612a7957506001600160a01b0381163b155b612a575750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b60011415612a50565b6040513d6000823e3d90fd5b60405163095ea7b360e01b60208083018281526001600160a01b03861660248501526044808501979097529583529094919391600090612acf606487612441565b85519082865af16000513d82612b34575b505015612aee575b50505050565b612b2b93612b269160405191602083015260018060a01b031660248201526000604482015260448152612b20816123d5565b82612a26565b612a26565b38808080612ae8565b909150612b5157506001600160a01b0382163b15155b3880612ae0565b600114612b4a56fea2646970667358221220514225c43521df49e1cb3997c0e98f10717b1deef0cc6d15527d794d6566830564736f6c63430008160033","abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"fromToken","type":"address"},{"indexed":true,"internalType":"uint256","name":"fromChainId","type":"uint256"},{"indexed":false,"internalType":"address","name":"toToken","type":"address"},{"indexed":true,"internalType":"uint256","name":"toChainId","type":"uint256"},{"indexed":false,"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"}],"name":"RouteConfigured","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transferId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"fromToken","type":"address"},{"indexed":false,"internalType":"address","name":"toToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toChainId","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"}],"name":"TransferInitiated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"_decodeAndExecuteCompose","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"cctpHookReceivers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"uint256","name":"fromChainId","type":"uint256"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"toChainId","type":"uint256"},{"components":[{"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"},{"internalType":"uint32","name":"protocolDomain","type":"uint32"},{"internalType":"address","name":"bridgeContract","type":"address"},{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"address","name":"swapPool","type":"address"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"internalType":"struct UnifiedRouter.Route","name":"route","type":"tuple"}],"name":"configureRoute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"toChainId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"estimateFees","outputs":[{"internalType":"uint256","name":"nativeFee","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"uint256","name":"fromChainId","type":"uint256"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"toChainId","type":"uint256"}],"name":"getRouteKey","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"uint256","name":"fromChainId","type":"uint256"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"toChainId","type":"uint256"}],"name":"isRouteConfigured","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_oApp","type":"address"},{"internalType":"bytes32","name":"_guid","type":"bytes32"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"},{"internalType":"bytes","name":"_extraData","type":"bytes"}],"name":"lzCompose","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum UnifiedRouter.Protocol","name":"","type":"uint8"}],"name":"protocolContracts","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address payable","name":"to","type":"address"}],"name":"rescueETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"rescueTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"routes","outputs":[{"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"},{"internalType":"uint32","name":"protocolDomain","type":"uint32"},{"internalType":"address","name":"bridgeContract","type":"address"},{"internalType":"uint256","name":"poolId","type":"uint256"},{"internalType":"address","name":"swapPool","type":"address"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"hookReceiver","type":"address"}],"name":"setCCTPHookReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum UnifiedRouter.Protocol","name":"protocol","type":"uint8"},{"internalType":"address","name":"contractAddress","type":"address"}],"name":"setProtocolContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"toChainId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"}],"name":"transfer","outputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"address","name":"toToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"toChainId","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"minAmountOut","type":"uint256"},{"internalType":"bytes","name":"swapData","type":"bytes"}],"name":"transferWithSwap","outputs":[{"internalType":"bytes32","name":"transferId","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}]}
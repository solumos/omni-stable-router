{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.22\"},\"sources\":{\"contracts/CCTPHookReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/ISwapExecutor.sol\\\";\\nimport \\\"./libraries/SharedInterfaces.sol\\\";\\nimport \\\"./libraries/ValidationLibrary.sol\\\";\\nimport \\\"./base/EmergencyWithdrawable.sol\\\";\\n\\n/**\\n * @title CCTPHookReceiver\\n * @notice Receives CCTP messages with hooks and executes atomic swaps on destination chain\\n * @dev This contract is deployed on each destination chain to handle CCTP v2 hooks\\n *      Swaps are atomic - either the swap succeeds or the entire transaction reverts\\n */\\ncontract CCTPHookReceiver is IMessageHandler, EmergencyWithdrawable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using ValidationLibrary for uint256;\\n    using ValidationLibrary for address;\\n\\n    ISwapExecutor public swapExecutor;\\n    IMessageTransmitter public messageTransmitter;\\n    \\n    mapping(uint32 => mapping(bytes32 => bool)) public authorizedSenders;\\n    mapping(address => bool) public supportedTokens;\\n    \\n    address public immutable USDC; // Set per chain in constructor\\n    \\n    event HookExecuted(\\n        uint32 indexed sourceDomain,\\n        address indexed sourceToken,\\n        address indexed destToken,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        address recipient\\n    );\\n    \\n    event AuthorizedSenderUpdated(\\n        uint32 domain,\\n        bytes32 sender,\\n        bool authorized\\n    );\\n\\n    constructor(\\n        address _swapExecutor,\\n        address _messageTransmitter,\\n        address _usdc\\n    ) EmergencyWithdrawable() {\\n        ValidationLibrary.validateAddress(_swapExecutor);\\n        ValidationLibrary.validateAddress(_messageTransmitter);\\n        ValidationLibrary.validateAddress(_usdc);\\n        swapExecutor = ISwapExecutor(_swapExecutor);\\n        messageTransmitter = IMessageTransmitter(_messageTransmitter);\\n        USDC = _usdc;\\n    }\\n\\n    /**\\n     * @notice Handles incoming CCTP messages with hook data\\n     * @param sourceDomain The source chain domain ID\\n     * @param sender The sender address on source chain\\n     * @param messageBody The hook data containing swap instructions\\n     */\\n    function handleReceiveMessage(\\n        uint32 sourceDomain,\\n        bytes32 sender,\\n        bytes calldata messageBody\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        // Only callable by the CCTP MessageTransmitter\\n        require(msg.sender == address(messageTransmitter), \\\"Unauthorized caller\\\");\\n        \\n        // Verify sender is authorized\\n        require(authorizedSenders[sourceDomain][sender], \\\"Unauthorized sender\\\");\\n        \\n        // Decode the hook data\\n        (\\n            address destToken,\\n            uint256 minAmountOut,\\n            address recipient,\\n            address swapPool,\\n            bytes memory swapData\\n        ) = abi.decode(messageBody, (address, uint256, address, address, bytes));\\n        \\n        // Decode expected amount from message to validate\\n        // Note: This assumes the hook data includes expected amount\\n        // USDC has already been minted to this contract by CCTP\\n        uint256 usdcBalance = IERC20(USDC).balanceOf(address(this));\\n        require(usdcBalance > 0, \\\"No USDC received\\\");\\n        \\n        // TODO: Add validation that received amount matches expected\\n        // This would require encoding expected amount in the hook data\\n        \\n        // If destination token is USDC, just transfer\\n        if (destToken == USDC) {\\n            IERC20(USDC).safeTransfer(recipient, usdcBalance);\\n            emit HookExecuted(\\n                sourceDomain,\\n                USDC,\\n                USDC,\\n                usdcBalance,\\n                usdcBalance,\\n                recipient\\n            );\\n            return true;\\n        }\\n        \\n        // Execute swap from USDC to destination token\\n        // No try/catch - we want atomic execution (succeed or revert)\\n        uint256 amountOut = executeSwapInternal(\\n            USDC,\\n            destToken,\\n            usdcBalance,\\n            minAmountOut,\\n            swapPool,\\n            swapData,\\n            recipient\\n        );\\n        \\n        emit HookExecuted(\\n            sourceDomain,\\n            USDC,\\n            destToken,\\n            usdcBalance,\\n            amountOut,\\n            recipient\\n        );\\n        \\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes the swap from USDC to destination token\\n     * @dev Internal function for atomic execution - reverts on failure\\n     */\\n    function executeSwapInternal(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address swapPool,\\n        bytes memory swapData,\\n        address recipient\\n    ) internal returns (uint256) {\\n        require(supportedTokens[tokenOut], \\\"Unsupported token\\\");\\n        ValidationLibrary.validateRecipient(recipient);\\n        \\n        // Use safeIncreaseAllowance instead of safeApprove to avoid race conditions\\n        IERC20(tokenIn).safeIncreaseAllowance(address(swapExecutor), amountIn);\\n        \\n        // Execute swap via SwapExecutor\\n        ISwapExecutor.SwapParams memory params = ISwapExecutor.SwapParams({\\n            tokenIn: tokenIn,\\n            tokenOut: tokenOut,\\n            amountIn: amountIn,\\n            minAmountOut: minAmountOut,\\n            pool: swapPool,\\n            swapData: swapData\\n        });\\n        \\n        uint256 amountOut = swapExecutor.executeSwap(params);\\n        \\n        // Verify slippage protection\\n        ValidationLibrary.validateSlippage(amountOut, minAmountOut);\\n        \\n        // Transfer output tokens to recipient\\n        IERC20(tokenOut).safeTransfer(recipient, amountOut);\\n        \\n        return amountOut;\\n    }\\n\\n    /**\\n     * @notice Updates authorized senders for CCTP messages\\n     */\\n    function setAuthorizedSender(\\n        uint32 domain,\\n        bytes32 sender,\\n        bool authorized\\n    ) external onlyOwner {\\n        authorizedSenders[domain][sender] = authorized;\\n        emit AuthorizedSenderUpdated(domain, sender, authorized);\\n    }\\n\\n    /**\\n     * @notice Updates supported tokens for swaps\\n     */\\n    function setSupportedToken(address token, bool supported) external onlyOwner {\\n        supportedTokens[token] = supported;\\n    }\\n\\n    /**\\n     * @notice Updates the swap executor contract\\n     */\\n    function setSwapExecutor(address _swapExecutor) external onlyOwner {\\n        swapExecutor = ISwapExecutor(_swapExecutor);\\n    }\\n\\n    // Emergency withdrawal is now inherited from EmergencyWithdrawable\\n\\n    /**\\n     * @notice Pause hook execution\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Unpause hook execution\\n     */\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\",\"versionPragma\":\"0.8.22\"},\"contracts/libraries/SharedInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/**\\n * @title SharedInterfaces\\n * @notice Consolidated external protocol interfaces to eliminate duplication\\n * @dev Import this library instead of redefining interfaces\\n */\\n\\n// ============ CCTP Interfaces ============\\n\\ninterface ITokenMessenger {\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 nonce);\\n\\n    function depositForBurnWithCaller(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken,\\n        bytes32 destinationCaller\\n    ) external returns (uint64 nonce);\\n}\\n\\ninterface IMessageTransmitter {\\n    function sendMessage(\\n        uint32 destinationDomain,\\n        bytes32 recipient,\\n        bytes calldata messageBody\\n    ) external returns (uint64);\\n    \\n    function receiveMessage(\\n        bytes calldata message,\\n        bytes calldata signature\\n    ) external returns (bool);\\n}\\n\\ninterface IMessageHandler {\\n    function handleReceiveMessage(\\n        uint32 sourceDomain,\\n        bytes32 sender,\\n        bytes calldata messageBody\\n    ) external returns (bool);\\n}\\n\\n// ============ LayerZero Interfaces ============\\n\\ninterface IOFT {\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n}\\n\\ninterface ILayerZeroEndpoint {\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n}\\n\\n// ============ Stargate Interfaces ============\\n\\ninterface IStargateRouter {\\n    struct lzTxObj {\\n        uint256 dstGasForCall;\\n        uint256 dstNativeAmount;\\n        bytes dstNativeAddr;\\n    }\\n    \\n    function swap(\\n        uint16 _dstChainId,\\n        uint256 _srcPoolId,\\n        uint256 _dstPoolId,\\n        address payable _refundAddress,\\n        uint256 _amountLD,\\n        uint256 _minAmountLD,\\n        lzTxObj memory _lzTxParams,\\n        bytes calldata _to,\\n        bytes calldata _payload\\n    ) external payable;\\n    \\n    function quoteLayerZeroFee(\\n        uint16 _dstChainId,\\n        uint8 _functionType,\\n        bytes calldata _toAddress,\\n        bytes calldata _transferAndCallPayload,\\n        lzTxObj memory _lzTxParams\\n    ) external view returns (uint256, uint256);\\n}\\n\\n// ============ DEX Interfaces ============\\n\\ninterface ICurvePool {\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n    \\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n}\\n\\ninterface IUniswapV3Router {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n    \\n    function exactInputSingle(ExactInputSingleParams calldata params)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n}\",\"versionPragma\":\"0.8.22\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.6.2\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/base/EmergencyWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title EmergencyWithdrawable\\n * @notice Base contract providing standardized emergency withdrawal functionality\\n * @dev Inherit this to add consistent emergency functions across all contracts\\n */\\nabstract contract EmergencyWithdrawable is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    using SafeERC20 for IERC20;\\n    \\n    event EmergencyWithdrawToken(address indexed token, uint256 amount, address indexed to);\\n    event EmergencyWithdrawETH(uint256 amount, address indexed to);\\n    \\n    /**\\n     * @notice Emergency withdraw tokens\\n     * @param token Token address (address(0) for ETH)\\n     * @param amount Amount to withdraw (0 for full balance)\\n     * @param to Recipient address\\n     */\\n    function emergencyWithdraw(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOwner {\\n        require(to != address(0), \\\"EW: Invalid recipient\\\");\\n        \\n        if (token == address(0)) {\\n            // Withdraw ETH\\n            uint256 balance = address(this).balance;\\n            if (amount == 0) amount = balance;\\n            require(amount <= balance, \\\"EW: Insufficient ETH\\\");\\n            \\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"EW: ETH transfer failed\\\");\\n            \\n            emit EmergencyWithdrawETH(amount, to);\\n        } else {\\n            // Withdraw ERC20\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            if (amount == 0) amount = balance;\\n            require(amount <= balance, \\\"EW: Insufficient tokens\\\");\\n            \\n            IERC20(token).safeTransfer(to, amount);\\n            \\n            emit EmergencyWithdrawToken(token, amount, to);\\n        }\\n    }\\n    \\n    /**\\n     * @notice Emergency withdraw multiple tokens\\n     * @param tokens Array of token addresses\\n     * @param to Recipient address\\n     */\\n    function emergencyWithdrawMultiple(\\n        address[] calldata tokens,\\n        address to\\n    ) external onlyOwner {\\n        require(to != address(0), \\\"EW: Invalid recipient\\\");\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == address(0)) {\\n                // Withdraw all ETH\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    (bool success, ) = to.call{value: balance}(\\\"\\\");\\n                    require(success, \\\"EW: ETH transfer failed\\\");\\n                    emit EmergencyWithdrawETH(balance, to);\\n                }\\n            } else {\\n                // Withdraw all tokens\\n                uint256 balance = IERC20(tokens[i]).balanceOf(address(this));\\n                if (balance > 0) {\\n                    IERC20(tokens[i]).safeTransfer(to, balance);\\n                    emit EmergencyWithdrawToken(tokens[i], balance, to);\\n                }\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"0.8.22\"},\"contracts/interfaces/ISwapExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface ISwapExecutor {\\n    struct SwapParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 minAmountOut;\\n        address pool;\\n        bytes swapData;\\n    }\\n\\n    function executeSwap(SwapParams calldata params) external returns (uint256 amountOut);\\n\\n    function executeBatchSwaps(SwapParams[] calldata swaps) external returns (uint256[] memory amountsOut);\\n\\n    function getAmountOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountIn,\\n        address pool\\n    ) external view returns (uint256);\\n}\",\"versionPragma\":\"^0.8.22\"},\"contracts/libraries/ValidationLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/**\\n * @title ValidationLibrary\\n * @notice Centralized validation logic to eliminate duplication\\n * @dev Use this library for all common validation patterns\\n */\\nlibrary ValidationLibrary {\\n    \\n    /**\\n     * @notice Validates that amount is greater than zero\\n     * @param amount The amount to validate\\n     */\\n    function validateAmount(uint256 amount) internal pure {\\n        require(amount > 0, \\\"VL: Invalid amount\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates that address is not zero\\n     * @param addr The address to validate\\n     */\\n    function validateAddress(address addr) internal pure {\\n        require(addr != address(0), \\\"VL: Zero address\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates recipient address\\n     * @param recipient The recipient address to validate\\n     */\\n    function validateRecipient(address recipient) internal pure {\\n        require(recipient != address(0), \\\"VL: Invalid recipient\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates array lengths match\\n     * @param length1 First array length\\n     * @param length2 Second array length\\n     */\\n    function validateArrayLengths(uint256 length1, uint256 length2) internal pure {\\n        require(length1 == length2, \\\"VL: Array length mismatch\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates multiple array lengths match\\n     * @param lengths Array of lengths to compare\\n     */\\n    function validateMultipleArrayLengths(uint256[] memory lengths) internal pure {\\n        if (lengths.length == 0) return;\\n        uint256 expectedLength = lengths[0];\\n        for (uint256 i = 1; i < lengths.length; i++) {\\n            require(lengths[i] == expectedLength, \\\"VL: Array length mismatch\\\");\\n        }\\n    }\\n    \\n    /**\\n     * @notice Validates array is not empty and within bounds\\n     * @param length Array length\\n     * @param maxLength Maximum allowed length\\n     */\\n    function validateArrayBounds(uint256 length, uint256 maxLength) internal pure {\\n        require(length > 0, \\\"VL: Empty array\\\");\\n        require(length <= maxLength, \\\"VL: Array too large\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates deadline has not passed\\n     * @param deadline The deadline timestamp\\n     */\\n    function validateDeadline(uint256 deadline) internal view {\\n        require(deadline >= block.timestamp, \\\"VL: Deadline passed\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates slippage is within acceptable range\\n     * @param amountOut Actual output amount\\n     * @param minAmountOut Minimum acceptable amount\\n     */\\n    function validateSlippage(uint256 amountOut, uint256 minAmountOut) internal pure {\\n        require(amountOut >= minAmountOut, \\\"VL: Slippage exceeded\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates fee is within acceptable range (max 10%)\\n     * @param fee Fee in basis points\\n     */\\n    function validateFeeBps(uint256 fee) internal pure {\\n        require(fee <= 1000, \\\"VL: Fee too high\\\"); // Max 10%\\n    }\\n    \\n    /**\\n     * @notice Validates chain ID is supported\\n     * @param chainId The chain ID to validate\\n     * @param isSupported Whether the chain is supported\\n     */\\n    function validateChainId(uint256 chainId, bool isSupported) internal pure {\\n        require(isSupported, \\\"VL: Unsupported chain\\\");\\n        require(chainId > 0, \\\"VL: Invalid chain ID\\\");\\n    }\\n}\",\"versionPragma\":\"0.8.22\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0x91bDAade19fD91c669fCb3049F2183090160BF6a","bytecode":"0x60a0346200017a57601f6200168638819003918201601f19168301916001600160401b038311848410176200017f578084926060946040528339810103126200017a576200004d8162000195565b906200006a6040620000626020840162000195565b920162000195565b913315620001615760008054336001600160a01b031980831682178455946001600160a01b0394909385939192918416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360018055620000ce81620001aa565b620000d983620001aa565b620000e486620001aa565b16836002541617600255169060035416176003556080526040516114929081620001f4823960805181818161055b01528181610c0a01528181610c5701528181610ce301528181610d6401528181610dcc01528181610f1f0152818161103901528181611068015281816110a6015281816111b901526111fe0152f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200017a57565b6001600160a01b031615620001bb57565b60405162461bcd60e51b815260206004820152601060248201526f564c3a205a65726f206164647265737360801b6044820152606490fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081633e40277314610993575080633f4ba83a14610925578063551512de1461073d5780635c975abb1461071857806368c4ac26146106da5780636a0706db14610695578063715018a61461063b5780637b04c181146106125780638456cb59146105b357806384fcec461461058a57806389a30271146105465780638da5cb5b1461051e57806396abeb701461047f578063e79864661461041e578063eaf7406a14610205578063f2fde38b1461017e5763fab6f191146100df57600080fd5b3461017a57606036600319011261017a576100f86109d2565b9160243560443592831515918285036101765761016560609563ffffffff7f8a1f9e8da3af8de5c291e7b2a3a16c12eaa44ed6406646df3d2a3007156b3c4898610140611370565b1695868a52602052838920838a526020528389209060ff801983541691151516179055565b81519384526020840152820152a180f35b8680fd5b8280fd5b50903461017a57602036600319011261017a576101996109ea565b906101a2611370565b6001600160a01b039182169283156101ef57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b50903461017a578160031936011261017a5780359167ffffffffffffffff9081841161041a573660238501121561041a578383013591821161041a576024916024850194602436918360051b010111610416576001600160a01b036024358181169590949186860361041257610279611370565b610284871515610a00565b885b848110610291578980f35b816102a56102a083888d611336565b61135c565b1661030d5760019088888c47806102c2575b505050505b01610286565b6102fe828080602095857f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9985af16102f8610a98565b50610ac8565b8a51908152a288888c386102b7565b8161031c6102a083888d611336565b16865180916370a0823160e01b82523086830152818760209384935afa918c8315610407578b92868e9695938b93946103c6575b506001968d8786610369575b50505050505050506102bc565b85836103ac896102a095886103a66102a0887f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c9e6103b19c611336565b1661139c565b611336565b16928b51908152a388388781868e8d8761035c565b9450508095508092508391503d8311610400575b6103e48183610a44565b810103126103fc578a87600194868d94519396610350565b8b80fd5b503d6103da565b8951903d90823e3d90fd5b8880fd5b8580fd5b8480fd5b83823461047b578060031936011261047b576104386109ea565b906024359081151582036104775761047492610452611370565b60018060a01b03168452600560205283209060ff801983541691151516179055565b80f35b8380fd5b5080fd5b50903461017a57606036600319011261017a5761049a6109d2565b906044359067ffffffffffffffff9485831161051b573660238401121561051b578282013595861161051b57366024878501011161051b575060026001541461050d57509261050091602460209560026001556104f56113df565b019060243590610b28565b9060018055519015158152f35b8351633ee5aeb560e01b8152fd5b80fd5b83823461047b578160031936011261047b57905490516001600160a01b039091168152602090f35b83823461047b578160031936011261047b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b83823461047b578160031936011261047b5760025490516001600160a01b039091168152602090f35b83823461047b578160031936011261047b5760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916105f1611370565b6105f96113df565b835460ff60a01b1916600160a01b17845551338152a180f35b83823461047b578160031936011261047b5760035490516001600160a01b039091168152602090f35b833461051b578060031936011261051b57610654611370565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b833461051b57602036600319011261051b576106af6109ea565b6106b7611370565b60018060a01b03166bffffffffffffffffffffffff60a01b600254161760025580f35b83823461047b57602036600319011261047b5760209160ff9082906001600160a01b036107056109ea565b1681526005855220541690519015158152f35b83823461047b578160031936011261047b5760ff6020925460a01c1690519015158152f35b503461017a57606036600319011261017a576107576109ea565b6044356001600160a01b038181169492939290602435908684036109215761077d611370565b819561078a881515610a00565b16908161082457505047841561081c575b84116107e25750916020916107da86808080867f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9995af16102f8610a98565b51908152a280f35b606490602084519162461bcd60e51b8352820152601460248201527308aae744092dce6eaccccd2c6d2cadce8408aa8960631b6044820152fd5b93508361079b565b93918295939195516370a0823160e01b8152308282015260209586826024818b5afa918215610917578a926108e4575b50156108dc575b8411610899575090610891837f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c9594938761139c565b51908152a380f35b825162461bcd60e51b8152908101859052601760248201527f45573a20496e73756666696369656e7420746f6b656e730000000000000000006044820152606490fd5b93508361085b565b9091508681813d8311610910575b6108fc8183610a44565b8101031261090c57519038610854565b8980fd5b503d6108f2565b85513d8c823e3d90fd5b8780fd5b50903461017a578260031936011261017a5761093f611370565b82549060ff8260a01c1615610985575060ff60a01b19168255513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b8251638dfc202b60e01b8152fd5b929050346104775781600319360112610477579060209360ff9263ffffffff6109ba6109d2565b16825285528181206024358252855220541615158152f35b6004359063ffffffff821682036109e557565b600080fd5b600435906001600160a01b03821682036109e557565b15610a0757565b60405162461bcd60e51b81526020600482015260156024820152741155ce88125b9d985b1a59081c9958da5c1a595b9d605a1b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff821117610a6657604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610a6657601f01601f191660200190565b3d15610ac3573d90610aa982610a7c565b91610ab76040519384610a44565b82523d6000602084013e565b606090565b15610acf57565b60405162461bcd60e51b815260206004820152601760248201527f45573a20455448207472616e73666572206661696c65640000000000000000006044820152606490fd5b35906001600160a01b03821682036109e557565b91929060018060a01b036003541633036112fb5763ffffffff8316600052600460205260406000209060005260205260ff60406000205416156112c057820160a0838203126109e557610b7a83610b14565b610b8660408501610b14565b91610b9360608601610b14565b94608081013567ffffffffffffffff81116109e557810182601f820112156109e557803590610bc182610a7c565b93610bcf6040519586610a44565b828552602083830101116109e55781600092602080930183870137840101526040516370a0823160e01b8152306004820152916020836024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315610fc95760009361128c575b508215611254576001600160a01b038481167f00000000000000000000000000000000000000000000000000000000000000009091161461119f576001600160a01b03841660009081526005602052604090205460ff1615611166576001600160a01b0385161561112957600254604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905291602090829060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610fc9576000916110f7575b508481018091116110e15760405163095ea7b360e01b60208083019182526001600160a01b0385166024840152604480840194909452928252909190600090610d5e606485610a44565b835190827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af16000513d8261109c575b505015610fee575b50506040519660c0880188811067ffffffffffffffff821117610a665760409081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168a528681166020808c019182528b84018881528782013560608e0190815295841660808e0190815260a08e019788526002549551639d49776160e01b815260048101939093529c518416602483015291518316604482015290516064820152925160848401529851891660a4830152915160c060c4830152805160e483018190529198929092169188919060005b828110610fd557505091816000602094826101049183838284010152601f801991011681010301925af1958615610fc957600096610f94575b50602001358510610f57577f30e4d957923fa299ee90866af59b2de8a5d7000c6af5e4b92269a1e8616af1de91610ef8866001600160a01b0386811690841661139c565b6040805192835260208301969096526001600160a01b0393841695820195909552938216937f00000000000000000000000000000000000000000000000000000000000000009092169263ffffffff169180606081015b0390a4600190565b60405162461bcd60e51b815260206004820152601560248201527415930e8814db1a5c1c1859d948195e18d959591959605a1b6044820152606490fd5b9095506020813d602011610fc1575b81610fb060209383610a44565b810103126109e55751946020610eb4565b3d9150610fa3565b6040513d6000823e3d90fd5b60208282018101516101048d840101528b945001610e7b565b6040519163095ea7b360e01b60208401526024830152600060448301526044825281608081011067ffffffffffffffff608084011117610a66576080820160405261109591611066907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611400565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611400565b3880610da0565b9091506110d957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b15155b3880610d98565b6001146110d2565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011611121575b8161111260209383610a44565b810103126109e5575138610d14565b3d9150611105565b60405162461bcd60e51b815260206004820152601560248201527415930e88125b9d985b1a59081c9958da5c1a595b9d605a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b2103a37b5b2b760791b6044820152606490fd5b509094506111de91508490506001600160a01b03838116907f00000000000000000000000000000000000000000000000000000000000000001661139c565b6040805184815260208101949094526001600160a01b03918216908401527f00000000000000000000000000000000000000000000000000000000000000001691829163ffffffff16907f30e4d957923fa299ee90866af59b2de8a5d7000c6af5e4b92269a1e8616af1de908060608101610f4f565b60405162461bcd60e51b815260206004820152601060248201526f139bc81554d110c81c9958d95a5d995960821b6044820152606490fd5b9092506020813d6020116112b8575b816112a860209383610a44565b810103126109e557519138610c43565b3d915061129b565b60405162461bcd60e51b81526020600482015260136024820152722ab730baba3437b934bd32b21039b2b73232b960691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152722ab730baba3437b934bd32b21031b0b63632b960691b6044820152606490fd5b91908110156113465760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036109e55790565b6000546001600160a01b0316330361138457565b60405163118cdaa760e01b8152336004820152602490fd5b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526113dd916113d8606483610a44565b611400565b565b60ff60005460a01c166113ee57565b60405163d93c066560e01b8152600490fd5b906000602091828151910182855af115610fc9576000513d61145357506001600160a01b0381163b155b6114315750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561142a56fea26469706673582212200418e8e47719997cb6c498c939099350d535755dc0c7f5b08eb148877cf42a8f64736f6c63430008160033","deployedBytecode":"0x608060408181526004908136101561001657600080fd5b600092833560e01c9081633e40277314610993575080633f4ba83a14610925578063551512de1461073d5780635c975abb1461071857806368c4ac26146106da5780636a0706db14610695578063715018a61461063b5780637b04c181146106125780638456cb59146105b357806384fcec461461058a57806389a30271146105465780638da5cb5b1461051e57806396abeb701461047f578063e79864661461041e578063eaf7406a14610205578063f2fde38b1461017e5763fab6f191146100df57600080fd5b3461017a57606036600319011261017a576100f86109d2565b9160243560443592831515918285036101765761016560609563ffffffff7f8a1f9e8da3af8de5c291e7b2a3a16c12eaa44ed6406646df3d2a3007156b3c4898610140611370565b1695868a52602052838920838a526020528389209060ff801983541691151516179055565b81519384526020840152820152a180f35b8680fd5b8280fd5b50903461017a57602036600319011261017a576101996109ea565b906101a2611370565b6001600160a01b039182169283156101ef57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b50903461017a578160031936011261017a5780359167ffffffffffffffff9081841161041a573660238501121561041a578383013591821161041a576024916024850194602436918360051b010111610416576001600160a01b036024358181169590949186860361041257610279611370565b610284871515610a00565b885b848110610291578980f35b816102a56102a083888d611336565b61135c565b1661030d5760019088888c47806102c2575b505050505b01610286565b6102fe828080602095857f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9985af16102f8610a98565b50610ac8565b8a51908152a288888c386102b7565b8161031c6102a083888d611336565b16865180916370a0823160e01b82523086830152818760209384935afa918c8315610407578b92868e9695938b93946103c6575b506001968d8786610369575b50505050505050506102bc565b85836103ac896102a095886103a66102a0887f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c9e6103b19c611336565b1661139c565b611336565b16928b51908152a388388781868e8d8761035c565b9450508095508092508391503d8311610400575b6103e48183610a44565b810103126103fc578a87600194868d94519396610350565b8b80fd5b503d6103da565b8951903d90823e3d90fd5b8880fd5b8580fd5b8480fd5b83823461047b578060031936011261047b576104386109ea565b906024359081151582036104775761047492610452611370565b60018060a01b03168452600560205283209060ff801983541691151516179055565b80f35b8380fd5b5080fd5b50903461017a57606036600319011261017a5761049a6109d2565b906044359067ffffffffffffffff9485831161051b573660238401121561051b578282013595861161051b57366024878501011161051b575060026001541461050d57509261050091602460209560026001556104f56113df565b019060243590610b28565b9060018055519015158152f35b8351633ee5aeb560e01b8152fd5b80fd5b83823461047b578160031936011261047b57905490516001600160a01b039091168152602090f35b83823461047b578160031936011261047b57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b83823461047b578160031936011261047b5760025490516001600160a01b039091168152602090f35b83823461047b578160031936011261047b5760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916105f1611370565b6105f96113df565b835460ff60a01b1916600160a01b17845551338152a180f35b83823461047b578160031936011261047b5760035490516001600160a01b039091168152602090f35b833461051b578060031936011261051b57610654611370565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b833461051b57602036600319011261051b576106af6109ea565b6106b7611370565b60018060a01b03166bffffffffffffffffffffffff60a01b600254161760025580f35b83823461047b57602036600319011261047b5760209160ff9082906001600160a01b036107056109ea565b1681526005855220541690519015158152f35b83823461047b578160031936011261047b5760ff6020925460a01c1690519015158152f35b503461017a57606036600319011261017a576107576109ea565b6044356001600160a01b038181169492939290602435908684036109215761077d611370565b819561078a881515610a00565b16908161082457505047841561081c575b84116107e25750916020916107da86808080867f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9995af16102f8610a98565b51908152a280f35b606490602084519162461bcd60e51b8352820152601460248201527308aae744092dce6eaccccd2c6d2cadce8408aa8960631b6044820152fd5b93508361079b565b93918295939195516370a0823160e01b8152308282015260209586826024818b5afa918215610917578a926108e4575b50156108dc575b8411610899575090610891837f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c9594938761139c565b51908152a380f35b825162461bcd60e51b8152908101859052601760248201527f45573a20496e73756666696369656e7420746f6b656e730000000000000000006044820152606490fd5b93508361085b565b9091508681813d8311610910575b6108fc8183610a44565b8101031261090c57519038610854565b8980fd5b503d6108f2565b85513d8c823e3d90fd5b8780fd5b50903461017a578260031936011261017a5761093f611370565b82549060ff8260a01c1615610985575060ff60a01b19168255513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b8251638dfc202b60e01b8152fd5b929050346104775781600319360112610477579060209360ff9263ffffffff6109ba6109d2565b16825285528181206024358252855220541615158152f35b6004359063ffffffff821682036109e557565b600080fd5b600435906001600160a01b03821682036109e557565b15610a0757565b60405162461bcd60e51b81526020600482015260156024820152741155ce88125b9d985b1a59081c9958da5c1a595b9d605a1b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff821117610a6657604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610a6657601f01601f191660200190565b3d15610ac3573d90610aa982610a7c565b91610ab76040519384610a44565b82523d6000602084013e565b606090565b15610acf57565b60405162461bcd60e51b815260206004820152601760248201527f45573a20455448207472616e73666572206661696c65640000000000000000006044820152606490fd5b35906001600160a01b03821682036109e557565b91929060018060a01b036003541633036112fb5763ffffffff8316600052600460205260406000209060005260205260ff60406000205416156112c057820160a0838203126109e557610b7a83610b14565b610b8660408501610b14565b91610b9360608601610b14565b94608081013567ffffffffffffffff81116109e557810182601f820112156109e557803590610bc182610a7c565b93610bcf6040519586610a44565b828552602083830101116109e55781600092602080930183870137840101526040516370a0823160e01b8152306004820152916020836024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa928315610fc95760009361128c575b508215611254576001600160a01b038481167f00000000000000000000000000000000000000000000000000000000000000009091161461119f576001600160a01b03841660009081526005602052604090205460ff1615611166576001600160a01b0385161561112957600254604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905291602090829060449082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610fc9576000916110f7575b508481018091116110e15760405163095ea7b360e01b60208083019182526001600160a01b0385166024840152604480840194909452928252909190600090610d5e606485610a44565b835190827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af16000513d8261109c575b505015610fee575b50506040519660c0880188811067ffffffffffffffff821117610a665760409081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081168a528681166020808c019182528b84018881528782013560608e0190815295841660808e0190815260a08e019788526002549551639d49776160e01b815260048101939093529c518416602483015291518316604482015290516064820152925160848401529851891660a4830152915160c060c4830152805160e483018190529198929092169188919060005b828110610fd557505091816000602094826101049183838284010152601f801991011681010301925af1958615610fc957600096610f94575b50602001358510610f57577f30e4d957923fa299ee90866af59b2de8a5d7000c6af5e4b92269a1e8616af1de91610ef8866001600160a01b0386811690841661139c565b6040805192835260208301969096526001600160a01b0393841695820195909552938216937f00000000000000000000000000000000000000000000000000000000000000009092169263ffffffff169180606081015b0390a4600190565b60405162461bcd60e51b815260206004820152601560248201527415930e8814db1a5c1c1859d948195e18d959591959605a1b6044820152606490fd5b9095506020813d602011610fc1575b81610fb060209383610a44565b810103126109e55751946020610eb4565b3d9150610fa3565b6040513d6000823e3d90fd5b60208282018101516101048d840101528b945001610e7b565b6040519163095ea7b360e01b60208401526024830152600060448301526044825281608081011067ffffffffffffffff608084011117610a66576080820160405261109591611066907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611400565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611400565b3880610da0565b9091506110d957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b15155b3880610d98565b6001146110d2565b634e487b7160e01b600052601160045260246000fd5b90506020813d602011611121575b8161111260209383610a44565b810103126109e5575138610d14565b3d9150611105565b60405162461bcd60e51b815260206004820152601560248201527415930e88125b9d985b1a59081c9958da5c1a595b9d605a1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b2103a37b5b2b760791b6044820152606490fd5b509094506111de91508490506001600160a01b03838116907f00000000000000000000000000000000000000000000000000000000000000001661139c565b6040805184815260208101949094526001600160a01b03918216908401527f00000000000000000000000000000000000000000000000000000000000000001691829163ffffffff16907f30e4d957923fa299ee90866af59b2de8a5d7000c6af5e4b92269a1e8616af1de908060608101610f4f565b60405162461bcd60e51b815260206004820152601060248201526f139bc81554d110c81c9958d95a5d995960821b6044820152606490fd5b9092506020813d6020116112b8575b816112a860209383610a44565b810103126109e557519138610c43565b3d915061129b565b60405162461bcd60e51b81526020600482015260136024820152722ab730baba3437b934bd32b21039b2b73232b960691b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152722ab730baba3437b934bd32b21031b0b63632b960691b6044820152606490fd5b91908110156113465760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036109e55790565b6000546001600160a01b0316330361138457565b60405163118cdaa760e01b8152336004820152602490fd5b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526113dd916113d8606483610a44565b611400565b565b60ff60005460a01c166113ee57565b60405163d93c066560e01b8152600490fd5b906000602091828151910182855af115610fc9576000513d61145357506001600160a01b0381163b155b6114315750565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6001141561142a56fea26469706673582212200418e8e47719997cb6c498c939099350d535755dc0c7f5b08eb148877cf42a8f64736f6c63430008160033","abi":[{"inputs":[{"internalType":"address","name":"_swapExecutor","type":"address"},{"internalType":"address","name":"_messageTransmitter","type":"address"},{"internalType":"address","name":"_usdc","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":false,"internalType":"bytes32","name":"sender","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"authorized","type":"bool"}],"name":"AuthorizedSenderUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"EmergencyWithdrawETH","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"EmergencyWithdrawToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"sourceDomain","type":"uint32"},{"indexed":true,"internalType":"address","name":"sourceToken","type":"address"},{"indexed":true,"internalType":"address","name":"destToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"HookExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"USDC","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"authorizedSenders","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"name":"emergencyWithdrawMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"sourceDomain","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"name":"handleReceiveMessage","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"messageTransmitter","outputs":[{"internalType":"contract IMessageTransmitter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"bool","name":"authorized","type":"bool"}],"name":"setAuthorizedSender","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"bool","name":"supported","type":"bool"}],"name":"setSupportedToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_swapExecutor","type":"address"}],"name":"setSwapExecutor","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"supportedTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"swapExecutor","outputs":[{"internalType":"contract ISwapExecutor","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"}]}
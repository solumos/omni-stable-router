{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.22\"},\"sources\":{\"contracts/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./base/EmergencyWithdrawable.sol\\\";\\nimport \\\"./libraries/ValidationLibrary.sol\\\";\\n\\ncontract FeeManager is EmergencyWithdrawable, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n    using ValidationLibrary for uint256;\\n    using ValidationLibrary for address;\\n\\n    struct FeeInfo {\\n        uint256 totalCollected;\\n        uint256 totalWithdrawn;\\n        uint256 lastCollection;\\n    }\\n\\n    mapping(address => FeeInfo) public feeInfo;\\n    mapping(address => bool) public authorizedCollectors;\\n    \\n    address public feeRecipient;\\n    uint256 public totalFeesCollected;\\n    \\n    event FeeCollected(address indexed token, uint256 amount, uint256 timestamp);\\n    event FeeWithdrawn(address indexed token, uint256 amount, address recipient);\\n    event FeeRecipientUpdated(address oldRecipient, address newRecipient);\\n    event CollectorAuthorized(address collector, bool authorized);\\n\\n    constructor(address _feeRecipient) EmergencyWithdrawable() {\\n        ValidationLibrary.validateAddress(_feeRecipient);\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            authorizedCollectors[msg.sender] || msg.sender == owner(),\\n            \\\"Not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    function recordFee(address token, uint256 amount) external onlyAuthorized whenNotPaused {\\n        ValidationLibrary.validateAmount(amount);\\n        \\n        // Note: Tokens should already be transferred to this contract before calling this function\\n        \\n        FeeInfo storage info = feeInfo[token];\\n        info.totalCollected += amount;\\n        info.lastCollection = block.timestamp;\\n        \\n        totalFeesCollected += amount;\\n        \\n        emit FeeCollected(token, amount, block.timestamp);\\n    }\\n\\n    function withdrawFees(\\n        address token,\\n        address recipient\\n    ) external onlyOwner nonReentrant whenNotPaused {\\n        if (recipient == address(0)) {\\n            recipient = feeRecipient;\\n        }\\n        \\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(balance > 0, \\\"No fees to withdraw\\\");\\n        \\n        FeeInfo storage info = feeInfo[token];\\n        info.totalWithdrawn += balance;\\n        \\n        IERC20(token).safeTransfer(recipient, balance);\\n        \\n        emit FeeWithdrawn(token, balance, recipient);\\n    }\\n\\n    function withdrawMultipleFees(\\n        address[] calldata tokens,\\n        address recipient\\n    ) external onlyOwner nonReentrant {\\n        if (recipient == address(0)) {\\n            recipient = feeRecipient;\\n        }\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 balance = IERC20(tokens[i]).balanceOf(address(this));\\n            \\n            if (balance > 0) {\\n                FeeInfo storage info = feeInfo[tokens[i]];\\n                info.totalWithdrawn += balance;\\n                \\n                IERC20(tokens[i]).safeTransfer(recipient, balance);\\n                \\n                emit FeeWithdrawn(tokens[i], balance, recipient);\\n            }\\n        }\\n    }\\n\\n    function getTotalFees(address token) external view returns (uint256) {\\n        return feeInfo[token].totalCollected;\\n    }\\n\\n    function getAvailableFees(address token) external view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function getFeeInfo(address token) external view returns (\\n        uint256 totalCollected,\\n        uint256 totalWithdrawn,\\n        uint256 available,\\n        uint256 lastCollection\\n    ) {\\n        FeeInfo memory info = feeInfo[token];\\n        return (\\n            info.totalCollected,\\n            info.totalWithdrawn,\\n            IERC20(token).balanceOf(address(this)),\\n            info.lastCollection\\n        );\\n    }\\n\\n    function getAllFeeInfo(address[] calldata tokens) external view returns (\\n        uint256[] memory totalCollected,\\n        uint256[] memory available\\n    ) {\\n        totalCollected = new uint256[](tokens.length);\\n        available = new uint256[](tokens.length);\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            totalCollected[i] = feeInfo[tokens[i]].totalCollected;\\n            available[i] = IERC20(tokens[i]).balanceOf(address(this));\\n        }\\n        \\n        return (totalCollected, available);\\n    }\\n\\n    function setFeeRecipient(address recipient) external onlyOwner {\\n        ValidationLibrary.validateAddress(recipient);\\n        \\n        address oldRecipient = feeRecipient;\\n        feeRecipient = recipient;\\n        \\n        emit FeeRecipientUpdated(oldRecipient, recipient);\\n    }\\n\\n    function authorizeCollector(address collector, bool authorized) external onlyOwner {\\n        authorizedCollectors[collector] = authorized;\\n        emit CollectorAuthorized(collector, authorized);\\n    }\\n\\n    function authorizeCollectors(\\n        address[] calldata collectors,\\n        bool[] calldata authorized\\n    ) external onlyOwner {\\n        ValidationLibrary.validateArrayLengths(collectors.length, authorized.length);\\n        \\n        for (uint256 i = 0; i < collectors.length; i++) {\\n            authorizedCollectors[collectors[i]] = authorized[i];\\n            emit CollectorAuthorized(collectors[i], authorized[i]);\\n        }\\n    }\\n\\n    // Emergency withdrawal is now inherited from EmergencyWithdrawable\\n    \\n    // Add pause functionality\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n    \\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    // Remove unprotected receive function to prevent griefing\\n    // Only accept ETH through specific functions\\n}\",\"versionPragma\":\"0.8.22\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"versionPragma\":\">=0.4.16\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"versionPragma\":\">=0.6.2\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"contracts/base/EmergencyWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title EmergencyWithdrawable\\n * @notice Base contract providing standardized emergency withdrawal functionality\\n * @dev Inherit this to add consistent emergency functions across all contracts\\n */\\nabstract contract EmergencyWithdrawable is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    using SafeERC20 for IERC20;\\n    \\n    event EmergencyWithdrawToken(address indexed token, uint256 amount, address indexed to);\\n    event EmergencyWithdrawETH(uint256 amount, address indexed to);\\n    \\n    /**\\n     * @notice Emergency withdraw tokens\\n     * @param token Token address (address(0) for ETH)\\n     * @param amount Amount to withdraw (0 for full balance)\\n     * @param to Recipient address\\n     */\\n    function emergencyWithdraw(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external onlyOwner {\\n        require(to != address(0), \\\"EW: Invalid recipient\\\");\\n        \\n        if (token == address(0)) {\\n            // Withdraw ETH\\n            uint256 balance = address(this).balance;\\n            if (amount == 0) amount = balance;\\n            require(amount <= balance, \\\"EW: Insufficient ETH\\\");\\n            \\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"EW: ETH transfer failed\\\");\\n            \\n            emit EmergencyWithdrawETH(amount, to);\\n        } else {\\n            // Withdraw ERC20\\n            uint256 balance = IERC20(token).balanceOf(address(this));\\n            if (amount == 0) amount = balance;\\n            require(amount <= balance, \\\"EW: Insufficient tokens\\\");\\n            \\n            IERC20(token).safeTransfer(to, amount);\\n            \\n            emit EmergencyWithdrawToken(token, amount, to);\\n        }\\n    }\\n    \\n    /**\\n     * @notice Emergency withdraw multiple tokens\\n     * @param tokens Array of token addresses\\n     * @param to Recipient address\\n     */\\n    function emergencyWithdrawMultiple(\\n        address[] calldata tokens,\\n        address to\\n    ) external onlyOwner {\\n        require(to != address(0), \\\"EW: Invalid recipient\\\");\\n        \\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == address(0)) {\\n                // Withdraw all ETH\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    (bool success, ) = to.call{value: balance}(\\\"\\\");\\n                    require(success, \\\"EW: ETH transfer failed\\\");\\n                    emit EmergencyWithdrawETH(balance, to);\\n                }\\n            } else {\\n                // Withdraw all tokens\\n                uint256 balance = IERC20(tokens[i]).balanceOf(address(this));\\n                if (balance > 0) {\\n                    IERC20(tokens[i]).safeTransfer(to, balance);\\n                    emit EmergencyWithdrawToken(tokens[i], balance, to);\\n                }\\n            }\\n        }\\n    }\\n}\",\"versionPragma\":\"0.8.22\"},\"contracts/libraries/ValidationLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/**\\n * @title ValidationLibrary\\n * @notice Centralized validation logic to eliminate duplication\\n * @dev Use this library for all common validation patterns\\n */\\nlibrary ValidationLibrary {\\n    \\n    /**\\n     * @notice Validates that amount is greater than zero\\n     * @param amount The amount to validate\\n     */\\n    function validateAmount(uint256 amount) internal pure {\\n        require(amount > 0, \\\"VL: Invalid amount\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates that address is not zero\\n     * @param addr The address to validate\\n     */\\n    function validateAddress(address addr) internal pure {\\n        require(addr != address(0), \\\"VL: Zero address\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates recipient address\\n     * @param recipient The recipient address to validate\\n     */\\n    function validateRecipient(address recipient) internal pure {\\n        require(recipient != address(0), \\\"VL: Invalid recipient\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates array lengths match\\n     * @param length1 First array length\\n     * @param length2 Second array length\\n     */\\n    function validateArrayLengths(uint256 length1, uint256 length2) internal pure {\\n        require(length1 == length2, \\\"VL: Array length mismatch\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates multiple array lengths match\\n     * @param lengths Array of lengths to compare\\n     */\\n    function validateMultipleArrayLengths(uint256[] memory lengths) internal pure {\\n        if (lengths.length == 0) return;\\n        uint256 expectedLength = lengths[0];\\n        for (uint256 i = 1; i < lengths.length; i++) {\\n            require(lengths[i] == expectedLength, \\\"VL: Array length mismatch\\\");\\n        }\\n    }\\n    \\n    /**\\n     * @notice Validates array is not empty and within bounds\\n     * @param length Array length\\n     * @param maxLength Maximum allowed length\\n     */\\n    function validateArrayBounds(uint256 length, uint256 maxLength) internal pure {\\n        require(length > 0, \\\"VL: Empty array\\\");\\n        require(length <= maxLength, \\\"VL: Array too large\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates deadline has not passed\\n     * @param deadline The deadline timestamp\\n     */\\n    function validateDeadline(uint256 deadline) internal view {\\n        require(deadline >= block.timestamp, \\\"VL: Deadline passed\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates slippage is within acceptable range\\n     * @param amountOut Actual output amount\\n     * @param minAmountOut Minimum acceptable amount\\n     */\\n    function validateSlippage(uint256 amountOut, uint256 minAmountOut) internal pure {\\n        require(amountOut >= minAmountOut, \\\"VL: Slippage exceeded\\\");\\n    }\\n    \\n    /**\\n     * @notice Validates fee is within acceptable range (max 10%)\\n     * @param fee Fee in basis points\\n     */\\n    function validateFeeBps(uint256 fee) internal pure {\\n        require(fee <= 1000, \\\"VL: Fee too high\\\"); // Max 10%\\n    }\\n    \\n    /**\\n     * @notice Validates chain ID is supported\\n     * @param chainId The chain ID to validate\\n     * @param isSupported Whether the chain is supported\\n     */\\n    function validateChainId(uint256 chainId, bool isSupported) internal pure {\\n        require(isSupported, \\\"VL: Unsupported chain\\\");\\n        require(chainId > 0, \\\"VL: Invalid chain ID\\\");\\n    }\\n}\",\"versionPragma\":\"0.8.22\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0xE9A5c374245B851841FDC363B34B60E82aA1EbFe","bytecode":"0x60803461010957601f61163238819003918201601f19168301916001600160401b0383118484101761010e5780849260209460405283398101031261010957516001600160a01b03808216918290036101095733156100f0576000549060018060a01b0319913383821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001805582156100bb5750600554161760055560405161150d90816101258239f35b62461bcd60e51b815260206004820152601060248201526f564c3a205a65726f206164647265737360801b6044820152606490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c9081627a94c11461109f575080630139904e146110675780630a6e0fd414610f3957806321edaa7014610de75780633f4ba83a14610d7e5780634641287814610d425780634690484014610d19578063551512de14610b34578063561e78c514610a995780635c975abb14610a7557806360c6d8ae14610a56578063715018a6146109f95780637439459b146108fd5780638456cb59146108a25780638da5cb5b1461087a578063bfcfa66b1461082c578063c437c1fd146106f9578063e74b981b1461063f578063eaf7406a14610496578063f00046551461031b578063f25552781461019d5763f2fde38b1461011457600080fd5b346101995760203660031901126101995761012d611135565b906101366113e6565b6001600160a01b0391821692831561018357505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b508290346103175782600319360112610317576101b8611135565b6001600160a01b0360243581811692908381036102f6576101d76113e6565b6101df6114b4565b6101e76113c8565b921561030b575b85516370a0823160e01b815230818601529116926020908183602481885afa9283156103015786936102ce575b50821561029757508495600361028d92867ff3a15b70ef42163a42bbb07edb60d02f31fd11d394c9326022f78e1c7e12f68597985252600181882001610262848254611230565b905561026f838588611412565b519182526001600160a01b0390921660208201529081906040820190565b0390a26001805580f35b60649187519162461bcd60e51b835282015260136024820152724e6f206665657320746f20776974686472617760681b6044820152fd5b9092508181813d83116102fa575b6102e681836111f8565b810103126102f65751918761021b565b8580fd5b503d6102dc565b87513d88823e3d90fd5b600554821692506101ee565b5080fd5b5090346101995761032b366111b5565b936103379291926113e6565b61033f6114b4565b6001600160a01b0394918583161561048a575b865b84811061036357876001805580f35b86610377610372838886611253565b611286565b1690865180926370a0823160e01b8252308683015281602460209384935afa908115610480578a9161044c575b60019350816103b6575b505001610354565b6003908a6103c8610372868c8a611253565b168c525282888b20016103dc828254611230565b90556103f881878b6103f2610372878d8b611253565b16611412565b7ff3a15b70ef42163a42bbb07edb60d02f31fd11d394c9326022f78e1c7e12f685868a610429610372868c8a611253565b8b519485526001600160a01b039290921660208501521691604090a238806103ae565b80915083813d8311610479575b61046381836111f8565b810103126104755760019251906103a4565b8980fd5b503d610459565b88513d8c823e3d90fd5b60055486169250610352565b5034610199576104a5366111b5565b9193906104b06113e6565b6001600160a01b0383811694906104c886151561129a565b875b8381106104d5578880f35b816104e461037283878c611253565b1661054c5760019087878b4780610501575b505050505b016104ca565b61053d828080602095857f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9985af16105376112de565b5061131e565b8951908152a287878b386104f6565b8161055b61037283878c611253565b1690855180926370a0823160e01b8252308683015281602460209586935afa9081156106355790868a928d926105fe575b50600194868d8c87866105a7575b50505050505050506104fb565b85836105e48961037295886103f2610372887f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c9e6105e99c611253565b611253565b16928a51908152a387388681868d8c8761059a565b925050508281813d831161062e575b61061781836111f8565b8101031261062a5751889086600161058c565b8a80fd5b503d61060d565b87513d8d823e3d90fd5b509190346103175760203660031901126103175761065b611135565b6106636113e6565b6001600160a01b039081169384156106c357507faaebcf1bfa00580e41d966056b48521fa9f202645c86d4ddf28113e617c1b1d3929360055491816bffffffffffffffffffffffff60a01b8416176005558351921682526020820152a180f35b606490602084519162461bcd60e51b8352820152601060248201526f564c3a205a65726f206164647265737360801b6044820152fd5b5034610199576020908160031936011261081357803567ffffffffffffffff81116108285761072b9036908301611150565b9161073583611382565b9561073f84611382565b93815b8181106107715787518881528061076d8989610760848e018f611181565b9184830390850152611181565b0390f35b602490876001600160a01b038061078c61037285888c611253565b168652600382528a8620546107a1848e6113b4565b526107b061037284878b611253565b168a51938480926370a0823160e01b8252308a8301525afa801561081e5784906107ea575b600192506107e382896113b4565b5201610742565b50908781813d8311610817575b61080181836111f8565b810103126108135790600191516107d5565b8380fd5b503d6107f7565b89513d86823e3d90fd5b8480fd5b5050346103175760203660031901126103175760609181906001600160a01b03610854611135565b168152600360205220805491600260018301549201549181519384526020840152820152f35b505034610317578160031936011261031757905490516001600160a01b039091168152602090f35b50503461031757816003193601126103175760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916108e06113e6565b6108e86113c8565b600160ff19600254161760025551338152a180f35b5090346101995760209081600319360112610813576001600160a01b03610922611135565b16908185526003835280852081516060810181811067ffffffffffffffff8211176109e65783528482549687835284600260018601549586858701520154930192835260248551809781936370a0823160e01b835230908301525afa9384156109dc5787946109a5575b5060809650519382519586528501528301526060820152f35b9093508481813d83116109d5575b6109bd81836111f8565b810103126109d1576080965051923861098c565b8680fd5b503d6109b3565b83513d89823e3d90fd5b634e487b7160e01b885260418752602488fd5b8334610a535780600319360112610a5357610a126113e6565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346103175781600319360112610317576020906006549051908152f35b50503461031757816003193601126103175760209060ff6002541690519015158152f35b5034610199578160031936011261019957610ab2611135565b602435918215158303610828577f41d74103d46ef82053a81f2586320f276ea86c84fc3f4781d1d6b9d05917481f93610b2e91610aed6113e6565b6001600160a01b0384168752602052808620805460ff191660ff86151516179055516001600160a01b03909216825291151560208201529081906040820190565b0390a180f35b50903461019957606036600319011261019957610b4f611135565b6044356001600160a01b03818116949293929060243590868403610d1557610b756113e6565b8195610b8288151561129a565b169081610c1c575050478415610c14575b8411610bda575091602091610bd286808080867f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9995af16105376112de565b51908152a280f35b606490602084519162461bcd60e51b8352820152601460248201527308aae744092dce6eaccccd2c6d2cadce8408aa8960631b6044820152fd5b935083610b93565b93918295939195516370a0823160e01b8152308282015260209586826024818b5afa918215610d0b578a92610cdc575b5015610cd4575b8411610c91575090610c89837f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c95949387611412565b51908152a380f35b825162461bcd60e51b8152908101859052601760248201527f45573a20496e73756666696369656e7420746f6b656e730000000000000000006044820152606490fd5b935083610c53565b9091508681813d8311610d04575b610cf481836111f8565b8101031261047557519038610c4c565b503d610cea565b85513d8c823e3d90fd5b8780fd5b50503461031757816003193601126103175760055490516001600160a01b039091168152602090f35b50346101995760203660031901126101995760209260ff918391906001600160a01b03610d6d611135565b168252855220541690519015158152f35b5034610199578260031936011261019957610d976113e6565b6002549060ff821615610dd9575060ff1916600255513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b8251638dfc202b60e01b8152fd5b50903461019957806003193601126101995767ffffffffffffffff823581811161082857610e189036908501611150565b90916024359081116102f657610e319036908601611150565b919092610e3c6113e6565b828203610ef657865b828110610e50578780f35b80610e98610e69610e64600194888a611253565b611279565b838060a01b03610e7d610372858989611253565b168b5289602052888b209060ff801983541691151516179055565b7f41d74103d46ef82053a81f2586320f276ea86c84fc3f4781d1d6b9d05917481f610ec7610372838787611253565b610ed5610e6484898b611253565b89516001600160a01b0392909216825215156020820152604090a101610e45565b845162461bcd60e51b8152602081880152601960248201527f564c3a204172726179206c656e677468206d69736d61746368000000000000006044820152606490fd5b509034610199578060031936011261019957610f53611135565b602435923385528060205260ff83862054168015611054575b1561102057610f796113c8565b8315610fe85750907f108516ddcf5ba43cea6bb2cd5ff6d59ac196c1c86ccb9178332b9dd72d1ca5619160018060a01b0316928385526003602052818520610fc2828254611230565b8155600242910155610fd681600654611230565b6006558151908152426020820152a280f35b606490602084519162461bcd60e51b8352820152601260248201527115930e88125b9d985b1a5908185b5bdd5b9d60721b6044820152fd5b606490602084519162461bcd60e51b8352820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152fd5b5084546001600160a01b03163314610f6c565b5050346103175760203660031901126103175760209181906001600160a01b0361108f611135565b1681526003845220549051908152f35b84848492346101995760209384600319360112610813578490829060249082906001600160a01b036110cf611135565b16906370a0823160e01b835230908301525afa92831561112a5780936110f8575b505051908152f35b909192508382813d8311611123575b61111181836111f8565b81010312610a535750519083806110f0565b503d611107565b8251903d90823e3d90fd5b600435906001600160a01b038216820361114b57565b600080fd5b9181601f8401121561114b5782359167ffffffffffffffff831161114b576020808501948460051b01011161114b57565b90815180825260208080930193019160005b8281106111a1575050505090565b835185529381019392810192600101611193565b604060031982011261114b576004359067ffffffffffffffff821161114b576111e091600401611150565b90916024356001600160a01b038116810361114b5790565b90601f8019910116810190811067ffffffffffffffff82111761121a57604052565b634e487b7160e01b600052604160045260246000fd5b9190820180921161123d57565b634e487b7160e01b600052601160045260246000fd5b91908110156112635760051b0190565b634e487b7160e01b600052603260045260246000fd5b35801515810361114b5790565b356001600160a01b038116810361114b5790565b156112a157565b60405162461bcd60e51b81526020600482015260156024820152741155ce88125b9d985b1a59081c9958da5c1a595b9d605a1b6044820152606490fd5b3d15611319573d9067ffffffffffffffff821161121a576040519161130d601f8201601f1916602001846111f8565b82523d6000602084013e565b606090565b1561132557565b60405162461bcd60e51b815260206004820152601760248201527f45573a20455448207472616e73666572206661696c65640000000000000000006044820152606490fd5b67ffffffffffffffff811161121a5760051b60200190565b9061138c8261136a565b61139960405191826111f8565b82815280926113aa601f199161136a565b0190602036910137565b80518210156112635760209160051b010190565b60ff600254166113d457565b60405163d93c066560e01b8152600490fd5b6000546001600160a01b031633036113fa57565b60405163118cdaa760e01b8152336004820152602490fd5b60405163a9059cbb60e01b602082019081526001600160a01b0393841660248301526044808301959095529381529092608082019067ffffffffffffffff82118383101761121a57602092600092604052519082865af1156114a8576000513d61149f57508082163b155b611485575050565b604051635274afe760e01b81529116600482015260249150fd5b6001141561147d565b6040513d6000823e3d90fd5b6002600154146114c5576002600155565b604051633ee5aeb560e01b8152600490fdfea264697066735822122033ae7a89a078040c7ea1cbea4e6c624a872921c5e0e4e0dea7839eb317ec29e664736f6c63430008160033","deployedBytecode":"0x6080604081815260048036101561001557600080fd5b600092833560e01c9081627a94c11461109f575080630139904e146110675780630a6e0fd414610f3957806321edaa7014610de75780633f4ba83a14610d7e5780634641287814610d425780634690484014610d19578063551512de14610b34578063561e78c514610a995780635c975abb14610a7557806360c6d8ae14610a56578063715018a6146109f95780637439459b146108fd5780638456cb59146108a25780638da5cb5b1461087a578063bfcfa66b1461082c578063c437c1fd146106f9578063e74b981b1461063f578063eaf7406a14610496578063f00046551461031b578063f25552781461019d5763f2fde38b1461011457600080fd5b346101995760203660031901126101995761012d611135565b906101366113e6565b6001600160a01b0391821692831561018357505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b508290346103175782600319360112610317576101b8611135565b6001600160a01b0360243581811692908381036102f6576101d76113e6565b6101df6114b4565b6101e76113c8565b921561030b575b85516370a0823160e01b815230818601529116926020908183602481885afa9283156103015786936102ce575b50821561029757508495600361028d92867ff3a15b70ef42163a42bbb07edb60d02f31fd11d394c9326022f78e1c7e12f68597985252600181882001610262848254611230565b905561026f838588611412565b519182526001600160a01b0390921660208201529081906040820190565b0390a26001805580f35b60649187519162461bcd60e51b835282015260136024820152724e6f206665657320746f20776974686472617760681b6044820152fd5b9092508181813d83116102fa575b6102e681836111f8565b810103126102f65751918761021b565b8580fd5b503d6102dc565b87513d88823e3d90fd5b600554821692506101ee565b5080fd5b5090346101995761032b366111b5565b936103379291926113e6565b61033f6114b4565b6001600160a01b0394918583161561048a575b865b84811061036357876001805580f35b86610377610372838886611253565b611286565b1690865180926370a0823160e01b8252308683015281602460209384935afa908115610480578a9161044c575b60019350816103b6575b505001610354565b6003908a6103c8610372868c8a611253565b168c525282888b20016103dc828254611230565b90556103f881878b6103f2610372878d8b611253565b16611412565b7ff3a15b70ef42163a42bbb07edb60d02f31fd11d394c9326022f78e1c7e12f685868a610429610372868c8a611253565b8b519485526001600160a01b039290921660208501521691604090a238806103ae565b80915083813d8311610479575b61046381836111f8565b810103126104755760019251906103a4565b8980fd5b503d610459565b88513d8c823e3d90fd5b60055486169250610352565b5034610199576104a5366111b5565b9193906104b06113e6565b6001600160a01b0383811694906104c886151561129a565b875b8381106104d5578880f35b816104e461037283878c611253565b1661054c5760019087878b4780610501575b505050505b016104ca565b61053d828080602095857f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9985af16105376112de565b5061131e565b8951908152a287878b386104f6565b8161055b61037283878c611253565b1690855180926370a0823160e01b8252308683015281602460209586935afa9081156106355790868a928d926105fe575b50600194868d8c87866105a7575b50505050505050506104fb565b85836105e48961037295886103f2610372887f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c9e6105e99c611253565b611253565b16928a51908152a387388681868d8c8761059a565b925050508281813d831161062e575b61061781836111f8565b8101031261062a5751889086600161058c565b8a80fd5b503d61060d565b87513d8d823e3d90fd5b509190346103175760203660031901126103175761065b611135565b6106636113e6565b6001600160a01b039081169384156106c357507faaebcf1bfa00580e41d966056b48521fa9f202645c86d4ddf28113e617c1b1d3929360055491816bffffffffffffffffffffffff60a01b8416176005558351921682526020820152a180f35b606490602084519162461bcd60e51b8352820152601060248201526f564c3a205a65726f206164647265737360801b6044820152fd5b5034610199576020908160031936011261081357803567ffffffffffffffff81116108285761072b9036908301611150565b9161073583611382565b9561073f84611382565b93815b8181106107715787518881528061076d8989610760848e018f611181565b9184830390850152611181565b0390f35b602490876001600160a01b038061078c61037285888c611253565b168652600382528a8620546107a1848e6113b4565b526107b061037284878b611253565b168a51938480926370a0823160e01b8252308a8301525afa801561081e5784906107ea575b600192506107e382896113b4565b5201610742565b50908781813d8311610817575b61080181836111f8565b810103126108135790600191516107d5565b8380fd5b503d6107f7565b89513d86823e3d90fd5b8480fd5b5050346103175760203660031901126103175760609181906001600160a01b03610854611135565b168152600360205220805491600260018301549201549181519384526020840152820152f35b505034610317578160031936011261031757905490516001600160a01b039091168152602090f35b50503461031757816003193601126103175760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916108e06113e6565b6108e86113c8565b600160ff19600254161760025551338152a180f35b5090346101995760209081600319360112610813576001600160a01b03610922611135565b16908185526003835280852081516060810181811067ffffffffffffffff8211176109e65783528482549687835284600260018601549586858701520154930192835260248551809781936370a0823160e01b835230908301525afa9384156109dc5787946109a5575b5060809650519382519586528501528301526060820152f35b9093508481813d83116109d5575b6109bd81836111f8565b810103126109d1576080965051923861098c565b8680fd5b503d6109b3565b83513d89823e3d90fd5b634e487b7160e01b885260418752602488fd5b8334610a535780600319360112610a5357610a126113e6565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346103175781600319360112610317576020906006549051908152f35b50503461031757816003193601126103175760209060ff6002541690519015158152f35b5034610199578160031936011261019957610ab2611135565b602435918215158303610828577f41d74103d46ef82053a81f2586320f276ea86c84fc3f4781d1d6b9d05917481f93610b2e91610aed6113e6565b6001600160a01b0384168752602052808620805460ff191660ff86151516179055516001600160a01b03909216825291151560208201529081906040820190565b0390a180f35b50903461019957606036600319011261019957610b4f611135565b6044356001600160a01b03818116949293929060243590868403610d1557610b756113e6565b8195610b8288151561129a565b169081610c1c575050478415610c14575b8411610bda575091602091610bd286808080867f05f271cba6a2c296f81808f68936601d4ea77100ca254faa7e0718d89703b2d9995af16105376112de565b51908152a280f35b606490602084519162461bcd60e51b8352820152601460248201527308aae744092dce6eaccccd2c6d2cadce8408aa8960631b6044820152fd5b935083610b93565b93918295939195516370a0823160e01b8152308282015260209586826024818b5afa918215610d0b578a92610cdc575b5015610cd4575b8411610c91575090610c89837f63e54df36d812af3a73b796ff04f96532b66dd57bc342c07744b4dbcd3de700c95949387611412565b51908152a380f35b825162461bcd60e51b8152908101859052601760248201527f45573a20496e73756666696369656e7420746f6b656e730000000000000000006044820152606490fd5b935083610c53565b9091508681813d8311610d04575b610cf481836111f8565b8101031261047557519038610c4c565b503d610cea565b85513d8c823e3d90fd5b8780fd5b50503461031757816003193601126103175760055490516001600160a01b039091168152602090f35b50346101995760203660031901126101995760209260ff918391906001600160a01b03610d6d611135565b168252855220541690519015158152f35b5034610199578260031936011261019957610d976113e6565b6002549060ff821615610dd9575060ff1916600255513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b8251638dfc202b60e01b8152fd5b50903461019957806003193601126101995767ffffffffffffffff823581811161082857610e189036908501611150565b90916024359081116102f657610e319036908601611150565b919092610e3c6113e6565b828203610ef657865b828110610e50578780f35b80610e98610e69610e64600194888a611253565b611279565b838060a01b03610e7d610372858989611253565b168b5289602052888b209060ff801983541691151516179055565b7f41d74103d46ef82053a81f2586320f276ea86c84fc3f4781d1d6b9d05917481f610ec7610372838787611253565b610ed5610e6484898b611253565b89516001600160a01b0392909216825215156020820152604090a101610e45565b845162461bcd60e51b8152602081880152601960248201527f564c3a204172726179206c656e677468206d69736d61746368000000000000006044820152606490fd5b509034610199578060031936011261019957610f53611135565b602435923385528060205260ff83862054168015611054575b1561102057610f796113c8565b8315610fe85750907f108516ddcf5ba43cea6bb2cd5ff6d59ac196c1c86ccb9178332b9dd72d1ca5619160018060a01b0316928385526003602052818520610fc2828254611230565b8155600242910155610fd681600654611230565b6006558151908152426020820152a280f35b606490602084519162461bcd60e51b8352820152601260248201527115930e88125b9d985b1a5908185b5bdd5b9d60721b6044820152fd5b606490602084519162461bcd60e51b8352820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b6044820152fd5b5084546001600160a01b03163314610f6c565b5050346103175760203660031901126103175760209181906001600160a01b0361108f611135565b1681526003845220549051908152f35b84848492346101995760209384600319360112610813578490829060249082906001600160a01b036110cf611135565b16906370a0823160e01b835230908301525afa92831561112a5780936110f8575b505051908152f35b909192508382813d8311611123575b61111181836111f8565b81010312610a535750519083806110f0565b503d611107565b8251903d90823e3d90fd5b600435906001600160a01b038216820361114b57565b600080fd5b9181601f8401121561114b5782359167ffffffffffffffff831161114b576020808501948460051b01011161114b57565b90815180825260208080930193019160005b8281106111a1575050505090565b835185529381019392810192600101611193565b604060031982011261114b576004359067ffffffffffffffff821161114b576111e091600401611150565b90916024356001600160a01b038116810361114b5790565b90601f8019910116810190811067ffffffffffffffff82111761121a57604052565b634e487b7160e01b600052604160045260246000fd5b9190820180921161123d57565b634e487b7160e01b600052601160045260246000fd5b91908110156112635760051b0190565b634e487b7160e01b600052603260045260246000fd5b35801515810361114b5790565b356001600160a01b038116810361114b5790565b156112a157565b60405162461bcd60e51b81526020600482015260156024820152741155ce88125b9d985b1a59081c9958da5c1a595b9d605a1b6044820152606490fd5b3d15611319573d9067ffffffffffffffff821161121a576040519161130d601f8201601f1916602001846111f8565b82523d6000602084013e565b606090565b1561132557565b60405162461bcd60e51b815260206004820152601760248201527f45573a20455448207472616e73666572206661696c65640000000000000000006044820152606490fd5b67ffffffffffffffff811161121a5760051b60200190565b9061138c8261136a565b61139960405191826111f8565b82815280926113aa601f199161136a565b0190602036910137565b80518210156112635760209160051b010190565b60ff600254166113d457565b60405163d93c066560e01b8152600490fd5b6000546001600160a01b031633036113fa57565b60405163118cdaa760e01b8152336004820152602490fd5b60405163a9059cbb60e01b602082019081526001600160a01b0393841660248301526044808301959095529381529092608082019067ffffffffffffffff82118383101761121a57602092600092604052519082865af1156114a8576000513d61149f57508082163b155b611485575050565b604051635274afe760e01b81529116600482015260249150fd5b6001141561147d565b6040513d6000823e3d90fd5b6002600154146114c5576002600155565b604051633ee5aeb560e01b8152600490fdfea264697066735822122033ae7a89a078040c7ea1cbea4e6c624a872921c5e0e4e0dea7839eb317ec29e664736f6c63430008160033","abi":[{"inputs":[{"internalType":"address","name":"_feeRecipient","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"collector","type":"address"},{"indexed":false,"internalType":"bool","name":"authorized","type":"bool"}],"name":"CollectorAuthorized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"EmergencyWithdrawETH","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"EmergencyWithdrawToken","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"FeeCollected","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"oldRecipient","type":"address"},{"indexed":false,"internalType":"address","name":"newRecipient","type":"address"}],"name":"FeeRecipientUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"FeeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"address","name":"collector","type":"address"},{"internalType":"bool","name":"authorized","type":"bool"}],"name":"authorizeCollector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"collectors","type":"address[]"},{"internalType":"bool[]","name":"authorized","type":"bool[]"}],"name":"authorizeCollectors","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorizedCollectors","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"to","type":"address"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"address","name":"to","type":"address"}],"name":"emergencyWithdrawMultiple","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"feeInfo","outputs":[{"internalType":"uint256","name":"totalCollected","type":"uint256"},{"internalType":"uint256","name":"totalWithdrawn","type":"uint256"},{"internalType":"uint256","name":"lastCollection","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"}],"name":"getAllFeeInfo","outputs":[{"internalType":"uint256[]","name":"totalCollected","type":"uint256[]"},{"internalType":"uint256[]","name":"available","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getAvailableFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getFeeInfo","outputs":[{"internalType":"uint256","name":"totalCollected","type":"uint256"},{"internalType":"uint256","name":"totalWithdrawn","type":"uint256"},{"internalType":"uint256","name":"available","type":"uint256"},{"internalType":"uint256","name":"lastCollection","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getTotalFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"recordFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"setFeeRecipient","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalFeesCollected","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"withdrawMultipleFees","outputs":[],"stateMutability":"nonpayable","type":"function"}]}
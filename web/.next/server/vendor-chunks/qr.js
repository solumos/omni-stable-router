"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/qr";
exports.ids = ["vendor-chunks/qr"];
exports.modules = {

/***/ "(ssr)/./node_modules/qr/index.js":
/*!**********************************!*\
  !*** ./node_modules/qr/index.js ***!
  \**********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bitmap: () => (/* binding */ Bitmap),\n/* harmony export */   ECMode: () => (/* binding */ ECMode),\n/* harmony export */   Encoding: () => (/* binding */ Encoding),\n/* harmony export */   _tests: () => (/* binding */ _tests),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   encodeQR: () => (/* binding */ encodeQR),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   utils: () => (/* binding */ utils)\n/* harmony export */ });\n/*!\nCopyright (c) 2023 Paul Miller (paulmillr.com)\nThe library paulmillr-qr is dual-licensed under the Apache 2.0 OR MIT license.\nYou can select a license of your choice.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/ /**\n * Methods for encoding (generating) QR code patterns.\n * Check out decode.ts for decoding (reading).\n * @module\n * @example\n```js\nimport encodeQR from 'qr';\nconst txt = 'Hello world';\nconst ascii = encodeQR(txt, 'ascii'); // Not all fonts are supported\nconst terminalFriendly = encodeQR(txt, 'term'); // 2x larger, all fonts are OK\nconst gifBytes = encodeQR(txt, 'gif'); // Uncompressed GIF\nconst svgElement = encodeQR(txt, 'svg'); // SVG vector image element\nconst array = encodeQR(txt, 'raw'); // 2d array for canvas or other libs\n// import decodeQR from 'qr/decode.js';\n```\n */ // We do not use newline escape code directly in strings because it's not parser-friendly\nconst chCodes = {\n    newline: 10,\n    reset: 27\n};\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n)) throw new Error(`integer expected: ${n}`);\n}\nfunction validateVersion(ver) {\n    if (!Number.isSafeInteger(ver) || ver < 1 || ver > 40) throw new Error(`Invalid version=${ver}. Expected number [1..40]`);\n}\nfunction bin(dec, pad) {\n    return dec.toString(2).padStart(pad, \"0\");\n}\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= 0 ? result : b + result;\n}\nfunction fillArr(length, val) {\n    return new Array(length).fill(val);\n}\n/**\n * Interleaves byte blocks.\n * @param blocks [[1, 2, 3], [4, 5, 6]]\n * @returns [1, 4, 2, 5, 3, 6]\n */ function interleaveBytes(...blocks) {\n    let len = 0;\n    for (const b of blocks)len = Math.max(len, b.length);\n    const res = [];\n    for(let i = 0; i < len; i++){\n        for (const b of blocks){\n            if (i >= b.length) continue; // outside of block, skip\n            res.push(b[i]);\n        }\n    }\n    return new Uint8Array(res);\n}\nfunction includesAt(lst, pattern, index) {\n    if (index < 0 || index + pattern.length > lst.length) return false;\n    for(let i = 0; i < pattern.length; i++)if (pattern[i] !== lst[index + i]) return false;\n    return true;\n}\n// Optimize for minimal score/penalty\nfunction best() {\n    let best;\n    let bestScore = Infinity;\n    return {\n        add (score, value) {\n            if (score >= bestScore) return;\n            best = value;\n            bestScore = score;\n        },\n        get: ()=>best,\n        score: ()=>bestScore\n    };\n}\n// Based on https://github.com/paulmillr/scure-base/blob/main/index.ts\nfunction alphabet(alphabet) {\n    return {\n        has: (char)=>alphabet.includes(char),\n        decode: (input)=>{\n            if (!Array.isArray(input) || input.length && typeof input[0] !== \"string\") throw new Error(\"alphabet.decode input should be array of strings\");\n            return input.map((letter)=>{\n                if (typeof letter !== \"string\") throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n        encode: (digits)=>{\n            if (!Array.isArray(digits) || digits.length && typeof digits[0] !== \"number\") throw new Error(\"alphabet.encode input should be an array of numbers\");\n            return digits.map((i)=>{\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length) throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        }\n    };\n}\nclass Bitmap {\n    static size(size, limit) {\n        if (typeof size === \"number\") size = {\n            height: size,\n            width: size\n        };\n        if (!Number.isSafeInteger(size.height) && size.height !== Infinity) throw new Error(`Bitmap: invalid height=${size.height} (${typeof size.height})`);\n        if (!Number.isSafeInteger(size.width) && size.width !== Infinity) throw new Error(`Bitmap: invalid width=${size.width} (${typeof size.width})`);\n        if (limit !== undefined) {\n            // Clamp length, so it won't overflow, also allows to use Infinity, so we draw until end\n            size = {\n                width: Math.min(size.width, limit.width),\n                height: Math.min(size.height, limit.height)\n            };\n        }\n        return size;\n    }\n    static fromString(s) {\n        // Remove linebreaks on start and end, so we draw in `` section\n        s = s.replace(/^\\n+/g, \"\").replace(/\\n+$/g, \"\");\n        const lines = s.split(String.fromCharCode(chCodes.newline));\n        const height = lines.length;\n        const data = new Array(height);\n        let width;\n        for (const line of lines){\n            const row = line.split(\"\").map((i)=>{\n                if (i === \"X\") return true;\n                if (i === \" \") return false;\n                if (i === \"?\") return undefined;\n                throw new Error(`Bitmap.fromString: unknown symbol=${i}`);\n            });\n            if (width && row.length !== width) throw new Error(`Bitmap.fromString different row sizes: width=${width} cur=${row.length}`);\n            width = row.length;\n            data.push(row);\n        }\n        if (!width) width = 0;\n        return new Bitmap({\n            height,\n            width\n        }, data);\n    }\n    constructor(size, data){\n        const { height, width } = Bitmap.size(size);\n        this.data = data || Array.from({\n            length: height\n        }, ()=>fillArr(width, undefined));\n        this.height = height;\n        this.width = width;\n    }\n    point(p) {\n        return this.data[p.y][p.x];\n    }\n    isInside(p) {\n        return 0 <= p.x && p.x < this.width && 0 <= p.y && p.y < this.height;\n    }\n    size(offset) {\n        if (!offset) return {\n            height: this.height,\n            width: this.width\n        };\n        const { x, y } = this.xy(offset);\n        return {\n            height: this.height - y,\n            width: this.width - x\n        };\n    }\n    xy(c) {\n        if (typeof c === \"number\") c = {\n            x: c,\n            y: c\n        };\n        if (!Number.isSafeInteger(c.x)) throw new Error(`Bitmap: invalid x=${c.x}`);\n        if (!Number.isSafeInteger(c.y)) throw new Error(`Bitmap: invalid y=${c.y}`);\n        // Do modulo, so we can use negative positions\n        c.x = mod(c.x, this.width);\n        c.y = mod(c.y, this.height);\n        return c;\n    }\n    // Basically every operation can be represented as rect\n    rect(c, size, value) {\n        const { x, y } = this.xy(c);\n        const { height, width } = Bitmap.size(size, this.size({\n            x,\n            y\n        }));\n        for(let yPos = 0; yPos < height; yPos++){\n            for(let xPos = 0; xPos < width; xPos++){\n                // NOTE: we use give function relative coordinates inside box\n                this.data[y + yPos][x + xPos] = typeof value === \"function\" ? value({\n                    x: xPos,\n                    y: yPos\n                }, this.data[y + yPos][x + xPos]) : value;\n            }\n        }\n        return this;\n    }\n    // returns rectangular part of bitmap\n    rectRead(c, size, fn) {\n        return this.rect(c, size, (c, cur)=>{\n            fn(c, cur);\n            return cur;\n        });\n    }\n    // Horizontal & vertical lines\n    hLine(c, len, value) {\n        return this.rect(c, {\n            width: len,\n            height: 1\n        }, value);\n    }\n    vLine(c, len, value) {\n        return this.rect(c, {\n            width: 1,\n            height: len\n        }, value);\n    }\n    // add border\n    border(border = 2, value) {\n        const height = this.height + 2 * border;\n        const width = this.width + 2 * border;\n        const v = fillArr(border, value);\n        const h = Array.from({\n            length: border\n        }, ()=>fillArr(width, value));\n        return new Bitmap({\n            height,\n            width\n        }, [\n            ...h,\n            ...this.data.map((i)=>[\n                    ...v,\n                    ...i,\n                    ...v\n                ]),\n            ...h\n        ]);\n    }\n    // Embed another bitmap on coordinates\n    embed(c, bm) {\n        return this.rect(c, bm.size(), ({ x, y })=>bm.data[y][x]);\n    }\n    // returns rectangular part of bitmap\n    rectSlice(c, size = this.size()) {\n        const rect = new Bitmap(Bitmap.size(size, this.size(this.xy(c))));\n        this.rect(c, size, ({ x, y }, cur)=>rect.data[y][x] = cur);\n        return rect;\n    }\n    // Change shape, replace rows with columns (data[y][x] -> data[x][y])\n    inverse() {\n        const { height, width } = this;\n        const res = new Bitmap({\n            height: width,\n            width: height\n        });\n        return res.rect({\n            x: 0,\n            y: 0\n        }, Infinity, ({ x, y })=>this.data[x][y]);\n    }\n    // Each pixel size is multiplied by factor\n    scale(factor) {\n        if (!Number.isSafeInteger(factor) || factor > 1024) throw new Error(`invalid scale factor: ${factor}`);\n        const { height, width } = this;\n        const res = new Bitmap({\n            height: factor * height,\n            width: factor * width\n        });\n        return res.rect({\n            x: 0,\n            y: 0\n        }, Infinity, ({ x, y })=>this.data[Math.floor(y / factor)][Math.floor(x / factor)]);\n    }\n    clone() {\n        const res = new Bitmap(this.size());\n        return res.rect({\n            x: 0,\n            y: 0\n        }, this.size(), ({ x, y })=>this.data[y][x]);\n    }\n    // Ensure that there is no undefined values left\n    assertDrawn() {\n        this.rectRead(0, Infinity, (_, cur)=>{\n            if (typeof cur !== \"boolean\") throw new Error(`Invalid color type=${typeof cur}`);\n        });\n    }\n    // Simple string representation for debugging\n    toString() {\n        return this.data.map((i)=>i.map((j)=>j === undefined ? \"?\" : j ? \"X\" : \" \").join(\"\")).join(String.fromCharCode(chCodes.newline));\n    }\n    toASCII() {\n        const { height, width, data } = this;\n        let out = \"\";\n        // Terminal character height is x2 of character width, so we process two rows of bitmap\n        // to produce one row of ASCII\n        for(let y = 0; y < height; y += 2){\n            for(let x = 0; x < width; x++){\n                const first = data[y][x];\n                const second = y + 1 >= height ? true : data[y + 1][x]; // if last row outside bitmap, make it black\n                if (!first && !second) out += \"█\"; // both rows white (empty)\n                else if (!first && second) out += \"▀\"; // top row white\n                else if (first && !second) out += \"▄\"; // down row white\n                else if (first && second) out += \" \"; // both rows black\n            }\n            out += String.fromCharCode(chCodes.newline);\n        }\n        return out;\n    }\n    toTerm() {\n        const cc = String.fromCharCode(chCodes.reset);\n        const reset = cc + \"[0m\";\n        const whiteBG = cc + \"[1;47m  \" + reset;\n        const darkBG = cc + `[40m  ` + reset;\n        return this.data.map((i)=>i.map((j)=>j ? darkBG : whiteBG).join(\"\")).join(String.fromCharCode(chCodes.newline));\n    }\n    toSVG(optimize = true) {\n        let out = `<svg viewBox=\"0 0 ${this.width} ${this.height}\" xmlns=\"http://www.w3.org/2000/svg\">`;\n        // Construct optimized SVG path data.\n        let pathData = \"\";\n        let prevPoint;\n        this.rectRead(0, Infinity, (point, val)=>{\n            if (!val) return;\n            const { x, y } = point;\n            if (!optimize) {\n                out += `<rect x=\"${x}\" y=\"${y}\" width=\"1\" height=\"1\" />`;\n                return;\n            }\n            // https://developer.mozilla.org/en-US/docs/Web/SVG/Reference/Attribute/d#path_commands\n            // Determine the shortest way to represent the initial cursor movement.\n            // M - Move cursor (without drawing) to absolute coordinate pair.\n            let m = `M${x} ${y}`;\n            // Only allow using the relative cursor move command if previous points\n            // were drawn.\n            if (prevPoint) {\n                // m - Move cursor (without drawing) to relative coordinate pair.\n                const relM = `m${x - prevPoint.x} ${y - prevPoint.y}`;\n                if (relM.length <= m.length) m = relM;\n            }\n            // Determine the shortest way to represent the cell's bottom line draw.\n            // H - Draw line from cursor position to absolute x coordinate.\n            // h - Draw line from cursor position to relative x coordinate.\n            const bH = x < 10 ? `H${x}` : \"h-1\";\n            // v - Draw line from cursor position to relative y coordinate.\n            // Z - Close path (draws line from cursor position to M coordinate).\n            pathData += `${m}h1v1${bH}Z`;\n            prevPoint = point;\n        });\n        if (optimize) out += `<path d=\"${pathData}\"/>`;\n        out += `</svg>`;\n        return out;\n    }\n    toGIF() {\n        // NOTE: Small, but inefficient implementation.\n        // Uses 1 byte per pixel.\n        const u16le = (i)=>[\n                i & 0xff,\n                i >>> 8 & 0xff\n            ];\n        const dims = [\n            ...u16le(this.width),\n            ...u16le(this.height)\n        ];\n        const data = [];\n        this.rectRead(0, Infinity, (_, cur)=>data.push(+(cur === true)));\n        const N = 126; // Block size\n        // prettier-ignore\n        const bytes = [\n            0x47,\n            0x49,\n            0x46,\n            0x38,\n            0x37,\n            0x61,\n            ...dims,\n            0xf6,\n            0x00,\n            0x00,\n            0xff,\n            0xff,\n            0xff,\n            ...fillArr(3 * 127, 0x00),\n            0x2c,\n            0x00,\n            0x00,\n            0x00,\n            0x00,\n            ...dims,\n            0x00,\n            0x07\n        ];\n        const fullChunks = Math.floor(data.length / N);\n        // Full blocks\n        for(let i = 0; i < fullChunks; i++)bytes.push(N + 1, 0x80, ...data.slice(N * i, N * (i + 1)).map((i)=>+i));\n        // Remaining bytes\n        bytes.push(data.length % N + 1, 0x80, ...data.slice(fullChunks * N).map((i)=>+i));\n        bytes.push(0x01, 0x81, 0x00, 0x3b);\n        return new Uint8Array(bytes);\n    }\n    toImage(isRGB = false) {\n        const { height, width } = this.size();\n        const data = new Uint8Array(height * width * (isRGB ? 3 : 4));\n        let i = 0;\n        for(let y = 0; y < height; y++){\n            for(let x = 0; x < width; x++){\n                const value = !!this.data[y][x] ? 0 : 255;\n                data[i++] = value;\n                data[i++] = value;\n                data[i++] = value;\n                if (!isRGB) data[i++] = 255; // alpha channel\n            }\n        }\n        return {\n            height,\n            width,\n            data\n        };\n    }\n}\n// End of utils\n// Runtime type-checking\n/** Error correction mode. low: 7%, medium: 15%, quartile: 25%, high: 30% */ const ECMode = [\n    \"low\",\n    \"medium\",\n    \"quartile\",\n    \"high\"\n];\n/** QR Code encoding */ const Encoding = [\n    \"numeric\",\n    \"alphanumeric\",\n    \"byte\",\n    \"kanji\",\n    \"eci\"\n];\n// Various constants & tables\n// prettier-ignore\nconst BYTES = [\n    // 1,  2,  3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,   20,\n    26,\n    44,\n    70,\n    100,\n    134,\n    172,\n    196,\n    242,\n    292,\n    346,\n    404,\n    466,\n    532,\n    581,\n    655,\n    733,\n    815,\n    901,\n    991,\n    1085,\n    //  21,   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,   36,   37,   38,   39,   40\n    1156,\n    1258,\n    1364,\n    1474,\n    1588,\n    1706,\n    1828,\n    1921,\n    2051,\n    2185,\n    2323,\n    2465,\n    2611,\n    2761,\n    2876,\n    3034,\n    3196,\n    3362,\n    3532,\n    3706\n];\n// prettier-ignore\nconst WORDS_PER_BLOCK = {\n    // Version 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40\n    low: [\n        7,\n        10,\n        15,\n        20,\n        26,\n        18,\n        20,\n        24,\n        30,\n        18,\n        20,\n        24,\n        26,\n        30,\n        22,\n        24,\n        28,\n        30,\n        28,\n        28,\n        28,\n        28,\n        30,\n        30,\n        26,\n        28,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ],\n    medium: [\n        10,\n        16,\n        26,\n        18,\n        24,\n        16,\n        18,\n        22,\n        22,\n        26,\n        30,\n        22,\n        22,\n        24,\n        24,\n        28,\n        28,\n        26,\n        26,\n        26,\n        26,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28\n    ],\n    quartile: [\n        13,\n        22,\n        18,\n        26,\n        18,\n        24,\n        18,\n        22,\n        20,\n        24,\n        28,\n        26,\n        24,\n        20,\n        30,\n        24,\n        28,\n        28,\n        26,\n        30,\n        28,\n        30,\n        30,\n        30,\n        30,\n        28,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ],\n    high: [\n        17,\n        28,\n        22,\n        16,\n        22,\n        28,\n        26,\n        26,\n        24,\n        28,\n        24,\n        28,\n        22,\n        24,\n        24,\n        30,\n        28,\n        28,\n        26,\n        28,\n        30,\n        24,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ]\n};\n// prettier-ignore\nconst ECC_BLOCKS = {\n    // Version   1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40\n    low: [\n        1,\n        1,\n        1,\n        1,\n        1,\n        2,\n        2,\n        2,\n        2,\n        4,\n        4,\n        4,\n        4,\n        4,\n        6,\n        6,\n        6,\n        6,\n        7,\n        8,\n        8,\n        9,\n        9,\n        10,\n        12,\n        12,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        19,\n        20,\n        21,\n        22,\n        24,\n        25\n    ],\n    medium: [\n        1,\n        1,\n        1,\n        2,\n        2,\n        4,\n        4,\n        4,\n        5,\n        5,\n        5,\n        8,\n        9,\n        9,\n        10,\n        10,\n        11,\n        13,\n        14,\n        16,\n        17,\n        17,\n        18,\n        20,\n        21,\n        23,\n        25,\n        26,\n        28,\n        29,\n        31,\n        33,\n        35,\n        37,\n        38,\n        40,\n        43,\n        45,\n        47,\n        49\n    ],\n    quartile: [\n        1,\n        1,\n        2,\n        2,\n        4,\n        4,\n        6,\n        6,\n        8,\n        8,\n        8,\n        10,\n        12,\n        16,\n        12,\n        17,\n        16,\n        18,\n        21,\n        20,\n        23,\n        23,\n        25,\n        27,\n        29,\n        34,\n        34,\n        35,\n        38,\n        40,\n        43,\n        45,\n        48,\n        51,\n        53,\n        56,\n        59,\n        62,\n        65,\n        68\n    ],\n    high: [\n        1,\n        1,\n        2,\n        4,\n        4,\n        4,\n        5,\n        6,\n        8,\n        8,\n        11,\n        11,\n        16,\n        16,\n        18,\n        16,\n        19,\n        21,\n        25,\n        25,\n        25,\n        34,\n        30,\n        32,\n        35,\n        37,\n        40,\n        42,\n        45,\n        48,\n        51,\n        54,\n        57,\n        60,\n        63,\n        66,\n        70,\n        74,\n        77,\n        81\n    ]\n};\nconst info = {\n    size: {\n        encode: (ver)=>21 + 4 * (ver - 1),\n        decode: (size)=>(size - 17) / 4\n    },\n    sizeType: (ver)=>Math.floor((ver + 7) / 17),\n    // Based on https://codereview.stackexchange.com/questions/74925/algorithm-to-generate-this-alignment-pattern-locations-table-for-qr-codes\n    alignmentPatterns (ver) {\n        if (ver === 1) return [];\n        const first = 6;\n        const last = info.size.encode(ver) - first - 1;\n        const distance = last - first;\n        const count = Math.ceil(distance / 28);\n        let interval = Math.floor(distance / count);\n        if (interval % 2) interval += 1;\n        else if (distance % count * 2 >= count) interval += 2;\n        const res = [\n            first\n        ];\n        for(let m = 1; m < count; m++)res.push(last - (count - m) * interval);\n        res.push(last);\n        return res;\n    },\n    ECCode: {\n        low: 1,\n        medium: 0,\n        quartile: 3,\n        high: 2\n    },\n    formatMask: 21522,\n    formatBits (ecc, maskIdx) {\n        const data = info.ECCode[ecc] << 3 | maskIdx;\n        let d = data;\n        for(let i = 0; i < 10; i++)d = d << 1 ^ (d >> 9) * 1335;\n        return (data << 10 | d) ^ info.formatMask;\n    },\n    versionBits (ver) {\n        let d = ver;\n        for(let i = 0; i < 12; i++)d = d << 1 ^ (d >> 11) * 7973;\n        return ver << 12 | d;\n    },\n    alphabet: {\n        numeric: alphabet(\"0123456789\"),\n        alphanumerc: alphabet(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\")\n    },\n    lengthBits (ver, type) {\n        const table = {\n            numeric: [\n                10,\n                12,\n                14\n            ],\n            alphanumeric: [\n                9,\n                11,\n                13\n            ],\n            byte: [\n                8,\n                16,\n                16\n            ],\n            kanji: [\n                8,\n                10,\n                12\n            ],\n            eci: [\n                0,\n                0,\n                0\n            ]\n        };\n        return table[type][info.sizeType(ver)];\n    },\n    modeBits: {\n        numeric: \"0001\",\n        alphanumeric: \"0010\",\n        byte: \"0100\",\n        kanji: \"1000\",\n        eci: \"0111\"\n    },\n    capacity (ver, ecc) {\n        const bytes = BYTES[ver - 1];\n        const words = WORDS_PER_BLOCK[ecc][ver - 1];\n        const numBlocks = ECC_BLOCKS[ecc][ver - 1];\n        const blockLen = Math.floor(bytes / numBlocks) - words;\n        const shortBlocks = numBlocks - bytes % numBlocks;\n        return {\n            words,\n            numBlocks,\n            shortBlocks,\n            blockLen,\n            capacity: (bytes - words * numBlocks) * 8,\n            total: (words + blockLen) * numBlocks + numBlocks - shortBlocks\n        };\n    }\n};\nconst PATTERNS = [\n    (x, y)=>(x + y) % 2 == 0,\n    (_x, y)=>y % 2 == 0,\n    (x, _y)=>x % 3 == 0,\n    (x, y)=>(x + y) % 3 == 0,\n    (x, y)=>(Math.floor(y / 2) + Math.floor(x / 3)) % 2 == 0,\n    (x, y)=>x * y % 2 + x * y % 3 == 0,\n    (x, y)=>(x * y % 2 + x * y % 3) % 2 == 0,\n    (x, y)=>((x + y) % 2 + x * y % 3) % 2 == 0\n];\n// Galois field && reed-solomon encoding\nconst GF = {\n    tables: ((p_poly)=>{\n        const exp = fillArr(256, 0);\n        const log = fillArr(256, 0);\n        for(let i = 0, x = 1; i < 256; i++){\n            exp[i] = x;\n            log[x] = i;\n            x <<= 1;\n            if (x & 0x100) x ^= p_poly;\n        }\n        return {\n            exp,\n            log\n        };\n    })(0x11d),\n    exp: (x)=>GF.tables.exp[x],\n    log (x) {\n        if (x === 0) throw new Error(`GF.log: invalid arg=${x}`);\n        return GF.tables.log[x] % 255;\n    },\n    mul (x, y) {\n        if (x === 0 || y === 0) return 0;\n        return GF.tables.exp[(GF.tables.log[x] + GF.tables.log[y]) % 255];\n    },\n    add: (x, y)=>x ^ y,\n    pow: (x, e)=>GF.tables.exp[GF.tables.log[x] * e % 255],\n    inv (x) {\n        if (x === 0) throw new Error(`GF.inverse: invalid arg=${x}`);\n        return GF.tables.exp[255 - GF.tables.log[x]];\n    },\n    polynomial (poly) {\n        if (poly.length == 0) throw new Error(\"GF.polymomial: invalid length\");\n        if (poly[0] !== 0) return poly;\n        // Strip leading zeros\n        let i = 0;\n        for(; i < poly.length - 1 && poly[i] == 0; i++);\n        return poly.slice(i);\n    },\n    monomial (degree, coefficient) {\n        if (degree < 0) throw new Error(`GF.monomial: invalid degree=${degree}`);\n        if (coefficient == 0) return [\n            0\n        ];\n        let coefficients = fillArr(degree + 1, 0);\n        coefficients[0] = coefficient;\n        return GF.polynomial(coefficients);\n    },\n    degree: (a)=>a.length - 1,\n    coefficient: (a, degree)=>a[GF.degree(a) - degree],\n    mulPoly (a, b) {\n        if (a[0] === 0 || b[0] === 0) return [\n            0\n        ];\n        const res = fillArr(a.length + b.length - 1, 0);\n        for(let i = 0; i < a.length; i++){\n            for(let j = 0; j < b.length; j++){\n                res[i + j] = GF.add(res[i + j], GF.mul(a[i], b[j]));\n            }\n        }\n        return GF.polynomial(res);\n    },\n    mulPolyScalar (a, scalar) {\n        if (scalar == 0) return [\n            0\n        ];\n        if (scalar == 1) return a;\n        const res = fillArr(a.length, 0);\n        for(let i = 0; i < a.length; i++)res[i] = GF.mul(a[i], scalar);\n        return GF.polynomial(res);\n    },\n    mulPolyMonomial (a, degree, coefficient) {\n        if (degree < 0) throw new Error(\"GF.mulPolyMonomial: invalid degree\");\n        if (coefficient == 0) return [\n            0\n        ];\n        const res = fillArr(a.length + degree, 0);\n        for(let i = 0; i < a.length; i++)res[i] = GF.mul(a[i], coefficient);\n        return GF.polynomial(res);\n    },\n    addPoly (a, b) {\n        if (a[0] === 0) return b;\n        if (b[0] === 0) return a;\n        let smaller = a;\n        let larger = b;\n        if (smaller.length > larger.length) [smaller, larger] = [\n            larger,\n            smaller\n        ];\n        let sumDiff = fillArr(larger.length, 0);\n        let lengthDiff = larger.length - smaller.length;\n        let s = larger.slice(0, lengthDiff);\n        for(let i = 0; i < s.length; i++)sumDiff[i] = s[i];\n        for(let i = lengthDiff; i < larger.length; i++)sumDiff[i] = GF.add(smaller[i - lengthDiff], larger[i]);\n        return GF.polynomial(sumDiff);\n    },\n    remainderPoly (data, divisor) {\n        const out = Array.from(data);\n        for(let i = 0; i < data.length - divisor.length + 1; i++){\n            const elm = out[i];\n            if (elm === 0) continue;\n            for(let j = 1; j < divisor.length; j++){\n                if (divisor[j] !== 0) out[i + j] = GF.add(out[i + j], GF.mul(divisor[j], elm));\n            }\n        }\n        return out.slice(data.length - divisor.length + 1, out.length);\n    },\n    divisorPoly (degree) {\n        let g = [\n            1\n        ];\n        for(let i = 0; i < degree; i++)g = GF.mulPoly(g, [\n            1,\n            GF.pow(2, i)\n        ]);\n        return g;\n    },\n    evalPoly (poly, a) {\n        if (a == 0) return GF.coefficient(poly, 0); // Just return the x^0 coefficient\n        let res = poly[0];\n        for(let i = 1; i < poly.length; i++)res = GF.add(GF.mul(a, res), poly[i]);\n        return res;\n    },\n    // TODO: cleanup\n    euclidian (a, b, R) {\n        // Force degree(a) >= degree(b)\n        if (GF.degree(a) < GF.degree(b)) [a, b] = [\n            b,\n            a\n        ];\n        let rLast = a;\n        let r = b;\n        let tLast = [\n            0\n        ];\n        let t = [\n            1\n        ];\n        // while degree of Ri ≥ t/2\n        while(2 * GF.degree(r) >= R){\n            let rLastLast = rLast;\n            let tLastLast = tLast;\n            rLast = r;\n            tLast = t;\n            if (rLast[0] === 0) throw new Error(\"rLast[0] === 0\");\n            r = rLastLast;\n            let q = [\n                0\n            ];\n            const dltInverse = GF.inv(rLast[0]);\n            while(GF.degree(r) >= GF.degree(rLast) && r[0] !== 0){\n                const degreeDiff = GF.degree(r) - GF.degree(rLast);\n                const scale = GF.mul(r[0], dltInverse);\n                q = GF.addPoly(q, GF.monomial(degreeDiff, scale));\n                r = GF.addPoly(r, GF.mulPolyMonomial(rLast, degreeDiff, scale));\n            }\n            q = GF.mulPoly(q, tLast);\n            t = GF.addPoly(q, tLastLast);\n            if (GF.degree(r) >= GF.degree(rLast)) throw new Error(`Division failed r: ${r}, rLast: ${rLast}`);\n        }\n        const sigmaTildeAtZero = GF.coefficient(t, 0);\n        if (sigmaTildeAtZero == 0) throw new Error(\"sigmaTilde(0) was zero\");\n        const inverse = GF.inv(sigmaTildeAtZero);\n        return [\n            GF.mulPolyScalar(t, inverse),\n            GF.mulPolyScalar(r, inverse)\n        ];\n    }\n};\nfunction RS(eccWords) {\n    return {\n        encode (from) {\n            const d = GF.divisorPoly(eccWords);\n            const pol = Array.from(from);\n            pol.push(...d.slice(0, -1).fill(0));\n            return Uint8Array.from(GF.remainderPoly(pol, d));\n        },\n        decode (to) {\n            const res = to.slice();\n            const poly = GF.polynomial(Array.from(to));\n            // Find errors\n            let syndrome = fillArr(eccWords, 0);\n            let hasError = false;\n            for(let i = 0; i < eccWords; i++){\n                const evl = GF.evalPoly(poly, GF.exp(i));\n                syndrome[syndrome.length - 1 - i] = evl;\n                if (evl !== 0) hasError = true;\n            }\n            if (!hasError) return res;\n            syndrome = GF.polynomial(syndrome);\n            const monomial = GF.monomial(eccWords, 1);\n            const [errorLocator, errorEvaluator] = GF.euclidian(monomial, syndrome, eccWords);\n            // Error locations\n            const locations = fillArr(GF.degree(errorLocator), 0);\n            let e = 0;\n            for(let i = 1; i < 256 && e < locations.length; i++){\n                if (GF.evalPoly(errorLocator, i) === 0) locations[e++] = GF.inv(i);\n            }\n            if (e !== locations.length) throw new Error(\"RS.decode: invalid errors number\");\n            for(let i = 0; i < locations.length; i++){\n                const pos = res.length - 1 - GF.log(locations[i]);\n                if (pos < 0) throw new Error(\"RS.decode: invalid error location\");\n                const xiInverse = GF.inv(locations[i]);\n                let denominator = 1;\n                for(let j = 0; j < locations.length; j++){\n                    if (i === j) continue;\n                    denominator = GF.mul(denominator, GF.add(1, GF.mul(locations[j], xiInverse)));\n                }\n                res[pos] = GF.add(res[pos], GF.mul(GF.evalPoly(errorEvaluator, xiInverse), GF.inv(denominator)));\n            }\n            return res;\n        }\n    };\n}\n// Interleaves blocks\nfunction interleave(ver, ecc) {\n    const { words, shortBlocks, numBlocks, blockLen, total } = info.capacity(ver, ecc);\n    const rs = RS(words);\n    return {\n        encode (bytes) {\n            // Add error correction to bytes\n            const blocks = [];\n            const eccBlocks = [];\n            for(let i = 0; i < numBlocks; i++){\n                const isShort = i < shortBlocks;\n                const len = blockLen + (isShort ? 0 : 1);\n                blocks.push(bytes.subarray(0, len));\n                eccBlocks.push(rs.encode(bytes.subarray(0, len)));\n                bytes = bytes.subarray(len);\n            }\n            const resBlocks = interleaveBytes(...blocks);\n            const resECC = interleaveBytes(...eccBlocks);\n            const res = new Uint8Array(resBlocks.length + resECC.length);\n            res.set(resBlocks);\n            res.set(resECC, resBlocks.length);\n            return res;\n        },\n        decode (data) {\n            if (data.length !== total) throw new Error(`interleave.decode: len(data)=${data.length}, total=${total}`);\n            const blocks = [];\n            for(let i = 0; i < numBlocks; i++){\n                const isShort = i < shortBlocks;\n                blocks.push(new Uint8Array(words + blockLen + (isShort ? 0 : 1)));\n            }\n            // Short blocks\n            let pos = 0;\n            for(let i = 0; i < blockLen; i++){\n                for(let j = 0; j < numBlocks; j++)blocks[j][i] = data[pos++];\n            }\n            // Long blocks\n            for(let j = shortBlocks; j < numBlocks; j++)blocks[j][blockLen] = data[pos++];\n            // ECC\n            for(let i = blockLen; i < blockLen + words; i++){\n                for(let j = 0; j < numBlocks; j++){\n                    const isShort = j < shortBlocks;\n                    blocks[j][i + (isShort ? 0 : 1)] = data[pos++];\n                }\n            }\n            // Decode\n            // Error-correct and copy data blocks together into a stream of bytes\n            const res = [];\n            for (const block of blocks)res.push(...Array.from(rs.decode(block)).slice(0, -words));\n            return Uint8Array.from(res);\n        }\n    };\n}\n// Draw\n// Generic template per version+ecc+mask. Can be cached, to speedup calculations.\nfunction drawTemplate(ver, ecc, maskIdx, test = false) {\n    const size = info.size.encode(ver);\n    let b = new Bitmap(size + 2);\n    // Finder patterns\n    // We draw full pattern and later slice, since before addition of borders finder is truncated by one pixel on sides\n    const finder = new Bitmap(3).rect(0, 3, true).border(1, false).border(1, true).border(1, false);\n    b = b.embed(0, finder) // top left\n    .embed({\n        x: -finder.width,\n        y: 0\n    }, finder) // top right\n    .embed({\n        x: 0,\n        y: -finder.height\n    }, finder); // bottom left\n    b = b.rectSlice(1, size);\n    // Alignment patterns\n    const align = new Bitmap(1).rect(0, 1, true).border(1, false).border(1, true);\n    const alignPos = info.alignmentPatterns(ver);\n    for (const y of alignPos){\n        for (const x of alignPos){\n            if (b.data[y][x] !== undefined) continue;\n            b.embed({\n                x: x - 2,\n                y: y - 2\n            }, align); // center of pattern should be at position\n        }\n    }\n    // Timing patterns\n    b = b.hLine({\n        x: 0,\n        y: 6\n    }, Infinity, ({ x }, cur)=>cur === undefined ? x % 2 == 0 : cur).vLine({\n        x: 6,\n        y: 0\n    }, Infinity, ({ y }, cur)=>cur === undefined ? y % 2 == 0 : cur);\n    // Format information\n    {\n        const bits = info.formatBits(ecc, maskIdx);\n        const getBit = (i)=>!test && (bits >> i & 1) == 1;\n        // vertical\n        for(let i = 0; i < 6; i++)b.data[i][8] = getBit(i); // right of top-left finder\n        // TODO: re-write as lines, like:\n        // b.vLine({ x: 8, y: 0 }, 6, ({ x, y }) => getBit(y));\n        for(let i = 6; i < 8; i++)b.data[i + 1][8] = getBit(i); // after timing pattern\n        for(let i = 8; i < 15; i++)b.data[size - 15 + i][8] = getBit(i); // right of bottom-left finder\n        // horizontal\n        for(let i = 0; i < 8; i++)b.data[8][size - i - 1] = getBit(i); // under top-right finder\n        for(let i = 8; i < 9; i++)b.data[8][15 - i - 1 + 1] = getBit(i); // VVV, after timing\n        for(let i = 9; i < 15; i++)b.data[8][15 - i - 1] = getBit(i); // under top-left finder\n        b.data[size - 8][8] = !test; // bottom-left finder, right\n    }\n    // Version information\n    if (ver >= 7) {\n        const bits = info.versionBits(ver);\n        for(let i = 0; i < 18; i += 1){\n            const bit = !test && (bits >> i & 1) == 1;\n            const x = Math.floor(i / 3);\n            const y = i % 3 + size - 8 - 3;\n            // two copies\n            b.data[x][y] = bit;\n            b.data[y][x] = bit;\n        }\n    }\n    return b;\n}\n// zigzag: bottom->top && top->bottom\nfunction zigzag(tpl, maskIdx, fn) {\n    const size = tpl.height;\n    const pattern = PATTERNS[maskIdx];\n    // zig-zag pattern\n    let dir = -1;\n    let y = size - 1;\n    // two columns at time\n    for(let xOffset = size - 1; xOffset > 0; xOffset -= 2){\n        if (xOffset == 6) xOffset = 5; // skip vertical timing pattern\n        for(;; y += dir){\n            for(let j = 0; j < 2; j += 1){\n                const x = xOffset - j;\n                if (tpl.data[y][x] !== undefined) continue; // skip already written elements\n                fn(x, y, pattern(x, y));\n            }\n            if (y + dir < 0 || y + dir >= size) break;\n        }\n        dir = -dir; // change direction\n    }\n}\n// NOTE: byte encoding is just representation, QR works with strings only. Most decoders will fail on raw byte array,\n// since they expect unicode or other text encoding inside bytes\nfunction detectType(str) {\n    let type = \"numeric\";\n    for (let x of str){\n        if (info.alphabet.numeric.has(x)) continue;\n        type = \"alphanumeric\";\n        if (!info.alphabet.alphanumerc.has(x)) return \"byte\";\n    }\n    return type;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nfunction encode(ver, ecc, data, type) {\n    let encoded = \"\";\n    let dataLen = data.length;\n    if (type === \"numeric\") {\n        const t = info.alphabet.numeric.decode(data.split(\"\"));\n        const n = t.length;\n        for(let i = 0; i < n - 2; i += 3)encoded += bin(t[i] * 100 + t[i + 1] * 10 + t[i + 2], 10);\n        if (n % 3 === 1) {\n            encoded += bin(t[n - 1], 4);\n        } else if (n % 3 === 2) {\n            encoded += bin(t[n - 2] * 10 + t[n - 1], 7);\n        }\n    } else if (type === \"alphanumeric\") {\n        const t = info.alphabet.alphanumerc.decode(data.split(\"\"));\n        const n = t.length;\n        for(let i = 0; i < n - 1; i += 2)encoded += bin(t[i] * 45 + t[i + 1], 11);\n        if (n % 2 == 1) encoded += bin(t[n - 1], 6); // pad if odd number of chars\n    } else if (type === \"byte\") {\n        const utf8 = utf8ToBytes(data);\n        dataLen = utf8.length;\n        encoded = Array.from(utf8).map((i)=>bin(i, 8)).join(\"\");\n    } else {\n        throw new Error(\"encode: unsupported type\");\n    }\n    const { capacity } = info.capacity(ver, ecc);\n    const len = bin(dataLen, info.lengthBits(ver, type));\n    let bits = info.modeBits[type] + len + encoded;\n    if (bits.length > capacity) throw new Error(\"Capacity overflow\");\n    // Terminator\n    bits += \"0\".repeat(Math.min(4, Math.max(0, capacity - bits.length)));\n    // Pad bits string untill full byte\n    if (bits.length % 8) bits += \"0\".repeat(8 - bits.length % 8);\n    // Add padding until capacity is full\n    const padding = \"1110110000010001\";\n    for(let idx = 0; bits.length !== capacity; idx++)bits += padding[idx % padding.length];\n    // Convert a bitstring to array of bytes\n    const bytes = Uint8Array.from(bits.match(/(.{8})/g).map((i)=>Number(`0b${i}`)));\n    return interleave(ver, ecc).encode(bytes);\n}\n// DRAW\nfunction drawQR(ver, ecc, data, maskIdx, test = false) {\n    const b = drawTemplate(ver, ecc, maskIdx, test);\n    let i = 0;\n    const need = 8 * data.length;\n    zigzag(b, maskIdx, (x, y, mask)=>{\n        let value = false;\n        if (i < need) {\n            value = (data[i >>> 3] >> (7 - i & 7) & 1) !== 0;\n            i++;\n        }\n        b.data[y][x] = value !== mask; // !== as xor\n    });\n    if (i !== need) throw new Error(\"QR: bytes left after draw\");\n    return b;\n}\nfunction penalty(bm) {\n    const inverse = bm.inverse();\n    // Adjacent modules in row/column in same | No. of modules = (5 + i) color\n    const sameColor = (row)=>{\n        let res = 0;\n        for(let i = 0, same = 1, last = undefined; i < row.length; i++){\n            if (last === row[i]) {\n                same++;\n                if (i !== row.length - 1) continue; // handle last element\n            }\n            if (same >= 5) res += 3 + (same - 5);\n            last = row[i];\n            same = 1;\n        }\n        return res;\n    };\n    let adjacent = 0;\n    bm.data.forEach((row)=>adjacent += sameColor(row));\n    inverse.data.forEach((column)=>adjacent += sameColor(column));\n    // Block of modules in same color (Block size = 2x2)\n    let box = 0;\n    let b = bm.data;\n    const lastW = bm.width - 1;\n    const lastH = bm.height - 1;\n    for(let x = 0; x < lastW; x++){\n        for(let y = 0; y < lastH; y++){\n            const x1 = x + 1;\n            const y1 = y + 1;\n            if (b[x][y] === b[x1][y] && b[x1][y] === b[x][y1] && b[x1][y] === b[x1][y1]) {\n                box += 3;\n            }\n        }\n    }\n    // 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column, preceded or followed by light area 4 modules wide\n    const finderPattern = (row)=>{\n        const finderPattern = [\n            true,\n            false,\n            true,\n            true,\n            true,\n            false,\n            true\n        ]; // dark:light:dark:light:dark\n        const lightPattern = [\n            false,\n            false,\n            false,\n            false\n        ]; // light area 4 modules wide\n        const p1 = [\n            ...finderPattern,\n            ...lightPattern\n        ];\n        const p2 = [\n            ...lightPattern,\n            ...finderPattern\n        ];\n        let res = 0;\n        for(let i = 0; i < row.length; i++){\n            if (includesAt(row, p1, i)) res += 40;\n            if (includesAt(row, p2, i)) res += 40;\n        }\n        return res;\n    };\n    let finder = 0;\n    for (const row of bm.data)finder += finderPattern(row);\n    for (const column of inverse.data)finder += finderPattern(column);\n    // Proportion of dark modules in entire symbol\n    // Add 10 points to a deviation of 5% increment or decrement in the proportion\n    // ratio of dark module from the referential 50%\n    let darkPixels = 0;\n    bm.rectRead(0, Infinity, (_c, val)=>darkPixels += val ? 1 : 0);\n    const darkPercent = darkPixels / (bm.height * bm.width) * 100;\n    const dark = 10 * Math.floor(Math.abs(darkPercent - 50) / 5);\n    return adjacent + box + finder + dark;\n}\n// Selects best mask according to penalty, if no mask is provided\nfunction drawQRBest(ver, ecc, data, maskIdx) {\n    if (maskIdx === undefined) {\n        const bestMask = best();\n        for(let mask = 0; mask < PATTERNS.length; mask++)bestMask.add(penalty(drawQR(ver, ecc, data, mask, true)), mask);\n        maskIdx = bestMask.get();\n    }\n    if (maskIdx === undefined) throw new Error(\"Cannot find mask\"); // Should never happen\n    return drawQR(ver, ecc, data, maskIdx);\n}\nfunction validateECC(ec) {\n    if (!ECMode.includes(ec)) throw new Error(`Invalid error correction mode=${ec}. Expected: ${ECMode}`);\n}\nfunction validateEncoding(enc) {\n    if (!Encoding.includes(enc)) throw new Error(`Encoding: invalid mode=${enc}. Expected: ${Encoding}`);\n    if (enc === \"kanji\" || enc === \"eci\") throw new Error(`Encoding: ${enc} is not supported (yet?).`);\n}\nfunction validateMask(mask) {\n    if (![\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7\n    ].includes(mask) || !PATTERNS[mask]) throw new Error(`Invalid mask=${mask}. Expected number [0..7]`);\n}\nfunction encodeQR(text, output = \"raw\", opts = {}) {\n    const ecc = opts.ecc !== undefined ? opts.ecc : \"medium\";\n    validateECC(ecc);\n    const encoding = opts.encoding !== undefined ? opts.encoding : detectType(text);\n    validateEncoding(encoding);\n    if (opts.mask !== undefined) validateMask(opts.mask);\n    let ver = opts.version;\n    let data, err = new Error(\"Unknown error\");\n    if (ver !== undefined) {\n        validateVersion(ver);\n        data = encode(ver, ecc, text, encoding);\n    } else {\n        // If no version is provided, try to find smallest one which fits\n        // Currently just scans all version, can be significantly speedup if needed\n        for(let i = 1; i <= 40; i++){\n            try {\n                data = encode(i, ecc, text, encoding);\n                ver = i;\n                break;\n            } catch (e) {\n                err = e;\n            }\n        }\n    }\n    if (!ver || !data) throw err;\n    let res = drawQRBest(ver, ecc, data, opts.mask);\n    res.assertDrawn();\n    const border = opts.border === undefined ? 2 : opts.border;\n    if (!Number.isSafeInteger(border)) throw new Error(`invalid border type=${typeof border}`);\n    res = res.border(border, false); // Add border\n    if (opts.scale !== undefined) res = res.scale(opts.scale); // Scale image\n    if (output === \"raw\") return res.data;\n    else if (output === \"ascii\") return res.toASCII();\n    else if (output === \"svg\") return res.toSVG(opts.optimize);\n    else if (output === \"gif\") return res.toGIF();\n    else if (output === \"term\") return res.toTerm();\n    else throw new Error(`Unknown output: ${output}`);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (encodeQR);\nconst utils = {\n    best,\n    bin,\n    drawTemplate,\n    fillArr,\n    info,\n    interleave,\n    validateVersion,\n    zigzag\n};\n// Unsafe API utils, exported only for tests\nconst _tests = {\n    Bitmap,\n    info,\n    detectType,\n    encode,\n    drawQR,\n    penalty,\n    PATTERNS\n}; // Type tests\n // const o1 = qr('test', 'ascii');\n // const o2 = qr('test', 'raw');\n // const o3 = qr('test', 'gif');\n // const o4 = qr('test', 'svg');\n // const o5 = qr('test', 'term');\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/qr/index.js\n");

/***/ })

};
;
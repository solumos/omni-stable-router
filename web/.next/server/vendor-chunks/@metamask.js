"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@metamask";
exports.ids = ["vendor-chunks/@metamask"];
exports.modules = {

/***/ "(ssr)/./node_modules/@metamask/safe-event-emitter/dist/cjs/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@metamask/safe-event-emitter/dist/cjs/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    } catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(()=>{\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for(let i = 0; i < n; i += 1){\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === \"error\";\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        } else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === \"function\") {\n            safeApply(handler, this, args);\n        } else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for(let i = 0; i < len; i += 1){\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports[\"default\"] = SafeEventEmitter; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1ldGFtYXNrL3NhZmUtZXZlbnQtZW1pdHRlci9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyxzQkFBUTtBQUNqQyxTQUFTQyxVQUFVQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsSUFBSTtJQUNyQyxJQUFJO1FBQ0FDLFFBQVFDLEtBQUssQ0FBQ0osU0FBU0MsU0FBU0M7SUFDcEMsRUFDQSxPQUFPRyxLQUFLO1FBQ1IsNkRBQTZEO1FBQzdEQyxXQUFXO1lBQ1AsTUFBTUQ7UUFDVjtJQUNKO0FBQ0o7QUFDQSxTQUFTRSxXQUFXQyxHQUFHO0lBQ25CLE1BQU1DLElBQUlELElBQUlFLE1BQU07SUFDcEIsTUFBTUMsT0FBTyxJQUFJQyxNQUFNSDtJQUN2QixJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosR0FBR0ksS0FBSyxFQUFHO1FBQzNCRixJQUFJLENBQUNFLEVBQUUsR0FBR0wsR0FBRyxDQUFDSyxFQUFFO0lBQ3BCO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBLE1BQU1HLHlCQUF5QmpCLFNBQVNrQixZQUFZO0lBQ2hEQyxLQUFLQyxJQUFJLEVBQUUsR0FBR2YsSUFBSSxFQUFFO1FBQ2hCLElBQUlnQixVQUFVRCxTQUFTO1FBQ3ZCLE1BQU1FLFNBQVMsSUFBSSxDQUFDQyxPQUFPO1FBQzNCLElBQUlELFdBQVdFLFdBQVc7WUFDdEJILFVBQVVBLFdBQVdDLE9BQU9HLEtBQUssS0FBS0Q7UUFDMUMsT0FDSyxJQUFJLENBQUNILFNBQVM7WUFDZixPQUFPO1FBQ1g7UUFDQSxvREFBb0Q7UUFDcEQsSUFBSUEsU0FBUztZQUNULElBQUlLO1lBQ0osSUFBSXJCLEtBQUtRLE1BQU0sR0FBRyxHQUFHO2dCQUNqQixDQUFDYSxHQUFHLEdBQUdyQjtZQUNYO1lBQ0EsSUFBSXFCLGNBQWNDLE9BQU87Z0JBQ3JCLHFFQUFxRTtnQkFDckUsaUVBQWlFO2dCQUNqRSxNQUFNRCxJQUFJLDBCQUEwQjtZQUN4QztZQUNBLGlEQUFpRDtZQUNqRCxNQUFNbEIsTUFBTSxJQUFJbUIsTUFBTSxDQUFDLGdCQUFnQixFQUFFRCxLQUFLLENBQUMsRUFBRSxFQUFFQSxHQUFHRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ3ZFcEIsSUFBSUosT0FBTyxHQUFHc0I7WUFDZCxNQUFNbEIsS0FBSywwQkFBMEI7UUFDekM7UUFDQSxNQUFNTCxVQUFVbUIsTUFBTSxDQUFDRixLQUFLO1FBQzVCLElBQUlqQixZQUFZcUIsV0FBVztZQUN2QixPQUFPO1FBQ1g7UUFDQSxJQUFJLE9BQU9yQixZQUFZLFlBQVk7WUFDL0JELFVBQVVDLFNBQVMsSUFBSSxFQUFFRTtRQUM3QixPQUNLO1lBQ0QsTUFBTXdCLE1BQU0xQixRQUFRVSxNQUFNO1lBQzFCLE1BQU1pQixZQUFZcEIsV0FBV1A7WUFDN0IsSUFBSyxJQUFJYSxJQUFJLEdBQUdBLElBQUlhLEtBQUtiLEtBQUssRUFBRztnQkFDN0JkLFVBQVU0QixTQUFTLENBQUNkLEVBQUUsRUFBRSxJQUFJLEVBQUVYO1lBQ2xDO1FBQ0o7UUFDQSxPQUFPO0lBQ1g7QUFDSjtBQUNBUCxrQkFBZSxHQUFHbUIsa0JBQ2xCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0BtZXRhbWFzay9zYWZlLWV2ZW50LWVtaXR0ZXIvZGlzdC9janMvaW5kZXguanM/MDNhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmZ1bmN0aW9uIHNhZmVBcHBseShoYW5kbGVyLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgUmVmbGVjdC5hcHBseShoYW5kbGVyLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBUaHJvdyBlcnJvciBhZnRlciB0aW1lb3V0IHNvIGFzIG5vdCB0byBpbnRlcnJ1cHQgdGhlIHN0YWNrXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcnJheUNsb25lKGFycikge1xuICAgIGNvbnN0IG4gPSBhcnIubGVuZ3RoO1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpICs9IDEpIHtcbiAgICAgICAgY29weVtpXSA9IGFycltpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59XG5jbGFzcyBTYWZlRXZlbnRFbWl0dGVyIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBlbWl0KHR5cGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgbGV0IGRvRXJyb3IgPSB0eXBlID09PSAnZXJyb3InO1xuICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZG9FcnJvciA9IGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWRvRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gICAgICAgIGlmIChkb0Vycm9yKSB7XG4gICAgICAgICAgICBsZXQgZXI7XG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgW2VyXSA9IGFyZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgICAgICAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICAgICAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYFVuaGFuZGxlZCBlcnJvci4ke2VyID8gYCAoJHtlci5tZXNzYWdlfSlgIDogJyd9YCk7XG4gICAgICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICAgICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNhZmVBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBzYWZlQXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTYWZlRXZlbnRFbWl0dGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXZlbnRzXzEiLCJyZXF1aXJlIiwic2FmZUFwcGx5IiwiaGFuZGxlciIsImNvbnRleHQiLCJhcmdzIiwiUmVmbGVjdCIsImFwcGx5IiwiZXJyIiwic2V0VGltZW91dCIsImFycmF5Q2xvbmUiLCJhcnIiLCJuIiwibGVuZ3RoIiwiY29weSIsIkFycmF5IiwiaSIsIlNhZmVFdmVudEVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJlbWl0IiwidHlwZSIsImRvRXJyb3IiLCJldmVudHMiLCJfZXZlbnRzIiwidW5kZWZpbmVkIiwiZXJyb3IiLCJlciIsIkVycm9yIiwibWVzc2FnZSIsImxlbiIsImxpc3RlbmVycyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/safe-event-emitter/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@metamask/sdk/dist/browser/es/metamask-sdk.js":
/*!********************************************************************!*\
  !*** ./node_modules/@metamask/sdk/dist/browser/es/metamask-sdk.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommunicationLayerPreference: () => (/* binding */ $o),\n/* harmony export */   ConnectionStatus: () => (/* binding */ vo),\n/* harmony export */   DEFAULT_SERVER_URL: () => (/* binding */ ho),\n/* harmony export */   EventType: () => (/* binding */ bo),\n/* harmony export */   MessageType: () => (/* binding */ Co),\n/* harmony export */   MetaMaskSDK: () => (/* binding */ tf),\n/* harmony export */   MetaMaskSDKEvent: () => (/* binding */ Fu),\n/* harmony export */   PROVIDER_UPDATE_TYPE: () => (/* binding */ uh),\n/* harmony export */   PlatformType: () => (/* binding */ Bo),\n/* harmony export */   SDKProvider: () => (/* binding */ Wu),\n/* harmony export */   \"default\": () => (/* binding */ tf)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(debug__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var eventemitter2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! eventemitter2 */ \"(ssr)/./node_modules/eventemitter2/lib/eventemitter2.js\");\n/* harmony import */ var eventemitter2__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(eventemitter2__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! socket.io-client */ \"(ssr)/./node_modules/socket.io-client/build/esm-debug/index.js\");\n\n\n\n\n\nfunction a(e, t, n, r) {\n    return new (n || (n = Promise))(function(i, o) {\n        function s(e) {\n            try {\n                c(r.next(e));\n            } catch (e) {\n                o(e);\n            }\n        }\n        function a(e) {\n            try {\n                c(r.throw(e));\n            } catch (e) {\n                o(e);\n            }\n        }\n        function c(e) {\n            var t;\n            e.done ? i(e.value) : (t = e.value, t instanceof n ? t : new n(function(e) {\n                e(t);\n            })).then(s, a);\n        }\n        c((r = r.apply(e, t || [])).next());\n    });\n}\n\"function\" == typeof SuppressedError && SuppressedError;\nvar c = \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self :  false ? 0 : {}, l = [], d = [], u = \"undefined\" != typeof Uint8Array ? Uint8Array : Array, h = !1;\nfunction f() {\n    h = !0;\n    for(var e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", t = 0; t < 64; ++t)l[t] = e[t], d[e.charCodeAt(t)] = t;\n    d[\"-\".charCodeAt(0)] = 62, d[\"_\".charCodeAt(0)] = 63;\n}\nfunction p(e, t, n) {\n    for(var r, i, o = [], s = t; s < n; s += 3)r = (e[s] << 16) + (e[s + 1] << 8) + e[s + 2], o.push(l[(i = r) >> 18 & 63] + l[i >> 12 & 63] + l[i >> 6 & 63] + l[63 & i]);\n    return o.join(\"\");\n}\nfunction g(e) {\n    var t;\n    h || f();\n    for(var n = e.length, r = n % 3, i = \"\", o = [], s = 16383, a = 0, c = n - r; a < c; a += s)o.push(p(e, a, a + s > c ? c : a + s));\n    return 1 === r ? (t = e[n - 1], i += l[t >> 2], i += l[t << 4 & 63], i += \"==\") : 2 === r && (t = (e[n - 2] << 8) + e[n - 1], i += l[t >> 10], i += l[t >> 4 & 63], i += l[t << 2 & 63], i += \"=\"), o.push(i), o.join(\"\");\n}\nfunction m(e, t, n, r, i) {\n    var o, s, a = 8 * i - r - 1, c = (1 << a) - 1, l = c >> 1, d = -7, u = n ? i - 1 : 0, h = n ? -1 : 1, f = e[t + u];\n    for(u += h, o = f & (1 << -d) - 1, f >>= -d, d += a; d > 0; o = 256 * o + e[t + u], u += h, d -= 8);\n    for(s = o & (1 << -d) - 1, o >>= -d, d += r; d > 0; s = 256 * s + e[t + u], u += h, d -= 8);\n    if (0 === o) o = 1 - l;\n    else {\n        if (o === c) return s ? NaN : 1 / 0 * (f ? -1 : 1);\n        s += Math.pow(2, r), o -= l;\n    }\n    return (f ? -1 : 1) * s * Math.pow(2, o - r);\n}\nfunction y(e, t, n, r, i, o) {\n    var s, a, c, l = 8 * o - i - 1, d = (1 << l) - 1, u = d >> 1, h = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, f = r ? 0 : o - 1, p = r ? 1 : -1, g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;\n    for(t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = d) : (s = Math.floor(Math.log(t) / Math.LN2), t * (c = Math.pow(2, -s)) < 1 && (s--, c *= 2), (t += s + u >= 1 ? h / c : h * Math.pow(2, 1 - u)) * c >= 2 && (s++, c /= 2), s + u >= d ? (a = 0, s = d) : s + u >= 1 ? (a = (t * c - 1) * Math.pow(2, i), s += u) : (a = t * Math.pow(2, u - 1) * Math.pow(2, i), s = 0)); i >= 8; e[n + f] = 255 & a, f += p, a /= 256, i -= 8);\n    for(s = s << i | a, l += i; l > 0; e[n + f] = 255 & s, f += p, s /= 256, l -= 8);\n    e[n + f - p] |= 128 * g;\n}\nvar v = {}.toString, b = Array.isArray || function(e) {\n    return \"[object Array]\" == v.call(e);\n};\nS.TYPED_ARRAY_SUPPORT = void 0 === c.TYPED_ARRAY_SUPPORT || c.TYPED_ARRAY_SUPPORT;\nvar w = E();\nfunction E() {\n    return S.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;\n}\nfunction C(e, t) {\n    if (E() < t) throw new RangeError(\"Invalid typed array length\");\n    return S.TYPED_ARRAY_SUPPORT ? (e = new Uint8Array(t)).__proto__ = S.prototype : (null === e && (e = new S(t)), e.length = t), e;\n}\nfunction S(e, t, n) {\n    if (!(S.TYPED_ARRAY_SUPPORT || this instanceof S)) return new S(e, t, n);\n    if (\"number\" == typeof e) {\n        if (\"string\" == typeof t) throw new Error(\"If encoding is specified then the first argument must be a string\");\n        return x(this, e);\n    }\n    return _(this, e, t, n);\n}\nfunction _(e, t, n, r) {\n    if (\"number\" == typeof t) throw new TypeError('\"value\" argument must not be a number');\n    return \"undefined\" != typeof ArrayBuffer && t instanceof ArrayBuffer ? function(e, t, n, r) {\n        if (t.byteLength, n < 0 || t.byteLength < n) throw new RangeError(\"'offset' is out of bounds\");\n        if (t.byteLength < n + (r || 0)) throw new RangeError(\"'length' is out of bounds\");\n        t = void 0 === n && void 0 === r ? new Uint8Array(t) : void 0 === r ? new Uint8Array(t, n) : new Uint8Array(t, n, r);\n        S.TYPED_ARRAY_SUPPORT ? (e = t).__proto__ = S.prototype : e = M(e, t);\n        return e;\n    }(e, t, n, r) : \"string\" == typeof t ? function(e, t, n) {\n        \"string\" == typeof n && \"\" !== n || (n = \"utf8\");\n        if (!S.isEncoding(n)) throw new TypeError('\"encoding\" must be a valid string encoding');\n        var r = 0 | R(t, n);\n        e = C(e, r);\n        var i = e.write(t, n);\n        i !== r && (e = e.slice(0, i));\n        return e;\n    }(e, t, n) : function(e, t) {\n        if (I(t)) {\n            var n = 0 | A(t.length);\n            return 0 === (e = C(e, n)).length || t.copy(e, 0, 0, n), e;\n        }\n        if (t) {\n            if (\"undefined\" != typeof ArrayBuffer && t.buffer instanceof ArrayBuffer || \"length\" in t) return \"number\" != typeof t.length || (r = t.length) != r ? C(e, 0) : M(e, t);\n            if (\"Buffer\" === t.type && b(t.data)) return M(e, t.data);\n        }\n        var r;\n        throw new TypeError(\"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.\");\n    }(e, t);\n}\nfunction k(e) {\n    if (\"number\" != typeof e) throw new TypeError('\"size\" argument must be a number');\n    if (e < 0) throw new RangeError('\"size\" argument must not be negative');\n}\nfunction x(e, t) {\n    if (k(t), e = C(e, t < 0 ? 0 : 0 | A(t)), !S.TYPED_ARRAY_SUPPORT) for(var n = 0; n < t; ++n)e[n] = 0;\n    return e;\n}\nfunction M(e, t) {\n    var n = t.length < 0 ? 0 : 0 | A(t.length);\n    e = C(e, n);\n    for(var r = 0; r < n; r += 1)e[r] = 255 & t[r];\n    return e;\n}\nfunction A(e) {\n    if (e >= E()) throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + E().toString(16) + \" bytes\");\n    return 0 | e;\n}\nfunction I(e) {\n    return !(null == e || !e._isBuffer);\n}\nfunction R(e, t) {\n    if (I(e)) return e.length;\n    if (\"undefined\" != typeof ArrayBuffer && \"function\" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer)) return e.byteLength;\n    \"string\" != typeof e && (e = \"\" + e);\n    var n = e.length;\n    if (0 === n) return 0;\n    for(var r = !1;;)switch(t){\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n            return n;\n        case \"utf8\":\n        case \"utf-8\":\n        case void 0:\n            return re(e).length;\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return 2 * n;\n        case \"hex\":\n            return n >>> 1;\n        case \"base64\":\n            return ie(e).length;\n        default:\n            if (r) return re(e).length;\n            t = (\"\" + t).toLowerCase(), r = !0;\n    }\n}\nfunction P(e, t, n) {\n    var r = !1;\n    if ((void 0 === t || t < 0) && (t = 0), t > this.length) return \"\";\n    if ((void 0 === n || n > this.length) && (n = this.length), n <= 0) return \"\";\n    if ((n >>>= 0) <= (t >>>= 0)) return \"\";\n    for(e || (e = \"utf8\");;)switch(e){\n        case \"hex\":\n            return V(this, t, n);\n        case \"utf8\":\n        case \"utf-8\":\n            return H(this, t, n);\n        case \"ascii\":\n            return z(this, t, n);\n        case \"latin1\":\n        case \"binary\":\n            return q(this, t, n);\n        case \"base64\":\n            return U(this, t, n);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return W(this, t, n);\n        default:\n            if (r) throw new TypeError(\"Unknown encoding: \" + e);\n            e = (e + \"\").toLowerCase(), r = !0;\n    }\n}\nfunction L(e, t, n) {\n    var r = e[t];\n    e[t] = e[n], e[n] = r;\n}\nfunction O(e, t, n, r, i) {\n    if (0 === e.length) return -1;\n    if (\"string\" == typeof n ? (r = n, n = 0) : n > 2147483647 ? n = 2147483647 : n < -2147483648 && (n = -2147483648), n = +n, isNaN(n) && (n = i ? 0 : e.length - 1), n < 0 && (n = e.length + n), n >= e.length) {\n        if (i) return -1;\n        n = e.length - 1;\n    } else if (n < 0) {\n        if (!i) return -1;\n        n = 0;\n    }\n    if (\"string\" == typeof t && (t = S.from(t, r)), I(t)) return 0 === t.length ? -1 : T(e, t, n, r, i);\n    if (\"number\" == typeof t) return t &= 255, S.TYPED_ARRAY_SUPPORT && \"function\" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, n) : Uint8Array.prototype.lastIndexOf.call(e, t, n) : T(e, [\n        t\n    ], n, r, i);\n    throw new TypeError(\"val must be string, number or Buffer\");\n}\nfunction T(e, t, n, r, i) {\n    var o, s = 1, a = e.length, c = t.length;\n    if (void 0 !== r && (\"ucs2\" === (r = String(r).toLowerCase()) || \"ucs-2\" === r || \"utf16le\" === r || \"utf-16le\" === r)) {\n        if (e.length < 2 || t.length < 2) return -1;\n        s = 2, a /= 2, c /= 2, n /= 2;\n    }\n    function l(e, t) {\n        return 1 === s ? e[t] : e.readUInt16BE(t * s);\n    }\n    if (i) {\n        var d = -1;\n        for(o = n; o < a; o++)if (l(e, o) === l(t, -1 === d ? 0 : o - d)) {\n            if (-1 === d && (d = o), o - d + 1 === c) return d * s;\n        } else -1 !== d && (o -= o - d), d = -1;\n    } else for(n + c > a && (n = a - c), o = n; o >= 0; o--){\n        for(var u = !0, h = 0; h < c; h++)if (l(e, o + h) !== l(t, h)) {\n            u = !1;\n            break;\n        }\n        if (u) return o;\n    }\n    return -1;\n}\nfunction N(e, t, n, r) {\n    n = Number(n) || 0;\n    var i = e.length - n;\n    r ? (r = Number(r)) > i && (r = i) : r = i;\n    var o = t.length;\n    if (o % 2 != 0) throw new TypeError(\"Invalid hex string\");\n    r > o / 2 && (r = o / 2);\n    for(var s = 0; s < r; ++s){\n        var a = parseInt(t.substr(2 * s, 2), 16);\n        if (isNaN(a)) return s;\n        e[n + s] = a;\n    }\n    return s;\n}\nfunction D(e, t, n, r) {\n    return oe(re(t, e.length - n), e, n, r);\n}\nfunction $(e, t, n, r) {\n    return oe(function(e) {\n        for(var t = [], n = 0; n < e.length; ++n)t.push(255 & e.charCodeAt(n));\n        return t;\n    }(t), e, n, r);\n}\nfunction B(e, t, n, r) {\n    return $(e, t, n, r);\n}\nfunction K(e, t, n, r) {\n    return oe(ie(t), e, n, r);\n}\nfunction j(e, t, n, r) {\n    return oe(function(e, t) {\n        for(var n, r, i, o = [], s = 0; s < e.length && !((t -= 2) < 0); ++s)r = (n = e.charCodeAt(s)) >> 8, i = n % 256, o.push(i), o.push(r);\n        return o;\n    }(t, e.length - n), e, n, r);\n}\nfunction U(e, t, n) {\n    return 0 === t && n === e.length ? g(e) : g(e.slice(t, n));\n}\nfunction H(e, t, n) {\n    n = Math.min(e.length, n);\n    for(var r = [], i = t; i < n;){\n        var o, s, a, c, l = e[i], d = null, u = l > 239 ? 4 : l > 223 ? 3 : l > 191 ? 2 : 1;\n        if (i + u <= n) switch(u){\n            case 1:\n                l < 128 && (d = l);\n                break;\n            case 2:\n                128 == (192 & (o = e[i + 1])) && (c = (31 & l) << 6 | 63 & o) > 127 && (d = c);\n                break;\n            case 3:\n                o = e[i + 1], s = e[i + 2], 128 == (192 & o) && 128 == (192 & s) && (c = (15 & l) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (c < 55296 || c > 57343) && (d = c);\n                break;\n            case 4:\n                o = e[i + 1], s = e[i + 2], a = e[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (c = (15 & l) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && c < 1114112 && (d = c);\n        }\n        null === d ? (d = 65533, u = 1) : d > 65535 && (d -= 65536, r.push(d >>> 10 & 1023 | 55296), d = 56320 | 1023 & d), r.push(d), i += u;\n    }\n    return function(e) {\n        var t = e.length;\n        if (t <= F) return String.fromCharCode.apply(String, e);\n        var n = \"\", r = 0;\n        for(; r < t;)n += String.fromCharCode.apply(String, e.slice(r, r += F));\n        return n;\n    }(r);\n}\nS.poolSize = 8192, S._augment = function(e) {\n    return e.__proto__ = S.prototype, e;\n}, S.from = function(e, t, n) {\n    return _(null, e, t, n);\n}, S.TYPED_ARRAY_SUPPORT && (S.prototype.__proto__ = Uint8Array.prototype, S.__proto__ = Uint8Array, \"undefined\" != typeof Symbol && Symbol.species && S[Symbol.species]), S.alloc = function(e, t, n) {\n    return function(e, t, n, r) {\n        return k(t), t <= 0 ? C(e, t) : void 0 !== n ? \"string\" == typeof r ? C(e, t).fill(n, r) : C(e, t).fill(n) : C(e, t);\n    }(null, e, t, n);\n}, S.allocUnsafe = function(e) {\n    return x(null, e);\n}, S.allocUnsafeSlow = function(e) {\n    return x(null, e);\n}, S.isBuffer = se, S.compare = function(e, t) {\n    if (!I(e) || !I(t)) throw new TypeError(\"Arguments must be Buffers\");\n    if (e === t) return 0;\n    for(var n = e.length, r = t.length, i = 0, o = Math.min(n, r); i < o; ++i)if (e[i] !== t[i]) {\n        n = e[i], r = t[i];\n        break;\n    }\n    return n < r ? -1 : r < n ? 1 : 0;\n}, S.isEncoding = function(e) {\n    switch(String(e).toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return !0;\n        default:\n            return !1;\n    }\n}, S.concat = function(e, t) {\n    if (!b(e)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n    if (0 === e.length) return S.alloc(0);\n    var n;\n    if (void 0 === t) for(t = 0, n = 0; n < e.length; ++n)t += e[n].length;\n    var r = S.allocUnsafe(t), i = 0;\n    for(n = 0; n < e.length; ++n){\n        var o = e[n];\n        if (!I(o)) throw new TypeError('\"list\" argument must be an Array of Buffers');\n        o.copy(r, i), i += o.length;\n    }\n    return r;\n}, S.byteLength = R, S.prototype._isBuffer = !0, S.prototype.swap16 = function() {\n    var e = this.length;\n    if (e % 2 != 0) throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n    for(var t = 0; t < e; t += 2)L(this, t, t + 1);\n    return this;\n}, S.prototype.swap32 = function() {\n    var e = this.length;\n    if (e % 4 != 0) throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n    for(var t = 0; t < e; t += 4)L(this, t, t + 3), L(this, t + 1, t + 2);\n    return this;\n}, S.prototype.swap64 = function() {\n    var e = this.length;\n    if (e % 8 != 0) throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n    for(var t = 0; t < e; t += 8)L(this, t, t + 7), L(this, t + 1, t + 6), L(this, t + 2, t + 5), L(this, t + 3, t + 4);\n    return this;\n}, S.prototype.toString = function() {\n    var e = 0 | this.length;\n    return 0 === e ? \"\" : 0 === arguments.length ? H(this, 0, e) : P.apply(this, arguments);\n}, S.prototype.equals = function(e) {\n    if (!I(e)) throw new TypeError(\"Argument must be a Buffer\");\n    return this === e || 0 === S.compare(this, e);\n}, S.prototype.inspect = function() {\n    var e = \"\";\n    return this.length > 0 && (e = this.toString(\"hex\", 0, 50).match(/.{2}/g).join(\" \"), this.length > 50 && (e += \" ... \")), \"<Buffer \" + e + \">\";\n}, S.prototype.compare = function(e, t, n, r, i) {\n    if (!I(e)) throw new TypeError(\"Argument must be a Buffer\");\n    if (void 0 === t && (t = 0), void 0 === n && (n = e ? e.length : 0), void 0 === r && (r = 0), void 0 === i && (i = this.length), t < 0 || n > e.length || r < 0 || i > this.length) throw new RangeError(\"out of range index\");\n    if (r >= i && t >= n) return 0;\n    if (r >= i) return -1;\n    if (t >= n) return 1;\n    if (this === e) return 0;\n    for(var o = (i >>>= 0) - (r >>>= 0), s = (n >>>= 0) - (t >>>= 0), a = Math.min(o, s), c = this.slice(r, i), l = e.slice(t, n), d = 0; d < a; ++d)if (c[d] !== l[d]) {\n        o = c[d], s = l[d];\n        break;\n    }\n    return o < s ? -1 : s < o ? 1 : 0;\n}, S.prototype.includes = function(e, t, n) {\n    return -1 !== this.indexOf(e, t, n);\n}, S.prototype.indexOf = function(e, t, n) {\n    return O(this, e, t, n, !0);\n}, S.prototype.lastIndexOf = function(e, t, n) {\n    return O(this, e, t, n, !1);\n}, S.prototype.write = function(e, t, n, r) {\n    if (void 0 === t) r = \"utf8\", n = this.length, t = 0;\n    else if (void 0 === n && \"string\" == typeof t) r = t, n = this.length, t = 0;\n    else {\n        if (!isFinite(t)) throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n        t |= 0, isFinite(n) ? (n |= 0, void 0 === r && (r = \"utf8\")) : (r = n, n = void 0);\n    }\n    var i = this.length - t;\n    if ((void 0 === n || n > i) && (n = i), e.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError(\"Attempt to write outside buffer bounds\");\n    r || (r = \"utf8\");\n    for(var o = !1;;)switch(r){\n        case \"hex\":\n            return N(this, e, t, n);\n        case \"utf8\":\n        case \"utf-8\":\n            return D(this, e, t, n);\n        case \"ascii\":\n            return $(this, e, t, n);\n        case \"latin1\":\n        case \"binary\":\n            return B(this, e, t, n);\n        case \"base64\":\n            return K(this, e, t, n);\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n            return j(this, e, t, n);\n        default:\n            if (o) throw new TypeError(\"Unknown encoding: \" + r);\n            r = (\"\" + r).toLowerCase(), o = !0;\n    }\n}, S.prototype.toJSON = function() {\n    return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n    };\n};\nvar F = 4096;\nfunction z(e, t, n) {\n    var r = \"\";\n    n = Math.min(e.length, n);\n    for(var i = t; i < n; ++i)r += String.fromCharCode(127 & e[i]);\n    return r;\n}\nfunction q(e, t, n) {\n    var r = \"\";\n    n = Math.min(e.length, n);\n    for(var i = t; i < n; ++i)r += String.fromCharCode(e[i]);\n    return r;\n}\nfunction V(e, t, n) {\n    var r = e.length;\n    (!t || t < 0) && (t = 0), (!n || n < 0 || n > r) && (n = r);\n    for(var i = \"\", o = t; o < n; ++o)i += ne(e[o]);\n    return i;\n}\nfunction W(e, t, n) {\n    for(var r = e.slice(t, n), i = \"\", o = 0; o < r.length; o += 2)i += String.fromCharCode(r[o] + 256 * r[o + 1]);\n    return i;\n}\nfunction G(e, t, n) {\n    if (e % 1 != 0 || e < 0) throw new RangeError(\"offset is not uint\");\n    if (e + t > n) throw new RangeError(\"Trying to access beyond buffer length\");\n}\nfunction Z(e, t, n, r, i, o) {\n    if (!I(e)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n    if (t > i || t < o) throw new RangeError('\"value\" argument is out of bounds');\n    if (n + r > e.length) throw new RangeError(\"Index out of range\");\n}\nfunction Y(e, t, n, r) {\n    t < 0 && (t = 65535 + t + 1);\n    for(var i = 0, o = Math.min(e.length - n, 2); i < o; ++i)e[n + i] = (t & 255 << 8 * (r ? i : 1 - i)) >>> 8 * (r ? i : 1 - i);\n}\nfunction J(e, t, n, r) {\n    t < 0 && (t = 4294967295 + t + 1);\n    for(var i = 0, o = Math.min(e.length - n, 4); i < o; ++i)e[n + i] = t >>> 8 * (r ? i : 3 - i) & 255;\n}\nfunction X(e, t, n, r, i, o) {\n    if (n + r > e.length) throw new RangeError(\"Index out of range\");\n    if (n < 0) throw new RangeError(\"Index out of range\");\n}\nfunction Q(e, t, n, r, i) {\n    return i || X(e, 0, n, 4), y(e, t, n, r, 23, 4), n + 4;\n}\nfunction ee(e, t, n, r, i) {\n    return i || X(e, 0, n, 8), y(e, t, n, r, 52, 8), n + 8;\n}\nS.prototype.slice = function(e, t) {\n    var n, r = this.length;\n    if ((e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), t < e && (t = e), S.TYPED_ARRAY_SUPPORT) (n = this.subarray(e, t)).__proto__ = S.prototype;\n    else {\n        var i = t - e;\n        n = new S(i, void 0);\n        for(var o = 0; o < i; ++o)n[o] = this[o + e];\n    }\n    return n;\n}, S.prototype.readUIntLE = function(e, t, n) {\n    e |= 0, t |= 0, n || G(e, t, this.length);\n    for(var r = this[e], i = 1, o = 0; ++o < t && (i *= 256);)r += this[e + o] * i;\n    return r;\n}, S.prototype.readUIntBE = function(e, t, n) {\n    e |= 0, t |= 0, n || G(e, t, this.length);\n    for(var r = this[e + --t], i = 1; t > 0 && (i *= 256);)r += this[e + --t] * i;\n    return r;\n}, S.prototype.readUInt8 = function(e, t) {\n    return t || G(e, 1, this.length), this[e];\n}, S.prototype.readUInt16LE = function(e, t) {\n    return t || G(e, 2, this.length), this[e] | this[e + 1] << 8;\n}, S.prototype.readUInt16BE = function(e, t) {\n    return t || G(e, 2, this.length), this[e] << 8 | this[e + 1];\n}, S.prototype.readUInt32LE = function(e, t) {\n    return t || G(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];\n}, S.prototype.readUInt32BE = function(e, t) {\n    return t || G(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);\n}, S.prototype.readIntLE = function(e, t, n) {\n    e |= 0, t |= 0, n || G(e, t, this.length);\n    for(var r = this[e], i = 1, o = 0; ++o < t && (i *= 256);)r += this[e + o] * i;\n    return r >= (i *= 128) && (r -= Math.pow(2, 8 * t)), r;\n}, S.prototype.readIntBE = function(e, t, n) {\n    e |= 0, t |= 0, n || G(e, t, this.length);\n    for(var r = t, i = 1, o = this[e + --r]; r > 0 && (i *= 256);)o += this[e + --r] * i;\n    return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;\n}, S.prototype.readInt8 = function(e, t) {\n    return t || G(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];\n}, S.prototype.readInt16LE = function(e, t) {\n    t || G(e, 2, this.length);\n    var n = this[e] | this[e + 1] << 8;\n    return 32768 & n ? 4294901760 | n : n;\n}, S.prototype.readInt16BE = function(e, t) {\n    t || G(e, 2, this.length);\n    var n = this[e + 1] | this[e] << 8;\n    return 32768 & n ? 4294901760 | n : n;\n}, S.prototype.readInt32LE = function(e, t) {\n    return t || G(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;\n}, S.prototype.readInt32BE = function(e, t) {\n    return t || G(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];\n}, S.prototype.readFloatLE = function(e, t) {\n    return t || G(e, 4, this.length), m(this, e, !0, 23, 4);\n}, S.prototype.readFloatBE = function(e, t) {\n    return t || G(e, 4, this.length), m(this, e, !1, 23, 4);\n}, S.prototype.readDoubleLE = function(e, t) {\n    return t || G(e, 8, this.length), m(this, e, !0, 52, 8);\n}, S.prototype.readDoubleBE = function(e, t) {\n    return t || G(e, 8, this.length), m(this, e, !1, 52, 8);\n}, S.prototype.writeUIntLE = function(e, t, n, r) {\n    (e = +e, t |= 0, n |= 0, r) || Z(this, e, t, n, Math.pow(2, 8 * n) - 1, 0);\n    var i = 1, o = 0;\n    for(this[t] = 255 & e; ++o < n && (i *= 256);)this[t + o] = e / i & 255;\n    return t + n;\n}, S.prototype.writeUIntBE = function(e, t, n, r) {\n    (e = +e, t |= 0, n |= 0, r) || Z(this, e, t, n, Math.pow(2, 8 * n) - 1, 0);\n    var i = n - 1, o = 1;\n    for(this[t + i] = 255 & e; --i >= 0 && (o *= 256);)this[t + i] = e / o & 255;\n    return t + n;\n}, S.prototype.writeUInt8 = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 1, 255, 0), S.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[t] = 255 & e, t + 1;\n}, S.prototype.writeUInt16LE = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 2, 65535, 0), S.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : Y(this, e, t, !0), t + 2;\n}, S.prototype.writeUInt16BE = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 2, 65535, 0), S.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : Y(this, e, t, !1), t + 2;\n}, S.prototype.writeUInt32LE = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 4, 4294967295, 0), S.TYPED_ARRAY_SUPPORT ? (this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e) : J(this, e, t, !0), t + 4;\n}, S.prototype.writeUInt32BE = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 4, 4294967295, 0), S.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : J(this, e, t, !1), t + 4;\n}, S.prototype.writeIntLE = function(e, t, n, r) {\n    if (e = +e, t |= 0, !r) {\n        var i = Math.pow(2, 8 * n - 1);\n        Z(this, e, t, n, i - 1, -i);\n    }\n    var o = 0, s = 1, a = 0;\n    for(this[t] = 255 & e; ++o < n && (s *= 256);)e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;\n    return t + n;\n}, S.prototype.writeIntBE = function(e, t, n, r) {\n    if (e = +e, t |= 0, !r) {\n        var i = Math.pow(2, 8 * n - 1);\n        Z(this, e, t, n, i - 1, -i);\n    }\n    var o = n - 1, s = 1, a = 0;\n    for(this[t + o] = 255 & e; --o >= 0 && (s *= 256);)e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;\n    return t + n;\n}, S.prototype.writeInt8 = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 1, 127, -128), S.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;\n}, S.prototype.writeInt16LE = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 2, 32767, -32768), S.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : Y(this, e, t, !0), t + 2;\n}, S.prototype.writeInt16BE = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 2, 32767, -32768), S.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : Y(this, e, t, !1), t + 2;\n}, S.prototype.writeInt32LE = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 4, 2147483647, -2147483648), S.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24) : J(this, e, t, !0), t + 4;\n}, S.prototype.writeInt32BE = function(e, t, n) {\n    return e = +e, t |= 0, n || Z(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), S.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : J(this, e, t, !1), t + 4;\n}, S.prototype.writeFloatLE = function(e, t, n) {\n    return Q(this, e, t, !0, n);\n}, S.prototype.writeFloatBE = function(e, t, n) {\n    return Q(this, e, t, !1, n);\n}, S.prototype.writeDoubleLE = function(e, t, n) {\n    return ee(this, e, t, !0, n);\n}, S.prototype.writeDoubleBE = function(e, t, n) {\n    return ee(this, e, t, !1, n);\n}, S.prototype.copy = function(e, t, n, r) {\n    if (n || (n = 0), r || 0 === r || (r = this.length), t >= e.length && (t = e.length), t || (t = 0), r > 0 && r < n && (r = n), r === n) return 0;\n    if (0 === e.length || 0 === this.length) return 0;\n    if (t < 0) throw new RangeError(\"targetStart out of bounds\");\n    if (n < 0 || n >= this.length) throw new RangeError(\"sourceStart out of bounds\");\n    if (r < 0) throw new RangeError(\"sourceEnd out of bounds\");\n    r > this.length && (r = this.length), e.length - t < r - n && (r = e.length - t + n);\n    var i, o = r - n;\n    if (this === e && n < t && t < r) for(i = o - 1; i >= 0; --i)e[i + t] = this[i + n];\n    else if (o < 1e3 || !S.TYPED_ARRAY_SUPPORT) for(i = 0; i < o; ++i)e[i + t] = this[i + n];\n    else Uint8Array.prototype.set.call(e, this.subarray(n, n + o), t);\n    return o;\n}, S.prototype.fill = function(e, t, n, r) {\n    if (\"string\" == typeof e) {\n        if (\"string\" == typeof t ? (r = t, t = 0, n = this.length) : \"string\" == typeof n && (r = n, n = this.length), 1 === e.length) {\n            var i = e.charCodeAt(0);\n            i < 256 && (e = i);\n        }\n        if (void 0 !== r && \"string\" != typeof r) throw new TypeError(\"encoding must be a string\");\n        if (\"string\" == typeof r && !S.isEncoding(r)) throw new TypeError(\"Unknown encoding: \" + r);\n    } else \"number\" == typeof e && (e &= 255);\n    if (t < 0 || this.length < t || this.length < n) throw new RangeError(\"Out of range index\");\n    if (n <= t) return this;\n    var o;\n    if (t >>>= 0, n = void 0 === n ? this.length : n >>> 0, e || (e = 0), \"number\" == typeof e) for(o = t; o < n; ++o)this[o] = e;\n    else {\n        var s = I(e) ? e : re(new S(e, r).toString()), a = s.length;\n        for(o = 0; o < n - t; ++o)this[o + t] = s[o % a];\n    }\n    return this;\n};\nvar te = /[^+\\/0-9A-Za-z-_]/g;\nfunction ne(e) {\n    return e < 16 ? \"0\" + e.toString(16) : e.toString(16);\n}\nfunction re(e, t) {\n    var n;\n    t = t || 1 / 0;\n    for(var r = e.length, i = null, o = [], s = 0; s < r; ++s){\n        if ((n = e.charCodeAt(s)) > 55295 && n < 57344) {\n            if (!i) {\n                if (n > 56319) {\n                    (t -= 3) > -1 && o.push(239, 191, 189);\n                    continue;\n                }\n                if (s + 1 === r) {\n                    (t -= 3) > -1 && o.push(239, 191, 189);\n                    continue;\n                }\n                i = n;\n                continue;\n            }\n            if (n < 56320) {\n                (t -= 3) > -1 && o.push(239, 191, 189), i = n;\n                continue;\n            }\n            n = 65536 + (i - 55296 << 10 | n - 56320);\n        } else i && (t -= 3) > -1 && o.push(239, 191, 189);\n        if (i = null, n < 128) {\n            if ((t -= 1) < 0) break;\n            o.push(n);\n        } else if (n < 2048) {\n            if ((t -= 2) < 0) break;\n            o.push(n >> 6 | 192, 63 & n | 128);\n        } else if (n < 65536) {\n            if ((t -= 3) < 0) break;\n            o.push(n >> 12 | 224, n >> 6 & 63 | 128, 63 & n | 128);\n        } else {\n            if (!(n < 1114112)) throw new Error(\"Invalid code point\");\n            if ((t -= 4) < 0) break;\n            o.push(n >> 18 | 240, n >> 12 & 63 | 128, n >> 6 & 63 | 128, 63 & n | 128);\n        }\n    }\n    return o;\n}\nfunction ie(e) {\n    return function(e) {\n        var t, n, r, i, o, s;\n        h || f();\n        var a = e.length;\n        if (a % 4 > 0) throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        o = \"=\" === e[a - 2] ? 2 : \"=\" === e[a - 1] ? 1 : 0, s = new u(3 * a / 4 - o), r = o > 0 ? a - 4 : a;\n        var c = 0;\n        for(t = 0, n = 0; t < r; t += 4, n += 3)i = d[e.charCodeAt(t)] << 18 | d[e.charCodeAt(t + 1)] << 12 | d[e.charCodeAt(t + 2)] << 6 | d[e.charCodeAt(t + 3)], s[c++] = i >> 16 & 255, s[c++] = i >> 8 & 255, s[c++] = 255 & i;\n        return 2 === o ? (i = d[e.charCodeAt(t)] << 2 | d[e.charCodeAt(t + 1)] >> 4, s[c++] = 255 & i) : 1 === o && (i = d[e.charCodeAt(t)] << 10 | d[e.charCodeAt(t + 1)] << 4 | d[e.charCodeAt(t + 2)] >> 2, s[c++] = i >> 8 & 255, s[c++] = 255 & i), s;\n    }(function(e) {\n        if ((e = (function(e) {\n            return e.trim ? e.trim() : e.replace(/^\\s+|\\s+$/g, \"\");\n        })(e).replace(te, \"\")).length < 2) return \"\";\n        for(; e.length % 4 != 0;)e += \"=\";\n        return e;\n    }(e));\n}\nfunction oe(e, t, n, r) {\n    for(var i = 0; i < r && !(i + n >= t.length || i >= e.length); ++i)t[i + n] = e[i];\n    return i;\n}\nfunction se(e) {\n    return null != e && (!!e._isBuffer || ae(e) || function(e) {\n        return \"function\" == typeof e.readFloatLE && \"function\" == typeof e.slice && ae(e.slice(0, 0));\n    }(e));\n}\nfunction ae(e) {\n    return !!e.constructor && \"function\" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e);\n}\nvar ce = Object.freeze({\n    __proto__: null,\n    Buffer: S,\n    INSPECT_MAX_BYTES: 50,\n    SlowBuffer: function(e) {\n        return +e != e && (e = 0), S.alloc(+e);\n    },\n    isBuffer: se,\n    kMaxLength: w\n}), le = \"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\nfunction de(e) {\n    return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nfunction ue(e) {\n    if (e.__esModule) return e;\n    var t = e.default;\n    if (\"function\" == typeof t) {\n        var n = function e() {\n            return this instanceof e ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);\n        };\n        n.prototype = t.prototype;\n    } else n = {};\n    return Object.defineProperty(n, \"__esModule\", {\n        value: !0\n    }), Object.keys(e).forEach(function(t) {\n        var r = Object.getOwnPropertyDescriptor(e, t);\n        Object.defineProperty(n, t, r.get ? r : {\n            enumerable: !0,\n            get: function() {\n                return e[t];\n            }\n        });\n    }), n;\n}\nvar he = {}, fe = {}, pe = {};\nfunction ge(e) {\n    if (!Number.isSafeInteger(e) || e < 0) throw new Error(`positive integer expected, not ${e}`);\n}\nfunction me(e) {\n    if (\"boolean\" != typeof e) throw new Error(`boolean expected, not ${e}`);\n}\nfunction ye(e) {\n    return e instanceof Uint8Array || null != e && \"object\" == typeof e && \"Uint8Array\" === e.constructor.name;\n}\nfunction ve(e, ...t) {\n    if (!ye(e)) throw new Error(\"Uint8Array expected\");\n    if (t.length > 0 && !t.includes(e.length)) throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`);\n}\nfunction be(e) {\n    if (\"function\" != typeof e || \"function\" != typeof e.create) throw new Error(\"hash must be wrapped by utils.wrapConstructor\");\n    ge(e.outputLen), ge(e.blockLen);\n}\nfunction we(e, t = !0) {\n    if (e.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (t && e.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction Ee(e, t) {\n    ve(e);\n    const n = t.outputLen;\n    if (e.length < n) throw new Error(`digestInto() expects output buffer of length at least ${n}`);\n}\nObject.defineProperty(pe, \"__esModule\", {\n    value: !0\n}), pe.isBytes = ye, pe.number = ge, pe.bool = me, pe.bytes = ve, pe.hash = be, pe.exists = we, pe.output = Ee;\nconst Ce = {\n    number: ge,\n    bool: me,\n    bytes: ve,\n    hash: be,\n    exists: we,\n    output: Ee\n};\npe.default = Ce, function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.wrapCipher = e.Hash = e.nextTick = e.isLE = e.createView = e.u32 = e.u16 = e.u8 = void 0, e.bytesToHex = r, e.hexToBytes = s, e.hexToNumber = a, e.bytesToNumberBE = function(e) {\n        return a(r(e));\n    }, e.numberToBytesBE = function(e, t) {\n        return s(e.toString(16).padStart(2 * t, \"0\"));\n    }, e.asyncLoop = async function(t, n, r) {\n        let i = Date.now();\n        for(let o = 0; o < t; o++){\n            r(o);\n            const t = Date.now() - i;\n            t >= 0 && t < n || (await (0, e.nextTick)(), i += t);\n        }\n    }, e.utf8ToBytes = c, e.bytesToUtf8 = function(e) {\n        return (new TextDecoder).decode(e);\n    }, e.toBytes = function(e) {\n        if (\"string\" == typeof e) e = c(e);\n        else {\n            if (!(0, t.isBytes)(e)) throw new Error(\"Uint8Array expected, got \" + typeof e);\n            e = d(e);\n        }\n        return e;\n    }, e.concatBytes = function(...e) {\n        let n = 0;\n        for(let r = 0; r < e.length; r++){\n            const i = e[r];\n            (0, t.bytes)(i), n += i.length;\n        }\n        const r = new Uint8Array(n);\n        for(let t = 0, n = 0; t < e.length; t++){\n            const i = e[t];\n            r.set(i, n), n += i.length;\n        }\n        return r;\n    }, e.checkOpts = function(e, t) {\n        if (null == t || \"object\" != typeof t) throw new Error(\"options must be defined\");\n        return Object.assign(e, t);\n    }, e.equalBytes = function(e, t) {\n        if (e.length !== t.length) return !1;\n        let n = 0;\n        for(let r = 0; r < e.length; r++)n |= e[r] ^ t[r];\n        return 0 === n;\n    }, e.setBigUint64 = l, e.u64Lengths = function(t, n) {\n        const r = new Uint8Array(16), i = (0, e.createView)(r);\n        return l(i, 0, BigInt(n ? n.length : 0), !0), l(i, 8, BigInt(t.length), !0), r;\n    }, e.isAligned32 = function(e) {\n        return e.byteOffset % 4 == 0;\n    }, e.copyBytes = d, e.clean = function(...e) {\n        for(let t = 0; t < e.length; t++)e[t].fill(0);\n    };\n    const t = pe;\n    e.u8 = (e)=>new Uint8Array(e.buffer, e.byteOffset, e.byteLength);\n    e.u16 = (e)=>new Uint16Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 2));\n    e.u32 = (e)=>new Uint32Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 4));\n    if (e.createView = (e)=>new DataView(e.buffer, e.byteOffset, e.byteLength), e.isLE = 68 === new Uint8Array(new Uint32Array([\n        287454020\n    ]).buffer)[0], !e.isLE) throw new Error(\"Non little-endian hardware is not supported\");\n    const n = Array.from({\n        length: 256\n    }, (e, t)=>t.toString(16).padStart(2, \"0\"));\n    function r(e) {\n        (0, t.bytes)(e);\n        let r = \"\";\n        for(let t = 0; t < e.length; t++)r += n[e[t]];\n        return r;\n    }\n    const i = {\n        _0: 48,\n        _9: 57,\n        _A: 65,\n        _F: 70,\n        _a: 97,\n        _f: 102\n    };\n    function o(e) {\n        return e >= i._0 && e <= i._9 ? e - i._0 : e >= i._A && e <= i._F ? e - (i._A - 10) : e >= i._a && e <= i._f ? e - (i._a - 10) : void 0;\n    }\n    function s(e) {\n        if (\"string\" != typeof e) throw new Error(\"hex string expected, got \" + typeof e);\n        const t = e.length, n = t / 2;\n        if (t % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + t);\n        const r = new Uint8Array(n);\n        for(let t = 0, i = 0; t < n; t++, i += 2){\n            const n = o(e.charCodeAt(i)), s = o(e.charCodeAt(i + 1));\n            if (void 0 === n || void 0 === s) {\n                const t = e[i] + e[i + 1];\n                throw new Error('hex string expected, got non-hex character \"' + t + '\" at index ' + i);\n            }\n            r[t] = 16 * n + s;\n        }\n        return r;\n    }\n    function a(e) {\n        if (\"string\" != typeof e) throw new Error(\"hex string expected, got \" + typeof e);\n        return BigInt(\"\" === e ? \"0\" : `0x${e}`);\n    }\n    function c(e) {\n        if (\"string\" != typeof e) throw new Error(\"string expected, got \" + typeof e);\n        return new Uint8Array((new TextEncoder).encode(e));\n    }\n    e.nextTick = async ()=>{};\n    e.Hash = class {\n    };\n    function l(e, t, n, r) {\n        if (\"function\" == typeof e.setBigUint64) return e.setBigUint64(t, n, r);\n        const i = BigInt(32), o = BigInt(4294967295), s = Number(n >> i & o), a = Number(n & o), c = r ? 4 : 0, l = r ? 0 : 4;\n        e.setUint32(t + c, s, r), e.setUint32(t + l, a, r);\n    }\n    function d(e) {\n        return Uint8Array.from(e);\n    }\n    e.wrapCipher = (e, t)=>(Object.assign(t, e), t);\n}(fe);\nvar Se = {}, _e = {};\nObject.defineProperty(_e, \"__esModule\", {\n    value: !0\n}), _e.AEAD_TAG_LENGTH = _e.XCHACHA20_NONCE_LENGTH = _e.CURVE25519_PUBLIC_KEY_SIZE = _e.ETH_PUBLIC_KEY_SIZE = _e.UNCOMPRESSED_PUBLIC_KEY_SIZE = _e.COMPRESSED_PUBLIC_KEY_SIZE = _e.SECRET_KEY_LENGTH = void 0, _e.SECRET_KEY_LENGTH = 32, _e.COMPRESSED_PUBLIC_KEY_SIZE = 33, _e.UNCOMPRESSED_PUBLIC_KEY_SIZE = 65, _e.ETH_PUBLIC_KEY_SIZE = 64, _e.CURVE25519_PUBLIC_KEY_SIZE = 32, _e.XCHACHA20_NONCE_LENGTH = 24, _e.AEAD_TAG_LENGTH = 16, function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.ephemeralKeySize = e.symmetricNonceLength = e.symmetricAlgorithm = e.isHkdfKeyCompressed = e.isEphemeralKeyCompressed = e.ellipticCurve = e.ECIES_CONFIG = void 0;\n    var t = _e, n = function() {\n        this.ellipticCurve = \"secp256k1\", this.isEphemeralKeyCompressed = !1, this.isHkdfKeyCompressed = !1, this.symmetricAlgorithm = \"aes-256-gcm\", this.symmetricNonceLength = 16;\n    };\n    e.ECIES_CONFIG = new n;\n    e.ellipticCurve = function() {\n        return e.ECIES_CONFIG.ellipticCurve;\n    };\n    e.isEphemeralKeyCompressed = function() {\n        return e.ECIES_CONFIG.isEphemeralKeyCompressed;\n    };\n    e.isHkdfKeyCompressed = function() {\n        return e.ECIES_CONFIG.isHkdfKeyCompressed;\n    };\n    e.symmetricAlgorithm = function() {\n        return e.ECIES_CONFIG.symmetricAlgorithm;\n    };\n    e.symmetricNonceLength = function() {\n        return e.ECIES_CONFIG.symmetricNonceLength;\n    };\n    e.ephemeralKeySize = function() {\n        var n = {\n            secp256k1: e.ECIES_CONFIG.isEphemeralKeyCompressed ? t.COMPRESSED_PUBLIC_KEY_SIZE : t.UNCOMPRESSED_PUBLIC_KEY_SIZE,\n            x25519: t.CURVE25519_PUBLIC_KEY_SIZE,\n            ed25519: t.CURVE25519_PUBLIC_KEY_SIZE\n        };\n        if (e.ECIES_CONFIG.ellipticCurve in n) return n[e.ECIES_CONFIG.ellipticCurve];\n        throw new Error(\"Not implemented\");\n    };\n}(Se);\nvar ke = {}, xe = {}, Me = {}, Ae = {}, Ie = {}, Re = {};\nObject.defineProperty(Re, \"__esModule\", {\n    value: !0\n}), Re.crypto = void 0, Re.crypto = \"object\" == typeof globalThis && \"crypto\" in globalThis ? globalThis.crypto : void 0, function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.gcm = e.ctr = e.cbc = e.utils = void 0, e.randomBytes = i, e.getWebcryptoSubtle = o, e.managedNonce = function(e) {\n        return (0, n.number)(e.nonceLength), (t, ...n)=>({\n                encrypt (o, ...s) {\n                    const { nonceLength: a } = e, c = i(a), l = e(t, c, ...n).encrypt(o, ...s), d = (0, r.concatBytes)(c, l);\n                    return l.fill(0), d;\n                },\n                decrypt (r, ...i) {\n                    const { nonceLength: o } = e, s = r.subarray(0, o), a = r.subarray(o);\n                    return e(t, s, ...n).decrypt(a, ...i);\n                }\n            });\n    };\n    const t = Re, n = pe, r = fe;\n    function i(e = 32) {\n        if (t.crypto && \"function\" == typeof t.crypto.getRandomValues) return t.crypto.getRandomValues(new Uint8Array(e));\n        if (t.crypto && \"function\" == typeof t.crypto.randomBytes) return t.crypto.randomBytes(e);\n        throw new Error(\"crypto.getRandomValues must be defined\");\n    }\n    function o() {\n        if (t.crypto && \"object\" == typeof t.crypto.subtle && null != t.crypto.subtle) return t.crypto.subtle;\n        throw new Error(\"crypto.subtle must be defined\");\n    }\n    e.utils = {\n        async encrypt (e, t, n, r) {\n            const i = o(), s = await i.importKey(\"raw\", e, t, !0, [\n                \"encrypt\"\n            ]), a = await i.encrypt(n, s, r);\n            return new Uint8Array(a);\n        },\n        async decrypt (e, t, n, r) {\n            const i = o(), s = await i.importKey(\"raw\", e, t, !0, [\n                \"decrypt\"\n            ]), a = await i.decrypt(n, s, r);\n            return new Uint8Array(a);\n        }\n    };\n    const s = {\n        CBC: \"AES-CBC\",\n        CTR: \"AES-CTR\",\n        GCM: \"AES-GCM\"\n    };\n    function a(t) {\n        return (r, i, o)=>{\n            (0, n.bytes)(r), (0, n.bytes)(i);\n            const a = {\n                name: t,\n                length: 8 * r.length\n            }, c = function(e, t, n) {\n                if (e === s.CBC) return {\n                    name: s.CBC,\n                    iv: t\n                };\n                if (e === s.CTR) return {\n                    name: s.CTR,\n                    counter: t,\n                    length: 64\n                };\n                if (e === s.GCM) return n ? {\n                    name: s.GCM,\n                    iv: t,\n                    additionalData: n\n                } : {\n                    name: s.GCM,\n                    iv: t\n                };\n                throw new Error(\"unknown aes block mode\");\n            }(t, i, o);\n            return {\n                encrypt: (t)=>((0, n.bytes)(t), e.utils.encrypt(r, a, c, t)),\n                decrypt: (t)=>((0, n.bytes)(t), e.utils.decrypt(r, a, c, t))\n            };\n        };\n    }\n    e.cbc = a(s.CBC), e.ctr = a(s.CTR), e.gcm = a(s.GCM);\n}(Ie);\nvar Pe = {}, Le = {}, Oe = {}, Te = {};\nfunction Ne(e) {\n    if (!Number.isSafeInteger(e) || e < 0) throw new Error(`positive integer expected, not ${e}`);\n}\nfunction De(e) {\n    if (\"boolean\" != typeof e) throw new Error(`boolean expected, not ${e}`);\n}\nfunction $e(e) {\n    return e instanceof Uint8Array || null != e && \"object\" == typeof e && \"Uint8Array\" === e.constructor.name;\n}\nfunction Be(e, ...t) {\n    if (!$e(e)) throw new Error(\"Uint8Array expected\");\n    if (t.length > 0 && !t.includes(e.length)) throw new Error(`Uint8Array expected of length ${t}, not of length=${e.length}`);\n}\nfunction Ke(e) {\n    if (\"function\" != typeof e || \"function\" != typeof e.create) throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    Ne(e.outputLen), Ne(e.blockLen);\n}\nfunction je(e, t = !0) {\n    if (e.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (t && e.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction Ue(e, t) {\n    Be(e);\n    const n = t.outputLen;\n    if (e.length < n) throw new Error(`digestInto() expects output buffer of length at least ${n}`);\n}\nObject.defineProperty(Te, \"__esModule\", {\n    value: !0\n}), Te.isBytes = $e, Te.number = Ne, Te.bool = De, Te.bytes = Be, Te.hash = Ke, Te.exists = je, Te.output = Ue;\nconst He = {\n    number: Ne,\n    bool: De,\n    bytes: Be,\n    hash: Ke,\n    exists: je,\n    output: Ue\n};\nTe.default = He;\nvar Fe = {}, ze = {};\nObject.defineProperty(ze, \"__esModule\", {\n    value: !0\n}), ze.crypto = void 0, ze.crypto = \"object\" == typeof globalThis && \"crypto\" in globalThis ? globalThis.crypto : void 0, function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.Hash = e.nextTick = e.byteSwapIfBE = e.byteSwap = e.isLE = e.rotl = e.rotr = e.createView = e.u32 = e.u8 = void 0, e.isBytes = function(e) {\n        return e instanceof Uint8Array || null != e && \"object\" == typeof e && \"Uint8Array\" === e.constructor.name;\n    }, e.byteSwap32 = function(t) {\n        for(let n = 0; n < t.length; n++)t[n] = (0, e.byteSwap)(t[n]);\n    }, e.bytesToHex = function(e) {\n        (0, n.bytes)(e);\n        let t = \"\";\n        for(let n = 0; n < e.length; n++)t += r[e[n]];\n        return t;\n    }, e.hexToBytes = function(e) {\n        if (\"string\" != typeof e) throw new Error(\"hex string expected, got \" + typeof e);\n        const t = e.length, n = t / 2;\n        if (t % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + t);\n        const r = new Uint8Array(n);\n        for(let t = 0, i = 0; t < n; t++, i += 2){\n            const n = o(e.charCodeAt(i)), s = o(e.charCodeAt(i + 1));\n            if (void 0 === n || void 0 === s) {\n                const t = e[i] + e[i + 1];\n                throw new Error('hex string expected, got non-hex character \"' + t + '\" at index ' + i);\n            }\n            r[t] = 16 * n + s;\n        }\n        return r;\n    }, e.asyncLoop = async function(t, n, r) {\n        let i = Date.now();\n        for(let o = 0; o < t; o++){\n            r(o);\n            const t = Date.now() - i;\n            t >= 0 && t < n || (await (0, e.nextTick)(), i += t);\n        }\n    }, e.utf8ToBytes = s, e.toBytes = a, e.concatBytes = function(...e) {\n        let t = 0;\n        for(let r = 0; r < e.length; r++){\n            const i = e[r];\n            (0, n.bytes)(i), t += i.length;\n        }\n        const r = new Uint8Array(t);\n        for(let t = 0, n = 0; t < e.length; t++){\n            const i = e[t];\n            r.set(i, n), n += i.length;\n        }\n        return r;\n    }, e.checkOpts = function(e, t) {\n        if (void 0 !== t && \"[object Object]\" !== c.call(t)) throw new Error(\"Options should be object or undefined\");\n        return Object.assign(e, t);\n    }, e.wrapConstructor = function(e) {\n        const t = (t)=>e().update(a(t)).digest(), n = e();\n        return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = ()=>e(), t;\n    }, e.wrapConstructorWithOpts = function(e) {\n        const t = (t, n)=>e(n).update(a(t)).digest(), n = e({});\n        return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = (t)=>e(t), t;\n    }, e.wrapXOFConstructorWithOpts = function(e) {\n        const t = (t, n)=>e(n).update(a(t)).digest(), n = e({});\n        return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = (t)=>e(t), t;\n    }, e.randomBytes = function(e = 32) {\n        if (t.crypto && \"function\" == typeof t.crypto.getRandomValues) return t.crypto.getRandomValues(new Uint8Array(e));\n        if (t.crypto && \"function\" == typeof t.crypto.randomBytes) return t.crypto.randomBytes(e);\n        throw new Error(\"crypto.getRandomValues must be defined\");\n    };\n    const t = ze, n = Te;\n    e.u8 = (e)=>new Uint8Array(e.buffer, e.byteOffset, e.byteLength);\n    e.u32 = (e)=>new Uint32Array(e.buffer, e.byteOffset, Math.floor(e.byteLength / 4));\n    e.createView = (e)=>new DataView(e.buffer, e.byteOffset, e.byteLength);\n    e.rotr = (e, t)=>e << 32 - t | e >>> t;\n    e.rotl = (e, t)=>e << t | e >>> 32 - t >>> 0, e.isLE = 68 === new Uint8Array(new Uint32Array([\n        287454020\n    ]).buffer)[0];\n    e.byteSwap = (e)=>e << 24 & 4278190080 | e << 8 & 16711680 | e >>> 8 & 65280 | e >>> 24 & 255, e.byteSwapIfBE = e.isLE ? (e)=>e : (t)=>(0, e.byteSwap)(t);\n    const r = Array.from({\n        length: 256\n    }, (e, t)=>t.toString(16).padStart(2, \"0\"));\n    const i = {\n        _0: 48,\n        _9: 57,\n        _A: 65,\n        _F: 70,\n        _a: 97,\n        _f: 102\n    };\n    function o(e) {\n        return e >= i._0 && e <= i._9 ? e - i._0 : e >= i._A && e <= i._F ? e - (i._A - 10) : e >= i._a && e <= i._f ? e - (i._a - 10) : void 0;\n    }\n    function s(e) {\n        if (\"string\" != typeof e) throw new Error(\"utf8ToBytes expected string, got \" + typeof e);\n        return new Uint8Array((new TextEncoder).encode(e));\n    }\n    function a(e) {\n        return \"string\" == typeof e && (e = s(e)), (0, n.bytes)(e), e;\n    }\n    e.nextTick = async ()=>{};\n    e.Hash = class {\n        clone() {\n            return this._cloneInto();\n        }\n    };\n    const c = {}.toString;\n}(Fe), Object.defineProperty(Oe, \"__esModule\", {\n    value: !0\n}), Oe.HashMD = Oe.Maj = Oe.Chi = void 0;\nconst qe = Te, Ve = Fe;\nOe.Chi = (e, t, n)=>e & t ^ ~e & n;\nOe.Maj = (e, t, n)=>e & t ^ e & n ^ t & n;\nOe.HashMD = class extends Ve.Hash {\n    constructor(e, t, n, r){\n        super(), this.blockLen = e, this.outputLen = t, this.padOffset = n, this.isLE = r, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = (0, Ve.createView)(this.buffer);\n    }\n    update(e) {\n        (0, qe.exists)(this);\n        const { view: t, buffer: n, blockLen: r } = this, i = (e = (0, Ve.toBytes)(e)).length;\n        for(let o = 0; o < i;){\n            const s = Math.min(r - this.pos, i - o);\n            if (s !== r) n.set(e.subarray(o, o + s), this.pos), this.pos += s, o += s, this.pos === r && (this.process(t, 0), this.pos = 0);\n            else {\n                const t = (0, Ve.createView)(e);\n                for(; r <= i - o; o += r)this.process(t, o);\n            }\n        }\n        return this.length += e.length, this.roundClean(), this;\n    }\n    digestInto(e) {\n        (0, qe.exists)(this), (0, qe.output)(e, this), this.finished = !0;\n        const { buffer: t, view: n, blockLen: r, isLE: i } = this;\n        let { pos: o } = this;\n        t[o++] = 128, this.buffer.subarray(o).fill(0), this.padOffset > r - o && (this.process(n, 0), o = 0);\n        for(let e = o; e < r; e++)t[e] = 0;\n        !function(e, t, n, r) {\n            if (\"function\" == typeof e.setBigUint64) return e.setBigUint64(t, n, r);\n            const i = BigInt(32), o = BigInt(4294967295), s = Number(n >> i & o), a = Number(n & o), c = r ? 4 : 0, l = r ? 0 : 4;\n            e.setUint32(t + c, s, r), e.setUint32(t + l, a, r);\n        }(n, r - 8, BigInt(8 * this.length), i), this.process(n, 0);\n        const s = (0, Ve.createView)(e), a = this.outputLen;\n        if (a % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const c = a / 4, l = this.get();\n        if (c > l.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let e = 0; e < c; e++)s.setUint32(4 * e, l[e], i);\n    }\n    digest() {\n        const { buffer: e, outputLen: t } = this;\n        this.digestInto(e);\n        const n = e.slice(0, t);\n        return this.destroy(), n;\n    }\n    _cloneInto(e) {\n        e || (e = new this.constructor), e.set(...this.get());\n        const { blockLen: t, buffer: n, length: r, finished: i, destroyed: o, pos: s } = this;\n        return e.length = r, e.pos = s, e.finished = i, e.destroyed = o, r % t && e.buffer.set(n), e;\n    }\n};\nvar We = {};\nObject.defineProperty(We, \"__esModule\", {\n    value: !0\n}), We.add5L = We.add5H = We.add4H = We.add4L = We.add3H = We.add3L = We.rotlBL = We.rotlBH = We.rotlSL = We.rotlSH = We.rotr32L = We.rotr32H = We.rotrBL = We.rotrBH = We.rotrSL = We.rotrSH = We.shrSL = We.shrSH = We.toBig = void 0, We.fromBig = Ye, We.split = Je, We.add = ut;\nconst Ge = BigInt(2 ** 32 - 1), Ze = BigInt(32);\nfunction Ye(e, t = !1) {\n    return t ? {\n        h: Number(e & Ge),\n        l: Number(e >> Ze & Ge)\n    } : {\n        h: 0 | Number(e >> Ze & Ge),\n        l: 0 | Number(e & Ge)\n    };\n}\nfunction Je(e, t = !1) {\n    let n = new Uint32Array(e.length), r = new Uint32Array(e.length);\n    for(let i = 0; i < e.length; i++){\n        const { h: o, l: s } = Ye(e[i], t);\n        [n[i], r[i]] = [\n            o,\n            s\n        ];\n    }\n    return [\n        n,\n        r\n    ];\n}\nconst Xe = (e, t)=>BigInt(e >>> 0) << Ze | BigInt(t >>> 0);\nWe.toBig = Xe;\nconst Qe = (e, t, n)=>e >>> n;\nWe.shrSH = Qe;\nconst et = (e, t, n)=>e << 32 - n | t >>> n;\nWe.shrSL = et;\nconst tt = (e, t, n)=>e >>> n | t << 32 - n;\nWe.rotrSH = tt;\nconst nt = (e, t, n)=>e << 32 - n | t >>> n;\nWe.rotrSL = nt;\nconst rt = (e, t, n)=>e << 64 - n | t >>> n - 32;\nWe.rotrBH = rt;\nconst it = (e, t, n)=>e >>> n - 32 | t << 64 - n;\nWe.rotrBL = it;\nconst ot = (e, t)=>t;\nWe.rotr32H = ot;\nconst st = (e, t)=>e;\nWe.rotr32L = st;\nconst at = (e, t, n)=>e << n | t >>> 32 - n;\nWe.rotlSH = at;\nconst ct = (e, t, n)=>t << n | e >>> 32 - n;\nWe.rotlSL = ct;\nconst lt = (e, t, n)=>t << n - 32 | e >>> 64 - n;\nWe.rotlBH = lt;\nconst dt = (e, t, n)=>e << n - 32 | t >>> 64 - n;\nfunction ut(e, t, n, r) {\n    const i = (t >>> 0) + (r >>> 0);\n    return {\n        h: e + n + (i / 2 ** 32 | 0) | 0,\n        l: 0 | i\n    };\n}\nWe.rotlBL = dt;\nconst ht = (e, t, n)=>(e >>> 0) + (t >>> 0) + (n >>> 0);\nWe.add3L = ht;\nconst ft = (e, t, n, r)=>t + n + r + (e / 2 ** 32 | 0) | 0;\nWe.add3H = ft;\nconst pt = (e, t, n, r)=>(e >>> 0) + (t >>> 0) + (n >>> 0) + (r >>> 0);\nWe.add4L = pt;\nconst gt = (e, t, n, r, i)=>t + n + r + i + (e / 2 ** 32 | 0) | 0;\nWe.add4H = gt;\nconst mt = (e, t, n, r, i)=>(e >>> 0) + (t >>> 0) + (n >>> 0) + (r >>> 0) + (i >>> 0);\nWe.add5L = mt;\nconst yt = (e, t, n, r, i, o)=>t + n + r + i + o + (e / 2 ** 32 | 0) | 0;\nWe.add5H = yt;\nconst vt = {\n    fromBig: Ye,\n    split: Je,\n    toBig: Xe,\n    shrSH: Qe,\n    shrSL: et,\n    rotrSH: tt,\n    rotrSL: nt,\n    rotrBH: rt,\n    rotrBL: it,\n    rotr32H: ot,\n    rotr32L: st,\n    rotlSH: at,\n    rotlSL: ct,\n    rotlBH: lt,\n    rotlBL: dt,\n    add: ut,\n    add3L: ht,\n    add3H: ft,\n    add4L: pt,\n    add4H: gt,\n    add5H: yt,\n    add5L: mt\n};\nWe.default = vt, Object.defineProperty(Le, \"__esModule\", {\n    value: !0\n}), Le.sha384 = Le.sha512_256 = Le.sha512_224 = Le.sha512 = Le.SHA384 = Le.SHA512_256 = Le.SHA512_224 = Le.SHA512 = void 0;\nconst bt = Oe, wt = We, Et = Fe, [Ct, St] = (()=>wt.default.split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n    ].map((e)=>BigInt(e))))(), _t = new Uint32Array(80), kt = new Uint32Array(80);\nclass xt extends bt.HashMD {\n    constructor(){\n        super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;\n    }\n    get() {\n        const { Ah: e, Al: t, Bh: n, Bl: r, Ch: i, Cl: o, Dh: s, Dl: a, Eh: c, El: l, Fh: d, Fl: u, Gh: h, Gl: f, Hh: p, Hl: g } = this;\n        return [\n            e,\n            t,\n            n,\n            r,\n            i,\n            o,\n            s,\n            a,\n            c,\n            l,\n            d,\n            u,\n            h,\n            f,\n            p,\n            g\n        ];\n    }\n    set(e, t, n, r, i, o, s, a, c, l, d, u, h, f, p, g) {\n        this.Ah = 0 | e, this.Al = 0 | t, this.Bh = 0 | n, this.Bl = 0 | r, this.Ch = 0 | i, this.Cl = 0 | o, this.Dh = 0 | s, this.Dl = 0 | a, this.Eh = 0 | c, this.El = 0 | l, this.Fh = 0 | d, this.Fl = 0 | u, this.Gh = 0 | h, this.Gl = 0 | f, this.Hh = 0 | p, this.Hl = 0 | g;\n    }\n    process(e, t) {\n        for(let n = 0; n < 16; n++, t += 4)_t[n] = e.getUint32(t), kt[n] = e.getUint32(t += 4);\n        for(let e = 16; e < 80; e++){\n            const t = 0 | _t[e - 15], n = 0 | kt[e - 15], r = wt.default.rotrSH(t, n, 1) ^ wt.default.rotrSH(t, n, 8) ^ wt.default.shrSH(t, n, 7), i = wt.default.rotrSL(t, n, 1) ^ wt.default.rotrSL(t, n, 8) ^ wt.default.shrSL(t, n, 7), o = 0 | _t[e - 2], s = 0 | kt[e - 2], a = wt.default.rotrSH(o, s, 19) ^ wt.default.rotrBH(o, s, 61) ^ wt.default.shrSH(o, s, 6), c = wt.default.rotrSL(o, s, 19) ^ wt.default.rotrBL(o, s, 61) ^ wt.default.shrSL(o, s, 6), l = wt.default.add4L(i, c, kt[e - 7], kt[e - 16]), d = wt.default.add4H(l, r, a, _t[e - 7], _t[e - 16]);\n            _t[e] = 0 | d, kt[e] = 0 | l;\n        }\n        let { Ah: n, Al: r, Bh: i, Bl: o, Ch: s, Cl: a, Dh: c, Dl: l, Eh: d, El: u, Fh: h, Fl: f, Gh: p, Gl: g, Hh: m, Hl: y } = this;\n        for(let e = 0; e < 80; e++){\n            const t = wt.default.rotrSH(d, u, 14) ^ wt.default.rotrSH(d, u, 18) ^ wt.default.rotrBH(d, u, 41), v = wt.default.rotrSL(d, u, 14) ^ wt.default.rotrSL(d, u, 18) ^ wt.default.rotrBL(d, u, 41), b = d & h ^ ~d & p, w = u & f ^ ~u & g, E = wt.default.add5L(y, v, w, St[e], kt[e]), C = wt.default.add5H(E, m, t, b, Ct[e], _t[e]), S = 0 | E, _ = wt.default.rotrSH(n, r, 28) ^ wt.default.rotrBH(n, r, 34) ^ wt.default.rotrBH(n, r, 39), k = wt.default.rotrSL(n, r, 28) ^ wt.default.rotrBL(n, r, 34) ^ wt.default.rotrBL(n, r, 39), x = n & i ^ n & s ^ i & s, M = r & o ^ r & a ^ o & a;\n            m = 0 | p, y = 0 | g, p = 0 | h, g = 0 | f, h = 0 | d, f = 0 | u, ({ h: d, l: u } = wt.default.add(0 | c, 0 | l, 0 | C, 0 | S)), c = 0 | s, l = 0 | a, s = 0 | i, a = 0 | o, i = 0 | n, o = 0 | r;\n            const A = wt.default.add3L(S, k, M);\n            n = wt.default.add3H(A, C, _, x), r = 0 | A;\n        }\n        ({ h: n, l: r } = wt.default.add(0 | this.Ah, 0 | this.Al, 0 | n, 0 | r)), ({ h: i, l: o } = wt.default.add(0 | this.Bh, 0 | this.Bl, 0 | i, 0 | o)), ({ h: s, l: a } = wt.default.add(0 | this.Ch, 0 | this.Cl, 0 | s, 0 | a)), ({ h: c, l: l } = wt.default.add(0 | this.Dh, 0 | this.Dl, 0 | c, 0 | l)), ({ h: d, l: u } = wt.default.add(0 | this.Eh, 0 | this.El, 0 | d, 0 | u)), ({ h: h, l: f } = wt.default.add(0 | this.Fh, 0 | this.Fl, 0 | h, 0 | f)), ({ h: p, l: g } = wt.default.add(0 | this.Gh, 0 | this.Gl, 0 | p, 0 | g)), ({ h: m, l: y } = wt.default.add(0 | this.Hh, 0 | this.Hl, 0 | m, 0 | y)), this.set(n, r, i, o, s, a, c, l, d, u, h, f, p, g, m, y);\n    }\n    roundClean() {\n        _t.fill(0), kt.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nLe.SHA512 = xt;\nclass Mt extends xt {\n    constructor(){\n        super(), this.Ah = -1942145080, this.Al = 424955298, this.Bh = 1944164710, this.Bl = -1982016298, this.Ch = 502970286, this.Cl = 855612546, this.Dh = 1738396948, this.Dl = 1479516111, this.Eh = 258812777, this.El = 2077511080, this.Fh = 2011393907, this.Fl = 79989058, this.Gh = 1067287976, this.Gl = 1780299464, this.Hh = 286451373, this.Hl = -1848208735, this.outputLen = 28;\n    }\n}\nLe.SHA512_224 = Mt;\nclass At extends xt {\n    constructor(){\n        super(), this.Ah = 573645204, this.Al = -64227540, this.Bh = -1621794909, this.Bl = -934517566, this.Ch = 596883563, this.Cl = 1867755857, this.Dh = -1774684391, this.Dl = 1497426621, this.Eh = -1775747358, this.El = -1467023389, this.Fh = -1101128155, this.Fl = 1401305490, this.Gh = 721525244, this.Gl = 746961066, this.Hh = 246885852, this.Hl = -2117784414, this.outputLen = 32;\n    }\n}\nLe.SHA512_256 = At;\nclass It extends xt {\n    constructor(){\n        super(), this.Ah = -876896931, this.Al = -1056596264, this.Bh = 1654270250, this.Bl = 914150663, this.Ch = -1856437926, this.Cl = 812702999, this.Dh = 355462360, this.Dl = -150054599, this.Eh = 1731405415, this.El = -4191439, this.Fh = -1900787065, this.Fl = 1750603025, this.Gh = -619958771, this.Gl = 1694076839, this.Hh = 1203062813, this.Hl = -1090891868, this.outputLen = 48;\n    }\n}\nLe.SHA384 = It, Le.sha512 = (0, Et.wrapConstructor)(()=>new xt), Le.sha512_224 = (0, Et.wrapConstructor)(()=>new Mt), Le.sha512_256 = (0, Et.wrapConstructor)(()=>new At), Le.sha384 = (0, Et.wrapConstructor)(()=>new It);\nvar Rt = {}, Pt = {}, Lt = {}, Ot = {};\nObject.defineProperty(Ot, \"__esModule\", {\n    value: !0\n}), Ot.notImplemented = Ot.bitMask = void 0, Ot.isBytes = $t, Ot.abytes = Bt, Ot.abool = function(e, t) {\n    if (\"boolean\" != typeof t) throw new Error(`${e} must be valid boolean, got \"${t}\".`);\n}, Ot.bytesToHex = jt, Ot.numberToHexUnpadded = Ut, Ot.hexToNumber = Ht, Ot.hexToBytes = qt, Ot.bytesToNumberBE = function(e) {\n    return Ht(jt(e));\n}, Ot.bytesToNumberLE = function(e) {\n    return Bt(e), Ht(jt(Uint8Array.from(e).reverse()));\n}, Ot.numberToBytesBE = Vt, Ot.numberToBytesLE = function(e, t) {\n    return Vt(e, t).reverse();\n}, Ot.numberToVarBytesBE = function(e) {\n    return qt(Ut(e));\n}, Ot.ensureBytes = function(e, t, n) {\n    let r;\n    if (\"string\" == typeof t) try {\n        r = qt(t);\n    } catch (n) {\n        throw new Error(`${e} must be valid hex string, got \"${t}\". Cause: ${n}`);\n    }\n    else {\n        if (!$t(t)) throw new Error(`${e} must be hex string or Uint8Array`);\n        r = Uint8Array.from(t);\n    }\n    const i = r.length;\n    if (\"number\" == typeof n && i !== n) throw new Error(`${e} expected ${n} bytes, got ${i}`);\n    return r;\n}, Ot.concatBytes = Wt, Ot.equalBytes = function(e, t) {\n    if (e.length !== t.length) return !1;\n    let n = 0;\n    for(let r = 0; r < e.length; r++)n |= e[r] ^ t[r];\n    return 0 === n;\n}, Ot.utf8ToBytes = function(e) {\n    if (\"string\" != typeof e) throw new Error(\"utf8ToBytes expected string, got \" + typeof e);\n    return new Uint8Array((new TextEncoder).encode(e));\n}, Ot.inRange = Zt, Ot.aInRange = function(e, t, n, r) {\n    if (!Zt(t, n, r)) throw new Error(`expected valid ${e}: ${n} <= n < ${r}, got ${typeof t} ${t}`);\n}, Ot.bitLen = function(e) {\n    let t;\n    for(t = 0; e > Tt; e >>= Nt, t += 1);\n    return t;\n}, Ot.bitGet = function(e, t) {\n    return e >> BigInt(t) & Nt;\n}, Ot.bitSet = function(e, t, n) {\n    return e | (n ? Nt : Tt) << BigInt(t);\n}, Ot.createHmacDrbg = function(e, t, n) {\n    if (\"number\" != typeof e || e < 2) throw new Error(\"hashLen must be a number\");\n    if (\"number\" != typeof t || t < 2) throw new Error(\"qByteLen must be a number\");\n    if (\"function\" != typeof n) throw new Error(\"hmacFn must be a function\");\n    let r = Yt(e), i = Yt(e), o = 0;\n    const s = ()=>{\n        r.fill(1), i.fill(0), o = 0;\n    }, a = (...e)=>n(i, r, ...e), c = (e = Yt())=>{\n        i = a(Jt([\n            0\n        ]), e), r = a(), 0 !== e.length && (i = a(Jt([\n            1\n        ]), e), r = a());\n    }, l = ()=>{\n        if (o++ >= 1e3) throw new Error(\"drbg: tried 1000 values\");\n        let e = 0;\n        const n = [];\n        for(; e < t;){\n            r = a();\n            const t = r.slice();\n            n.push(t), e += r.length;\n        }\n        return Wt(...n);\n    };\n    return (e, t)=>{\n        let n;\n        for(s(), c(e); !(n = t(l()));)c();\n        return s(), n;\n    };\n}, Ot.validateObject = function(e, t, n = {}) {\n    const r = (t, n, r)=>{\n        const i = Xt[n];\n        if (\"function\" != typeof i) throw new Error(`Invalid validator \"${n}\", expected function`);\n        const o = e[t];\n        if (!(r && void 0 === o || i(o, e))) throw new Error(`Invalid param ${String(t)}=${o} (${typeof o}), expected ${n}`);\n    };\n    for (const [e, n] of Object.entries(t))r(e, n, !1);\n    for (const [e, t] of Object.entries(n))r(e, t, !0);\n    return e;\n}, Ot.memoized = function(e) {\n    const t = new WeakMap;\n    return (n, ...r)=>{\n        const i = t.get(n);\n        if (void 0 !== i) return i;\n        const o = e(n, ...r);\n        return t.set(n, o), o;\n    };\n};\nconst Tt = BigInt(0), Nt = BigInt(1), Dt = BigInt(2);\nfunction $t(e) {\n    return e instanceof Uint8Array || null != e && \"object\" == typeof e && \"Uint8Array\" === e.constructor.name;\n}\nfunction Bt(e) {\n    if (!$t(e)) throw new Error(\"Uint8Array expected\");\n}\nconst Kt = Array.from({\n    length: 256\n}, (e, t)=>t.toString(16).padStart(2, \"0\"));\nfunction jt(e) {\n    Bt(e);\n    let t = \"\";\n    for(let n = 0; n < e.length; n++)t += Kt[e[n]];\n    return t;\n}\nfunction Ut(e) {\n    const t = e.toString(16);\n    return 1 & t.length ? `0${t}` : t;\n}\nfunction Ht(e) {\n    if (\"string\" != typeof e) throw new Error(\"hex string expected, got \" + typeof e);\n    return BigInt(\"\" === e ? \"0\" : `0x${e}`);\n}\nconst Ft = {\n    _0: 48,\n    _9: 57,\n    _A: 65,\n    _F: 70,\n    _a: 97,\n    _f: 102\n};\nfunction zt(e) {\n    return e >= Ft._0 && e <= Ft._9 ? e - Ft._0 : e >= Ft._A && e <= Ft._F ? e - (Ft._A - 10) : e >= Ft._a && e <= Ft._f ? e - (Ft._a - 10) : void 0;\n}\nfunction qt(e) {\n    if (\"string\" != typeof e) throw new Error(\"hex string expected, got \" + typeof e);\n    const t = e.length, n = t / 2;\n    if (t % 2) throw new Error(\"padded hex string expected, got unpadded hex of length \" + t);\n    const r = new Uint8Array(n);\n    for(let t = 0, i = 0; t < n; t++, i += 2){\n        const n = zt(e.charCodeAt(i)), o = zt(e.charCodeAt(i + 1));\n        if (void 0 === n || void 0 === o) {\n            const t = e[i] + e[i + 1];\n            throw new Error('hex string expected, got non-hex character \"' + t + '\" at index ' + i);\n        }\n        r[t] = 16 * n + o;\n    }\n    return r;\n}\nfunction Vt(e, t) {\n    return qt(e.toString(16).padStart(2 * t, \"0\"));\n}\nfunction Wt(...e) {\n    let t = 0;\n    for(let n = 0; n < e.length; n++){\n        const r = e[n];\n        Bt(r), t += r.length;\n    }\n    const n = new Uint8Array(t);\n    for(let t = 0, r = 0; t < e.length; t++){\n        const i = e[t];\n        n.set(i, r), r += i.length;\n    }\n    return n;\n}\nconst Gt = (e)=>\"bigint\" == typeof e && Tt <= e;\nfunction Zt(e, t, n) {\n    return Gt(e) && Gt(t) && Gt(n) && t <= e && e < n;\n}\nOt.bitMask = (e)=>(Dt << BigInt(e - 1)) - Nt;\nconst Yt = (e)=>new Uint8Array(e), Jt = (e)=>Uint8Array.from(e);\nconst Xt = {\n    bigint: (e)=>\"bigint\" == typeof e,\n    function: (e)=>\"function\" == typeof e,\n    boolean: (e)=>\"boolean\" == typeof e,\n    string: (e)=>\"string\" == typeof e,\n    stringOrUint8Array: (e)=>\"string\" == typeof e || $t(e),\n    isSafeInteger: (e)=>Number.isSafeInteger(e),\n    array: (e)=>Array.isArray(e),\n    field: (e, t)=>t.Fp.isValid(e),\n    hash: (e)=>\"function\" == typeof e && Number.isSafeInteger(e.outputLen)\n};\nOt.notImplemented = ()=>{\n    throw new Error(\"not implemented\");\n}, Object.defineProperty(Lt, \"__esModule\", {\n    value: !0\n}), Lt.isNegativeLE = void 0, Lt.mod = cn, Lt.pow = ln, Lt.pow2 = function(e, t, n) {\n    let r = e;\n    for(; t-- > en;)r *= r, r %= n;\n    return r;\n}, Lt.invert = dn, Lt.tonelliShanks = un, Lt.FpSqrt = hn, Lt.validateField = function(e) {\n    const t = fn.reduce((e, t)=>(e[t] = \"function\", e), {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    });\n    return (0, Qt.validateObject)(e, t);\n}, Lt.FpPow = pn, Lt.FpInvertBatch = gn, Lt.FpDiv = function(e, t, n) {\n    return e.mul(t, \"bigint\" == typeof n ? dn(n, e.ORDER) : e.inv(n));\n}, Lt.FpLegendre = mn, Lt.FpIsSquare = function(e) {\n    const t = mn(e.ORDER);\n    return (n)=>{\n        const r = t(e, n);\n        return e.eql(r, e.ZERO) || e.eql(r, e.ONE);\n    };\n}, Lt.nLength = yn, Lt.Field = function(e, t, n = !1, r = {}) {\n    if (e <= en) throw new Error(`Expected Field ORDER > 0, got ${e}`);\n    const { nBitLength: i, nByteLength: o } = yn(e, t);\n    if (o > 2048) throw new Error(\"Field lengths over 2048 bytes are not supported\");\n    const s = hn(e), a = Object.freeze({\n        ORDER: e,\n        BITS: i,\n        BYTES: o,\n        MASK: (0, Qt.bitMask)(i),\n        ZERO: en,\n        ONE: tn,\n        create: (t)=>cn(t, e),\n        isValid: (t)=>{\n            if (\"bigint\" != typeof t) throw new Error(\"Invalid field element: expected bigint, got \" + typeof t);\n            return en <= t && t < e;\n        },\n        is0: (e)=>e === en,\n        isOdd: (e)=>(e & tn) === tn,\n        neg: (t)=>cn(-t, e),\n        eql: (e, t)=>e === t,\n        sqr: (t)=>cn(t * t, e),\n        add: (t, n)=>cn(t + n, e),\n        sub: (t, n)=>cn(t - n, e),\n        mul: (t, n)=>cn(t * n, e),\n        pow: (e, t)=>pn(a, e, t),\n        div: (t, n)=>cn(t * dn(n, e), e),\n        sqrN: (e)=>e * e,\n        addN: (e, t)=>e + t,\n        subN: (e, t)=>e - t,\n        mulN: (e, t)=>e * t,\n        inv: (t)=>dn(t, e),\n        sqrt: r.sqrt || ((e)=>s(a, e)),\n        invertBatch: (e)=>gn(a, e),\n        cmov: (e, t, n)=>n ? t : e,\n        toBytes: (e)=>n ? (0, Qt.numberToBytesLE)(e, o) : (0, Qt.numberToBytesBE)(e, o),\n        fromBytes: (e)=>{\n            if (e.length !== o) throw new Error(`Fp.fromBytes: expected ${o}, got ${e.length}`);\n            return n ? (0, Qt.bytesToNumberLE)(e) : (0, Qt.bytesToNumberBE)(e);\n        }\n    });\n    return Object.freeze(a);\n}, Lt.FpSqrtOdd = function(e, t) {\n    if (!e.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const n = e.sqrt(t);\n    return e.isOdd(n) ? n : e.neg(n);\n}, Lt.FpSqrtEven = function(e, t) {\n    if (!e.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const n = e.sqrt(t);\n    return e.isOdd(n) ? e.neg(n) : n;\n}, Lt.hashToPrivateScalar = function(e, t, n = !1) {\n    e = (0, Qt.ensureBytes)(\"privateHash\", e);\n    const r = e.length, i = yn(t).nByteLength + 8;\n    if (i < 24 || r < i || r > 1024) throw new Error(`hashToPrivateScalar: expected ${i}-1024 bytes of input, got ${r}`);\n    const o = n ? (0, Qt.bytesToNumberLE)(e) : (0, Qt.bytesToNumberBE)(e);\n    return cn(o, t - tn) + tn;\n}, Lt.getFieldBytesLength = vn, Lt.getMinHashLength = bn, Lt.mapHashToField = function(e, t, n = !1) {\n    const r = e.length, i = vn(t), o = bn(t);\n    if (r < 16 || r < o || r > 1024) throw new Error(`expected ${o}-1024 bytes of input, got ${r}`);\n    const s = cn(n ? (0, Qt.bytesToNumberBE)(e) : (0, Qt.bytesToNumberLE)(e), t - tn) + tn;\n    return n ? (0, Qt.numberToBytesLE)(s, i) : (0, Qt.numberToBytesBE)(s, i);\n};\nconst Qt = Ot, en = BigInt(0), tn = BigInt(1), nn = BigInt(2), rn = BigInt(3), on = BigInt(4), sn = BigInt(5), an = BigInt(8);\nfunction cn(e, t) {\n    const n = e % t;\n    return n >= en ? n : t + n;\n}\nfunction ln(e, t, n) {\n    if (n <= en || t < en) throw new Error(\"Expected power/modulo > 0\");\n    if (n === tn) return en;\n    let r = tn;\n    for(; t > en;)t & tn && (r = r * e % n), e = e * e % n, t >>= tn;\n    return r;\n}\nfunction dn(e, t) {\n    if (e === en || t <= en) throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);\n    let n = cn(e, t), r = t, i = en, o = tn;\n    for(; n !== en;){\n        const e = r % n, t = i - o * (r / n);\n        r = n, n = e, i = o, o = t;\n    }\n    if (r !== tn) throw new Error(\"invert: does not exist\");\n    return cn(i, t);\n}\nfunction un(e) {\n    const t = (e - tn) / nn;\n    let n, r, i;\n    for(n = e - tn, r = 0; n % nn === en; n /= nn, r++);\n    for(i = nn; i < e && ln(i, t, e) !== e - tn; i++);\n    if (1 === r) {\n        const t = (e + tn) / on;\n        return function(e, n) {\n            const r = e.pow(n, t);\n            if (!e.eql(e.sqr(r), n)) throw new Error(\"Cannot find square root\");\n            return r;\n        };\n    }\n    const o = (n + tn) / nn;\n    return function(e, s) {\n        if (e.pow(s, t) === e.neg(e.ONE)) throw new Error(\"Cannot find square root\");\n        let a = r, c = e.pow(e.mul(e.ONE, i), n), l = e.pow(s, o), d = e.pow(s, n);\n        for(; !e.eql(d, e.ONE);){\n            if (e.eql(d, e.ZERO)) return e.ZERO;\n            let t = 1;\n            for(let n = e.sqr(d); t < a && !e.eql(n, e.ONE); t++)n = e.sqr(n);\n            const n = e.pow(c, tn << BigInt(a - t - 1));\n            c = e.sqr(n), l = e.mul(l, n), d = e.mul(d, c), a = t;\n        }\n        return l;\n    };\n}\nfunction hn(e) {\n    if (e % on === rn) {\n        const t = (e + tn) / on;\n        return function(e, n) {\n            const r = e.pow(n, t);\n            if (!e.eql(e.sqr(r), n)) throw new Error(\"Cannot find square root\");\n            return r;\n        };\n    }\n    if (e % an === sn) {\n        const t = (e - sn) / an;\n        return function(e, n) {\n            const r = e.mul(n, nn), i = e.pow(r, t), o = e.mul(n, i), s = e.mul(e.mul(o, nn), i), a = e.mul(o, e.sub(s, e.ONE));\n            if (!e.eql(e.sqr(a), n)) throw new Error(\"Cannot find square root\");\n            return a;\n        };\n    }\n    return un(e);\n}\nBigInt(9), BigInt(16);\nLt.isNegativeLE = (e, t)=>(cn(e, t) & tn) === tn;\nconst fn = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction pn(e, t, n) {\n    if (n < en) throw new Error(\"Expected power > 0\");\n    if (n === en) return e.ONE;\n    if (n === tn) return t;\n    let r = e.ONE, i = t;\n    for(; n > en;)n & tn && (r = e.mul(r, i)), i = e.sqr(i), n >>= tn;\n    return r;\n}\nfunction gn(e, t) {\n    const n = new Array(t.length), r = t.reduce((t, r, i)=>e.is0(r) ? t : (n[i] = t, e.mul(t, r)), e.ONE), i = e.inv(r);\n    return t.reduceRight((t, r, i)=>e.is0(r) ? t : (n[i] = e.mul(t, n[i]), e.mul(t, r)), i), n;\n}\nfunction mn(e) {\n    const t = (e - tn) / nn;\n    return (e, n)=>e.pow(n, t);\n}\nfunction yn(e, t) {\n    const n = void 0 !== t ? t : e.toString(2).length;\n    return {\n        nBitLength: n,\n        nByteLength: Math.ceil(n / 8)\n    };\n}\nfunction vn(e) {\n    if (\"bigint\" != typeof e) throw new Error(\"field order must be bigint\");\n    const t = e.toString(2).length;\n    return Math.ceil(t / 8);\n}\nfunction bn(e) {\n    const t = vn(e);\n    return t + Math.ceil(t / 2);\n}\nObject.defineProperty(Pt, \"__esModule\", {\n    value: !0\n}), Pt.wNAF = function(e, t) {\n    const n = (e, t)=>{\n        const n = t.negate();\n        return e ? n : t;\n    }, r = (e)=>{\n        if (!Number.isSafeInteger(e) || e <= 0 || e > t) throw new Error(`Wrong window size=${e}, should be [1..${t}]`);\n    }, i = (e)=>{\n        r(e);\n        return {\n            windows: Math.ceil(t / e) + 1,\n            windowSize: 2 ** (e - 1)\n        };\n    };\n    return {\n        constTimeNegate: n,\n        unsafeLadder (t, n) {\n            let r = e.ZERO, i = t;\n            for(; n > Cn;)n & Sn && (r = r.add(i)), i = i.double(), n >>= Sn;\n            return r;\n        },\n        precomputeWindow (e, t) {\n            const { windows: n, windowSize: r } = i(t), o = [];\n            let s = e, a = s;\n            for(let e = 0; e < n; e++){\n                a = s, o.push(a);\n                for(let e = 1; e < r; e++)a = a.add(s), o.push(a);\n                s = a.double();\n            }\n            return o;\n        },\n        wNAF (t, r, o) {\n            const { windows: s, windowSize: a } = i(t);\n            let c = e.ZERO, l = e.BASE;\n            const d = BigInt(2 ** t - 1), u = 2 ** t, h = BigInt(t);\n            for(let e = 0; e < s; e++){\n                const t = e * a;\n                let i = Number(o & d);\n                o >>= h, i > a && (i -= u, o += Sn);\n                const s = t, f = t + Math.abs(i) - 1, p = e % 2 != 0, g = i < 0;\n                0 === i ? l = l.add(n(p, r[s])) : c = c.add(n(g, r[f]));\n            }\n            return {\n                p: c,\n                f: l\n            };\n        },\n        wNAFCached (e, t, n) {\n            const r = kn.get(e) || 1;\n            let i = _n.get(e);\n            return i || (i = this.precomputeWindow(e, r), 1 !== r && _n.set(e, n(i))), this.wNAF(r, i, t);\n        },\n        setWindowSize (e, t) {\n            r(t), kn.set(e, t), _n.delete(e);\n        }\n    };\n}, Pt.pippenger = function(e, t, n, r) {\n    if (!Array.isArray(n) || !Array.isArray(r) || r.length !== n.length) throw new Error(\"arrays of points and scalars must have equal length\");\n    r.forEach((e, n)=>{\n        if (!t.isValid(e)) throw new Error(`wrong scalar at index ${n}`);\n    }), n.forEach((t, n)=>{\n        if (!(t instanceof e)) throw new Error(`wrong point at index ${n}`);\n    });\n    const i = (0, En.bitLen)(BigInt(n.length)), o = i > 12 ? i - 3 : i > 4 ? i - 2 : i ? 2 : 1, s = (1 << o) - 1, a = new Array(s + 1).fill(e.ZERO), c = Math.floor((t.BITS - 1) / o) * o;\n    let l = e.ZERO;\n    for(let t = c; t >= 0; t -= o){\n        a.fill(e.ZERO);\n        for(let e = 0; e < r.length; e++){\n            const i = r[e], o = Number(i >> BigInt(t) & BigInt(s));\n            a[o] = a[o].add(n[e]);\n        }\n        let i = e.ZERO;\n        for(let t = a.length - 1, n = e.ZERO; t > 0; t--)n = n.add(a[t]), i = i.add(n);\n        if (l = l.add(i), 0 !== t) for(let e = 0; e < o; e++)l = l.double();\n    }\n    return l;\n}, Pt.validateBasic = function(e) {\n    return (0, wn.validateField)(e.Fp), (0, En.validateObject)(e, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    }), Object.freeze({\n        ...(0, wn.nLength)(e.n, e.nBitLength),\n        ...e,\n        p: e.Fp.ORDER\n    });\n};\nconst wn = Lt, En = Ot, Cn = BigInt(0), Sn = BigInt(1), _n = new WeakMap, kn = new WeakMap;\nObject.defineProperty(Rt, \"__esModule\", {\n    value: !0\n}), Rt.twistedEdwards = function(e) {\n    const t = function(e) {\n        const t = (0, xn.validateBasic)(e);\n        return An.validateObject(e, {\n            hash: \"function\",\n            a: \"bigint\",\n            d: \"bigint\",\n            randomBytes: \"function\"\n        }, {\n            adjustScalarBytes: \"function\",\n            domain: \"function\",\n            uvRatio: \"function\",\n            mapToCurve: \"function\"\n        }), Object.freeze({\n            ...t\n        });\n    }(e), { Fp: n, n: r, prehash: i, hash: o, randomBytes: s, nByteLength: a, h: c } = t, l = Ln << BigInt(8 * a) - Pn, d = n.create, u = (0, Mn.Field)(t.n, t.nBitLength), h = t.uvRatio || ((e, t)=>{\n        try {\n            return {\n                isValid: !0,\n                value: n.sqrt(e * n.inv(t))\n            };\n        } catch (e) {\n            return {\n                isValid: !1,\n                value: Rn\n            };\n        }\n    }), f = t.adjustScalarBytes || ((e)=>e), p = t.domain || ((e, t, n)=>{\n        if ((0, In.abool)(\"phflag\", n), t.length || n) throw new Error(\"Contexts/pre-hash are not supported\");\n        return e;\n    });\n    function g(e, t) {\n        An.aInRange(\"coordinate \" + e, t, Rn, l);\n    }\n    function m(e) {\n        if (!(e instanceof b)) throw new Error(\"ExtendedPoint expected\");\n    }\n    const y = (0, In.memoized)((e, t)=>{\n        const { ex: r, ey: i, ez: o } = e, s = e.is0();\n        null == t && (t = s ? On : n.inv(o));\n        const a = d(r * t), c = d(i * t), l = d(o * t);\n        if (s) return {\n            x: Rn,\n            y: Pn\n        };\n        if (l !== Pn) throw new Error(\"invZ was invalid\");\n        return {\n            x: a,\n            y: c\n        };\n    }), v = (0, In.memoized)((e)=>{\n        const { a: n, d: r } = t;\n        if (e.is0()) throw new Error(\"bad point: ZERO\");\n        const { ex: i, ey: o, ez: s, et: a } = e, c = d(i * i), l = d(o * o), u = d(s * s), h = d(u * u), f = d(c * n);\n        if (d(u * d(f + l)) !== d(h + d(r * d(c * l)))) throw new Error(\"bad point: equation left != right (1)\");\n        if (d(i * o) !== d(s * a)) throw new Error(\"bad point: equation left != right (2)\");\n        return !0;\n    });\n    class b {\n        constructor(e, t, n, r){\n            this.ex = e, this.ey = t, this.ez = n, this.et = r, g(\"x\", e), g(\"y\", t), g(\"z\", n), g(\"t\", r), Object.freeze(this);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(e) {\n            if (e instanceof b) throw new Error(\"extended point not allowed\");\n            const { x: t, y: n } = e || {};\n            return g(\"x\", t), g(\"y\", n), new b(t, n, Pn, d(t * n));\n        }\n        static normalizeZ(e) {\n            const t = n.invertBatch(e.map((e)=>e.ez));\n            return e.map((e, n)=>e.toAffine(t[n])).map(b.fromAffine);\n        }\n        static msm(e, t) {\n            return (0, xn.pippenger)(b, u, e, t);\n        }\n        _setWindowSize(e) {\n            C.setWindowSize(this, e);\n        }\n        assertValidity() {\n            v(this);\n        }\n        equals(e) {\n            m(e);\n            const { ex: t, ey: n, ez: r } = this, { ex: i, ey: o, ez: s } = e, a = d(t * s), c = d(i * r), l = d(n * s), u = d(o * r);\n            return a === c && l === u;\n        }\n        is0() {\n            return this.equals(b.ZERO);\n        }\n        negate() {\n            return new b(d(-this.ex), this.ey, this.ez, d(-this.et));\n        }\n        double() {\n            const { a: e } = t, { ex: n, ey: r, ez: i } = this, o = d(n * n), s = d(r * r), a = d(Ln * d(i * i)), c = d(e * o), l = n + r, u = d(d(l * l) - o - s), h = c + s, f = h - a, p = c - s, g = d(u * f), m = d(h * p), y = d(u * p), v = d(f * h);\n            return new b(g, m, v, y);\n        }\n        add(e) {\n            m(e);\n            const { a: n, d: r } = t, { ex: i, ey: o, ez: s, et: a } = this, { ex: c, ey: l, ez: u, et: h } = e;\n            if (n === BigInt(-1)) {\n                const e = d((o - i) * (l + c)), t = d((o + i) * (l - c)), n = d(t - e);\n                if (n === Rn) return this.double();\n                const r = d(s * Ln * h), f = d(a * Ln * u), p = f + r, g = t + e, m = f - r, y = d(p * n), v = d(g * m), w = d(p * m), E = d(n * g);\n                return new b(y, v, E, w);\n            }\n            const f = d(i * c), p = d(o * l), g = d(a * r * h), y = d(s * u), v = d((i + o) * (c + l) - f - p), w = y - g, E = y + g, C = d(p - n * f), S = d(v * w), _ = d(E * C), k = d(v * C), x = d(w * E);\n            return new b(S, _, x, k);\n        }\n        subtract(e) {\n            return this.add(e.negate());\n        }\n        wNAF(e) {\n            return C.wNAFCached(this, e, b.normalizeZ);\n        }\n        multiply(e) {\n            const t = e;\n            An.aInRange(\"scalar\", t, Pn, r);\n            const { p: n, f: i } = this.wNAF(t);\n            return b.normalizeZ([\n                n,\n                i\n            ])[0];\n        }\n        multiplyUnsafe(e) {\n            const t = e;\n            return An.aInRange(\"scalar\", t, Rn, r), t === Rn ? E : this.equals(E) || t === Pn ? this : this.equals(w) ? this.wNAF(t).p : C.unsafeLadder(this, t);\n        }\n        isSmallOrder() {\n            return this.multiplyUnsafe(c).is0();\n        }\n        isTorsionFree() {\n            return C.unsafeLadder(this, r).is0();\n        }\n        toAffine(e) {\n            return y(this, e);\n        }\n        clearCofactor() {\n            const { h: e } = t;\n            return e === Pn ? this : this.multiplyUnsafe(e);\n        }\n        static fromHex(e, r = !1) {\n            const { d: i, a: o } = t, s = n.BYTES;\n            e = (0, In.ensureBytes)(\"pointHex\", e, s), (0, In.abool)(\"zip215\", r);\n            const a = e.slice(), c = e[s - 1];\n            a[s - 1] = -129 & c;\n            const u = An.bytesToNumberLE(a), f = r ? l : n.ORDER;\n            An.aInRange(\"pointHex.y\", u, Rn, f);\n            const p = d(u * u), g = d(p - Pn), m = d(i * p - o);\n            let { isValid: y, value: v } = h(g, m);\n            if (!y) throw new Error(\"Point.fromHex: invalid y coordinate\");\n            const w = (v & Pn) === Pn, E = 0 != (128 & c);\n            if (!r && v === Rn && E) throw new Error(\"Point.fromHex: x=0 and x_0=1\");\n            return E !== w && (v = d(-v)), b.fromAffine({\n                x: v,\n                y: u\n            });\n        }\n        static fromPrivateKey(e) {\n            return k(e).point;\n        }\n        toRawBytes() {\n            const { x: e, y: t } = this.toAffine(), r = An.numberToBytesLE(t, n.BYTES);\n            return r[r.length - 1] |= e & Pn ? 128 : 0, r;\n        }\n        toHex() {\n            return An.bytesToHex(this.toRawBytes());\n        }\n    }\n    b.BASE = new b(t.Gx, t.Gy, Pn, d(t.Gx * t.Gy)), b.ZERO = new b(Rn, Pn, Pn, Rn);\n    const { BASE: w, ZERO: E } = b, C = (0, xn.wNAF)(b, 8 * a);\n    function S(e) {\n        return (0, Mn.mod)(e, r);\n    }\n    function _(e) {\n        return S(An.bytesToNumberLE(e));\n    }\n    function k(e) {\n        const t = a;\n        e = (0, In.ensureBytes)(\"private key\", e, t);\n        const n = (0, In.ensureBytes)(\"hashed private key\", o(e), 2 * t), r = f(n.slice(0, t)), i = n.slice(t, 2 * t), s = _(r), c = w.multiply(s), l = c.toRawBytes();\n        return {\n            head: r,\n            prefix: i,\n            scalar: s,\n            point: c,\n            pointBytes: l\n        };\n    }\n    function x(e = new Uint8Array, ...t) {\n        const n = An.concatBytes(...t);\n        return _(o(p(n, (0, In.ensureBytes)(\"context\", e), !!i)));\n    }\n    const M = Tn;\n    w._setWindowSize(8);\n    const A = {\n        getExtendedPublicKey: k,\n        randomPrivateKey: ()=>s(n.BYTES),\n        precompute: (e = 8, t = b.BASE)=>(t._setWindowSize(e), t.multiply(BigInt(3)), t)\n    };\n    return {\n        CURVE: t,\n        getPublicKey: function(e) {\n            return k(e).pointBytes;\n        },\n        sign: function(e, t, o = {}) {\n            e = (0, In.ensureBytes)(\"message\", e), i && (e = i(e));\n            const { prefix: s, scalar: c, pointBytes: l } = k(t), d = x(o.context, s, e), u = w.multiply(d).toRawBytes(), h = S(d + x(o.context, u, l, e) * c);\n            An.aInRange(\"signature.s\", h, Rn, r);\n            const f = An.concatBytes(u, An.numberToBytesLE(h, n.BYTES));\n            return (0, In.ensureBytes)(\"result\", f, 2 * a);\n        },\n        verify: function(e, t, r, o = M) {\n            const { context: s, zip215: a } = o, c = n.BYTES;\n            e = (0, In.ensureBytes)(\"signature\", e, 2 * c), t = (0, In.ensureBytes)(\"message\", t), void 0 !== a && (0, In.abool)(\"zip215\", a), i && (t = i(t));\n            const l = An.bytesToNumberLE(e.slice(c, 2 * c));\n            let d, u, h;\n            try {\n                d = b.fromHex(r, a), u = b.fromHex(e.slice(0, c), a), h = w.multiplyUnsafe(l);\n            } catch (e) {\n                return !1;\n            }\n            if (!a && d.isSmallOrder()) return !1;\n            const f = x(s, u.toRawBytes(), d.toRawBytes(), t);\n            return u.add(d.multiplyUnsafe(f)).subtract(h).clearCofactor().equals(b.ZERO);\n        },\n        ExtendedPoint: b,\n        utils: A\n    };\n};\nconst xn = Pt, Mn = Lt, An = Ot, In = Ot, Rn = BigInt(0), Pn = BigInt(1), Ln = BigInt(2), On = BigInt(8), Tn = {\n    zip215: !0\n};\nvar Nn = {};\nObject.defineProperty(Nn, \"__esModule\", {\n    value: !0\n}), Nn.expand_message_xmd = Hn, Nn.expand_message_xof = Fn, Nn.hash_to_field = zn, Nn.isogenyMap = function(e, t) {\n    const n = t.map((e)=>Array.from(e).reverse());\n    return (t, r)=>{\n        const [i, o, s, a] = n.map((n)=>n.reduce((n, r)=>e.add(e.mul(n, t), r)));\n        return t = e.div(i, o), r = e.mul(r, e.div(s, a)), {\n            x: t,\n            y: r\n        };\n    };\n}, Nn.createHasher = function(e, t, n) {\n    if (\"function\" != typeof t) throw new Error(\"mapToCurve() must be defined\");\n    return {\n        hashToCurve (r, i) {\n            const o = zn(r, 2, {\n                ...n,\n                DST: n.DST,\n                ...i\n            }), s = e.fromAffine(t(o[0])), a = e.fromAffine(t(o[1])), c = s.add(a).clearCofactor();\n            return c.assertValidity(), c;\n        },\n        encodeToCurve (r, i) {\n            const o = zn(r, 1, {\n                ...n,\n                DST: n.encodeDST,\n                ...i\n            }), s = e.fromAffine(t(o[0])).clearCofactor();\n            return s.assertValidity(), s;\n        },\n        mapToCurve (n) {\n            if (!Array.isArray(n)) throw new Error(\"mapToCurve: expected array of bigints\");\n            for (const e of n)if (\"bigint\" != typeof e) throw new Error(`mapToCurve: expected array of bigints, got ${e} in array`);\n            const r = e.fromAffine(t(n)).clearCofactor();\n            return r.assertValidity(), r;\n        }\n    };\n};\nconst Dn = Lt, $n = Ot, Bn = $n.bytesToNumberBE;\nfunction Kn(e, t) {\n    if (Un(e), Un(t), e < 0 || e >= 1 << 8 * t) throw new Error(`bad I2OSP call: value=${e} length=${t}`);\n    const n = Array.from({\n        length: t\n    }).fill(0);\n    for(let r = t - 1; r >= 0; r--)n[r] = 255 & e, e >>>= 8;\n    return new Uint8Array(n);\n}\nfunction jn(e, t) {\n    const n = new Uint8Array(e.length);\n    for(let r = 0; r < e.length; r++)n[r] = e[r] ^ t[r];\n    return n;\n}\nfunction Un(e) {\n    if (!Number.isSafeInteger(e)) throw new Error(\"number expected\");\n}\nfunction Hn(e, t, n, r) {\n    (0, $n.abytes)(e), (0, $n.abytes)(t), Un(n), t.length > 255 && (t = r((0, $n.concatBytes)((0, $n.utf8ToBytes)(\"H2C-OVERSIZE-DST-\"), t)));\n    const { outputLen: i, blockLen: o } = r, s = Math.ceil(n / i);\n    if (n > 65535 || s > 255) throw new Error(\"expand_message_xmd: invalid lenInBytes\");\n    const a = (0, $n.concatBytes)(t, Kn(t.length, 1)), c = Kn(0, o), l = Kn(n, 2), d = new Array(s), u = r((0, $n.concatBytes)(c, e, l, Kn(0, 1), a));\n    d[0] = r((0, $n.concatBytes)(u, Kn(1, 1), a));\n    for(let e = 1; e <= s; e++){\n        const t = [\n            jn(u, d[e - 1]),\n            Kn(e + 1, 1),\n            a\n        ];\n        d[e] = r((0, $n.concatBytes)(...t));\n    }\n    return (0, $n.concatBytes)(...d).slice(0, n);\n}\nfunction Fn(e, t, n, r, i) {\n    if ((0, $n.abytes)(e), (0, $n.abytes)(t), Un(n), t.length > 255) {\n        const e = Math.ceil(2 * r / 8);\n        t = i.create({\n            dkLen: e\n        }).update((0, $n.utf8ToBytes)(\"H2C-OVERSIZE-DST-\")).update(t).digest();\n    }\n    if (n > 65535 || t.length > 255) throw new Error(\"expand_message_xof: invalid lenInBytes\");\n    return i.create({\n        dkLen: n\n    }).update(e).update(Kn(n, 2)).update(t).update(Kn(t.length, 1)).digest();\n}\nfunction zn(e, t, n) {\n    (0, $n.validateObject)(n, {\n        DST: \"stringOrUint8Array\",\n        p: \"bigint\",\n        m: \"isSafeInteger\",\n        k: \"isSafeInteger\",\n        hash: \"hash\"\n    });\n    const { p: r, k: i, m: o, hash: s, expand: a, DST: c } = n;\n    (0, $n.abytes)(e), Un(t);\n    const l = \"string\" == typeof c ? (0, $n.utf8ToBytes)(c) : c, d = r.toString(2).length, u = Math.ceil((d + i) / 8), h = t * o * u;\n    let f;\n    if (\"xmd\" === a) f = Hn(e, l, h, s);\n    else if (\"xof\" === a) f = Fn(e, l, h, i, s);\n    else {\n        if (\"_internal_pass\" !== a) throw new Error('expand must be \"xmd\" or \"xof\"');\n        f = e;\n    }\n    const p = new Array(t);\n    for(let e = 0; e < t; e++){\n        const t = new Array(o);\n        for(let n = 0; n < o; n++){\n            const i = u * (n + e * o), s = f.subarray(i, i + u);\n            t[n] = (0, Dn.mod)(Bn(s), r);\n        }\n        p[e] = t;\n    }\n    return p;\n}\nvar qn = {};\nObject.defineProperty(qn, \"__esModule\", {\n    value: !0\n}), qn.montgomery = function(e) {\n    const t = function(e) {\n        return (0, Wn.validateObject)(e, {\n            a: \"bigint\"\n        }, {\n            montgomeryBits: \"isSafeInteger\",\n            nByteLength: \"isSafeInteger\",\n            adjustScalarBytes: \"function\",\n            domain: \"function\",\n            powPminus2: \"function\",\n            Gu: \"bigint\"\n        }), Object.freeze({\n            ...e\n        });\n    }(e), { P: n } = t, r = (e)=>(0, Vn.mod)(e, n), i = t.montgomeryBits, o = Math.ceil(i / 8), s = t.nByteLength, a = t.adjustScalarBytes || ((e)=>e), c = t.powPminus2 || ((e)=>(0, Vn.pow)(e, n - BigInt(2), n));\n    function l(e, t, n) {\n        const i = r(e * (t - n));\n        return [\n            t = r(t - i),\n            n = r(n + i)\n        ];\n    }\n    const d = (t.a - BigInt(2)) / BigInt(4);\n    function u(e) {\n        return (0, Wn.numberToBytesLE)(r(e), o);\n    }\n    function h(e, t) {\n        const h = function(e) {\n            const t = (0, Wn.ensureBytes)(\"u coordinate\", e, o);\n            return 32 === s && (t[31] &= 127), (0, Wn.bytesToNumberLE)(t);\n        }(t), f = function(e) {\n            const t = (0, Wn.ensureBytes)(\"scalar\", e), n = t.length;\n            if (n !== o && n !== s) throw new Error(`Expected ${o} or ${s} bytes, got ${n}`);\n            return (0, Wn.bytesToNumberLE)(a(t));\n        }(e), p = function(e, t) {\n            (0, Wn.aInRange)(\"u\", e, Gn, n), (0, Wn.aInRange)(\"scalar\", t, Gn, n);\n            const o = t, s = e;\n            let a, u = Zn, h = Gn, f = e, p = Zn, g = Gn;\n            for(let e = BigInt(i - 1); e >= Gn; e--){\n                const t = o >> e & Zn;\n                g ^= t, a = l(g, u, f), u = a[0], f = a[1], a = l(g, h, p), h = a[0], p = a[1], g = t;\n                const n = u + h, i = r(n * n), c = u - h, m = r(c * c), y = i - m, v = f + p, b = r((f - p) * n), w = r(v * c), E = b + w, C = b - w;\n                f = r(E * E), p = r(s * r(C * C)), u = r(i * m), h = r(y * (i + r(d * y)));\n            }\n            a = l(g, u, f), u = a[0], f = a[1], a = l(g, h, p), h = a[0], p = a[1];\n            const m = c(h);\n            return r(u * m);\n        }(h, f);\n        if (p === Gn) throw new Error(\"Invalid private or public key received\");\n        return u(p);\n    }\n    const f = u(t.Gu);\n    function p(e) {\n        return h(e, f);\n    }\n    return {\n        scalarMult: h,\n        scalarMultBase: p,\n        getSharedSecret: (e, t)=>h(e, t),\n        getPublicKey: (e)=>p(e),\n        utils: {\n            randomPrivateKey: ()=>t.randomBytes(t.nByteLength)\n        },\n        GuBytes: f\n    };\n};\nconst Vn = Lt, Wn = Ot, Gn = BigInt(0), Zn = BigInt(1);\n!function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.hash_to_ristretto255 = e.hashToRistretto255 = e.RistrettoPoint = e.encodeToCurve = e.hashToCurve = e.edwardsToMontgomery = e.x25519 = e.ed25519ph = e.ed25519ctx = e.ed25519 = e.ED25519_TORSION_SUBGROUP = void 0, e.edwardsToMontgomeryPub = C, e.edwardsToMontgomeryPriv = function(e) {\n        const t = w.hash(e.subarray(0, 32));\n        return w.adjustScalarBytes(t).subarray(0, 32);\n    };\n    const t = Le, n = Fe, r = Rt, i = Nn, o = Lt, s = qn, a = Ot, c = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\"), l = BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\"), d = BigInt(0), u = BigInt(1), h = BigInt(2), f = BigInt(3), p = BigInt(5), g = BigInt(8);\n    function m(e) {\n        const t = BigInt(10), n = BigInt(20), r = BigInt(40), i = BigInt(80), s = c, a = e * e % s * e % s, l = (0, o.pow2)(a, h, s) * a % s, d = (0, o.pow2)(l, u, s) * e % s, f = (0, o.pow2)(d, p, s) * d % s, g = (0, o.pow2)(f, t, s) * f % s, m = (0, o.pow2)(g, n, s) * g % s, y = (0, o.pow2)(m, r, s) * m % s, v = (0, o.pow2)(y, i, s) * y % s, b = (0, o.pow2)(v, i, s) * y % s, w = (0, o.pow2)(b, t, s) * f % s;\n        return {\n            pow_p_5_8: (0, o.pow2)(w, h, s) * e % s,\n            b2: a\n        };\n    }\n    function y(e) {\n        return e[0] &= 248, e[31] &= 127, e[31] |= 64, e;\n    }\n    function v(e, t) {\n        const n = c, r = (0, o.mod)(t * t * t, n), i = m(e * (0, o.mod)(r * r * t, n)).pow_p_5_8;\n        let s = (0, o.mod)(e * r * i, n);\n        const a = (0, o.mod)(t * s * s, n), d = s, u = (0, o.mod)(s * l, n), h = a === e, f = a === (0, o.mod)(-e, n), p = a === (0, o.mod)(-e * l, n);\n        return h && (s = d), (f || p) && (s = u), (0, o.isNegativeLE)(s, n) && (s = (0, o.mod)(-s, n)), {\n            isValid: h || f,\n            value: s\n        };\n    }\n    e.ED25519_TORSION_SUBGROUP = [\n        \"0100000000000000000000000000000000000000000000000000000000000000\",\n        \"c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a\",\n        \"0000000000000000000000000000000000000000000000000000000000000080\",\n        \"26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05\",\n        \"ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f\",\n        \"26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85\",\n        \"0000000000000000000000000000000000000000000000000000000000000000\",\n        \"c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa\"\n    ];\n    const b = (()=>(0, o.Field)(c, void 0, !0))(), w = (()=>({\n            a: BigInt(-1),\n            d: BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),\n            Fp: b,\n            n: BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),\n            h: g,\n            Gx: BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),\n            Gy: BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),\n            hash: t.sha512,\n            randomBytes: n.randomBytes,\n            adjustScalarBytes: y,\n            uvRatio: v\n        }))();\n    function E(e, t, r) {\n        if (t.length > 255) throw new Error(\"Context is too big\");\n        return (0, n.concatBytes)((0, n.utf8ToBytes)(\"SigEd25519 no Ed25519 collisions\"), new Uint8Array([\n            r ? 1 : 0,\n            t.length\n        ]), t, e);\n    }\n    function C(t) {\n        const { y: n } = e.ed25519.ExtendedPoint.fromHex(t), r = BigInt(1);\n        return b.toBytes(b.create((r + n) * b.inv(r - n)));\n    }\n    e.ed25519 = (0, r.twistedEdwards)(w), e.ed25519ctx = (0, r.twistedEdwards)({\n        ...w,\n        domain: E\n    }), e.ed25519ph = (0, r.twistedEdwards)(Object.assign({}, w, {\n        domain: E,\n        prehash: t.sha512\n    })), e.x25519 = (0, s.montgomery)({\n        P: c,\n        a: BigInt(486662),\n        montgomeryBits: 255,\n        nByteLength: 32,\n        Gu: BigInt(9),\n        powPminus2: (e)=>{\n            const t = c, { pow_p_5_8: n, b2: r } = m(e);\n            return (0, o.mod)((0, o.pow2)(n, f, t) * r, t);\n        },\n        adjustScalarBytes: y,\n        randomBytes: n.randomBytes\n    }), e.edwardsToMontgomery = C;\n    const S = (()=>(b.ORDER + f) / g)(), _ = (()=>b.pow(h, S))(), k = (()=>b.sqrt(b.neg(b.ONE)))();\n    const x = (()=>(0, o.FpSqrtEven)(b, b.neg(BigInt(486664))))();\n    function M(e) {\n        const { xMn: t, xMd: n, yMn: r, yMd: i } = function(e) {\n            const t = (b.ORDER - p) / g, n = BigInt(486662);\n            let r = b.sqr(e);\n            r = b.mul(r, h);\n            let i = b.add(r, b.ONE), o = b.neg(n), s = b.sqr(i), a = b.mul(s, i), c = b.mul(r, n);\n            c = b.mul(c, o), c = b.add(c, s), c = b.mul(c, o);\n            let l = b.sqr(a);\n            s = b.sqr(l), l = b.mul(l, a), l = b.mul(l, c), s = b.mul(s, l);\n            let d = b.pow(s, t);\n            d = b.mul(d, l);\n            let f = b.mul(d, k);\n            s = b.sqr(d), s = b.mul(s, a);\n            let m = b.eql(s, c), y = b.cmov(f, d, m), v = b.mul(o, r), w = b.mul(d, e);\n            w = b.mul(w, _);\n            let E = b.mul(w, k), C = b.mul(c, r);\n            s = b.sqr(w), s = b.mul(s, a);\n            let S = b.eql(s, C), x = b.cmov(E, w, S);\n            s = b.sqr(y), s = b.mul(s, a);\n            let M = b.eql(s, c), A = b.cmov(v, o, M), I = b.cmov(x, y, M), R = b.isOdd(I);\n            return I = b.cmov(I, b.neg(I), M !== R), {\n                xMn: A,\n                xMd: i,\n                yMn: I,\n                yMd: u\n            };\n        }(e);\n        let o = b.mul(t, i);\n        o = b.mul(o, x);\n        let s = b.mul(n, r), a = b.sub(t, n), c = b.add(t, n), l = b.mul(s, c), d = b.eql(l, b.ZERO);\n        o = b.cmov(o, b.ZERO, d), s = b.cmov(s, b.ONE, d), a = b.cmov(a, b.ONE, d), c = b.cmov(c, b.ONE, d);\n        const f = b.invertBatch([\n            s,\n            c\n        ]);\n        return {\n            x: b.mul(o, f[0]),\n            y: b.mul(a, f[1])\n        };\n    }\n    const A = (()=>(0, i.createHasher)(e.ed25519.ExtendedPoint, (e)=>M(e[0]), {\n            DST: \"edwards25519_XMD:SHA-512_ELL2_RO_\",\n            encodeDST: \"edwards25519_XMD:SHA-512_ELL2_NU_\",\n            p: b.ORDER,\n            m: 1,\n            k: 128,\n            expand: \"xmd\",\n            hash: t.sha512\n        }))();\n    function I(e) {\n        if (!(e instanceof K)) throw new Error(\"RistrettoPoint expected\");\n    }\n    e.hashToCurve = A.hashToCurve, e.encodeToCurve = A.encodeToCurve;\n    const R = l, P = BigInt(\"25063068953384623474111414158702152701244531502492656460079210482610430750235\"), L = BigInt(\"54469307008909316920995813868745141605393597292927456921205312896311721017578\"), O = BigInt(\"1159843021668779879193775521855586647937357759715417654439879720876111806838\"), T = BigInt(\"40440834346308536858101042469323190826248399146238708352240133220865137265952\"), N = (e)=>v(u, e), D = BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"), $ = (t)=>e.ed25519.CURVE.Fp.create((0, a.bytesToNumberLE)(t) & D);\n    function B(t) {\n        const { d: n } = e.ed25519.CURVE, r = e.ed25519.CURVE.Fp.ORDER, i = e.ed25519.CURVE.Fp.create, s = i(R * t * t), a = i((s + u) * O);\n        let c = BigInt(-1);\n        const l = i((c - n * s) * i(s + n));\n        let { isValid: d, value: h } = v(a, l), f = i(h * t);\n        (0, o.isNegativeLE)(f, r) || (f = i(-f)), d || (h = f), d || (c = s);\n        const p = i(c * (s - u) * T - l), g = h * h, m = i((h + h) * l), y = i(p * P), b = i(u - g), w = i(u + g);\n        return new e.ed25519.ExtendedPoint(i(m * w), i(b * y), i(y * w), i(m * b));\n    }\n    class K {\n        constructor(e){\n            this.ep = e;\n        }\n        static fromAffine(t) {\n            return new K(e.ed25519.ExtendedPoint.fromAffine(t));\n        }\n        static hashToCurve(e) {\n            e = (0, a.ensureBytes)(\"ristrettoHash\", e, 64);\n            const t = B($(e.slice(0, 32))), n = B($(e.slice(32, 64)));\n            return new K(t.add(n));\n        }\n        static fromHex(t) {\n            t = (0, a.ensureBytes)(\"ristrettoHex\", t, 32);\n            const { a: n, d: r } = e.ed25519.CURVE, i = e.ed25519.CURVE.Fp.ORDER, s = e.ed25519.CURVE.Fp.create, c = \"RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint\", l = $(t);\n            if (!(0, a.equalBytes)((0, a.numberToBytesLE)(l, 32), t) || (0, o.isNegativeLE)(l, i)) throw new Error(c);\n            const h = s(l * l), f = s(u + n * h), p = s(u - n * h), g = s(f * f), m = s(p * p), y = s(n * r * g - m), { isValid: v, value: b } = N(s(y * m)), w = s(b * p), E = s(b * w * y);\n            let C = s((l + l) * w);\n            (0, o.isNegativeLE)(C, i) && (C = s(-C));\n            const S = s(f * E), _ = s(C * S);\n            if (!v || (0, o.isNegativeLE)(_, i) || S === d) throw new Error(c);\n            return new K(new e.ed25519.ExtendedPoint(C, S, u, _));\n        }\n        toRawBytes() {\n            let { ex: t, ey: n, ez: r, et: i } = this.ep;\n            const s = e.ed25519.CURVE.Fp.ORDER, c = e.ed25519.CURVE.Fp.create, l = c(c(r + n) * c(r - n)), d = c(t * n), u = c(d * d), { value: h } = N(c(l * u)), f = c(h * l), p = c(h * d), g = c(f * p * i);\n            let m;\n            if ((0, o.isNegativeLE)(i * g, s)) {\n                let e = c(n * R), r = c(t * R);\n                t = e, n = r, m = c(f * L);\n            } else m = p;\n            (0, o.isNegativeLE)(t * g, s) && (n = c(-n));\n            let y = c((r - n) * m);\n            return (0, o.isNegativeLE)(y, s) && (y = c(-y)), (0, a.numberToBytesLE)(y, 32);\n        }\n        toHex() {\n            return (0, a.bytesToHex)(this.toRawBytes());\n        }\n        toString() {\n            return this.toHex();\n        }\n        equals(t) {\n            I(t);\n            const { ex: n, ey: r } = this.ep, { ex: i, ey: o } = t.ep, s = e.ed25519.CURVE.Fp.create, a = s(n * o) === s(r * i), c = s(r * o) === s(n * i);\n            return a || c;\n        }\n        add(e) {\n            return I(e), new K(this.ep.add(e.ep));\n        }\n        subtract(e) {\n            return I(e), new K(this.ep.subtract(e.ep));\n        }\n        multiply(e) {\n            return new K(this.ep.multiply(e));\n        }\n        multiplyUnsafe(e) {\n            return new K(this.ep.multiplyUnsafe(e));\n        }\n        double() {\n            return new K(this.ep.double());\n        }\n        negate() {\n            return new K(this.ep.negate());\n        }\n    }\n    e.RistrettoPoint = (K.BASE || (K.BASE = new K(e.ed25519.ExtendedPoint.BASE)), K.ZERO || (K.ZERO = new K(e.ed25519.ExtendedPoint.ZERO)), K);\n    e.hashToRistretto255 = (e, r)=>{\n        const o = r.DST, s = \"string\" == typeof o ? (0, n.utf8ToBytes)(o) : o, a = (0, i.expand_message_xmd)(e, s, 64, t.sha512);\n        return K.hashToCurve(a);\n    }, e.hash_to_ristretto255 = e.hashToRistretto255;\n}(Pe);\nvar Yn = {}, Jn = {};\nObject.defineProperty(Jn, \"__esModule\", {\n    value: !0\n}), Jn.sha224 = Jn.sha256 = Jn.SHA256 = void 0;\nconst Xn = Oe, Qn = Fe, er = new Uint32Array([\n    1116352408,\n    1899447441,\n    3049323471,\n    3921009573,\n    961987163,\n    1508970993,\n    2453635748,\n    2870763221,\n    3624381080,\n    310598401,\n    607225278,\n    1426881987,\n    1925078388,\n    2162078206,\n    2614888103,\n    3248222580,\n    3835390401,\n    4022224774,\n    264347078,\n    604807628,\n    770255983,\n    1249150122,\n    1555081692,\n    1996064986,\n    2554220882,\n    2821834349,\n    2952996808,\n    3210313671,\n    3336571891,\n    3584528711,\n    113926993,\n    338241895,\n    666307205,\n    773529912,\n    1294757372,\n    1396182291,\n    1695183700,\n    1986661051,\n    2177026350,\n    2456956037,\n    2730485921,\n    2820302411,\n    3259730800,\n    3345764771,\n    3516065817,\n    3600352804,\n    4094571909,\n    275423344,\n    430227734,\n    506948616,\n    659060556,\n    883997877,\n    958139571,\n    1322822218,\n    1537002063,\n    1747873779,\n    1955562222,\n    2024104815,\n    2227730452,\n    2361852424,\n    2428436474,\n    2756734187,\n    3204031479,\n    3329325298\n]), tr = new Uint32Array([\n    1779033703,\n    3144134277,\n    1013904242,\n    2773480762,\n    1359893119,\n    2600822924,\n    528734635,\n    1541459225\n]), nr = new Uint32Array(64);\nclass rr extends Xn.HashMD {\n    constructor(){\n        super(64, 32, 8, !1), this.A = 0 | tr[0], this.B = 0 | tr[1], this.C = 0 | tr[2], this.D = 0 | tr[3], this.E = 0 | tr[4], this.F = 0 | tr[5], this.G = 0 | tr[6], this.H = 0 | tr[7];\n    }\n    get() {\n        const { A: e, B: t, C: n, D: r, E: i, F: o, G: s, H: a } = this;\n        return [\n            e,\n            t,\n            n,\n            r,\n            i,\n            o,\n            s,\n            a\n        ];\n    }\n    set(e, t, n, r, i, o, s, a) {\n        this.A = 0 | e, this.B = 0 | t, this.C = 0 | n, this.D = 0 | r, this.E = 0 | i, this.F = 0 | o, this.G = 0 | s, this.H = 0 | a;\n    }\n    process(e, t) {\n        for(let n = 0; n < 16; n++, t += 4)nr[n] = e.getUint32(t, !1);\n        for(let e = 16; e < 64; e++){\n            const t = nr[e - 15], n = nr[e - 2], r = (0, Qn.rotr)(t, 7) ^ (0, Qn.rotr)(t, 18) ^ t >>> 3, i = (0, Qn.rotr)(n, 17) ^ (0, Qn.rotr)(n, 19) ^ n >>> 10;\n            nr[e] = i + nr[e - 7] + r + nr[e - 16] | 0;\n        }\n        let { A: n, B: r, C: i, D: o, E: s, F: a, G: c, H: l } = this;\n        for(let e = 0; e < 64; e++){\n            const t = l + ((0, Qn.rotr)(s, 6) ^ (0, Qn.rotr)(s, 11) ^ (0, Qn.rotr)(s, 25)) + (0, Xn.Chi)(s, a, c) + er[e] + nr[e] | 0, d = ((0, Qn.rotr)(n, 2) ^ (0, Qn.rotr)(n, 13) ^ (0, Qn.rotr)(n, 22)) + (0, Xn.Maj)(n, r, i) | 0;\n            l = c, c = a, a = s, s = o + t | 0, o = i, i = r, r = n, n = t + d | 0;\n        }\n        n = n + this.A | 0, r = r + this.B | 0, i = i + this.C | 0, o = o + this.D | 0, s = s + this.E | 0, a = a + this.F | 0, c = c + this.G | 0, l = l + this.H | 0, this.set(n, r, i, o, s, a, c, l);\n    }\n    roundClean() {\n        nr.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);\n    }\n}\nJn.SHA256 = rr;\nclass ir extends rr {\n    constructor(){\n        super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;\n    }\n}\nJn.sha256 = (0, Qn.wrapConstructor)(()=>new rr), Jn.sha224 = (0, Qn.wrapConstructor)(()=>new ir);\nvar or = {}, sr = {};\n!function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.hmac = e.HMAC = void 0;\n    const t = Te, n = Fe;\n    class r extends n.Hash {\n        constructor(e, r){\n            super(), this.finished = !1, this.destroyed = !1, (0, t.hash)(e);\n            const i = (0, n.toBytes)(r);\n            if (this.iHash = e.create(), \"function\" != typeof this.iHash.update) throw new Error(\"Expected instance of class which extends utils.Hash\");\n            this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;\n            const o = this.blockLen, s = new Uint8Array(o);\n            s.set(i.length > o ? e.create().update(i).digest() : i);\n            for(let e = 0; e < s.length; e++)s[e] ^= 54;\n            this.iHash.update(s), this.oHash = e.create();\n            for(let e = 0; e < s.length; e++)s[e] ^= 106;\n            this.oHash.update(s), s.fill(0);\n        }\n        update(e) {\n            return (0, t.exists)(this), this.iHash.update(e), this;\n        }\n        digestInto(e) {\n            (0, t.exists)(this), (0, t.bytes)(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();\n        }\n        digest() {\n            const e = new Uint8Array(this.oHash.outputLen);\n            return this.digestInto(e), e;\n        }\n        _cloneInto(e) {\n            e || (e = Object.create(Object.getPrototypeOf(this), {}));\n            const { oHash: t, iHash: n, finished: r, destroyed: i, blockLen: o, outputLen: s } = this;\n            return e.finished = r, e.destroyed = i, e.blockLen = o, e.outputLen = s, e.oHash = t._cloneInto(e.oHash), e.iHash = n._cloneInto(e.iHash), e;\n        }\n        destroy() {\n            this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();\n        }\n    }\n    e.HMAC = r;\n    e.hmac = (e, t, n)=>new r(e, t).update(n).digest(), e.hmac.create = (e, t)=>new r(e, t);\n}(sr);\nvar ar = {};\n!function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.DER = void 0, e.weierstrassPoints = f, e.weierstrass = function(s) {\n        const a = function(e) {\n            const n = (0, t.validateBasic)(e);\n            return r.validateObject(n, {\n                hash: \"hash\",\n                hmac: \"function\",\n                randomBytes: \"function\"\n            }, {\n                bits2int: \"function\",\n                bits2int_modN: \"function\",\n                lowS: \"boolean\"\n            }), Object.freeze({\n                lowS: !0,\n                ...n\n            });\n        }(s), { Fp: d, n: u } = a, h = d.BYTES + 1, p = 2 * d.BYTES + 1;\n        function g(e) {\n            return n.mod(e, u);\n        }\n        function m(e) {\n            return n.invert(e, u);\n        }\n        const { ProjectivePoint: y, normPrivateKeyToScalar: v, weierstrassEquation: b, isWithinCurveOrder: w } = f({\n            ...a,\n            toBytes (e, t, n) {\n                const o = t.toAffine(), s = d.toBytes(o.x), a = r.concatBytes;\n                return (0, i.abool)(\"isCompressed\", n), n ? a(Uint8Array.from([\n                    t.hasEvenY() ? 2 : 3\n                ]), s) : a(Uint8Array.from([\n                    4\n                ]), s, d.toBytes(o.y));\n            },\n            fromBytes (e) {\n                const t = e.length, n = e[0], i = e.subarray(1);\n                if (t !== h || 2 !== n && 3 !== n) {\n                    if (t === p && 4 === n) {\n                        return {\n                            x: d.fromBytes(i.subarray(0, d.BYTES)),\n                            y: d.fromBytes(i.subarray(d.BYTES, 2 * d.BYTES))\n                        };\n                    }\n                    throw new Error(`Point of length ${t} was invalid. Expected ${h} compressed bytes or ${p} uncompressed bytes`);\n                }\n                {\n                    const e = r.bytesToNumberBE(i);\n                    if (!r.inRange(e, l, d.ORDER)) throw new Error(\"Point is not on curve\");\n                    const t = b(e);\n                    let o;\n                    try {\n                        o = d.sqrt(t);\n                    } catch (e) {\n                        const t = e instanceof Error ? \": \" + e.message : \"\";\n                        throw new Error(\"Point is not on curve\" + t);\n                    }\n                    return 1 == (1 & n) !== ((o & l) === l) && (o = d.neg(o)), {\n                        x: e,\n                        y: o\n                    };\n                }\n            }\n        }), E = (e)=>r.bytesToHex(r.numberToBytesBE(e, a.nByteLength));\n        function C(e) {\n            return e > u >> l;\n        }\n        const S = (e, t, n)=>r.bytesToNumberBE(e.slice(t, n));\n        class _ {\n            constructor(e, t, n){\n                this.r = e, this.s = t, this.recovery = n, this.assertValidity();\n            }\n            static fromCompact(e) {\n                const t = a.nByteLength;\n                return e = (0, i.ensureBytes)(\"compactSignature\", e, 2 * t), new _(S(e, 0, t), S(e, t, 2 * t));\n            }\n            static fromDER(t) {\n                const { r: n, s: r } = e.DER.toSig((0, i.ensureBytes)(\"DER\", t));\n                return new _(n, r);\n            }\n            assertValidity() {\n                r.aInRange(\"r\", this.r, l, u), r.aInRange(\"s\", this.s, l, u);\n            }\n            addRecoveryBit(e) {\n                return new _(this.r, this.s, e);\n            }\n            recoverPublicKey(e) {\n                const { r: t, s: n, recovery: r } = this, o = A((0, i.ensureBytes)(\"msgHash\", e));\n                if (null == r || ![\n                    0,\n                    1,\n                    2,\n                    3\n                ].includes(r)) throw new Error(\"recovery id invalid\");\n                const s = 2 === r || 3 === r ? t + a.n : t;\n                if (s >= d.ORDER) throw new Error(\"recovery id 2 or 3 invalid\");\n                const c = 0 == (1 & r) ? \"02\" : \"03\", l = y.fromHex(c + E(s)), u = m(s), h = g(-o * u), f = g(n * u), p = y.BASE.multiplyAndAddUnsafe(l, h, f);\n                if (!p) throw new Error(\"point at infinify\");\n                return p.assertValidity(), p;\n            }\n            hasHighS() {\n                return C(this.s);\n            }\n            normalizeS() {\n                return this.hasHighS() ? new _(this.r, g(-this.s), this.recovery) : this;\n            }\n            toDERRawBytes() {\n                return r.hexToBytes(this.toDERHex());\n            }\n            toDERHex() {\n                return e.DER.hexFromSig({\n                    r: this.r,\n                    s: this.s\n                });\n            }\n            toCompactRawBytes() {\n                return r.hexToBytes(this.toCompactHex());\n            }\n            toCompactHex() {\n                return E(this.r) + E(this.s);\n            }\n        }\n        const k = {\n            isValidPrivateKey (e) {\n                try {\n                    return v(e), !0;\n                } catch (e) {\n                    return !1;\n                }\n            },\n            normPrivateKeyToScalar: v,\n            randomPrivateKey: ()=>{\n                const e = n.getMinHashLength(a.n);\n                return n.mapHashToField(a.randomBytes(e), a.n);\n            },\n            precompute: (e = 8, t = y.BASE)=>(t._setWindowSize(e), t.multiply(BigInt(3)), t)\n        };\n        function x(e) {\n            const t = r.isBytes(e), n = \"string\" == typeof e, i = (t || n) && e.length;\n            return t ? i === h || i === p : n ? i === 2 * h || i === 2 * p : e instanceof y;\n        }\n        const M = a.bits2int || function(e) {\n            const t = r.bytesToNumberBE(e), n = 8 * e.length - a.nBitLength;\n            return n > 0 ? t >> BigInt(n) : t;\n        }, A = a.bits2int_modN || function(e) {\n            return g(M(e));\n        }, I = r.bitMask(a.nBitLength);\n        function R(e) {\n            return r.aInRange(`num < 2^${a.nBitLength}`, e, c, I), r.numberToBytesBE(e, a.nByteLength);\n        }\n        function P(e, t, n = L) {\n            if ([\n                \"recovered\",\n                \"canonical\"\n            ].some((e)=>e in n)) throw new Error(\"sign() legacy options not supported\");\n            const { hash: s, randomBytes: u } = a;\n            let { lowS: h, prehash: f, extraEntropy: p } = n;\n            null == h && (h = !0), e = (0, i.ensureBytes)(\"msgHash\", e), o(n), f && (e = (0, i.ensureBytes)(\"prehashed msgHash\", s(e)));\n            const b = A(e), E = v(t), S = [\n                R(E),\n                R(b)\n            ];\n            if (null != p && !1 !== p) {\n                const e = !0 === p ? u(d.BYTES) : p;\n                S.push((0, i.ensureBytes)(\"extraEntropy\", e));\n            }\n            const k = r.concatBytes(...S), x = b;\n            return {\n                seed: k,\n                k2sig: function(e) {\n                    const t = M(e);\n                    if (!w(t)) return;\n                    const n = m(t), r = y.BASE.multiply(t).toAffine(), i = g(r.x);\n                    if (i === c) return;\n                    const o = g(n * g(x + i * E));\n                    if (o === c) return;\n                    let s = (r.x === i ? 0 : 2) | Number(r.y & l), a = o;\n                    return h && C(o) && (a = function(e) {\n                        return C(e) ? g(-e) : e;\n                    }(o), s ^= 1), new _(i, a, s);\n                }\n            };\n        }\n        const L = {\n            lowS: a.lowS,\n            prehash: !1\n        }, O = {\n            lowS: a.lowS,\n            prehash: !1\n        };\n        return y.BASE._setWindowSize(8), {\n            CURVE: a,\n            getPublicKey: function(e, t = !0) {\n                return y.fromPrivateKey(e).toRawBytes(t);\n            },\n            getSharedSecret: function(e, t, n = !0) {\n                if (x(e)) throw new Error(\"first arg must be private key\");\n                if (!x(t)) throw new Error(\"second arg must be public key\");\n                const r = y.fromHex(t);\n                return r.multiply(v(e)).toRawBytes(n);\n            },\n            sign: function(e, t, n = L) {\n                const { seed: i, k2sig: o } = P(e, t, n), s = a, c = r.createHmacDrbg(s.hash.outputLen, s.nByteLength, s.hmac);\n                return c(i, o);\n            },\n            verify: function(t, n, s, c = O) {\n                const l = t;\n                if (n = (0, i.ensureBytes)(\"msgHash\", n), s = (0, i.ensureBytes)(\"publicKey\", s), \"strict\" in c) throw new Error(\"options.strict was renamed to lowS\");\n                o(c);\n                const { lowS: d, prehash: u } = c;\n                let h, f;\n                try {\n                    if (\"string\" == typeof l || r.isBytes(l)) try {\n                        h = _.fromDER(l);\n                    } catch (t) {\n                        if (!(t instanceof e.DER.Err)) throw t;\n                        h = _.fromCompact(l);\n                    }\n                    else {\n                        if (\"object\" != typeof l || \"bigint\" != typeof l.r || \"bigint\" != typeof l.s) throw new Error(\"PARSE\");\n                        {\n                            const { r: e, s: t } = l;\n                            h = new _(e, t);\n                        }\n                    }\n                    f = y.fromHex(s);\n                } catch (e) {\n                    if (\"PARSE\" === e.message) throw new Error(\"signature must be Signature instance, Uint8Array or hex string\");\n                    return !1;\n                }\n                if (d && h.hasHighS()) return !1;\n                u && (n = a.hash(n));\n                const { r: p, s: v } = h, b = A(n), w = m(v), E = g(b * w), C = g(p * w), S = y.BASE.multiplyAndAddUnsafe(f, E, C)?.toAffine();\n                if (!S) return !1;\n                const k = g(S.x);\n                return k === p;\n            },\n            ProjectivePoint: y,\n            Signature: _,\n            utils: k\n        };\n    }, e.SWUFpSqrtRatio = p, e.mapToCurveSimpleSWU = function(e, t) {\n        if (n.validateField(e), !e.isValid(t.A) || !e.isValid(t.B) || !e.isValid(t.Z)) throw new Error(\"mapToCurveSimpleSWU: invalid opts\");\n        const r = p(e, t.Z);\n        if (!e.isOdd) throw new Error(\"Fp.isOdd is not implemented!\");\n        return (n)=>{\n            let i, o, s, a, c, l, d, u;\n            i = e.sqr(n), i = e.mul(i, t.Z), o = e.sqr(i), o = e.add(o, i), s = e.add(o, e.ONE), s = e.mul(s, t.B), a = e.cmov(t.Z, e.neg(o), !e.eql(o, e.ZERO)), a = e.mul(a, t.A), o = e.sqr(s), l = e.sqr(a), c = e.mul(l, t.A), o = e.add(o, c), o = e.mul(o, s), l = e.mul(l, a), c = e.mul(l, t.B), o = e.add(o, c), d = e.mul(i, s);\n            const { isValid: h, value: f } = r(o, l);\n            u = e.mul(i, n), u = e.mul(u, f), d = e.cmov(d, s, h), u = e.cmov(u, f, h);\n            const p = e.isOdd(n) === e.isOdd(u);\n            return u = e.cmov(e.neg(u), u, p), d = e.div(d, a), {\n                x: d,\n                y: u\n            };\n        };\n    };\n    const t = Pt, n = Lt, r = Ot, i = Ot;\n    function o(e) {\n        void 0 !== e.lowS && (0, i.abool)(\"lowS\", e.lowS), void 0 !== e.prehash && (0, i.abool)(\"prehash\", e.prehash);\n    }\n    const { bytesToNumberBE: s, hexToBytes: a } = r;\n    e.DER = {\n        Err: class extends Error {\n            constructor(e = \"\"){\n                super(e);\n            }\n        },\n        _tlv: {\n            encode: (t, n)=>{\n                const { Err: i } = e.DER;\n                if (t < 0 || t > 256) throw new i(\"tlv.encode: wrong tag\");\n                if (1 & n.length) throw new i(\"tlv.encode: unpadded data\");\n                const o = n.length / 2, s = r.numberToHexUnpadded(o);\n                if (s.length / 2 & 128) throw new i(\"tlv.encode: long form length too big\");\n                const a = o > 127 ? r.numberToHexUnpadded(s.length / 2 | 128) : \"\";\n                return `${r.numberToHexUnpadded(t)}${a}${s}${n}`;\n            },\n            decode (t, n) {\n                const { Err: r } = e.DER;\n                let i = 0;\n                if (t < 0 || t > 256) throw new r(\"tlv.encode: wrong tag\");\n                if (n.length < 2 || n[i++] !== t) throw new r(\"tlv.decode: wrong tlv\");\n                const o = n[i++];\n                let s = 0;\n                if (!!(128 & o)) {\n                    const e = 127 & o;\n                    if (!e) throw new r(\"tlv.decode(long): indefinite length not supported\");\n                    if (e > 4) throw new r(\"tlv.decode(long): byte length is too big\");\n                    const t = n.subarray(i, i + e);\n                    if (t.length !== e) throw new r(\"tlv.decode: length bytes not complete\");\n                    if (0 === t[0]) throw new r(\"tlv.decode(long): zero leftmost byte\");\n                    for (const e of t)s = s << 8 | e;\n                    if (i += e, s < 128) throw new r(\"tlv.decode(long): not minimal encoding\");\n                } else s = o;\n                const a = n.subarray(i, i + s);\n                if (a.length !== s) throw new r(\"tlv.decode: wrong value length\");\n                return {\n                    v: a,\n                    l: n.subarray(i + s)\n                };\n            }\n        },\n        _int: {\n            encode (t) {\n                const { Err: n } = e.DER;\n                if (t < c) throw new n(\"integer: negative integers are not allowed\");\n                let i = r.numberToHexUnpadded(t);\n                if (8 & Number.parseInt(i[0], 16) && (i = \"00\" + i), 1 & i.length) throw new n(\"unexpected assertion\");\n                return i;\n            },\n            decode (t) {\n                const { Err: n } = e.DER;\n                if (128 & t[0]) throw new n(\"Invalid signature integer: negative\");\n                if (0 === t[0] && !(128 & t[1])) throw new n(\"Invalid signature integer: unnecessary leading zero\");\n                return s(t);\n            }\n        },\n        toSig (t) {\n            const { Err: n, _int: i, _tlv: o } = e.DER, s = \"string\" == typeof t ? a(t) : t;\n            r.abytes(s);\n            const { v: c, l: l } = o.decode(48, s);\n            if (l.length) throw new n(\"Invalid signature: left bytes after parsing\");\n            const { v: d, l: u } = o.decode(2, c), { v: h, l: f } = o.decode(2, u);\n            if (f.length) throw new n(\"Invalid signature: left bytes after parsing\");\n            return {\n                r: i.decode(d),\n                s: i.decode(h)\n            };\n        },\n        hexFromSig (t) {\n            const { _tlv: n, _int: r } = e.DER, i = `${n.encode(2, r.encode(t.r))}${n.encode(2, r.encode(t.s))}`;\n            return n.encode(48, i);\n        }\n    };\n    const c = BigInt(0), l = BigInt(1), d = BigInt(2), u = BigInt(3), h = BigInt(4);\n    function f(e) {\n        const o = function(e) {\n            const n = (0, t.validateBasic)(e);\n            r.validateObject(n, {\n                a: \"field\",\n                b: \"field\"\n            }, {\n                allowedPrivateKeyLengths: \"array\",\n                wrapPrivateKey: \"boolean\",\n                isTorsionFree: \"function\",\n                clearCofactor: \"function\",\n                allowInfinityPoint: \"boolean\",\n                fromBytes: \"function\",\n                toBytes: \"function\"\n            });\n            const { endo: i, Fp: o, a: s } = n;\n            if (i) {\n                if (!o.eql(s, o.ZERO)) throw new Error(\"Endomorphism can only be defined for Koblitz curves that have a=0\");\n                if (\"object\" != typeof i || \"bigint\" != typeof i.beta || \"function\" != typeof i.splitScalar) throw new Error(\"Expected endomorphism with beta: bigint and splitScalar: function\");\n            }\n            return Object.freeze({\n                ...n\n            });\n        }(e), { Fp: s } = o, a = n.Field(o.n, o.nBitLength), d = o.toBytes || ((e, t, n)=>{\n            const i = t.toAffine();\n            return r.concatBytes(Uint8Array.from([\n                4\n            ]), s.toBytes(i.x), s.toBytes(i.y));\n        }), h = o.fromBytes || ((e)=>{\n            const t = e.subarray(1);\n            return {\n                x: s.fromBytes(t.subarray(0, s.BYTES)),\n                y: s.fromBytes(t.subarray(s.BYTES, 2 * s.BYTES))\n            };\n        });\n        function f(e) {\n            const { a: t, b: n } = o, r = s.sqr(e), i = s.mul(r, e);\n            return s.add(s.add(i, s.mul(e, t)), n);\n        }\n        if (!s.eql(s.sqr(o.Gy), f(o.Gx))) throw new Error(\"bad generator point: equation left != right\");\n        function p(e) {\n            const { allowedPrivateKeyLengths: t, nByteLength: s, wrapPrivateKey: a, n: c } = o;\n            if (t && \"bigint\" != typeof e) {\n                if (r.isBytes(e) && (e = r.bytesToHex(e)), \"string\" != typeof e || !t.includes(e.length)) throw new Error(\"Invalid key\");\n                e = e.padStart(2 * s, \"0\");\n            }\n            let d;\n            try {\n                d = \"bigint\" == typeof e ? e : r.bytesToNumberBE((0, i.ensureBytes)(\"private key\", e, s));\n            } catch (t) {\n                throw new Error(`private key must be ${s} bytes, hex or bigint, not ${typeof e}`);\n            }\n            return a && (d = n.mod(d, c)), r.aInRange(\"private key\", d, l, c), d;\n        }\n        function g(e) {\n            if (!(e instanceof v)) throw new Error(\"ProjectivePoint expected\");\n        }\n        const m = (0, i.memoized)((e, t)=>{\n            const { px: n, py: r, pz: i } = e;\n            if (s.eql(i, s.ONE)) return {\n                x: n,\n                y: r\n            };\n            const o = e.is0();\n            null == t && (t = o ? s.ONE : s.inv(i));\n            const a = s.mul(n, t), c = s.mul(r, t), l = s.mul(i, t);\n            if (o) return {\n                x: s.ZERO,\n                y: s.ZERO\n            };\n            if (!s.eql(l, s.ONE)) throw new Error(\"invZ was invalid\");\n            return {\n                x: a,\n                y: c\n            };\n        }), y = (0, i.memoized)((e)=>{\n            if (e.is0()) {\n                if (o.allowInfinityPoint && !s.is0(e.py)) return;\n                throw new Error(\"bad point: ZERO\");\n            }\n            const { x: t, y: n } = e.toAffine();\n            if (!s.isValid(t) || !s.isValid(n)) throw new Error(\"bad point: x or y not FE\");\n            const r = s.sqr(n), i = f(t);\n            if (!s.eql(r, i)) throw new Error(\"bad point: equation left != right\");\n            if (!e.isTorsionFree()) throw new Error(\"bad point: not in prime-order subgroup\");\n            return !0;\n        });\n        class v {\n            constructor(e, t, n){\n                if (this.px = e, this.py = t, this.pz = n, null == e || !s.isValid(e)) throw new Error(\"x required\");\n                if (null == t || !s.isValid(t)) throw new Error(\"y required\");\n                if (null == n || !s.isValid(n)) throw new Error(\"z required\");\n                Object.freeze(this);\n            }\n            static fromAffine(e) {\n                const { x: t, y: n } = e || {};\n                if (!e || !s.isValid(t) || !s.isValid(n)) throw new Error(\"invalid affine point\");\n                if (e instanceof v) throw new Error(\"projective point not allowed\");\n                const r = (e)=>s.eql(e, s.ZERO);\n                return r(t) && r(n) ? v.ZERO : new v(t, n, s.ONE);\n            }\n            get x() {\n                return this.toAffine().x;\n            }\n            get y() {\n                return this.toAffine().y;\n            }\n            static normalizeZ(e) {\n                const t = s.invertBatch(e.map((e)=>e.pz));\n                return e.map((e, n)=>e.toAffine(t[n])).map(v.fromAffine);\n            }\n            static fromHex(e) {\n                const t = v.fromAffine(h((0, i.ensureBytes)(\"pointHex\", e)));\n                return t.assertValidity(), t;\n            }\n            static fromPrivateKey(e) {\n                return v.BASE.multiply(p(e));\n            }\n            static msm(e, n) {\n                return (0, t.pippenger)(v, a, e, n);\n            }\n            _setWindowSize(e) {\n                w.setWindowSize(this, e);\n            }\n            assertValidity() {\n                y(this);\n            }\n            hasEvenY() {\n                const { y: e } = this.toAffine();\n                if (s.isOdd) return !s.isOdd(e);\n                throw new Error(\"Field doesn't support isOdd\");\n            }\n            equals(e) {\n                g(e);\n                const { px: t, py: n, pz: r } = this, { px: i, py: o, pz: a } = e, c = s.eql(s.mul(t, a), s.mul(i, r)), l = s.eql(s.mul(n, a), s.mul(o, r));\n                return c && l;\n            }\n            negate() {\n                return new v(this.px, s.neg(this.py), this.pz);\n            }\n            double() {\n                const { a: e, b: t } = o, n = s.mul(t, u), { px: r, py: i, pz: a } = this;\n                let c = s.ZERO, l = s.ZERO, d = s.ZERO, h = s.mul(r, r), f = s.mul(i, i), p = s.mul(a, a), g = s.mul(r, i);\n                return g = s.add(g, g), d = s.mul(r, a), d = s.add(d, d), c = s.mul(e, d), l = s.mul(n, p), l = s.add(c, l), c = s.sub(f, l), l = s.add(f, l), l = s.mul(c, l), c = s.mul(g, c), d = s.mul(n, d), p = s.mul(e, p), g = s.sub(h, p), g = s.mul(e, g), g = s.add(g, d), d = s.add(h, h), h = s.add(d, h), h = s.add(h, p), h = s.mul(h, g), l = s.add(l, h), p = s.mul(i, a), p = s.add(p, p), h = s.mul(p, g), c = s.sub(c, h), d = s.mul(p, f), d = s.add(d, d), d = s.add(d, d), new v(c, l, d);\n            }\n            add(e) {\n                g(e);\n                const { px: t, py: n, pz: r } = this, { px: i, py: a, pz: c } = e;\n                let l = s.ZERO, d = s.ZERO, h = s.ZERO;\n                const f = o.a, p = s.mul(o.b, u);\n                let m = s.mul(t, i), y = s.mul(n, a), b = s.mul(r, c), w = s.add(t, n), E = s.add(i, a);\n                w = s.mul(w, E), E = s.add(m, y), w = s.sub(w, E), E = s.add(t, r);\n                let C = s.add(i, c);\n                return E = s.mul(E, C), C = s.add(m, b), E = s.sub(E, C), C = s.add(n, r), l = s.add(a, c), C = s.mul(C, l), l = s.add(y, b), C = s.sub(C, l), h = s.mul(f, E), l = s.mul(p, b), h = s.add(l, h), l = s.sub(y, h), h = s.add(y, h), d = s.mul(l, h), y = s.add(m, m), y = s.add(y, m), b = s.mul(f, b), E = s.mul(p, E), y = s.add(y, b), b = s.sub(m, b), b = s.mul(f, b), E = s.add(E, b), m = s.mul(y, E), d = s.add(d, m), m = s.mul(C, E), l = s.mul(w, l), l = s.sub(l, m), m = s.mul(w, y), h = s.mul(C, h), h = s.add(h, m), new v(l, d, h);\n            }\n            subtract(e) {\n                return this.add(e.negate());\n            }\n            is0() {\n                return this.equals(v.ZERO);\n            }\n            wNAF(e) {\n                return w.wNAFCached(this, e, v.normalizeZ);\n            }\n            multiplyUnsafe(e) {\n                r.aInRange(\"scalar\", e, c, o.n);\n                const t = v.ZERO;\n                if (e === c) return t;\n                if (e === l) return this;\n                const { endo: n } = o;\n                if (!n) return w.unsafeLadder(this, e);\n                let { k1neg: i, k1: a, k2neg: d, k2: u } = n.splitScalar(e), h = t, f = t, p = this;\n                for(; a > c || u > c;)a & l && (h = h.add(p)), u & l && (f = f.add(p)), p = p.double(), a >>= l, u >>= l;\n                return i && (h = h.negate()), d && (f = f.negate()), f = new v(s.mul(f.px, n.beta), f.py, f.pz), h.add(f);\n            }\n            multiply(e) {\n                const { endo: t, n: n } = o;\n                let i, a;\n                if (r.aInRange(\"scalar\", e, l, n), t) {\n                    const { k1neg: n, k1: r, k2neg: o, k2: c } = t.splitScalar(e);\n                    let { p: l, f: d } = this.wNAF(r), { p: u, f: h } = this.wNAF(c);\n                    l = w.constTimeNegate(n, l), u = w.constTimeNegate(o, u), u = new v(s.mul(u.px, t.beta), u.py, u.pz), i = l.add(u), a = d.add(h);\n                } else {\n                    const { p: t, f: n } = this.wNAF(e);\n                    i = t, a = n;\n                }\n                return v.normalizeZ([\n                    i,\n                    a\n                ])[0];\n            }\n            multiplyAndAddUnsafe(e, t, n) {\n                const r = v.BASE, i = (e, t)=>t !== c && t !== l && e.equals(r) ? e.multiply(t) : e.multiplyUnsafe(t), o = i(this, t).add(i(e, n));\n                return o.is0() ? void 0 : o;\n            }\n            toAffine(e) {\n                return m(this, e);\n            }\n            isTorsionFree() {\n                const { h: e, isTorsionFree: t } = o;\n                if (e === l) return !0;\n                if (t) return t(v, this);\n                throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\");\n            }\n            clearCofactor() {\n                const { h: e, clearCofactor: t } = o;\n                return e === l ? this : t ? t(v, this) : this.multiplyUnsafe(o.h);\n            }\n            toRawBytes(e = !0) {\n                return (0, i.abool)(\"isCompressed\", e), this.assertValidity(), d(v, this, e);\n            }\n            toHex(e = !0) {\n                return (0, i.abool)(\"isCompressed\", e), r.bytesToHex(this.toRawBytes(e));\n            }\n        }\n        v.BASE = new v(o.Gx, o.Gy, s.ONE), v.ZERO = new v(s.ZERO, s.ONE, s.ZERO);\n        const b = o.nBitLength, w = (0, t.wNAF)(v, o.endo ? Math.ceil(b / 2) : b);\n        return {\n            CURVE: o,\n            ProjectivePoint: v,\n            normPrivateKeyToScalar: p,\n            weierstrassEquation: f,\n            isWithinCurveOrder: function(e) {\n                return r.inRange(e, l, o.n);\n            }\n        };\n    }\n    function p(e, t) {\n        const n = e.ORDER;\n        let r = c;\n        for(let e = n - l; e % d === c; e /= d)r += l;\n        const i = r, o = d << i - l - l, s = o * d, a = (n - l) / s, f = (a - l) / d, p = s - l, g = o, m = e.pow(t, a), y = e.pow(t, (a + l) / d);\n        let v = (t, n)=>{\n            let r = m, o = e.pow(n, p), s = e.sqr(o);\n            s = e.mul(s, n);\n            let a = e.mul(t, s);\n            a = e.pow(a, f), a = e.mul(a, o), o = e.mul(a, n), s = e.mul(a, t);\n            let c = e.mul(s, o);\n            a = e.pow(c, g);\n            let u = e.eql(a, e.ONE);\n            o = e.mul(s, y), a = e.mul(c, r), s = e.cmov(o, s, u), c = e.cmov(a, c, u);\n            for(let t = i; t > l; t--){\n                let n = t - d;\n                n = d << n - l;\n                let i = e.pow(c, n);\n                const a = e.eql(i, e.ONE);\n                o = e.mul(s, r), r = e.mul(r, r), i = e.mul(c, r), s = e.cmov(o, s, a), c = e.cmov(i, c, a);\n            }\n            return {\n                isValid: u,\n                value: s\n            };\n        };\n        if (e.ORDER % h === u) {\n            const n = (e.ORDER - u) / h, r = e.sqrt(e.neg(t));\n            v = (t, i)=>{\n                let o = e.sqr(i);\n                const s = e.mul(t, i);\n                o = e.mul(o, s);\n                let a = e.pow(o, n);\n                a = e.mul(a, s);\n                const c = e.mul(a, r), l = e.mul(e.sqr(a), i), d = e.eql(l, t);\n                return {\n                    isValid: d,\n                    value: e.cmov(c, a, d)\n                };\n            };\n        }\n        return v;\n    }\n}(ar), Object.defineProperty(or, \"__esModule\", {\n    value: !0\n}), or.getHash = ur, or.createCurve = function(e, t) {\n    const n = (t)=>(0, dr.weierstrass)({\n            ...e,\n            ...ur(t)\n        });\n    return Object.freeze({\n        ...n(t),\n        create: n\n    });\n};\nconst cr = sr, lr = Fe, dr = ar;\nfunction ur(e) {\n    return {\n        hash: e,\n        hmac: (t, ...n)=>(0, cr.hmac)(e, t, (0, lr.concatBytes)(...n)),\n        randomBytes: lr.randomBytes\n    };\n}\n!function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.encodeToCurve = e.hashToCurve = e.schnorr = e.secp256k1 = void 0;\n    const t = Jn, n = Fe, r = or, i = Nn, o = Lt, s = Ot, a = ar, c = BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\"), l = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"), d = BigInt(1), u = BigInt(2), h = (e, t)=>(e + t / u) / t;\n    function f(e) {\n        const t = c, n = BigInt(3), r = BigInt(6), i = BigInt(11), s = BigInt(22), a = BigInt(23), l = BigInt(44), d = BigInt(88), h = e * e * e % t, f = h * h * e % t, g = (0, o.pow2)(f, n, t) * f % t, m = (0, o.pow2)(g, n, t) * f % t, y = (0, o.pow2)(m, u, t) * h % t, v = (0, o.pow2)(y, i, t) * y % t, b = (0, o.pow2)(v, s, t) * v % t, w = (0, o.pow2)(b, l, t) * b % t, E = (0, o.pow2)(w, d, t) * w % t, C = (0, o.pow2)(E, l, t) * b % t, S = (0, o.pow2)(C, n, t) * f % t, _ = (0, o.pow2)(S, a, t) * v % t, k = (0, o.pow2)(_, r, t) * h % t, x = (0, o.pow2)(k, u, t);\n        if (!p.eql(p.sqr(x), e)) throw new Error(\"Cannot find square root\");\n        return x;\n    }\n    const p = (0, o.Field)(c, void 0, void 0, {\n        sqrt: f\n    });\n    e.secp256k1 = (0, r.createCurve)({\n        a: BigInt(0),\n        b: BigInt(7),\n        Fp: p,\n        n: l,\n        Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n        Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\n        h: BigInt(1),\n        lowS: !0,\n        endo: {\n            beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),\n            splitScalar: (e)=>{\n                const t = l, n = BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\"), r = -d * BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\"), i = BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\"), s = n, a = BigInt(\"0x100000000000000000000000000000000\"), c = h(s * e, t), u = h(-r * e, t);\n                let f = (0, o.mod)(e - c * n - u * i, t), p = (0, o.mod)(-c * r - u * s, t);\n                const g = f > a, m = p > a;\n                if (g && (f = t - f), m && (p = t - p), f > a || p > a) throw new Error(\"splitScalar: Endomorphism failed, k=\" + e);\n                return {\n                    k1neg: g,\n                    k1: f,\n                    k2neg: m,\n                    k2: p\n                };\n            }\n        }\n    }, t.sha256);\n    const g = BigInt(0), m = {};\n    function y(e, ...n) {\n        let r = m[e];\n        if (void 0 === r) {\n            const n = (0, t.sha256)(Uint8Array.from(e, (e)=>e.charCodeAt(0)));\n            r = (0, s.concatBytes)(n, n), m[e] = r;\n        }\n        return (0, t.sha256)((0, s.concatBytes)(r, ...n));\n    }\n    const v = (e)=>e.toRawBytes(!0).slice(1), b = (e)=>(0, s.numberToBytesBE)(e, 32), w = (e)=>(0, o.mod)(e, c), E = (e)=>(0, o.mod)(e, l), C = e.secp256k1.ProjectivePoint, S = (e, t, n)=>C.BASE.multiplyAndAddUnsafe(e, t, n);\n    function _(t) {\n        let n = e.secp256k1.utils.normPrivateKeyToScalar(t), r = C.fromPrivateKey(n);\n        return {\n            scalar: r.hasEvenY() ? n : E(-n),\n            bytes: v(r)\n        };\n    }\n    function k(e) {\n        (0, s.aInRange)(\"x\", e, d, c);\n        const t = w(e * e);\n        let n = f(w(t * e + BigInt(7)));\n        n % u !== g && (n = w(-n));\n        const r = new C(e, n, d);\n        return r.assertValidity(), r;\n    }\n    const x = s.bytesToNumberBE;\n    function M(...e) {\n        return E(x(y(\"BIP0340/challenge\", ...e)));\n    }\n    function A(e) {\n        return _(e).bytes;\n    }\n    function I(e, t, r = (0, n.randomBytes)(32)) {\n        const i = (0, s.ensureBytes)(\"message\", e), { bytes: o, scalar: a } = _(t), c = (0, s.ensureBytes)(\"auxRand\", r, 32), l = b(a ^ x(y(\"BIP0340/aux\", c))), d = y(\"BIP0340/nonce\", l, o, i), u = E(x(d));\n        if (u === g) throw new Error(\"sign failed: k is zero\");\n        const { bytes: h, scalar: f } = _(u), p = M(h, o, i), m = new Uint8Array(64);\n        if (m.set(h, 0), m.set(b(E(f + p * a)), 32), !R(m, i, o)) throw new Error(\"sign: Invalid signature produced\");\n        return m;\n    }\n    function R(e, t, n) {\n        const r = (0, s.ensureBytes)(\"signature\", e, 64), i = (0, s.ensureBytes)(\"message\", t), o = (0, s.ensureBytes)(\"publicKey\", n, 32);\n        try {\n            const e = k(x(o)), t = x(r.subarray(0, 32));\n            if (!(0, s.inRange)(t, d, c)) return !1;\n            const n = x(r.subarray(32, 64));\n            if (!(0, s.inRange)(n, d, l)) return !1;\n            const a = M(b(t), v(e), i), u = S(e, n, E(-a));\n            return !(!u || !u.hasEvenY() || u.toAffine().x !== t);\n        } catch (e) {\n            return !1;\n        }\n    }\n    e.schnorr = {\n        getPublicKey: A,\n        sign: I,\n        verify: R,\n        utils: {\n            randomPrivateKey: e.secp256k1.utils.randomPrivateKey,\n            lift_x: k,\n            pointToBytes: v,\n            numberToBytesBE: s.numberToBytesBE,\n            bytesToNumberBE: s.bytesToNumberBE,\n            taggedHash: y,\n            mod: o.mod\n        }\n    };\n    const P = (()=>(0, i.isogenyMap)(p, [\n            [\n                \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7\",\n                \"0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581\",\n                \"0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262\",\n                \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c\"\n            ],\n            [\n                \"0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b\",\n                \"0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14\",\n                \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n            ],\n            [\n                \"0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c\",\n                \"0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3\",\n                \"0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931\",\n                \"0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84\"\n            ],\n            [\n                \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b\",\n                \"0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573\",\n                \"0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f\",\n                \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n            ]\n        ].map((e)=>e.map((e)=>BigInt(e)))))(), L = (()=>(0, a.mapToCurveSimpleSWU)(p, {\n            A: BigInt(\"0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533\"),\n            B: BigInt(\"1771\"),\n            Z: p.create(BigInt(\"-11\"))\n        }))(), O = (()=>(0, i.createHasher)(e.secp256k1.ProjectivePoint, (e)=>{\n            const { x: t, y: n } = L(p.create(e[0]));\n            return P(t, n);\n        }, {\n            DST: \"secp256k1_XMD:SHA-256_SSWU_RO_\",\n            encodeDST: \"secp256k1_XMD:SHA-256_SSWU_NU_\",\n            p: p.ORDER,\n            m: 1,\n            k: 128,\n            expand: \"xmd\",\n            hash: t.sha256\n        }))();\n    e.hashToCurve = O.hashToCurve, e.encodeToCurve = O.encodeToCurve;\n}(Yn);\nvar hr = {};\n!function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.decodeHex = e.remove0x = void 0;\n    var t = fe;\n    e.remove0x = function(e) {\n        return e.startsWith(\"0x\") || e.startsWith(\"0X\") ? e.slice(2) : e;\n    };\n    e.decodeHex = function(n) {\n        return (0, t.hexToBytes)((0, e.remove0x)(n));\n    };\n}(hr), function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.hexToPublicKey = e.convertPublicKeyFormat = e.getSharedPoint = e.getPublicKey = e.isValidPrivateKey = e.getValidSecret = void 0;\n    var t = Ie, n = Pe, r = Yn, i = Se, o = _e, s = hr;\n    e.getValidSecret = function() {\n        var n;\n        do {\n            n = (0, t.randomBytes)(o.SECRET_KEY_LENGTH);\n        }while (!(0, e.isValidPrivateKey)(n));\n        return n;\n    };\n    e.isValidPrivateKey = function(e) {\n        return a((0, i.ellipticCurve)(), function(t) {\n            return t.utils.isValidPrivateKey(e);\n        }, function() {\n            return !0;\n        }, function() {\n            return !0;\n        });\n    };\n    e.getPublicKey = function(e) {\n        return a((0, i.ellipticCurve)(), function(t) {\n            return t.getPublicKey(e);\n        }, function(t) {\n            return t.getPublicKey(e);\n        }, function(t) {\n            return t.getPublicKey(e);\n        });\n    };\n    e.getSharedPoint = function(e, t, n) {\n        return a((0, i.ellipticCurve)(), function(r) {\n            return r.getSharedSecret(e, t, n);\n        }, function(n) {\n            return n.getSharedSecret(e, t);\n        }, function(n) {\n            return l(n, e, t);\n        });\n    };\n    e.convertPublicKeyFormat = function(e, t) {\n        return a((0, i.ellipticCurve)(), function(n) {\n            return n.getSharedSecret(BigInt(1), e, t);\n        }, function() {\n            return e;\n        }, function() {\n            return e;\n        });\n    };\n    function a(e, t, i, o) {\n        if (\"secp256k1\" === e) return t(r.secp256k1);\n        if (\"x25519\" === e) return i(n.x25519);\n        if (\"ed25519\" === e) return o(n.ed25519);\n        throw new Error(\"Not implemented\");\n    }\n    e.hexToPublicKey = function(e) {\n        var t = (0, s.decodeHex)(e);\n        return a((0, i.ellipticCurve)(), function() {\n            return c(t);\n        }, function() {\n            return t;\n        }, function() {\n            return t;\n        });\n    };\n    var c = function(e) {\n        if (e.length === o.ETH_PUBLIC_KEY_SIZE) {\n            var t = new Uint8Array(1 + e.length);\n            return t.set([\n                4\n            ]), t.set(e, 1), t;\n        }\n        return e;\n    }, l = function(e, t, n) {\n        var r = e.utils.getExtendedPublicKey(t).scalar;\n        return e.ExtendedPoint.fromHex(n).multiply(r).toRawBytes();\n    };\n}(Ae);\nvar fr = {}, pr = {};\nObject.defineProperty(pr, \"__esModule\", {\n    value: !0\n}), pr.hkdf = void 0, pr.extract = vr, pr.expand = Er;\nconst gr = Te, mr = Fe, yr = sr;\nfunction vr(e, t, n) {\n    return (0, gr.hash)(e), void 0 === n && (n = new Uint8Array(e.outputLen)), (0, yr.hmac)(e, (0, mr.toBytes)(n), (0, mr.toBytes)(t));\n}\nconst br = new Uint8Array([\n    0\n]), wr = new Uint8Array;\nfunction Er(e, t, n, r = 32) {\n    if ((0, gr.hash)(e), (0, gr.number)(r), r > 255 * e.outputLen) throw new Error(\"Length should be <= 255*HashLen\");\n    const i = Math.ceil(r / e.outputLen);\n    void 0 === n && (n = wr);\n    const o = new Uint8Array(i * e.outputLen), s = yr.hmac.create(e, t), a = s._cloneInto(), c = new Uint8Array(s.outputLen);\n    for(let t = 0; t < i; t++)br[0] = t + 1, a.update(0 === t ? wr : c).update(n).update(br).digestInto(c), o.set(c, e.outputLen * t), s._cloneInto(a);\n    return s.destroy(), a.destroy(), c.fill(0), br.fill(0), o.slice(0, r);\n}\npr.hkdf = (e, t, n, r, i)=>Er(e, vr(e, t, n), r, i), function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.getSharedKey = e.deriveKey = void 0;\n    var t = fe, n = pr, r = Jn;\n    e.deriveKey = function(e, t, i) {\n        return (0, n.hkdf)(r.sha256, e, t, i, 32);\n    };\n    e.getSharedKey = function() {\n        for(var n = [], r = 0; r < arguments.length; r++)n[r] = arguments[r];\n        return (0, e.deriveKey)(t.concatBytes.apply(void 0, n));\n    };\n}(fr);\nvar Cr = {}, Sr = {}, _r = {}, kr = {};\nObject.defineProperty(kr, \"__esModule\", {\n    value: !0\n}), kr.polyval = kr.ghash = void 0, kr._toGHASHKey = Lr;\nconst xr = pe, Mr = fe, Ar = 16, Ir = new Uint8Array(16), Rr = (0, Mr.u32)(Ir), Pr = (e)=>(e >>> 0 & 255) << 24 | (e >>> 8 & 255) << 16 | (e >>> 16 & 255) << 8 | e >>> 24 & 255 | 0;\nfunction Lr(e) {\n    e.reverse();\n    const t = 1 & e[15];\n    let n = 0;\n    for(let t = 0; t < e.length; t++){\n        const r = e[t];\n        e[t] = r >>> 1 | n, n = (1 & r) << 7;\n    }\n    return e[0] ^= 225 & -t, e;\n}\nclass Or {\n    constructor(e, t){\n        this.blockLen = Ar, this.outputLen = Ar, this.s0 = 0, this.s1 = 0, this.s2 = 0, this.s3 = 0, this.finished = !1, e = (0, Mr.toBytes)(e), (0, xr.bytes)(e, 16);\n        const n = (0, Mr.createView)(e);\n        let r = n.getUint32(0, !1), i = n.getUint32(4, !1), o = n.getUint32(8, !1), s = n.getUint32(12, !1);\n        const a = [];\n        for(let e = 0; e < 128; e++)a.push({\n            s0: Pr(r),\n            s1: Pr(i),\n            s2: Pr(o),\n            s3: Pr(s)\n        }), { s0: r, s1: i, s2: o, s3: s } = {\n            s3: (d = o) << 31 | (u = s) >>> 1,\n            s2: (l = i) << 31 | d >>> 1,\n            s1: (c = r) << 31 | l >>> 1,\n            s0: c >>> 1 ^ 225 << 24 & -(1 & u)\n        };\n        var c, l, d, u;\n        const h = ((e)=>e > 65536 ? 8 : e > 1024 ? 4 : 2)(t || 1024);\n        if (![\n            1,\n            2,\n            4,\n            8\n        ].includes(h)) throw new Error(`ghash: wrong window size=${h}, should be 2, 4 or 8`);\n        this.W = h;\n        const f = 128 / h, p = this.windowSize = 2 ** h, g = [];\n        for(let e = 0; e < f; e++)for(let t = 0; t < p; t++){\n            let n = 0, r = 0, i = 0, o = 0;\n            for(let s = 0; s < h; s++){\n                if (!(t >>> h - s - 1 & 1)) continue;\n                const { s0: c, s1: l, s2: d, s3: u } = a[h * e + s];\n                n ^= c, r ^= l, i ^= d, o ^= u;\n            }\n            g.push({\n                s0: n,\n                s1: r,\n                s2: i,\n                s3: o\n            });\n        }\n        this.t = g;\n    }\n    _updateBlock(e, t, n, r) {\n        e ^= this.s0, t ^= this.s1, n ^= this.s2, r ^= this.s3;\n        const { W: i, t: o, windowSize: s } = this;\n        let a = 0, c = 0, l = 0, d = 0;\n        const u = (1 << i) - 1;\n        let h = 0;\n        for (const f of [\n            e,\n            t,\n            n,\n            r\n        ])for(let e = 0; e < 4; e++){\n            const t = f >>> 8 * e & 255;\n            for(let e = 8 / i - 1; e >= 0; e--){\n                const n = t >>> i * e & u, { s0: r, s1: f, s2: p, s3: g } = o[h * s + n];\n                a ^= r, c ^= f, l ^= p, d ^= g, h += 1;\n            }\n        }\n        this.s0 = a, this.s1 = c, this.s2 = l, this.s3 = d;\n    }\n    update(e) {\n        e = (0, Mr.toBytes)(e), (0, xr.exists)(this);\n        const t = (0, Mr.u32)(e), n = Math.floor(e.length / Ar), r = e.length % Ar;\n        for(let e = 0; e < n; e++)this._updateBlock(t[4 * e + 0], t[4 * e + 1], t[4 * e + 2], t[4 * e + 3]);\n        return r && (Ir.set(e.subarray(n * Ar)), this._updateBlock(Rr[0], Rr[1], Rr[2], Rr[3]), (0, Mr.clean)(Rr)), this;\n    }\n    destroy() {\n        const { t: e } = this;\n        for (const t of e)t.s0 = 0, t.s1 = 0, t.s2 = 0, t.s3 = 0;\n    }\n    digestInto(e) {\n        (0, xr.exists)(this), (0, xr.output)(e, this), this.finished = !0;\n        const { s0: t, s1: n, s2: r, s3: i } = this, o = (0, Mr.u32)(e);\n        return o[0] = t, o[1] = n, o[2] = r, o[3] = i, e;\n    }\n    digest() {\n        const e = new Uint8Array(Ar);\n        return this.digestInto(e), this.destroy(), e;\n    }\n}\nclass Tr extends Or {\n    constructor(e, t){\n        e = (0, Mr.toBytes)(e);\n        const n = Lr((0, Mr.copyBytes)(e));\n        super(n, t), (0, Mr.clean)(n);\n    }\n    update(e) {\n        e = (0, Mr.toBytes)(e), (0, xr.exists)(this);\n        const t = (0, Mr.u32)(e), n = e.length % Ar, r = Math.floor(e.length / Ar);\n        for(let e = 0; e < r; e++)this._updateBlock(Pr(t[4 * e + 3]), Pr(t[4 * e + 2]), Pr(t[4 * e + 1]), Pr(t[4 * e + 0]));\n        return n && (Ir.set(e.subarray(r * Ar)), this._updateBlock(Pr(Rr[3]), Pr(Rr[2]), Pr(Rr[1]), Pr(Rr[0])), (0, Mr.clean)(Rr)), this;\n    }\n    digestInto(e) {\n        (0, xr.exists)(this), (0, xr.output)(e, this), this.finished = !0;\n        const { s0: t, s1: n, s2: r, s3: i } = this, o = (0, Mr.u32)(e);\n        return o[0] = t, o[1] = n, o[2] = r, o[3] = i, e.reverse();\n    }\n}\nfunction Nr(e) {\n    const t = (t, n)=>e(n, t.length).update((0, Mr.toBytes)(t)).digest(), n = e(new Uint8Array(16), 0);\n    return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = (t, n)=>e(t, n), t;\n}\nkr.ghash = Nr((e, t)=>new Or(e, t)), kr.polyval = Nr((e, t)=>new Tr(e, t)), Object.defineProperty(_r, \"__esModule\", {\n    value: !0\n}), _r.unsafe = _r.aeskwp = _r.aeskw = _r.siv = _r.gcm = _r.cfb = _r.cbc = _r.ecb = _r.ctr = void 0, _r.expandKeyLE = Qr, _r.expandKeyDecLE = ei;\nconst Dr = pe, $r = kr, Br = fe, Kr = 16, jr = new Uint8Array(Kr), Ur = 283;\nfunction Hr(e) {\n    return e << 1 ^ Ur & -(e >> 7);\n}\nfunction Fr(e, t) {\n    let n = 0;\n    for(; t > 0; t >>= 1)n ^= e & -(1 & t), e = Hr(e);\n    return n;\n}\nconst zr = (()=>{\n    const e = new Uint8Array(256);\n    for(let t = 0, n = 1; t < 256; t++, n ^= Hr(n))e[t] = n;\n    const t = new Uint8Array(256);\n    t[0] = 99;\n    for(let n = 0; n < 255; n++){\n        let r = e[255 - n];\n        r |= r << 8, t[e[n]] = 255 & (r ^ r >> 4 ^ r >> 5 ^ r >> 6 ^ r >> 7 ^ 99);\n    }\n    return (0, Br.clean)(e), t;\n})(), qr = zr.map((e, t)=>zr.indexOf(t)), Vr = (e)=>e << 24 | e >>> 8, Wr = (e)=>e << 8 | e >>> 24, Gr = (e)=>e << 24 & 4278190080 | e << 8 & 16711680 | e >>> 8 & 65280 | e >>> 24 & 255;\nfunction Zr(e, t) {\n    if (256 !== e.length) throw new Error(\"Wrong sbox length\");\n    const n = new Uint32Array(256).map((n, r)=>t(e[r])), r = n.map(Wr), i = r.map(Wr), o = i.map(Wr), s = new Uint32Array(65536), a = new Uint32Array(65536), c = new Uint16Array(65536);\n    for(let t = 0; t < 256; t++)for(let l = 0; l < 256; l++){\n        const d = 256 * t + l;\n        s[d] = n[t] ^ r[l], a[d] = i[t] ^ o[l], c[d] = e[t] << 8 | e[l];\n    }\n    return {\n        sbox: e,\n        sbox2: c,\n        T0: n,\n        T1: r,\n        T2: i,\n        T3: o,\n        T01: s,\n        T23: a\n    };\n}\nconst Yr = Zr(zr, (e)=>Fr(e, 3) << 24 | e << 16 | e << 8 | Fr(e, 2)), Jr = Zr(qr, (e)=>Fr(e, 11) << 24 | Fr(e, 13) << 16 | Fr(e, 9) << 8 | Fr(e, 14)), Xr = (()=>{\n    const e = new Uint8Array(16);\n    for(let t = 0, n = 1; t < 16; t++, n = Hr(n))e[t] = n;\n    return e;\n})();\nfunction Qr(e) {\n    (0, Dr.bytes)(e);\n    const t = e.length;\n    if (![\n        16,\n        24,\n        32\n    ].includes(t)) throw new Error(`aes: wrong key size: should be 16, 24 or 32, got: ${t}`);\n    const { sbox2: n } = Yr, r = [];\n    (0, Br.isAligned32)(e) || r.push(e = (0, Br.copyBytes)(e));\n    const i = (0, Br.u32)(e), o = i.length, s = (e)=>ni(n, e, e, e, e), a = new Uint32Array(t + 28);\n    a.set(i);\n    for(let e = o; e < a.length; e++){\n        let t = a[e - 1];\n        e % o == 0 ? t = s(Vr(t)) ^ Xr[e / o - 1] : o > 6 && e % o == 4 && (t = s(t)), a[e] = a[e - o] ^ t;\n    }\n    return (0, Br.clean)(...r), a;\n}\nfunction ei(e) {\n    const t = Qr(e), n = t.slice(), r = t.length, { sbox2: i } = Yr, { T0: o, T1: s, T2: a, T3: c } = Jr;\n    for(let e = 0; e < r; e += 4)for(let i = 0; i < 4; i++)n[e + i] = t[r - e - 4 + i];\n    (0, Br.clean)(t);\n    for(let e = 4; e < r - 4; e++){\n        const t = n[e], r = ni(i, t, t, t, t);\n        n[e] = o[255 & r] ^ s[r >>> 8 & 255] ^ a[r >>> 16 & 255] ^ c[r >>> 24];\n    }\n    return n;\n}\nfunction ti(e, t, n, r, i, o) {\n    return e[n << 8 & 65280 | r >>> 8 & 255] ^ t[i >>> 8 & 65280 | o >>> 24 & 255];\n}\nfunction ni(e, t, n, r, i) {\n    return e[255 & t | 65280 & n] | e[r >>> 16 & 255 | i >>> 16 & 65280] << 16;\n}\nfunction ri(e, t, n, r, i) {\n    const { sbox2: o, T01: s, T23: a } = Yr;\n    let c = 0;\n    t ^= e[c++], n ^= e[c++], r ^= e[c++], i ^= e[c++];\n    const l = e.length / 4 - 2;\n    for(let o = 0; o < l; o++){\n        const o = e[c++] ^ ti(s, a, t, n, r, i), l = e[c++] ^ ti(s, a, n, r, i, t), d = e[c++] ^ ti(s, a, r, i, t, n), u = e[c++] ^ ti(s, a, i, t, n, r);\n        t = o, n = l, r = d, i = u;\n    }\n    return {\n        s0: e[c++] ^ ni(o, t, n, r, i),\n        s1: e[c++] ^ ni(o, n, r, i, t),\n        s2: e[c++] ^ ni(o, r, i, t, n),\n        s3: e[c++] ^ ni(o, i, t, n, r)\n    };\n}\nfunction ii(e, t, n, r, i) {\n    const { sbox2: o, T01: s, T23: a } = Jr;\n    let c = 0;\n    t ^= e[c++], n ^= e[c++], r ^= e[c++], i ^= e[c++];\n    const l = e.length / 4 - 2;\n    for(let o = 0; o < l; o++){\n        const o = e[c++] ^ ti(s, a, t, i, r, n), l = e[c++] ^ ti(s, a, n, t, i, r), d = e[c++] ^ ti(s, a, r, n, t, i), u = e[c++] ^ ti(s, a, i, r, n, t);\n        t = o, n = l, r = d, i = u;\n    }\n    return {\n        s0: e[c++] ^ ni(o, t, i, r, n),\n        s1: e[c++] ^ ni(o, n, t, i, r),\n        s2: e[c++] ^ ni(o, r, n, t, i),\n        s3: e[c++] ^ ni(o, i, r, n, t)\n    };\n}\nfunction oi(e, t) {\n    if (void 0 === t) return new Uint8Array(e);\n    if ((0, Dr.bytes)(t), t.length < e) throw new Error(`aes: wrong destination length, expected at least ${e}, got: ${t.length}`);\n    if (!(0, Br.isAligned32)(t)) throw new Error(\"unaligned dst\");\n    return t;\n}\nfunction si(e, t, n, r) {\n    (0, Dr.bytes)(t, Kr), (0, Dr.bytes)(n);\n    const i = n.length;\n    r = oi(i, r);\n    const o = t, s = (0, Br.u32)(o);\n    let { s0: a, s1: c, s2: l, s3: d } = ri(e, s[0], s[1], s[2], s[3]);\n    const u = (0, Br.u32)(n), h = (0, Br.u32)(r);\n    for(let t = 0; t + 4 <= u.length; t += 4){\n        h[t + 0] = u[t + 0] ^ a, h[t + 1] = u[t + 1] ^ c, h[t + 2] = u[t + 2] ^ l, h[t + 3] = u[t + 3] ^ d;\n        let n = 1;\n        for(let e = o.length - 1; e >= 0; e--)n = n + (255 & o[e]) | 0, o[e] = 255 & n, n >>>= 8;\n        ({ s0: a, s1: c, s2: l, s3: d } = ri(e, s[0], s[1], s[2], s[3]));\n    }\n    const f = Kr * Math.floor(u.length / 4);\n    if (f < i) {\n        const e = new Uint32Array([\n            a,\n            c,\n            l,\n            d\n        ]), t = (0, Br.u8)(e);\n        for(let e = f, o = 0; e < i; e++, o++)r[e] = n[e] ^ t[o];\n        (0, Br.clean)(e);\n    }\n    return r;\n}\nfunction ai(e, t, n, r, i) {\n    (0, Dr.bytes)(n, Kr), (0, Dr.bytes)(r), i = oi(r.length, i);\n    const o = n, s = (0, Br.u32)(o), a = (0, Br.createView)(o), c = (0, Br.u32)(r), l = (0, Br.u32)(i), d = t ? 0 : 12, u = r.length;\n    let h = a.getUint32(d, t), { s0: f, s1: p, s2: g, s3: m } = ri(e, s[0], s[1], s[2], s[3]);\n    for(let n = 0; n + 4 <= c.length; n += 4)l[n + 0] = c[n + 0] ^ f, l[n + 1] = c[n + 1] ^ p, l[n + 2] = c[n + 2] ^ g, l[n + 3] = c[n + 3] ^ m, h = h + 1 >>> 0, a.setUint32(d, h, t), { s0: f, s1: p, s2: g, s3: m } = ri(e, s[0], s[1], s[2], s[3]);\n    const y = Kr * Math.floor(c.length / 4);\n    if (y < u) {\n        const e = new Uint32Array([\n            f,\n            p,\n            g,\n            m\n        ]), t = (0, Br.u8)(e);\n        for(let e = y, n = 0; e < u; e++, n++)i[e] = r[e] ^ t[n];\n        (0, Br.clean)(e);\n    }\n    return i;\n}\nfunction ci(e) {\n    if ((0, Dr.bytes)(e), e.length % Kr != 0) throw new Error(\"aes/(cbc-ecb).decrypt ciphertext should consist of blocks with size 16\");\n}\nfunction li(e, t, n) {\n    (0, Dr.bytes)(e);\n    let r = e.length;\n    const i = r % Kr;\n    if (!t && 0 !== i) throw new Error(\"aec/(cbc-ecb): unpadded plaintext with disabled padding\");\n    (0, Br.isAligned32)(e) || (e = (0, Br.copyBytes)(e));\n    const o = (0, Br.u32)(e);\n    if (t) {\n        let e = Kr - i;\n        e || (e = Kr), r += e;\n    }\n    const s = oi(r, n);\n    return {\n        b: o,\n        o: (0, Br.u32)(s),\n        out: s\n    };\n}\nfunction di(e, t) {\n    if (!t) return e;\n    const n = e.length;\n    if (!n) throw new Error(\"aes/pcks5: empty ciphertext not allowed\");\n    const r = e[n - 1];\n    if (r <= 0 || r > 16) throw new Error(\"aes/pcks5: wrong padding\");\n    const i = e.subarray(0, -r);\n    for(let t = 0; t < r; t++)if (e[n - t - 1] !== r) throw new Error(\"aes/pcks5: wrong padding\");\n    return i;\n}\nfunction ui(e) {\n    const t = new Uint8Array(16), n = (0, Br.u32)(t);\n    t.set(e);\n    const r = Kr - e.length;\n    for(let e = Kr - r; e < Kr; e++)t[e] = r;\n    return n;\n}\nfunction hi(e, t, n, r, i) {\n    const o = null == i ? 0 : i.length, s = e.create(n, r.length + o);\n    i && s.update(i), s.update(r);\n    const a = new Uint8Array(16), c = (0, Br.createView)(a);\n    i && (0, Br.setBigUint64)(c, 0, BigInt(8 * o), t), (0, Br.setBigUint64)(c, 8, BigInt(8 * r.length), t), s.update(a);\n    const l = s.digest();\n    return (0, Br.clean)(a), l;\n}\n_r.ctr = (0, Br.wrapCipher)({\n    blockSize: 16,\n    nonceLength: 16\n}, function(e, t) {\n    function n(n, r) {\n        if ((0, Dr.bytes)(n), void 0 !== r && ((0, Dr.bytes)(r), !(0, Br.isAligned32)(r))) throw new Error(\"unaligned destination\");\n        const i = Qr(e), o = (0, Br.copyBytes)(t), s = [\n            i,\n            o\n        ];\n        (0, Br.isAligned32)(n) || s.push(n = (0, Br.copyBytes)(n));\n        const a = si(i, o, n, r);\n        return (0, Br.clean)(...s), a;\n    }\n    return (0, Dr.bytes)(e), (0, Dr.bytes)(t, Kr), {\n        encrypt: (e, t)=>n(e, t),\n        decrypt: (e, t)=>n(e, t)\n    };\n}), _r.ecb = (0, Br.wrapCipher)({\n    blockSize: 16\n}, function(e, t = {}) {\n    (0, Dr.bytes)(e);\n    const n = !t.disablePadding;\n    return {\n        encrypt (t, r) {\n            const { b: i, o: o, out: s } = li(t, n, r), a = Qr(e);\n            let c = 0;\n            for(; c + 4 <= i.length;){\n                const { s0: e, s1: t, s2: n, s3: r } = ri(a, i[c + 0], i[c + 1], i[c + 2], i[c + 3]);\n                o[c++] = e, o[c++] = t, o[c++] = n, o[c++] = r;\n            }\n            if (n) {\n                const e = ui(t.subarray(4 * c)), { s0: n, s1: r, s2: i, s3: s } = ri(a, e[0], e[1], e[2], e[3]);\n                o[c++] = n, o[c++] = r, o[c++] = i, o[c++] = s;\n            }\n            return (0, Br.clean)(a), s;\n        },\n        decrypt (t, r) {\n            ci(t);\n            const i = ei(e), o = oi(t.length, r), s = [\n                i\n            ];\n            (0, Br.isAligned32)(t) || s.push(t = (0, Br.copyBytes)(t));\n            const a = (0, Br.u32)(t), c = (0, Br.u32)(o);\n            for(let e = 0; e + 4 <= a.length;){\n                const { s0: t, s1: n, s2: r, s3: o } = ii(i, a[e + 0], a[e + 1], a[e + 2], a[e + 3]);\n                c[e++] = t, c[e++] = n, c[e++] = r, c[e++] = o;\n            }\n            return (0, Br.clean)(...s), di(o, n);\n        }\n    };\n}), _r.cbc = (0, Br.wrapCipher)({\n    blockSize: 16,\n    nonceLength: 16\n}, function(e, t, n = {}) {\n    (0, Dr.bytes)(e), (0, Dr.bytes)(t, 16);\n    const r = !n.disablePadding;\n    return {\n        encrypt (n, i) {\n            const o = Qr(e), { b: s, o: a, out: c } = li(n, r, i);\n            let l = t;\n            const d = [\n                o\n            ];\n            (0, Br.isAligned32)(l) || d.push(l = (0, Br.copyBytes)(l));\n            const u = (0, Br.u32)(l);\n            let h = u[0], f = u[1], p = u[2], g = u[3], m = 0;\n            for(; m + 4 <= s.length;)h ^= s[m + 0], f ^= s[m + 1], p ^= s[m + 2], g ^= s[m + 3], ({ s0: h, s1: f, s2: p, s3: g } = ri(o, h, f, p, g)), a[m++] = h, a[m++] = f, a[m++] = p, a[m++] = g;\n            if (r) {\n                const e = ui(n.subarray(4 * m));\n                h ^= e[0], f ^= e[1], p ^= e[2], g ^= e[3], ({ s0: h, s1: f, s2: p, s3: g } = ri(o, h, f, p, g)), a[m++] = h, a[m++] = f, a[m++] = p, a[m++] = g;\n            }\n            return (0, Br.clean)(...d), c;\n        },\n        decrypt (n, i) {\n            ci(n);\n            const o = ei(e);\n            let s = t;\n            const a = [\n                o\n            ];\n            (0, Br.isAligned32)(s) || a.push(s = (0, Br.copyBytes)(s));\n            const c = (0, Br.u32)(s), l = oi(n.length, i);\n            (0, Br.isAligned32)(n) || a.push(n = (0, Br.copyBytes)(n));\n            const d = (0, Br.u32)(n), u = (0, Br.u32)(l);\n            let h = c[0], f = c[1], p = c[2], g = c[3];\n            for(let e = 0; e + 4 <= d.length;){\n                const t = h, n = f, r = p, i = g;\n                h = d[e + 0], f = d[e + 1], p = d[e + 2], g = d[e + 3];\n                const { s0: s, s1: a, s2: c, s3: l } = ii(o, h, f, p, g);\n                u[e++] = s ^ t, u[e++] = a ^ n, u[e++] = c ^ r, u[e++] = l ^ i;\n            }\n            return (0, Br.clean)(...a), di(l, r);\n        }\n    };\n}), _r.cfb = (0, Br.wrapCipher)({\n    blockSize: 16,\n    nonceLength: 16\n}, function(e, t) {\n    function n(n, r, i) {\n        (0, Dr.bytes)(n);\n        const o = n.length;\n        i = oi(o, i);\n        const s = Qr(e);\n        let a = t;\n        const c = [\n            s\n        ];\n        (0, Br.isAligned32)(a) || c.push(a = (0, Br.copyBytes)(a)), (0, Br.isAligned32)(n) || c.push(n = (0, Br.copyBytes)(n));\n        const l = (0, Br.u32)(n), d = (0, Br.u32)(i), u = r ? d : l, h = (0, Br.u32)(a);\n        let f = h[0], p = h[1], g = h[2], m = h[3];\n        for(let e = 0; e + 4 <= l.length;){\n            const { s0: t, s1: n, s2: r, s3: i } = ri(s, f, p, g, m);\n            d[e + 0] = l[e + 0] ^ t, d[e + 1] = l[e + 1] ^ n, d[e + 2] = l[e + 2] ^ r, d[e + 3] = l[e + 3] ^ i, f = u[e++], p = u[e++], g = u[e++], m = u[e++];\n        }\n        const y = Kr * Math.floor(l.length / 4);\n        if (y < o) {\n            ({ s0: f, s1: p, s2: g, s3: m } = ri(s, f, p, g, m));\n            const e = (0, Br.u8)(new Uint32Array([\n                f,\n                p,\n                g,\n                m\n            ]));\n            for(let t = y, r = 0; t < o; t++, r++)i[t] = n[t] ^ e[r];\n            (0, Br.clean)(e);\n        }\n        return (0, Br.clean)(...c), i;\n    }\n    return (0, Dr.bytes)(e), (0, Dr.bytes)(t, 16), {\n        encrypt: (e, t)=>n(e, !0, t),\n        decrypt: (e, t)=>n(e, !1, t)\n    };\n}), _r.gcm = (0, Br.wrapCipher)({\n    blockSize: 16,\n    nonceLength: 12,\n    tagLength: 16\n}, function(e, t, n) {\n    if ((0, Dr.bytes)(e), (0, Dr.bytes)(t), void 0 !== n && (0, Dr.bytes)(n), t.length < 8) throw new Error(\"aes/gcm: invalid nonce length\");\n    const r = 16;\n    function i(e, t, r) {\n        const i = hi($r.ghash, !1, e, r, n);\n        for(let e = 0; e < t.length; e++)i[e] ^= t[e];\n        return i;\n    }\n    function o() {\n        const n = Qr(e), r = jr.slice(), i = jr.slice();\n        if (ai(n, !1, i, i, r), 12 === t.length) i.set(t);\n        else {\n            const e = jr.slice(), n = (0, Br.createView)(e);\n            (0, Br.setBigUint64)(n, 8, BigInt(8 * t.length), !1);\n            const o = $r.ghash.create(r).update(t).update(e);\n            o.digestInto(i), o.destroy();\n        }\n        return {\n            xk: n,\n            authKey: r,\n            counter: i,\n            tagMask: ai(n, !1, i, jr)\n        };\n    }\n    return {\n        encrypt (e) {\n            (0, Dr.bytes)(e);\n            const { xk: t, authKey: n, counter: s, tagMask: a } = o(), c = new Uint8Array(e.length + r), l = [\n                t,\n                n,\n                s,\n                a\n            ];\n            (0, Br.isAligned32)(e) || l.push(e = (0, Br.copyBytes)(e)), ai(t, !1, s, e, c);\n            const d = i(n, a, c.subarray(0, c.length - r));\n            return l.push(d), c.set(d, e.length), (0, Br.clean)(...l), c;\n        },\n        decrypt (e) {\n            if ((0, Dr.bytes)(e), e.length < r) throw new Error(\"aes/gcm: ciphertext less than tagLen (16)\");\n            const { xk: t, authKey: n, counter: s, tagMask: a } = o(), c = [\n                t,\n                n,\n                a,\n                s\n            ];\n            (0, Br.isAligned32)(e) || c.push(e = (0, Br.copyBytes)(e));\n            const l = e.subarray(0, -16), d = e.subarray(-16), u = i(n, a, l);\n            if (c.push(u), !(0, Br.equalBytes)(u, d)) throw new Error(\"aes/gcm: invalid ghash tag\");\n            const h = ai(t, !1, s, l);\n            return (0, Br.clean)(...c), h;\n        }\n    };\n});\nconst fi = (e, t, n)=>(r)=>{\n        if (!Number.isSafeInteger(r) || t > r || r > n) throw new Error(`${e}: invalid value=${r}, must be [${t}..${n}]`);\n    };\nfunction pi(e) {\n    return null != e && \"object\" == typeof e && (e instanceof Uint32Array || \"Uint32Array\" === e.constructor.name);\n}\nfunction gi(e, t) {\n    if ((0, Dr.bytes)(t, 16), !pi(e)) throw new Error(\"_encryptBlock accepts result of expandKeyLE\");\n    const n = (0, Br.u32)(t);\n    let { s0: r, s1: i, s2: o, s3: s } = ri(e, n[0], n[1], n[2], n[3]);\n    return n[0] = r, n[1] = i, n[2] = o, n[3] = s, t;\n}\nfunction mi(e, t) {\n    if ((0, Dr.bytes)(t, 16), !pi(e)) throw new Error(\"_decryptBlock accepts result of expandKeyLE\");\n    const n = (0, Br.u32)(t);\n    let { s0: r, s1: i, s2: o, s3: s } = ii(e, n[0], n[1], n[2], n[3]);\n    return n[0] = r, n[1] = i, n[2] = o, n[3] = s, t;\n}\n_r.siv = (0, Br.wrapCipher)({\n    blockSize: 16,\n    nonceLength: 12,\n    tagLength: 16\n}, function(e, t, n) {\n    const r = fi(\"AAD\", 0, 2 ** 36), i = fi(\"plaintext\", 0, 2 ** 36), o = fi(\"nonce\", 12, 12), s = fi(\"ciphertext\", 16, 2 ** 36 + 16);\n    function a() {\n        const n = Qr(e), r = new Uint8Array(e.length), i = new Uint8Array(16), o = [\n            n,\n            r\n        ];\n        let s = t;\n        (0, Br.isAligned32)(s) || o.push(s = (0, Br.copyBytes)(s));\n        const a = (0, Br.u32)(s);\n        let c = 0, l = a[0], d = a[1], u = a[2], h = 0;\n        for (const e of [\n            i,\n            r\n        ].map(Br.u32)){\n            const t = (0, Br.u32)(e);\n            for(let e = 0; e < t.length; e += 2){\n                const { s0: r, s1: i } = ri(n, c, l, d, u);\n                t[e + 0] = r, t[e + 1] = i, c = ++h;\n            }\n        }\n        const f = {\n            authKey: i,\n            encKey: Qr(r)\n        };\n        return (0, Br.clean)(...o), f;\n    }\n    function c(e, r, i) {\n        const o = hi($r.polyval, !0, r, i, n);\n        for(let e = 0; e < 12; e++)o[e] ^= t[e];\n        o[15] &= 127;\n        const s = (0, Br.u32)(o);\n        let a = s[0], c = s[1], l = s[2], d = s[3];\n        return { s0: a, s1: c, s2: l, s3: d } = ri(e, a, c, l, d), s[0] = a, s[1] = c, s[2] = l, s[3] = d, o;\n    }\n    function l(e, t, n) {\n        let r = (0, Br.copyBytes)(t);\n        r[15] |= 128;\n        const i = ai(e, !0, r, n);\n        return (0, Br.clean)(r), i;\n    }\n    return (0, Dr.bytes)(e, 16, 24, 32), (0, Dr.bytes)(t), o(t.length), void 0 !== n && ((0, Dr.bytes)(n), r(n.length)), {\n        encrypt (e) {\n            (0, Dr.bytes)(e), i(e.length);\n            const { encKey: t, authKey: n } = a(), r = c(t, n, e), o = [\n                t,\n                n,\n                r\n            ];\n            (0, Br.isAligned32)(e) || o.push(e = (0, Br.copyBytes)(e));\n            const s = new Uint8Array(e.length + 16);\n            return s.set(r, e.length), s.set(l(t, r, e)), (0, Br.clean)(...o), s;\n        },\n        decrypt (e) {\n            (0, Dr.bytes)(e), s(e.length);\n            const t = e.subarray(-16), { encKey: n, authKey: r } = a(), i = [\n                n,\n                r\n            ];\n            (0, Br.isAligned32)(e) || i.push(e = (0, Br.copyBytes)(e));\n            const o = l(n, t, e.subarray(0, -16)), d = c(n, r, o);\n            if (i.push(d), !(0, Br.equalBytes)(t, d)) throw (0, Br.clean)(...i), new Error(\"invalid polyval tag\");\n            return (0, Br.clean)(...i), o;\n        }\n    };\n});\nconst yi = {\n    encrypt (e, t) {\n        if (t.length >= 2 ** 32) throw new Error(\"plaintext should be less than 4gb\");\n        const n = Qr(e);\n        if (16 === t.length) gi(n, t);\n        else {\n            const e = (0, Br.u32)(t);\n            let r = e[0], i = e[1];\n            for(let t = 0, o = 1; t < 6; t++)for(let t = 2; t < e.length; t += 2, o++){\n                const { s0: s, s1: a, s2: c, s3: l } = ri(n, r, i, e[t], e[t + 1]);\n                r = s, i = a ^ Gr(o), e[t] = c, e[t + 1] = l;\n            }\n            e[0] = r, e[1] = i;\n        }\n        n.fill(0);\n    },\n    decrypt (e, t) {\n        if (t.length - 8 >= 2 ** 32) throw new Error(\"ciphertext should be less than 4gb\");\n        const n = ei(e), r = t.length / 8 - 1;\n        if (1 === r) mi(n, t);\n        else {\n            const e = (0, Br.u32)(t);\n            let i = e[0], o = e[1];\n            for(let t = 0, s = 6 * r; t < 6; t++)for(let t = 2 * r; t >= 1; t -= 2, s--){\n                o ^= Gr(s);\n                const { s0: r, s1: a, s2: c, s3: l } = ii(n, i, o, e[t], e[t + 1]);\n                i = r, o = a, e[t] = c, e[t + 1] = l;\n            }\n            e[0] = i, e[1] = o;\n        }\n        n.fill(0);\n    }\n}, vi = new Uint8Array(8).fill(166);\n_r.aeskw = (0, Br.wrapCipher)({\n    blockSize: 8\n}, (e)=>({\n        encrypt (t) {\n            if ((0, Dr.bytes)(t), !t.length || t.length % 8 != 0) throw new Error(\"invalid plaintext length\");\n            if (8 === t.length) throw new Error(\"8-byte keys not allowed in AESKW, use AESKWP instead\");\n            const n = (0, Br.concatBytes)(vi, t);\n            return yi.encrypt(e, n), n;\n        },\n        decrypt (t) {\n            if ((0, Dr.bytes)(t), t.length % 8 != 0 || t.length < 24) throw new Error(\"invalid ciphertext length\");\n            const n = (0, Br.copyBytes)(t);\n            if (yi.decrypt(e, n), !(0, Br.equalBytes)(n.subarray(0, 8), vi)) throw new Error(\"integrity check failed\");\n            return n.subarray(0, 8).fill(0), n.subarray(8);\n        }\n    }));\nconst bi = 2790873510;\n_r.aeskwp = (0, Br.wrapCipher)({\n    blockSize: 8\n}, (e)=>({\n        encrypt (t) {\n            if ((0, Dr.bytes)(t), !t.length) throw new Error(\"invalid plaintext length\");\n            const n = 8 * Math.ceil(t.length / 8), r = new Uint8Array(8 + n);\n            r.set(t, 8);\n            const i = (0, Br.u32)(r);\n            return i[0] = bi, i[1] = Gr(t.length), yi.encrypt(e, r), r;\n        },\n        decrypt (t) {\n            if ((0, Dr.bytes)(t), t.length < 16) throw new Error(\"invalid ciphertext length\");\n            const n = (0, Br.copyBytes)(t), r = (0, Br.u32)(n);\n            yi.decrypt(e, n);\n            const i = Gr(r[1]) >>> 0, o = 8 * Math.ceil(i / 8);\n            if (r[0] !== bi || n.length - 8 !== o) throw new Error(\"integrity check failed\");\n            for(let e = i; e < o; e++)if (0 !== n[8 + e]) throw new Error(\"integrity check failed\");\n            return n.subarray(0, 8).fill(0), n.subarray(8, 8 + i);\n        }\n    })), _r.unsafe = {\n    expandKeyLE: Qr,\n    expandKeyDecLE: ei,\n    encrypt: ri,\n    decrypt: ii,\n    encryptBlock: gi,\n    decryptBlock: mi,\n    ctrCounter: si,\n    ctr32: ai\n}, Object.defineProperty(Sr, \"__esModule\", {\n    value: !0\n}), Sr.aes256cbc = Sr.aes256gcm = void 0;\nvar wi = _r;\nSr.aes256gcm = function(e, t, n) {\n    return (0, wi.gcm)(e, t, n);\n};\nSr.aes256cbc = function(e, t, n) {\n    return (0, wi.cbc)(e, t);\n};\nvar Ei = {}, Ci = {}, Si = {};\nObject.defineProperty(Si, \"__esModule\", {\n    value: !0\n}), Si.sigma = void 0, Si.rotl = function(e, t) {\n    return e << t | e >>> 32 - t;\n}, Si.createCipher = function(e, t) {\n    const { allowShortKeys: n, extendNonceFn: r, counterLength: i, counterRight: o, rounds: s } = (0, ki.checkOpts)({\n        allowShortKeys: !1,\n        counterLength: 8,\n        counterRight: !1,\n        rounds: 20\n    }, t);\n    if (\"function\" != typeof e) throw new Error(\"core must be a function\");\n    return (0, _i.number)(i), (0, _i.number)(s), (0, _i.bool)(o), (0, _i.bool)(n), (t, a, c, l, d = 0)=>{\n        (0, _i.bytes)(t), (0, _i.bytes)(a), (0, _i.bytes)(c);\n        const u = c.length;\n        if (void 0 === l && (l = new Uint8Array(u)), (0, _i.bytes)(l), (0, _i.number)(d), d < 0 || d >= Ti) throw new Error(\"arx: counter overflow\");\n        if (l.length < u) throw new Error(`arx: output (${l.length}) is shorter than data (${u})`);\n        const h = [];\n        let f, p, g = t.length;\n        if (32 === g) h.push(f = (0, ki.copyBytes)(t)), p = Ri;\n        else {\n            if (16 !== g || !n) throw new Error(`arx: invalid 32-byte key, got length=${g}`);\n            f = new Uint8Array(32), f.set(t), f.set(t, 16), p = Ii, h.push(f);\n        }\n        Pi(a) || h.push(a = (0, ki.copyBytes)(a));\n        const m = (0, ki.u32)(f);\n        if (r) {\n            if (24 !== a.length) throw new Error(\"arx: extended nonce must be 24 bytes\");\n            r(p, m, (0, ki.u32)(a.subarray(0, 16)), m), a = a.subarray(16);\n        }\n        const y = 16 - i;\n        if (y !== a.length) throw new Error(`arx: nonce must be ${y} or 16 bytes`);\n        if (12 !== y) {\n            const e = new Uint8Array(12);\n            e.set(a, o ? 0 : 12 - a.length), a = e, h.push(a);\n        }\n        const v = (0, ki.u32)(a);\n        return function(e, t, n, r, i, o, s, a) {\n            const c = i.length, l = new Uint8Array(Li), d = (0, ki.u32)(l), u = Pi(i) && Pi(o), h = u ? (0, ki.u32)(i) : Ni, f = u ? (0, ki.u32)(o) : Ni;\n            for(let p = 0; p < c; s++){\n                if (e(t, n, r, d, s, a), s >= Ti) throw new Error(\"arx: counter overflow\");\n                const g = Math.min(Li, c - p);\n                if (u && g === Li) {\n                    const e = p / 4;\n                    if (p % 4 != 0) throw new Error(\"arx: invalid block position\");\n                    for(let t, n = 0; n < Oi; n++)t = e + n, f[t] = h[t] ^ d[n];\n                    p += Li;\n                } else {\n                    for(let e, t = 0; t < g; t++)e = p + t, o[e] = i[e] ^ l[t];\n                    p += g;\n                }\n            }\n        }(e, p, m, v, c, l, d, s), (0, ki.clean)(...h), l;\n    };\n};\nconst _i = pe, ki = fe, xi = (e)=>Uint8Array.from(e.split(\"\").map((e)=>e.charCodeAt(0))), Mi = xi(\"expand 16-byte k\"), Ai = xi(\"expand 32-byte k\"), Ii = (0, ki.u32)(Mi), Ri = (0, ki.u32)(Ai);\nfunction Pi(e) {\n    return e.byteOffset % 4 == 0;\n}\nSi.sigma = Ri.slice();\nconst Li = 64, Oi = 16, Ti = 2 ** 32 - 1, Ni = new Uint32Array;\nvar Di = {};\nObject.defineProperty(Di, \"__esModule\", {\n    value: !0\n}), Di.poly1305 = void 0, Di.wrapConstructorWithKey = Ui;\nconst $i = pe, Bi = fe, Ki = (e, t)=>255 & e[t++] | (255 & e[t++]) << 8;\nclass ji {\n    constructor(e){\n        this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = !1, e = (0, Bi.toBytes)(e), (0, $i.bytes)(e, 32);\n        const t = Ki(e, 0), n = Ki(e, 2), r = Ki(e, 4), i = Ki(e, 6), o = Ki(e, 8), s = Ki(e, 10), a = Ki(e, 12), c = Ki(e, 14);\n        this.r[0] = 8191 & t, this.r[1] = 8191 & (t >>> 13 | n << 3), this.r[2] = 7939 & (n >>> 10 | r << 6), this.r[3] = 8191 & (r >>> 7 | i << 9), this.r[4] = 255 & (i >>> 4 | o << 12), this.r[5] = o >>> 1 & 8190, this.r[6] = 8191 & (o >>> 14 | s << 2), this.r[7] = 8065 & (s >>> 11 | a << 5), this.r[8] = 8191 & (a >>> 8 | c << 8), this.r[9] = c >>> 5 & 127;\n        for(let t = 0; t < 8; t++)this.pad[t] = Ki(e, 16 + 2 * t);\n    }\n    process(e, t, n = !1) {\n        const r = n ? 0 : 2048, { h: i, r: o } = this, s = o[0], a = o[1], c = o[2], l = o[3], d = o[4], u = o[5], h = o[6], f = o[7], p = o[8], g = o[9], m = Ki(e, t + 0), y = Ki(e, t + 2), v = Ki(e, t + 4), b = Ki(e, t + 6), w = Ki(e, t + 8), E = Ki(e, t + 10), C = Ki(e, t + 12), S = Ki(e, t + 14);\n        let _ = i[0] + (8191 & m), k = i[1] + (8191 & (m >>> 13 | y << 3)), x = i[2] + (8191 & (y >>> 10 | v << 6)), M = i[3] + (8191 & (v >>> 7 | b << 9)), A = i[4] + (8191 & (b >>> 4 | w << 12)), I = i[5] + (w >>> 1 & 8191), R = i[6] + (8191 & (w >>> 14 | E << 2)), P = i[7] + (8191 & (E >>> 11 | C << 5)), L = i[8] + (8191 & (C >>> 8 | S << 8)), O = i[9] + (S >>> 5 | r), T = 0, N = T + _ * s + k * (5 * g) + x * (5 * p) + M * (5 * f) + A * (5 * h);\n        T = N >>> 13, N &= 8191, N += I * (5 * u) + R * (5 * d) + P * (5 * l) + L * (5 * c) + O * (5 * a), T += N >>> 13, N &= 8191;\n        let D = T + _ * a + k * s + x * (5 * g) + M * (5 * p) + A * (5 * f);\n        T = D >>> 13, D &= 8191, D += I * (5 * h) + R * (5 * u) + P * (5 * d) + L * (5 * l) + O * (5 * c), T += D >>> 13, D &= 8191;\n        let $ = T + _ * c + k * a + x * s + M * (5 * g) + A * (5 * p);\n        T = $ >>> 13, $ &= 8191, $ += I * (5 * f) + R * (5 * h) + P * (5 * u) + L * (5 * d) + O * (5 * l), T += $ >>> 13, $ &= 8191;\n        let B = T + _ * l + k * c + x * a + M * s + A * (5 * g);\n        T = B >>> 13, B &= 8191, B += I * (5 * p) + R * (5 * f) + P * (5 * h) + L * (5 * u) + O * (5 * d), T += B >>> 13, B &= 8191;\n        let K = T + _ * d + k * l + x * c + M * a + A * s;\n        T = K >>> 13, K &= 8191, K += I * (5 * g) + R * (5 * p) + P * (5 * f) + L * (5 * h) + O * (5 * u), T += K >>> 13, K &= 8191;\n        let j = T + _ * u + k * d + x * l + M * c + A * a;\n        T = j >>> 13, j &= 8191, j += I * s + R * (5 * g) + P * (5 * p) + L * (5 * f) + O * (5 * h), T += j >>> 13, j &= 8191;\n        let U = T + _ * h + k * u + x * d + M * l + A * c;\n        T = U >>> 13, U &= 8191, U += I * a + R * s + P * (5 * g) + L * (5 * p) + O * (5 * f), T += U >>> 13, U &= 8191;\n        let H = T + _ * f + k * h + x * u + M * d + A * l;\n        T = H >>> 13, H &= 8191, H += I * c + R * a + P * s + L * (5 * g) + O * (5 * p), T += H >>> 13, H &= 8191;\n        let F = T + _ * p + k * f + x * h + M * u + A * d;\n        T = F >>> 13, F &= 8191, F += I * l + R * c + P * a + L * s + O * (5 * g), T += F >>> 13, F &= 8191;\n        let z = T + _ * g + k * p + x * f + M * h + A * u;\n        T = z >>> 13, z &= 8191, z += I * d + R * l + P * c + L * a + O * s, T += z >>> 13, z &= 8191, T = (T << 2) + T | 0, T = T + N | 0, N = 8191 & T, T >>>= 13, D += T, i[0] = N, i[1] = D, i[2] = $, i[3] = B, i[4] = K, i[5] = j, i[6] = U, i[7] = H, i[8] = F, i[9] = z;\n    }\n    finalize() {\n        const { h: e, pad: t } = this, n = new Uint16Array(10);\n        let r = e[1] >>> 13;\n        e[1] &= 8191;\n        for(let t = 2; t < 10; t++)e[t] += r, r = e[t] >>> 13, e[t] &= 8191;\n        e[0] += 5 * r, r = e[0] >>> 13, e[0] &= 8191, e[1] += r, r = e[1] >>> 13, e[1] &= 8191, e[2] += r, n[0] = e[0] + 5, r = n[0] >>> 13, n[0] &= 8191;\n        for(let t = 1; t < 10; t++)n[t] = e[t] + r, r = n[t] >>> 13, n[t] &= 8191;\n        n[9] -= 8192;\n        let i = (1 ^ r) - 1;\n        for(let e = 0; e < 10; e++)n[e] &= i;\n        i = ~i;\n        for(let t = 0; t < 10; t++)e[t] = e[t] & i | n[t];\n        e[0] = 65535 & (e[0] | e[1] << 13), e[1] = 65535 & (e[1] >>> 3 | e[2] << 10), e[2] = 65535 & (e[2] >>> 6 | e[3] << 7), e[3] = 65535 & (e[3] >>> 9 | e[4] << 4), e[4] = 65535 & (e[4] >>> 12 | e[5] << 1 | e[6] << 14), e[5] = 65535 & (e[6] >>> 2 | e[7] << 11), e[6] = 65535 & (e[7] >>> 5 | e[8] << 8), e[7] = 65535 & (e[8] >>> 8 | e[9] << 5);\n        let o = e[0] + t[0];\n        e[0] = 65535 & o;\n        for(let n = 1; n < 8; n++)o = (e[n] + t[n] | 0) + (o >>> 16) | 0, e[n] = 65535 & o;\n        (0, Bi.clean)(n);\n    }\n    update(e) {\n        (0, $i.exists)(this);\n        const { buffer: t, blockLen: n } = this, r = (e = (0, Bi.toBytes)(e)).length;\n        for(let i = 0; i < r;){\n            const o = Math.min(n - this.pos, r - i);\n            if (o !== n) t.set(e.subarray(i, i + o), this.pos), this.pos += o, i += o, this.pos === n && (this.process(t, 0, !1), this.pos = 0);\n            else for(; n <= r - i; i += n)this.process(e, i);\n        }\n        return this;\n    }\n    destroy() {\n        (0, Bi.clean)(this.h, this.r, this.buffer, this.pad);\n    }\n    digestInto(e) {\n        (0, $i.exists)(this), (0, $i.output)(e, this), this.finished = !0;\n        const { buffer: t, h: n } = this;\n        let { pos: r } = this;\n        if (r) {\n            for(t[r++] = 1; r < 16; r++)t[r] = 0;\n            this.process(t, 0, !0);\n        }\n        this.finalize();\n        let i = 0;\n        for(let t = 0; t < 8; t++)e[i++] = n[t] >>> 0, e[i++] = n[t] >>> 8;\n        return e;\n    }\n    digest() {\n        const { buffer: e, outputLen: t } = this;\n        this.digestInto(e);\n        const n = e.slice(0, t);\n        return this.destroy(), n;\n    }\n}\nfunction Ui(e) {\n    const t = (t, n)=>e(n).update((0, Bi.toBytes)(t)).digest(), n = e(new Uint8Array(32));\n    return t.outputLen = n.outputLen, t.blockLen = n.blockLen, t.create = (t)=>e(t), t;\n}\nDi.poly1305 = Ui((e)=>new ji(e)), function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.xchacha20poly1305 = e.chacha20poly1305 = e._poly1305_aead = e.chacha12 = e.chacha8 = e.xchacha20 = e.chacha20 = e.chacha20orig = void 0, e.hchacha = s;\n    const t = Si, n = pe, r = Di, i = fe;\n    function o(e, n, r, i, o, s = 20) {\n        let a = e[0], c = e[1], l = e[2], d = e[3], u = n[0], h = n[1], f = n[2], p = n[3], g = n[4], m = n[5], y = n[6], v = n[7], b = o, w = r[0], E = r[1], C = r[2], S = a, _ = c, k = l, x = d, M = u, A = h, I = f, R = p, P = g, L = m, O = y, T = v, N = b, D = w, $ = E, B = C;\n        for(let e = 0; e < s; e += 2)S = S + M | 0, N = (0, t.rotl)(N ^ S, 16), P = P + N | 0, M = (0, t.rotl)(M ^ P, 12), S = S + M | 0, N = (0, t.rotl)(N ^ S, 8), P = P + N | 0, M = (0, t.rotl)(M ^ P, 7), _ = _ + A | 0, D = (0, t.rotl)(D ^ _, 16), L = L + D | 0, A = (0, t.rotl)(A ^ L, 12), _ = _ + A | 0, D = (0, t.rotl)(D ^ _, 8), L = L + D | 0, A = (0, t.rotl)(A ^ L, 7), k = k + I | 0, $ = (0, t.rotl)($ ^ k, 16), O = O + $ | 0, I = (0, t.rotl)(I ^ O, 12), k = k + I | 0, $ = (0, t.rotl)($ ^ k, 8), O = O + $ | 0, I = (0, t.rotl)(I ^ O, 7), x = x + R | 0, B = (0, t.rotl)(B ^ x, 16), T = T + B | 0, R = (0, t.rotl)(R ^ T, 12), x = x + R | 0, B = (0, t.rotl)(B ^ x, 8), T = T + B | 0, R = (0, t.rotl)(R ^ T, 7), S = S + A | 0, B = (0, t.rotl)(B ^ S, 16), O = O + B | 0, A = (0, t.rotl)(A ^ O, 12), S = S + A | 0, B = (0, t.rotl)(B ^ S, 8), O = O + B | 0, A = (0, t.rotl)(A ^ O, 7), _ = _ + I | 0, N = (0, t.rotl)(N ^ _, 16), T = T + N | 0, I = (0, t.rotl)(I ^ T, 12), _ = _ + I | 0, N = (0, t.rotl)(N ^ _, 8), T = T + N | 0, I = (0, t.rotl)(I ^ T, 7), k = k + R | 0, D = (0, t.rotl)(D ^ k, 16), P = P + D | 0, R = (0, t.rotl)(R ^ P, 12), k = k + R | 0, D = (0, t.rotl)(D ^ k, 8), P = P + D | 0, R = (0, t.rotl)(R ^ P, 7), x = x + M | 0, $ = (0, t.rotl)($ ^ x, 16), L = L + $ | 0, M = (0, t.rotl)(M ^ L, 12), x = x + M | 0, $ = (0, t.rotl)($ ^ x, 8), L = L + $ | 0, M = (0, t.rotl)(M ^ L, 7);\n        let K = 0;\n        i[K++] = a + S | 0, i[K++] = c + _ | 0, i[K++] = l + k | 0, i[K++] = d + x | 0, i[K++] = u + M | 0, i[K++] = h + A | 0, i[K++] = f + I | 0, i[K++] = p + R | 0, i[K++] = g + P | 0, i[K++] = m + L | 0, i[K++] = y + O | 0, i[K++] = v + T | 0, i[K++] = b + N | 0, i[K++] = w + D | 0, i[K++] = E + $ | 0, i[K++] = C + B | 0;\n    }\n    function s(e, n, r, i) {\n        let o = e[0], s = e[1], a = e[2], c = e[3], l = n[0], d = n[1], u = n[2], h = n[3], f = n[4], p = n[5], g = n[6], m = n[7], y = r[0], v = r[1], b = r[2], w = r[3];\n        for(let e = 0; e < 20; e += 2)o = o + l | 0, y = (0, t.rotl)(y ^ o, 16), f = f + y | 0, l = (0, t.rotl)(l ^ f, 12), o = o + l | 0, y = (0, t.rotl)(y ^ o, 8), f = f + y | 0, l = (0, t.rotl)(l ^ f, 7), s = s + d | 0, v = (0, t.rotl)(v ^ s, 16), p = p + v | 0, d = (0, t.rotl)(d ^ p, 12), s = s + d | 0, v = (0, t.rotl)(v ^ s, 8), p = p + v | 0, d = (0, t.rotl)(d ^ p, 7), a = a + u | 0, b = (0, t.rotl)(b ^ a, 16), g = g + b | 0, u = (0, t.rotl)(u ^ g, 12), a = a + u | 0, b = (0, t.rotl)(b ^ a, 8), g = g + b | 0, u = (0, t.rotl)(u ^ g, 7), c = c + h | 0, w = (0, t.rotl)(w ^ c, 16), m = m + w | 0, h = (0, t.rotl)(h ^ m, 12), c = c + h | 0, w = (0, t.rotl)(w ^ c, 8), m = m + w | 0, h = (0, t.rotl)(h ^ m, 7), o = o + d | 0, w = (0, t.rotl)(w ^ o, 16), g = g + w | 0, d = (0, t.rotl)(d ^ g, 12), o = o + d | 0, w = (0, t.rotl)(w ^ o, 8), g = g + w | 0, d = (0, t.rotl)(d ^ g, 7), s = s + u | 0, y = (0, t.rotl)(y ^ s, 16), m = m + y | 0, u = (0, t.rotl)(u ^ m, 12), s = s + u | 0, y = (0, t.rotl)(y ^ s, 8), m = m + y | 0, u = (0, t.rotl)(u ^ m, 7), a = a + h | 0, v = (0, t.rotl)(v ^ a, 16), f = f + v | 0, h = (0, t.rotl)(h ^ f, 12), a = a + h | 0, v = (0, t.rotl)(v ^ a, 8), f = f + v | 0, h = (0, t.rotl)(h ^ f, 7), c = c + l | 0, b = (0, t.rotl)(b ^ c, 16), p = p + b | 0, l = (0, t.rotl)(l ^ p, 12), c = c + l | 0, b = (0, t.rotl)(b ^ c, 8), p = p + b | 0, l = (0, t.rotl)(l ^ p, 7);\n        let E = 0;\n        i[E++] = o, i[E++] = s, i[E++] = a, i[E++] = c, i[E++] = y, i[E++] = v, i[E++] = b, i[E++] = w;\n    }\n    e.chacha20orig = (0, t.createCipher)(o, {\n        counterRight: !1,\n        counterLength: 8,\n        allowShortKeys: !0\n    }), e.chacha20 = (0, t.createCipher)(o, {\n        counterRight: !1,\n        counterLength: 4,\n        allowShortKeys: !1\n    }), e.xchacha20 = (0, t.createCipher)(o, {\n        counterRight: !1,\n        counterLength: 8,\n        extendNonceFn: s,\n        allowShortKeys: !1\n    }), e.chacha8 = (0, t.createCipher)(o, {\n        counterRight: !1,\n        counterLength: 4,\n        rounds: 8\n    }), e.chacha12 = (0, t.createCipher)(o, {\n        counterRight: !1,\n        counterLength: 4,\n        rounds: 12\n    });\n    const a = new Uint8Array(16), c = (e, t)=>{\n        e.update(t);\n        const n = t.length % 16;\n        n && e.update(a.subarray(n));\n    }, l = new Uint8Array(32);\n    function d(e, t, n, o, s) {\n        const a = e(t, n, l), d = r.poly1305.create(a);\n        s && c(d, s), c(d, o);\n        const u = new Uint8Array(16), h = (0, i.createView)(u);\n        (0, i.setBigUint64)(h, 0, BigInt(s ? s.length : 0), !0), (0, i.setBigUint64)(h, 8, BigInt(o.length), !0), d.update(u);\n        const f = d.digest();\n        return (0, i.clean)(a, u), f;\n    }\n    e._poly1305_aead = (e)=>(t, r, o)=>{\n            const s = 16;\n            return (0, n.bytes)(t, 32), (0, n.bytes)(r), {\n                encrypt (a, c) {\n                    const l = a.length, u = l + s;\n                    c ? (0, n.bytes)(c, u) : c = new Uint8Array(u), e(t, r, a, c, 1);\n                    const h = d(e, t, r, c.subarray(0, -16), o);\n                    return c.set(h, l), (0, i.clean)(h), c;\n                },\n                decrypt (a, c) {\n                    const l = a.length, u = l - s;\n                    if (l < s) throw new Error(\"encrypted data must be at least 16 bytes\");\n                    c ? (0, n.bytes)(c, u) : c = new Uint8Array(u);\n                    const h = a.subarray(0, -16), f = a.subarray(-16), p = d(e, t, r, h, o);\n                    if (!(0, i.equalBytes)(f, p)) throw new Error(\"invalid tag\");\n                    return e(t, r, h, c, 1), (0, i.clean)(p), c;\n                }\n            };\n        }, e.chacha20poly1305 = (0, i.wrapCipher)({\n        blockSize: 64,\n        nonceLength: 12,\n        tagLength: 16\n    }, (0, e._poly1305_aead)(e.chacha20)), e.xchacha20poly1305 = (0, i.wrapCipher)({\n        blockSize: 64,\n        nonceLength: 24,\n        tagLength: 16\n    }, (0, e._poly1305_aead)(e.xchacha20));\n}(Ci), Object.defineProperty(Ei, \"__esModule\", {\n    value: !0\n}), Ei.xchacha20 = void 0;\nvar Hi, Fi, zi, qi = Ci;\nEi.xchacha20 = function(e, t, n) {\n    return (0, qi.xchacha20poly1305)(e, t, n);\n}, function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.aesDecrypt = e.aesEncrypt = e.symDecrypt = e.symEncrypt = void 0;\n    var t = fe, n = Ie, r = Sr, i = Ei, o = Se, s = _e;\n    e.symEncrypt = function(e, t, n) {\n        return a(c, e, t, n);\n    };\n    function a(e, t, n, a) {\n        var c = (0, o.symmetricAlgorithm)();\n        if (\"aes-256-gcm\" === c) return e(r.aes256gcm, t, n, (0, o.symmetricNonceLength)(), s.AEAD_TAG_LENGTH, a);\n        if (\"xchacha20\" === c) return e(i.xchacha20, t, n, s.XCHACHA20_NONCE_LENGTH, s.AEAD_TAG_LENGTH, a);\n        if (\"aes-256-cbc\" === c) return e(r.aes256cbc, t, n, 16, 0);\n        throw new Error(\"Not implemented\");\n    }\n    function c(e, r, i, o, s, a) {\n        var c = (0, n.randomBytes)(o), l = e(r, c, a).encrypt(i);\n        if (0 === s) return (0, t.concatBytes)(c, l);\n        var d = l.length - s, u = l.subarray(0, d), h = l.subarray(d);\n        return (0, t.concatBytes)(c, h, u);\n    }\n    function l(e, n, r, i, o, s) {\n        var a = r.subarray(0, i), c = e(n, Uint8Array.from(a), s), l = r.subarray(i);\n        if (0 === o) return c.decrypt(l);\n        var d = l.subarray(0, o), u = l.subarray(o);\n        return c.decrypt((0, t.concatBytes)(u, d));\n    }\n    e.symDecrypt = function(e, t, n) {\n        return a(l, e, t, n);\n    }, e.aesEncrypt = e.symEncrypt, e.aesDecrypt = e.symDecrypt;\n}(Cr), Hi = Me, Fi = le && le.__createBinding || (Object.create ? function(e, t, n, r) {\n    void 0 === r && (r = n);\n    var i = Object.getOwnPropertyDescriptor(t, n);\n    i && !(\"get\" in i ? !t.__esModule : i.writable || i.configurable) || (i = {\n        enumerable: !0,\n        get: function() {\n            return t[n];\n        }\n    }), Object.defineProperty(e, r, i);\n} : function(e, t, n, r) {\n    void 0 === r && (r = n), e[r] = t[n];\n}), zi = le && le.__exportStar || function(e, t) {\n    for(var n in e)\"default\" === n || Object.prototype.hasOwnProperty.call(t, n) || Fi(t, e, n);\n}, Object.defineProperty(Hi, \"__esModule\", {\n    value: !0\n}), zi(Ae, Hi), zi(fr, Hi), zi(hr, Hi), zi(Cr, Hi);\nvar Vi = {};\nObject.defineProperty(Vi, \"__esModule\", {\n    value: !0\n}), Vi.PublicKey = void 0;\nvar Wi = fe, Gi = Me, Zi = function() {\n    function e(e) {\n        this.data = (0, Gi.convertPublicKeyFormat)(e, !0);\n    }\n    return e.fromHex = function(t) {\n        return new e((0, Gi.hexToPublicKey)(t));\n    }, Object.defineProperty(e.prototype, \"uncompressed\", {\n        get: function() {\n            return S.from((0, Gi.convertPublicKeyFormat)(this.data, !1));\n        },\n        enumerable: !1,\n        configurable: !0\n    }), Object.defineProperty(e.prototype, \"compressed\", {\n        get: function() {\n            return S.from(this.data);\n        },\n        enumerable: !1,\n        configurable: !0\n    }), e.prototype.toHex = function(e) {\n        return void 0 === e && (e = !0), (0, Wi.bytesToHex)(e ? this.data : this.uncompressed);\n    }, e.prototype.decapsulate = function(e, t) {\n        void 0 === t && (t = !1);\n        var n = t ? this.data : this.uncompressed, r = e.multiply(this, t);\n        return (0, Gi.getSharedKey)(n, r);\n    }, e.prototype.equals = function(e) {\n        return (0, Wi.equalBytes)(this.data, e.data);\n    }, e;\n}();\nVi.PublicKey = Zi, Object.defineProperty(xe, \"__esModule\", {\n    value: !0\n}), xe.PrivateKey = void 0;\nvar Yi = fe, Ji = Me, Xi = Vi, Qi = function() {\n    function e(e) {\n        if (void 0 === e) this.data = (0, Ji.getValidSecret)();\n        else {\n            if (!(0, Ji.isValidPrivateKey)(e)) throw new Error(\"Invalid private key\");\n            this.data = e;\n        }\n        this.publicKey = new Xi.PublicKey((0, Ji.getPublicKey)(this.data));\n    }\n    return e.fromHex = function(t) {\n        return new e((0, Ji.decodeHex)(t));\n    }, Object.defineProperty(e.prototype, \"secret\", {\n        get: function() {\n            return S.from(this.data);\n        },\n        enumerable: !1,\n        configurable: !0\n    }), e.prototype.toHex = function() {\n        return (0, Yi.bytesToHex)(this.data);\n    }, e.prototype.encapsulate = function(e, t) {\n        void 0 === t && (t = !1);\n        var n = t ? this.publicKey.compressed : this.publicKey.uncompressed, r = this.multiply(e, t);\n        return (0, Ji.getSharedKey)(n, r);\n    }, e.prototype.multiply = function(e, t) {\n        return void 0 === t && (t = !1), (0, Ji.getSharedPoint)(this.data, e.compressed, t);\n    }, e.prototype.equals = function(e) {\n        return (0, Yi.equalBytes)(this.data, e.data);\n    }, e;\n}();\nxe.PrivateKey = Qi, function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.PublicKey = e.PrivateKey = void 0;\n    var t = xe;\n    Object.defineProperty(e, \"PrivateKey\", {\n        enumerable: !0,\n        get: function() {\n            return t.PrivateKey;\n        }\n    });\n    var n = Vi;\n    Object.defineProperty(e, \"PublicKey\", {\n        enumerable: !0,\n        get: function() {\n            return n.PublicKey;\n        }\n    });\n}(ke), function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.utils = e.PublicKey = e.PrivateKey = e.ECIES_CONFIG = void 0, e.encrypt = function(e, o) {\n        var s = new r.PrivateKey, a = e instanceof Uint8Array ? new r.PublicKey(e) : r.PublicKey.fromHex(e), c = s.encapsulate(a, (0, n.isHkdfKeyCompressed)()), l = (0, n.isEphemeralKeyCompressed)() ? s.publicKey.compressed : s.publicKey.uncompressed, d = (0, i.symEncrypt)(c, o);\n        return S.from((0, t.concatBytes)(l, d));\n    }, e.decrypt = function(e, t) {\n        var o = e instanceof Uint8Array ? new r.PrivateKey(e) : r.PrivateKey.fromHex(e), s = (0, n.ephemeralKeySize)(), a = new r.PublicKey(t.subarray(0, s)), c = t.subarray(s), l = a.decapsulate(o, (0, n.isHkdfKeyCompressed)());\n        return S.from((0, i.symDecrypt)(l, c));\n    };\n    var t = fe, n = Se, r = ke, i = Me;\n    var o = Se;\n    Object.defineProperty(e, \"ECIES_CONFIG\", {\n        enumerable: !0,\n        get: function() {\n            return o.ECIES_CONFIG;\n        }\n    });\n    var s = ke;\n    Object.defineProperty(e, \"PrivateKey\", {\n        enumerable: !0,\n        get: function() {\n            return s.PrivateKey;\n        }\n    }), Object.defineProperty(e, \"PublicKey\", {\n        enumerable: !0,\n        get: function() {\n            return s.PublicKey;\n        }\n    }), e.utils = {\n        aesEncrypt: i.aesEncrypt,\n        aesDecrypt: i.aesDecrypt,\n        symEncrypt: i.symEncrypt,\n        symDecrypt: i.symDecrypt,\n        decodeHex: i.decodeHex,\n        getValidSecret: i.getValidSecret,\n        remove0x: i.remove0x\n    };\n}(he);\nconst eo = debug__WEBPACK_IMPORTED_MODULE_1___default()(\"KeyExchange:Layer\"), to = debug__WEBPACK_IMPORTED_MODULE_1___default()(\"SocketService:Layer\"), no = debug__WEBPACK_IMPORTED_MODULE_1___default()(\"Ecies:Layer\"), ro = debug__WEBPACK_IMPORTED_MODULE_1___default()(\"RemoteCommunication:Layer\");\neo.color = \"##95c44e\", to.color = \"#f638d7\", no.color = \"#465b9c\", ro.color = \"#47a2be\";\nconst io = {\n    KeyExchange: eo,\n    SocketService: to,\n    Ecies: no,\n    RemoteCommunication: ro\n};\nlet oo, so = [], ao = [];\nconst co = (t, n)=>a(void 0, void 0, void 0, function*() {\n        oo = n, ao.push(t), (function(t) {\n            return a(this, void 0, void 0, function*() {\n                if (!oo || !t) return;\n                !function() {\n                    const e = ao;\n                    ao = so, so = e;\n                }();\n                const n = oo.endsWith(\"/\") ? `${oo}evt` : `${oo}/evt`, r = Object.assign({}, t);\n                if (delete r.params, t.params) for (const [e, n] of Object.entries(t.params))r[e] = n;\n                const i = JSON.stringify(r);\n                io.RemoteCommunication(`[sendBufferedEvents] Sending ${so.length} analytics events to ${n}`);\n                try {\n                    const t = yield cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(n, {\n                        method: \"POST\",\n                        headers: {\n                            Accept: \"application/json\",\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: i\n                    }), r = yield t.text();\n                    io.RemoteCommunication(`[sendBufferedEvents] Response: ${r}`), so.length = 0;\n                } catch (n) {}\n            });\n        })(t).catch(()=>{});\n    });\nclass lo {\n    constructor(e){\n        this.enabled = !0, (null == e ? void 0 : e.debug) && debug__WEBPACK_IMPORTED_MODULE_1___default().enable(\"Ecies:Layer\"), this.ecies = (null == e ? void 0 : e.privateKey) ? he.PrivateKey.fromHex(e.privateKey) : new he.PrivateKey, io.Ecies(\"[ECIES constructor()] initialized secret: \", this.ecies.toHex()), io.Ecies(\"[ECIES constructor()] initialized public: \", this.ecies.publicKey.toHex()), io.Ecies(\"[ECIES constructor()] init with\", this);\n    }\n    generateECIES() {\n        this.ecies = new he.PrivateKey;\n    }\n    getPublicKey() {\n        return this.ecies.publicKey.toHex();\n    }\n    encrypt(e, t) {\n        let n = e;\n        if (this.enabled) try {\n            io.Ecies(\"[ECIES: encrypt()] using otherPublicKey\", t);\n            const r = S.from(e), i = he.encrypt(t, r);\n            n = S.from(i).toString(\"base64\");\n        } catch (n) {\n            throw io.Ecies(\"[ECIES: encrypt()] error encrypt:\", n), io.Ecies(\"[ECIES: encrypt()] private: \", this.ecies.toHex()), io.Ecies(\"[ECIES: encrypt()] data: \", e), io.Ecies(\"[ECIES: encrypt()] otherkey: \", t), n;\n        }\n        return n;\n    }\n    decrypt(e) {\n        let t = e;\n        if (this.enabled) try {\n            io.Ecies(\"[ECIES: decrypt()] using privateKey\", this.ecies.toHex());\n            const n = S.from(e.toString(), \"base64\");\n            t = he.decrypt(this.ecies.toHex(), n).toString();\n        } catch (t) {\n            throw io.Ecies(\"[ECIES: decrypt()] error decrypt\", t), io.Ecies(\"[ECIES: decrypt()] private: \", this.ecies.toHex()), io.Ecies(\"[ECIES: decrypt()] encryptedData: \", e), t;\n        }\n        return t;\n    }\n    getKeyInfo() {\n        return {\n            private: this.ecies.toHex(),\n            public: this.ecies.publicKey.toHex()\n        };\n    }\n    toString() {\n        io.Ecies(\"[ECIES: toString()]\", this.getKeyInfo());\n    }\n}\nvar uo = {\n    name: \"@metamask/sdk-communication-layer\",\n    version: \"0.32.0\",\n    description: \"\",\n    homepage: \"https://github.com/MetaMask/metamask-sdk#readme\",\n    bugs: {\n        url: \"https://github.com/MetaMask/metamask-sdk/issues\"\n    },\n    repository: {\n        type: \"git\",\n        url: \"https://github.com/MetaMask/metamask-sdk.git\",\n        directory: \"packages/sdk-communication-layer\"\n    },\n    main: \"dist/node/cjs/metamask-sdk-communication-layer.js\",\n    unpkg: \"dist/browser/umd/metamask-sdk-communication-layer.js\",\n    module: \"dist/node/es/metamask-sdk-communication-layer.js\",\n    browser: \"dist/browser/es/metamask-sdk-communication-layer.js\",\n    \"react-native\": \"dist/react-native/es/metamask-sdk-communication-layer.js\",\n    types: \"dist/types/src/index.d.ts\",\n    files: [\n        \"/dist\"\n    ],\n    scripts: {\n        \"build:types\": \"tsc --project tsconfig.build.json --emitDeclarationOnly --outDir dist/types\",\n        \"build:clean\": \"yarn clean && yarn build\",\n        build: \"yarn build:types && rollup -c --bundleConfigAsCjs\",\n        \"build:dev\": \"yarn build:types && NODE_ENV=dev rollup -c --bundleConfigAsCjs\",\n        dev: 'concurrently \"tsc --watch\" \"rollup -c --bundleConfigAsCjs -w\"',\n        \"build:post-tsc\": \"echo 'N/A'\",\n        \"build:pre-tsc\": \"echo 'N/A'\",\n        size: \"size-limit\",\n        clean: \"rimraf ./dist\",\n        lint: \"yarn lint:eslint && yarn lint:misc --check\",\n        \"lint:changelog\": \"../../scripts/validate-changelog.sh @metamask/sdk-communication-layer\",\n        \"lint:eslint\": \"eslint . --cache --ext js,ts\",\n        \"lint:fix\": \"yarn lint:eslint --fix && yarn lint:misc --write\",\n        \"lint:misc\": \"prettier '**/*.json' '**/*.md' '!CHANGELOG.md' --ignore-path ../../.gitignore\",\n        \"publish:preview\": \"yarn npm publish --tag preview\",\n        prepack: \"../../scripts/prepack.sh\",\n        reset: \"yarn clean && rimraf ./node_modules/\",\n        test: 'jest --testPathIgnorePatterns \"/e2e/\"',\n        \"test:e2e\": 'jest --testPathPattern \"/e2e/\"',\n        \"test:coverage\": \"jest --coverage\",\n        \"test:ci\": 'jest --coverage --passWithNoTests --setupFilesAfterEnv ./jest-preload.js --testPathIgnorePatterns \"/e2e/\"',\n        \"test:dev\": \"jest\",\n        watch: \"rollup -c --bundleConfigAsCjs -w\"\n    },\n    dependencies: {\n        bufferutil: \"^4.0.8\",\n        \"date-fns\": \"^2.29.3\",\n        debug: \"^4.3.4\",\n        \"utf-8-validate\": \"^5.0.2\",\n        uuid: \"^8.3.2\"\n    },\n    devDependencies: {\n        \"@jest/globals\": \"^29.3.1\",\n        \"@lavamoat/allow-scripts\": \"^2.3.1\",\n        \"@metamask/auto-changelog\": \"3.1.0\",\n        \"@metamask/eslint-config\": \"^6.0.0\",\n        \"@metamask/eslint-config-nodejs\": \"^6.0.0\",\n        \"@metamask/eslint-config-typescript\": \"^6.0.0\",\n        \"@rollup/plugin-commonjs\": \"^25.0.0\",\n        \"@rollup/plugin-json\": \"^6.0.0\",\n        \"@rollup/plugin-node-resolve\": \"^15.0.2\",\n        \"@rollup/plugin-replace\": \"^6.0.1\",\n        \"@rollup/plugin-terser\": \"^0.4.4\",\n        \"@size-limit/preset-big-lib\": \"^11.0.2\",\n        \"@types/jest\": \"^29.2.4\",\n        \"@types/node\": \"^20.1.3\",\n        \"@types/uuid\": \"^9.0.0\",\n        \"@typescript-eslint/eslint-plugin\": \"^4.26.0\",\n        \"@typescript-eslint/parser\": \"^4.26.0\",\n        concurrently: \"^9.1.2\",\n        \"cross-fetch\": \"^4.0.0\",\n        eciesjs: \"^0.4.11\",\n        eslint: \"^7.30.0\",\n        \"eslint-config-prettier\": \"^8.3.0\",\n        \"eslint-plugin-import\": \"^2.23.4\",\n        \"eslint-plugin-jest\": \"^24.4.0\",\n        \"eslint-plugin-jsdoc\": \"^36.1.0\",\n        \"eslint-plugin-node\": \"^11.1.0\",\n        \"eslint-plugin-prettier\": \"^3.4.0\",\n        eventemitter2: \"^6.4.9\",\n        jest: \"^29.3.1\",\n        prettier: \"^2.3.0\",\n        rimraf: \"^3.0.2\",\n        rollup: \"^4.26.0\",\n        \"rollup-plugin-jscc\": \"^2.0.0\",\n        \"rollup-plugin-natives\": \"^0.7.5\",\n        \"rollup-plugin-node-builtins\": \"^2.1.2\",\n        \"rollup-plugin-node-globals\": \"^1.4.0\",\n        \"rollup-plugin-peer-deps-external\": \"^2.2.4\",\n        \"rollup-plugin-polyfill-node\": \"^0.13.0\",\n        \"rollup-plugin-sizes\": \"^1.0.6\",\n        \"rollup-plugin-typescript2\": \"^0.31.2\",\n        \"rollup-plugin-visualizer\": \"^5.12.0\",\n        \"size-limit\": \"^11.1.6\",\n        \"socket.io-client\": \"^4.5.1\",\n        \"stream-browserify\": \"^3.0.0\",\n        \"ts-jest\": \"^29.0.3\",\n        \"ts-node\": \"^10.9.1\",\n        typescript: \"^5.6.3\"\n    },\n    peerDependencies: {\n        \"cross-fetch\": \"^4.0.0\",\n        eciesjs: \"*\",\n        eventemitter2: \"^6.4.9\",\n        \"readable-stream\": \"^3.6.2\",\n        \"socket.io-client\": \"^4.5.1\"\n    },\n    publishConfig: {\n        access: \"public\",\n        registry: \"https://registry.npmjs.org/\"\n    },\n    lavamoat: {\n        allowScripts: {\n            \"@lavamoat/preinstall-always-fail\": !1,\n            canvas: !0,\n            \"eciesjs>secp256k1\": !1,\n            \"socket.io-client>engine.io-client>ws>bufferutil\": !1,\n            \"socket.io-client>engine.io-client>ws>utf-8-validate\": !1,\n            bufferutil: !1,\n            \"utf-8-validate\": !1\n        }\n    }\n};\nconst ho = \"https://metamask-sdk.api.cx.metamask.io/\", fo = [\n    \"websocket\"\n], po = 6048e5, go = 3e3, mo = {\n    METAMASK_GETPROVIDERSTATE: \"metamask_getProviderState\",\n    ETH_REQUESTACCOUNTS: \"eth_requestAccounts\"\n};\nfunction yo(e) {\n    const { context: t } = e;\n    io.RemoteCommunication(`[RemoteCommunication: clean()] context=${t}`), e.channelConfig = void 0, e.ready = !1, e.originatorConnectStarted = !1;\n}\nvar vo, bo, wo, Eo, Co, So, _o;\n(_o = vo || (vo = {})).DISCONNECTED = \"disconnected\", _o.WAITING = \"waiting\", _o.TIMEOUT = \"timeout\", _o.LINKED = \"linked\", _o.PAUSED = \"paused\", _o.TERMINATED = \"terminated\", function(e) {\n    e.KEY_INFO = \"key_info\", e.SERVICE_STATUS = \"service_status\", e.PROVIDER_UPDATE = \"provider_update\", e.RPC_UPDATE = \"rpc_update\", e.KEYS_EXCHANGED = \"keys_exchanged\", e.JOIN_CHANNEL = \"join_channel\", e.PUBLIC_KEY = \"public_key\", e.CHANNEL_CREATED = \"channel_created\", e.CLIENTS_CONNECTED = \"clients_connected\", e.CLIENTS_DISCONNECTED = \"clients_disconnected\", e.CLIENTS_WAITING = \"clients_waiting\", e.CLIENTS_READY = \"clients_ready\", e.REJECTED = \"rejected\", e.WALLET_INIT = \"wallet_init\", e.CHANNEL_PERSISTENCE = \"channel_persistence\", e.CONFIG = \"config\", e.MESSAGE_ACK = \"ack\", e.SOCKET_DISCONNECTED = \"socket_disconnected\", e.SOCKET_RECONNECT = \"socket_reconnect\", e.OTP = \"otp\", e.SDK_RPC_CALL = \"sdk_rpc_call\", e.AUTHORIZED = \"authorized\", e.CONNECTION_STATUS = \"connection_status\", e.MESSAGE = \"message\", e.TERMINATE = \"terminate\";\n}(bo || (bo = {})), (wo || (wo = {})).KEY_EXCHANGE = \"key_exchange\", function(e) {\n    e.KEY_HANDSHAKE_START = \"key_handshake_start\", e.KEY_HANDSHAKE_CHECK = \"key_handshake_check\", e.KEY_HANDSHAKE_SYN = \"key_handshake_SYN\", e.KEY_HANDSHAKE_SYNACK = \"key_handshake_SYNACK\", e.KEY_HANDSHAKE_ACK = \"key_handshake_ACK\", e.KEY_HANDSHAKE_WALLET = \"key_handshake_wallet\", e.KEY_HANDSHAKE_NONE = \"none\";\n}(Eo || (Eo = {}));\nclass ko extends eventemitter2__WEBPACK_IMPORTED_MODULE_2__.EventEmitter2 {\n    constructor({ communicationLayer: e, otherPublicKey: t, context: n, ecies: r, logging: i }){\n        super(), this.keysExchanged = !1, this.step = Eo.KEY_HANDSHAKE_NONE, this.debug = !1, this.context = n, this.communicationLayer = e, (null == r ? void 0 : r.privateKey) && t && (io.KeyExchange(`[KeyExchange: constructor()] otherPubKey=${t} set keysExchanged to true!`, r), this.keysExchanged = !0), this.myECIES = new lo(Object.assign(Object.assign({}, r), {\n            debug: null == i ? void 0 : i.eciesLayer\n        })), this.communicationLayer.state.eciesInstance = this.myECIES, this.myPublicKey = this.myECIES.getPublicKey(), this.debug = !0 === (null == i ? void 0 : i.keyExchangeLayer), t && this.setOtherPublicKey(t), this.communicationLayer.on(wo.KEY_EXCHANGE, this.onKeyExchangeMessage.bind(this));\n    }\n    onKeyExchangeMessage(e) {\n        const { relayPersistence: t } = this.communicationLayer.remote.state;\n        if (io.KeyExchange(`[KeyExchange: onKeyExchangeMessage()] context=${this.context} keysExchanged=${this.keysExchanged} relayPersistence=${t}`, e), t) return void io.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] Ignoring key exchange message because relay persistence is activated\");\n        const { message: n } = e;\n        this.keysExchanged && io.KeyExchange(`[KeyExchange: onKeyExchangeMessage()] context=${this.context} received handshake while already exchanged. step=${this.step} otherPubKey=${this.otherPublicKey}`), this.emit(bo.KEY_INFO, n.type), n.type === Eo.KEY_HANDSHAKE_SYN ? (this.checkStep([\n            Eo.KEY_HANDSHAKE_NONE,\n            Eo.KEY_HANDSHAKE_ACK\n        ]), io.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_SYN\", n), n.pubkey && this.setOtherPublicKey(n.pubkey), this.communicationLayer.sendMessage({\n            type: Eo.KEY_HANDSHAKE_SYNACK,\n            pubkey: this.myPublicKey\n        }).catch((e)=>{\n            io.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] Error sending KEY_HANDSHAKE_SYNACK\", e);\n        }), this.setStep(Eo.KEY_HANDSHAKE_ACK)) : n.type === Eo.KEY_HANDSHAKE_SYNACK ? (this.checkStep([\n            Eo.KEY_HANDSHAKE_SYNACK,\n            Eo.KEY_HANDSHAKE_ACK,\n            Eo.KEY_HANDSHAKE_NONE\n        ]), io.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_SYNACK\"), n.pubkey && this.setOtherPublicKey(n.pubkey), this.communicationLayer.sendMessage({\n            type: Eo.KEY_HANDSHAKE_ACK\n        }).catch((e)=>{\n            io.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] Error sending KEY_HANDSHAKE_ACK\", e);\n        }), this.keysExchanged = !0, this.setStep(Eo.KEY_HANDSHAKE_ACK), this.emit(bo.KEYS_EXCHANGED)) : n.type === Eo.KEY_HANDSHAKE_ACK && (io.KeyExchange(\"[KeyExchange: onKeyExchangeMessage()] KEY_HANDSHAKE_ACK set keysExchanged to true!\"), this.checkStep([\n            Eo.KEY_HANDSHAKE_ACK,\n            Eo.KEY_HANDSHAKE_NONE\n        ]), this.keysExchanged = !0, this.setStep(Eo.KEY_HANDSHAKE_ACK), this.emit(bo.KEYS_EXCHANGED));\n    }\n    resetKeys(e) {\n        this.clean(), this.myECIES = new lo(e);\n    }\n    clean() {\n        io.KeyExchange(`[KeyExchange: clean()] context=${this.context} reset handshake state`), this.setStep(Eo.KEY_HANDSHAKE_NONE), this.emit(bo.KEY_INFO, this.step), this.keysExchanged = !1;\n    }\n    start({ isOriginator: e, force: t }) {\n        const { relayPersistence: n, protocolVersion: r } = this.communicationLayer.remote.state, i = r >= 2;\n        n ? io.KeyExchange(\"[KeyExchange: start()] Ignoring key exchange message because relay persistence is activated\") : (io.KeyExchange(`[KeyExchange: start()] context=${this.context} protocolVersion=${r} isOriginator=${e} step=${this.step} force=${t} relayPersistence=${n} keysExchanged=${this.keysExchanged}`), e ? !(this.keysExchanged || this.step !== Eo.KEY_HANDSHAKE_NONE && this.step !== Eo.KEY_HANDSHAKE_SYNACK) || t ? (io.KeyExchange(`[KeyExchange: start()] context=${this.context} -- start key exchange (force=${t}) -- step=${this.step}`, this.step), this.clean(), this.setStep(Eo.KEY_HANDSHAKE_SYNACK), this.communicationLayer.sendMessage({\n            type: Eo.KEY_HANDSHAKE_SYN,\n            pubkey: this.myPublicKey,\n            v: 2\n        }).catch((e)=>{\n            io.KeyExchange(\"[KeyExchange: start()] Error sending KEY_HANDSHAKE_SYN\", e);\n        })) : io.KeyExchange(`[KeyExchange: start()] context=${this.context} -- key exchange already ${this.keysExchanged ? \"done\" : \"in progress\"} -- aborted.`, this.step) : this.keysExchanged && !0 !== t ? io.KeyExchange(\"[KeyExchange: start()] don't send KEY_HANDSHAKE_START -- exchange already done.\") : i ? this.communicationLayer.sendMessage({\n            type: Eo.KEY_HANDSHAKE_SYNACK,\n            pubkey: this.myPublicKey,\n            v: 2\n        }).catch((e)=>{\n            io.KeyExchange(\"[KeyExchange: start()] Error sending KEY_HANDSHAKE_SYNACK\", e);\n        }) : (this.communicationLayer.sendMessage({\n            type: Eo.KEY_HANDSHAKE_START\n        }).catch((e)=>{\n            io.KeyExchange(\"[KeyExchange: start()] Error sending KEY_HANDSHAKE_START\", e);\n        }), this.clean()));\n    }\n    setStep(e) {\n        this.step = e, this.emit(bo.KEY_INFO, e);\n    }\n    checkStep(e) {\n        e.length > 0 && e.indexOf(this.step.toString());\n    }\n    setRelayPersistence({ localKey: e, otherKey: t }) {\n        this.otherPublicKey = t, this.myECIES = new lo({\n            privateKey: e,\n            debug: this.debug\n        }), this.keysExchanged = !0;\n    }\n    setKeysExchanged(e) {\n        this.keysExchanged = e;\n    }\n    areKeysExchanged() {\n        return this.keysExchanged;\n    }\n    getMyPublicKey() {\n        return this.myPublicKey;\n    }\n    getOtherPublicKey() {\n        return this.otherPublicKey;\n    }\n    setOtherPublicKey(e) {\n        io.KeyExchange(\"[KeyExchange: setOtherPubKey()]\", e), this.otherPublicKey = e;\n    }\n    encryptMessage(e) {\n        if (!this.otherPublicKey) throw new Error(\"encryptMessage: Keys not exchanged - missing otherPubKey\");\n        return this.myECIES.encrypt(e, this.otherPublicKey);\n    }\n    decryptMessage(e) {\n        if (!this.otherPublicKey) throw new Error(\"decryptMessage: Keys not exchanged - missing otherPubKey\");\n        return this.myECIES.decrypt(e);\n    }\n    getKeyInfo() {\n        return {\n            ecies: Object.assign(Object.assign({}, this.myECIES.getKeyInfo()), {\n                otherPubKey: this.otherPublicKey\n            }),\n            step: this.step,\n            keysExchanged: this.areKeysExchanged()\n        };\n    }\n    toString() {\n        const e = {\n            keyInfo: this.getKeyInfo(),\n            keysExchanged: this.keysExchanged,\n            step: this.step\n        };\n        return JSON.stringify(e);\n    }\n}\n!function(e) {\n    e.TERMINATE = \"terminate\", e.ANSWER = \"answer\", e.OFFER = \"offer\", e.CANDIDATE = \"candidate\", e.JSONRPC = \"jsonrpc\", e.WALLET_INFO = \"wallet_info\", e.WALLET_INIT = \"wallet_init\", e.ORIGINATOR_INFO = \"originator_info\", e.PAUSE = \"pause\", e.OTP = \"otp\", e.AUTHORIZED = \"authorized\", e.PING = \"ping\", e.READY = \"ready\";\n}(Co || (Co = {})), function(e) {\n    e.REQUEST = \"sdk_connect_request_started\", e.REQUEST_MOBILE = \"sdk_connect_request_started_mobile\", e.RECONNECT = \"sdk_reconnect_request_started\", e.CONNECTED = \"sdk_connection_established\", e.CONNECTED_MOBILE = \"sdk_connection_established_mobile\", e.AUTHORIZED = \"sdk_connection_authorized\", e.REJECTED = \"sdk_connection_rejected\", e.TERMINATED = \"sdk_connection_terminated\", e.DISCONNECTED = \"sdk_disconnected\", e.SDK_USE_EXTENSION = \"sdk_use_extension\", e.SDK_RPC_REQUEST = \"sdk_rpc_request\", e.SDK_RPC_REQUEST_RECEIVED = \"sdk_rpc_request_received\", e.SDK_RPC_REQUEST_DONE = \"sdk_rpc_request_done\", e.SDK_EXTENSION_UTILIZED = \"sdk_extension_utilized\", e.SDK_USE_INAPP_BROWSER = \"sdk_use_inapp_browser\";\n}(So || (So = {}));\nconst xo = (e, t, n)=>a(void 0, void 0, void 0, function*() {\n        var r, i, o, s, a, c;\n        const { remote: l, state: d } = e, { channelId: u, isOriginator: h } = d;\n        if (\"error_terminated\" === t) return io.SocketService(`handleJoinChannelResults: Channel ${u} terminated`), void e.emit(bo.TERMINATE);\n        if (!n) return void io.SocketService(`handleJoinChannelResults: No result for channel ${u}`);\n        const { persistence: f, walletKey: p, rejected: g } = n;\n        if (io.SocketService(`handleJoinChannelResults: Channel ${u} persistence=${f} walletKey=${p} rejected=${g}`), g) return io.SocketService(`handleJoinChannelResults: Channel ${u} rejected`), yield e.remote.disconnect({\n            terminate: !0\n        }), e.remote.emit(bo.REJECTED, {\n            channelId: u\n        }), void e.remote.emitServiceStatusEvent();\n        if (p && !(null === (r = l.state.channelConfig) || void 0 === r ? void 0 : r.otherKey)) {\n            e.getKeyExchange().setOtherPublicKey(p), null === (i = e.state.keyExchange) || void 0 === i || i.setKeysExchanged(!0), l.state.ready = !0, l.state.authorized = !0, l.emit(bo.AUTHORIZED);\n            const { communicationLayer: t, storageManager: n } = l.state, r = Object.assign(Object.assign({}, l.state.channelConfig), {\n                channelId: null !== (o = l.state.channelId) && void 0 !== o ? o : \"\",\n                validUntil: Date.now() + po,\n                localKey: null == t ? void 0 : t.getKeyInfo().ecies.private,\n                otherKey: p\n            });\n            e.sendMessage({\n                type: Eo.KEY_HANDSHAKE_ACK\n            }).catch((e)=>{}), null === (s = e.state.socket) || void 0 === s || s.emit(Co.PING, {\n                id: u,\n                clientType: h ? \"dapp\" : \"wallet\",\n                context: \"on_channel_reconnect\",\n                message: \"\"\n            }), yield null == n ? void 0 : n.persistChannelConfig(r), l.emitServiceStatusEvent(), l.setConnectionStatus(vo.LINKED);\n        }\n        f && (e.emit(bo.CHANNEL_PERSISTENCE), null === (a = e.state.keyExchange) || void 0 === a || a.setKeysExchanged(!0), l.state.ready = !0, l.state.authorized = !0, l.emit(bo.AUTHORIZED), co(Object.assign(Object.assign({\n            id: null != u ? u : \"\",\n            event: h ? So.CONNECTED : So.CONNECTED_MOBILE\n        }, e.remote.state.originatorInfo), {\n            sdkVersion: e.remote.state.sdkVersion,\n            commLayer: e.state.communicationLayerPreference,\n            commLayerVersion: uo.version,\n            walletVersion: null === (c = e.remote.state.walletInfo) || void 0 === c ? void 0 : c.version\n        }), d.communicationServerUrl).catch((e)=>{}));\n    }), Mo = (e)=>new Promise((t)=>{\n        setTimeout(t, e);\n    }), Ao = (e, t, ...n)=>a(void 0, [\n        e,\n        t,\n        ...n\n    ], void 0, function*(e, t, n = 200) {\n        let r;\n        const i = Date.now();\n        let o = !1;\n        for(; !o;){\n            if (o = Date.now() - i > 3e5, r = t[e], void 0 !== r.elapsedTime) return r;\n            yield Mo(n);\n        }\n        throw new Error(`RPC ${e} timed out`);\n    }), Io = (e)=>a(void 0, void 0, void 0, function*() {\n        const { state: t } = e, { socket: n, channelId: r, context: i, isOriginator: o, isReconnecting: s } = t;\n        if (s) return io.SocketService(\"[SocketService: reconnectSocket()] Reconnection already in progress, skipping\", e), !1;\n        if (!n) return io.SocketService(\"[SocketService: reconnectSocket()] socket is not defined\", e), !1;\n        if (!r) return !1;\n        const { connected: c } = n;\n        t.isReconnecting = !0, t.reconnectionAttempts = 0, io.SocketService(`[SocketService: reconnectSocket()] connected=${c} trying to reconnect after socketio disconnection`, e);\n        try {\n            for(; 3 > t.reconnectionAttempts;){\n                if (io.SocketService(`[SocketService: reconnectSocket()] Attempt ${t.reconnectionAttempts + 1} of 3`, e), yield Mo(200), n.connected) return io.SocketService(\"Socket already connected --- ping to retrieve messages\"), n.emit(Co.PING, {\n                    id: r,\n                    clientType: o ? \"dapp\" : \"wallet\",\n                    context: \"on_channel_config\",\n                    message: \"\"\n                }), !0;\n                t.resumed = !0, n.connect(), e.emit(bo.SOCKET_RECONNECT);\n                try {\n                    if (yield new Promise((t, s)=>{\n                        n.emit(bo.JOIN_CHANNEL, {\n                            channelId: r,\n                            context: `${i}connect_again`,\n                            clientType: o ? \"dapp\" : \"wallet\"\n                        }, (n, r)=>a(void 0, void 0, void 0, function*() {\n                                try {\n                                    yield xo(e, n, r), t();\n                                } catch (e) {\n                                    s(e);\n                                }\n                            }));\n                    }), yield Mo(100), n.connected) return io.SocketService(`Reconnection successful on attempt ${t.reconnectionAttempts + 1}`), !0;\n                } catch (e) {\n                    io.SocketService(`Error during reconnection attempt ${t.reconnectionAttempts + 1}:`, e);\n                }\n                t.reconnectionAttempts += 1, 3 > t.reconnectionAttempts && (yield Mo(200));\n            }\n            return io.SocketService(\"Failed to reconnect after 3 attempts\"), !1;\n        } finally{\n            t.isReconnecting = !1, t.reconnectionAttempts = 0;\n        }\n    });\nfunction Ro(e, t) {\n    return a(this, void 0, void 0, function*() {\n        var n;\n        const r = null === (n = e.state.keyExchange) || void 0 === n ? void 0 : n.encryptMessage(JSON.stringify(t)), i = {\n            id: e.state.channelId,\n            context: e.state.context,\n            clientType: e.state.isOriginator ? \"dapp\" : \"wallet\",\n            message: r,\n            plaintext: e.state.hasPlaintext ? JSON.stringify(t) : void 0\n        };\n        return io.SocketService(`[SocketService: encryptAndSendMessage()] context=${e.state.context}`, i), t.type === Co.TERMINATE && (e.state.manualDisconnect = !0), new Promise((t, n)=>{\n            var r;\n            null === (r = e.state.socket) || void 0 === r || r.emit(bo.MESSAGE, i, (e, r)=>{\n                var i;\n                e && (io.SocketService(`[SocketService: encryptAndSendMessage()] error=${e}`), n(e)), io.SocketService(\"[encryptAndSendMessage] response\", r), t(null !== (i = null == r ? void 0 : r.success) && void 0 !== i && i);\n            });\n        });\n    });\n}\nvar Po;\n!function(e) {\n    e.RPC_CHECK = \"rpcCheck\", e.SKIPPED_RPC = \"skippedRpc\";\n}(Po || (Po = {}));\nconst Lo = [\n    \"eth_sendTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTransaction\",\n    \"personal_sign\",\n    \"wallet_requestPermissions\",\n    \"wallet_switchEthereumChain\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"metamask_connectSign\",\n    \"metamask_connectWith\",\n    \"metamask_batch\"\n].map((e)=>e.toLowerCase());\nconst Oo = [\n    {\n        event: bo.CLIENTS_CONNECTED,\n        handler: function(e, t) {\n            return (n)=>a(this, void 0, void 0, function*() {\n                    var n, r, i, o, s, a, c, l, d, u, h;\n                    const f = null !== (r = null === (n = e.remote.state.channelConfig) || void 0 === n ? void 0 : n.relayPersistence) && void 0 !== r && r;\n                    if (io.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected-${t}' relayPersistence=${f} resumed=${e.state.resumed}  clientsPaused=${e.state.clientsPaused} keysExchanged=${null === (i = e.state.keyExchange) || void 0 === i ? void 0 : i.areKeysExchanged()} isOriginator=${e.state.isOriginator}`), e.emit(bo.CLIENTS_CONNECTED, {\n                        isOriginator: e.state.isOriginator,\n                        keysExchanged: null === (o = e.state.keyExchange) || void 0 === o ? void 0 : o.areKeysExchanged(),\n                        context: e.state.context\n                    }), e.state.resumed) e.state.isOriginator || (io.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} 'clients_connected' / keysExchanged=${null === (s = e.state.keyExchange) || void 0 === s ? void 0 : s.areKeysExchanged()} -- backward compatibility`), null === (a = e.state.keyExchange) || void 0 === a || a.start({\n                        isOriginator: null !== (c = e.state.isOriginator) && void 0 !== c && c\n                    })), e.state.resumed = !1;\n                    else if (e.state.clientsPaused) io.SocketService(\"[SocketService: handleClientsConnected()] 'clients_connected' skip sending originatorInfo on pause\");\n                    else if (!e.state.isOriginator) {\n                        const t = !f;\n                        io.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected' / keysExchanged=${null === (l = e.state.keyExchange) || void 0 === l ? void 0 : l.areKeysExchanged()} -- force=${t} -- backward compatibility`), io.SocketService(`[SocketService: handleClientsConnected()] context=${e.state.context} on 'clients_connected' / keysExchanged=${null === (d = e.state.keyExchange) || void 0 === d ? void 0 : d.areKeysExchanged()} -- force=${t} -- backward compatibility`), null === (u = e.state.keyExchange) || void 0 === u || u.start({\n                            isOriginator: null !== (h = e.state.isOriginator) && void 0 !== h && h,\n                            force: t\n                        });\n                    }\n                    e.state.clientsConnected = !0, e.state.clientsPaused = !1;\n                });\n        }\n    },\n    {\n        event: bo.CHANNEL_CREATED,\n        handler: function(e, t) {\n            return (n)=>{\n                io.SocketService(`[SocketService: handleChannelCreated()] context=${e.state.context} on 'channel_created-${t}'`, n), e.emit(bo.CHANNEL_CREATED, n);\n            };\n        }\n    },\n    {\n        event: bo.CLIENTS_DISCONNECTED,\n        handler: function(e, t) {\n            return ()=>{\n                var n;\n                e.state.clientsConnected = !1, io.SocketService(`[SocketService: handlesClientsDisconnected()] context=${e.state.context} on 'clients_disconnected-${t}'`), e.remote.state.relayPersistence ? io.SocketService(`[SocketService: handlesClientsDisconnected()] context=${e.state.context} on 'clients_disconnected-${t}' - relayPersistence enabled, skipping key exchange cleanup.`) : (e.state.isOriginator && !e.state.clientsPaused && (null === (n = e.state.keyExchange) || void 0 === n || n.clean()), e.emit(bo.CLIENTS_DISCONNECTED, t));\n            };\n        }\n    },\n    {\n        event: bo.CONFIG,\n        handler: function(e, t) {\n            return (n)=>a(this, void 0, void 0, function*() {\n                    var r, i, o;\n                    io.SocketService(`[SocketService: handleChannelConfig()] update relayPersistence on 'config-${t}'`, n);\n                    const { persistence: s, walletKey: a } = n;\n                    e.state.isOriginator && e.remote.state.channelConfig ? (n.walletKey && !e.remote.state.channelConfig.otherKey && (io.SocketService(`Setting wallet key ${a}`), e.remote.state.channelConfig.otherKey = a, e.getKeyExchange().setOtherPublicKey(n.walletKey), null === (r = e.state.keyExchange) || void 0 === r || r.setKeysExchanged(!0), yield e.remote.sendMessage({\n                        type: Eo.KEY_HANDSHAKE_ACK\n                    }), yield e.remote.sendMessage({\n                        type: Co.PING\n                    }), yield null === (i = e.remote.state.storageManager) || void 0 === i ? void 0 : i.persistChannelConfig(e.remote.state.channelConfig)), !0 !== s || e.remote.state.channelConfig.relayPersistence || (io.SocketService(`Setting relay persistence ${s}`), e.remote.state.channelConfig.relayPersistence = s, e.remote.state.relayPersistence = !0, e.remote.emit(bo.CHANNEL_PERSISTENCE), e.remote.state.authorized = !0, e.remote.state.ready = !0, e.remote.emit(bo.AUTHORIZED), yield null === (o = e.remote.state.storageManager) || void 0 === o ? void 0 : o.persistChannelConfig(e.remote.state.channelConfig))) : e.state.isOriginator || n.persistence && (e.remote.state.relayPersistence = !0, e.remote.emit(bo.CHANNEL_PERSISTENCE));\n                });\n        }\n    },\n    {\n        event: bo.MESSAGE,\n        handler: function(e, t) {\n            return (n)=>{\n                var r, i, o, s, a, c, l, d, u, h, f, p, g, m, y, v, b, w;\n                const { ackId: E, message: C, error: S } = n, _ = null !== (r = e.remote.state.relayPersistence) && void 0 !== r && r;\n                if (io.SocketService(`[SocketService handleMessage()]  relayPersistence=${_}  context=${e.state.context} on 'message' ${t} keysExchanged=${null === (i = e.state.keyExchange) || void 0 === i ? void 0 : i.areKeysExchanged()}`, n), S) throw io.SocketService(`\\n      [SocketService handleMessage()] context=${e.state.context}::on 'message' error=${S}`), new Error(S);\n                const k = \"string\" == typeof C;\n                if (!k && (null == C ? void 0 : C.type) === Eo.KEY_HANDSHAKE_START) {\n                    if (_) return;\n                    return io.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' received HANDSHAKE_START isOriginator=${e.state.isOriginator}`, C), void (null === (o = e.state.keyExchange) || void 0 === o || o.start({\n                        isOriginator: null !== (s = e.state.isOriginator) && void 0 !== s && s,\n                        force: !0\n                    }));\n                }\n                if (!k && (null === (a = null == C ? void 0 : C.type) || void 0 === a ? void 0 : a.startsWith(\"key_handshake\"))) {\n                    if (_) return;\n                    return io.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' emit KEY_EXCHANGE`, C), void e.emit(wo.KEY_EXCHANGE, {\n                        message: C,\n                        context: e.state.context\n                    });\n                }\n                if (k && !(null === (c = e.state.keyExchange) || void 0 === c ? void 0 : c.areKeysExchanged())) {\n                    let t = !1;\n                    try {\n                        io.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' trying to decrypt message`), null === (l = e.state.keyExchange) || void 0 === l || l.decryptMessage(C), t = !0;\n                    } catch (t) {\n                        io.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' error`, t);\n                    }\n                    if (!t) return e.state.isOriginator ? null === (u = e.state.keyExchange) || void 0 === u || u.start({\n                        isOriginator: null !== (h = e.state.isOriginator) && void 0 !== h && h\n                    }) : e.sendMessage({\n                        type: Eo.KEY_HANDSHAKE_START\n                    }).catch((e)=>{}), void io.SocketService(`Message ignored because invalid key exchange status. step=${null === (f = e.state.keyExchange) || void 0 === f ? void 0 : f.getKeyInfo().step}`, null === (p = e.state.keyExchange) || void 0 === p ? void 0 : p.getKeyInfo(), C);\n                    io.SocketService(\"Invalid key exchange status detected --- updating it.\"), null === (d = e.state.keyExchange) || void 0 === d || d.setKeysExchanged(!0);\n                } else if (!k && (null == C ? void 0 : C.type)) return void e.emit(bo.MESSAGE, C);\n                if (!k) return void e.emit(bo.MESSAGE, C);\n                const x = null === (g = e.state.keyExchange) || void 0 === g ? void 0 : g.decryptMessage(C), M = JSON.parse(null != x ? x : \"{}\");\n                if (E && (null == E ? void 0 : E.length) > 0 && (io.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' ackid=${E} channelId=${t}`), null === (m = e.state.socket) || void 0 === m || m.emit(bo.MESSAGE_ACK, {\n                    ackId: E,\n                    channelId: t,\n                    clientType: e.state.isOriginator ? \"dapp\" : \"wallet\"\n                })), e.state.clientsPaused = (null == M ? void 0 : M.type) === Co.PAUSE, e.state.isOriginator && M.data) {\n                    const t = M.data, n = e.state.rpcMethodTracker[t.id];\n                    if (n) {\n                        const r = Date.now() - n.timestamp;\n                        io.SocketService(`[SocketService handleMessage()] context=${e.state.context}::on 'message' received answer for id=${t.id} method=${n.method} responseTime=${r}`, M), e.remote.state.analytics && Lo.includes(n.method.toLowerCase()) && co(Object.assign(Object.assign({\n                            id: null !== (y = e.remote.state.channelId) && void 0 !== y ? y : \"\",\n                            event: So.SDK_RPC_REQUEST_DONE,\n                            sdkVersion: e.remote.state.sdkVersion,\n                            commLayerVersion: uo.version\n                        }, e.remote.state.originatorInfo), {\n                            walletVersion: null === (v = e.remote.state.walletInfo) || void 0 === v ? void 0 : v.version,\n                            params: {\n                                method: n.method,\n                                from: \"mobile\"\n                            }\n                        }), e.remote.state.communicationServerUrl).catch((e)=>{});\n                        const i = Object.assign(Object.assign({}, n), {\n                            result: t.result,\n                            error: t.error ? {\n                                code: null === (b = t.error) || void 0 === b ? void 0 : b.code,\n                                message: null === (w = t.error) || void 0 === w ? void 0 : w.message\n                            } : void 0,\n                            elapsedTime: r\n                        });\n                        e.state.rpcMethodTracker[t.id] = i, e.emit(bo.RPC_UPDATE, i);\n                    }\n                }\n                e.emit(bo.MESSAGE, {\n                    message: M\n                });\n            };\n        }\n    },\n    {\n        event: bo.REJECTED,\n        handler: function(e, t) {\n            return (n)=>a(this, void 0, void 0, function*() {\n                    var n;\n                    e.state.isOriginator && !e.remote.state.ready ? (io.SocketService(`[SocketService: handleChannelRejected()] context=${e.state.context} channelId=${t} isOriginator=${e.state.isOriginator} ready=${e.remote.state.ready}`, e.remote.state.originatorInfo), co(Object.assign(Object.assign({\n                        id: t,\n                        event: So.REJECTED\n                    }, e.remote.state.originatorInfo), {\n                        sdkVersion: e.remote.state.sdkVersion,\n                        commLayer: e.state.communicationLayerPreference,\n                        commLayerVersion: uo.version,\n                        walletVersion: null === (n = e.remote.state.walletInfo) || void 0 === n ? void 0 : n.version\n                    }), e.remote.state.communicationServerUrl).catch((e)=>{}), yield e.remote.disconnect({\n                        terminate: !0\n                    }), e.remote.emit(bo.REJECTED, {\n                        channelId: t\n                    }), e.remote.setConnectionStatus(vo.DISCONNECTED)) : io.SocketService(`[SocketService: handleChannelRejected()] SKIP -- channelId=${t} isOriginator=${e.state.isOriginator} ready=${e.remote.state.ready}`);\n                });\n        }\n    },\n    {\n        event: \"clients_waiting_to_join\",\n        handler: function(e, t) {\n            return (n)=>{\n                io.SocketService(`[SocketService: handleClientsWaitingToJoin()] context=${e.state.context} on 'clients_waiting_to_join-${t}'`, n), e.emit(bo.CLIENTS_WAITING, n);\n            };\n        }\n    }\n], To = [\n    {\n        event: bo.KEY_INFO,\n        handler: function(e) {\n            return (t)=>{\n                io.SocketService(\"[SocketService: handleKeyInfo()] on 'KEY_INFO'\", t), e.emit(bo.KEY_INFO, t);\n            };\n        }\n    },\n    {\n        event: bo.KEYS_EXCHANGED,\n        handler: function(e) {\n            return ()=>{\n                var t, n, r;\n                io.SocketService(`[SocketService: handleKeysExchanged()] on 'keys_exchanged' keyschanged=${null === (t = e.state.keyExchange) || void 0 === t ? void 0 : t.areKeysExchanged()}`);\n                const { channelConfig: i } = e.remote.state;\n                if (i) {\n                    const t = e.getKeyExchange().getKeyInfo().ecies;\n                    i.localKey = t.private, i.otherKey = t.otherPubKey, e.remote.state.channelConfig = i, null === (n = e.remote.state.storageManager) || void 0 === n || n.persistChannelConfig(i).catch((e)=>{});\n                }\n                e.emit(bo.KEYS_EXCHANGED, {\n                    keysExchanged: null === (r = e.state.keyExchange) || void 0 === r ? void 0 : r.areKeysExchanged(),\n                    isOriginator: e.state.isOriginator\n                });\n                const o = {\n                    keyInfo: e.getKeyInfo()\n                };\n                e.emit(bo.SERVICE_STATUS, o);\n            };\n        }\n    }\n];\nfunction No(e, t) {\n    io.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} setting socket listeners for channel ${t}...`);\n    const { socket: n } = e.state, { keyExchange: r } = e.state;\n    n && e.state.isOriginator && (e.state.debug && (null == n || n.io.on(\"error\", (t)=>{\n        io.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=error`, t);\n    }), null == n || n.io.on(\"reconnect\", (t)=>{\n        io.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect`, t), Io(e).catch((e)=>{});\n    }), null == n || n.io.on(\"reconnect_error\", (t)=>{\n        io.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect_error`, t);\n    }), null == n || n.io.on(\"reconnect_failed\", ()=>{\n        io.SocketService(`[SocketService: setupChannelListener()] context=${e.state.context} socket event=reconnect_failed`);\n    })), null == n || n.on(\"disconnect\", (t)=>(io.SocketService(`[SocketService: setupChannelListener()] on 'disconnect' -- MetaMaskSDK socket disconnected '${t}' begin recovery...`), (function(e) {\n            return (t)=>{\n                io.SocketService(`[SocketService: handleDisconnect()] on 'disconnect' manualDisconnect=${e.state.manualDisconnect}`, t), e.state.manualDisconnect || (e.emit(bo.SOCKET_DISCONNECTED), Io(e).catch((e)=>{}));\n            };\n        })(e)(t)))), Oo.forEach(({ event: r, handler: i })=>{\n        null == n || n.on(`${r}-${t}`, i(e, t));\n    }), To.forEach(({ event: t, handler: n })=>{\n        null == r || r.on(t, n(e));\n    }), e.state.setupChannelListeners = !0;\n}\nclass Do extends eventemitter2__WEBPACK_IMPORTED_MODULE_2__.EventEmitter2 {\n    constructor(e){\n        super(), this.state = {\n            clientsConnected: !1,\n            clientsPaused: !1,\n            manualDisconnect: !1,\n            lastRpcId: void 0,\n            rpcMethodTracker: {},\n            hasPlaintext: !1,\n            communicationServerUrl: \"\",\n            focusListenerAdded: !1,\n            removeFocusListener: void 0,\n            isReconnecting: !1,\n            reconnectionAttempts: 0\n        }, this.options = e;\n        const { reconnect: n, communicationLayerPreference: r, communicationServerUrl: i, context: o, remote: s, logging: a } = e;\n        this.state.resumed = n, this.state.context = o, this.state.isOriginator = s.state.isOriginator, this.state.communicationLayerPreference = r, this.state.debug = !0 === (null == a ? void 0 : a.serviceLayer), this.remote = s, !0 === (null == a ? void 0 : a.serviceLayer) && debug__WEBPACK_IMPORTED_MODULE_1___default().enable(\"SocketService:Layer\"), this.state.communicationServerUrl = i, this.state.hasPlaintext = this.state.communicationServerUrl !== ho && !0 === (null == a ? void 0 : a.plaintext), io.SocketService(`[SocketService: constructor()] Socket IO url: ${this.state.communicationServerUrl}`), this.initSocket();\n    }\n    initSocket() {\n        var e;\n        const { otherPublicKey: t, ecies: n, logging: r } = this.options, i = {\n            autoConnect: !1,\n            transports: fo,\n            withCredentials: !0\n        }, o = this.state.communicationServerUrl;\n        io.SocketService(`[SocketService: initSocket()] Socket IO url: ${o}`), this.state.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_3__.io)(o, i), function(e) {\n            if (false) {}\n        }(this);\n        const a = {\n            communicationLayer: this,\n            otherPublicKey: t,\n            sendPublicKey: !1,\n            context: null !== (e = this.state.context) && void 0 !== e ? e : \"\",\n            ecies: n,\n            logging: r\n        };\n        this.state.keyExchange = new ko(a);\n    }\n    resetKeys() {\n        return io.SocketService(\"[SocketService: resetKeys()] Resetting keys.\"), void (null === (e = this.state.keyExchange) || void 0 === e || e.resetKeys());\n        var e;\n    }\n    createChannel() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                return a(this, void 0, void 0, function*() {\n                    var t, n, r;\n                    if (io.SocketService(`[SocketService: createChannel()] context=${e.state.context}`), e.state.socket || e.initSocket(), null === (t = e.state.socket) || void 0 === t ? void 0 : t.connected) throw new Error(\"socket already connected\");\n                    null === (n = e.state.socket) || void 0 === n || n.connect(), e.state.manualDisconnect = !1, e.state.isOriginator = !0;\n                    const i = (0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();\n                    e.state.channelId = i, No(e, i), yield new Promise((t, n)=>{\n                        var r;\n                        null === (r = e.state.socket) || void 0 === r || r.emit(bo.JOIN_CHANNEL, {\n                            channelId: i,\n                            context: `${e.state.context}createChannel`,\n                            clientType: \"dapp\"\n                        }, (r, i)=>a(this, void 0, void 0, function*() {\n                                try {\n                                    yield xo(e, r, i), t();\n                                } catch (e) {\n                                    n(e);\n                                }\n                            }));\n                    });\n                    const s = null === (r = e.state.keyExchange) || void 0 === r ? void 0 : r.getKeyInfo();\n                    return {\n                        channelId: i,\n                        pubKey: (null == s ? void 0 : s.ecies.public) || \"\",\n                        privKey: (null == s ? void 0 : s.ecies.private) || \"\"\n                    };\n                });\n            }(this);\n        });\n    }\n    connectToChannel({ channelId: e, withKeyExchange: t = !1, authorized: n }) {\n        return function(e) {\n            return a(this, arguments, void 0, function*({ options: e, instance: t }) {\n                const { channelId: n, authorized: r, withKeyExchange: i } = e, { state: o, remote: s } = t, { isOriginator: c = !1, socket: l, keyExchange: d } = o, { channelConfig: u } = s.state;\n                if (null == l ? void 0 : l.connected) throw new Error(\"socket already connected\");\n                if (c && (null == u ? void 0 : u.relayPersistence)) {\n                    const { localKey: e, otherKey: t } = u;\n                    e && t && (null == d || d.setRelayPersistence({\n                        localKey: e,\n                        otherKey: t\n                    }));\n                }\n                return Object.assign(o, {\n                    manualDisconnect: !1,\n                    withKeyExchange: i,\n                    isOriginator: c,\n                    channelId: n\n                }), null == l || l.connect(), No(t, n), !c && r && (null == d || d.setKeysExchanged(!0), Object.assign(s.state, {\n                    ready: !0,\n                    authorized: !0\n                })), new Promise((e)=>{\n                    var i;\n                    const s = null === (i = null == d ? void 0 : d.getKeyInfo()) || void 0 === i ? void 0 : i.ecies.public;\n                    null == l || l.emit(bo.JOIN_CHANNEL, {\n                        channelId: n,\n                        context: `${o.context}_connectToChannel`,\n                        clientType: c ? \"dapp\" : \"wallet\",\n                        publicKey: r && !c ? s : void 0\n                    }, (n, r)=>a(this, void 0, void 0, function*() {\n                            yield xo(t, n, r), e();\n                        }));\n                });\n            });\n        }({\n            options: {\n                channelId: e,\n                withKeyExchange: t,\n                authorized: n\n            },\n            instance: this\n        });\n    }\n    getKeyInfo() {\n        return this.state.keyExchange.getKeyInfo();\n    }\n    keyCheck() {\n        var e, t;\n        null === (t = (e = this).state.socket) || void 0 === t || t.emit(bo.MESSAGE, {\n            id: e.state.channelId,\n            context: e.state.context,\n            message: {\n                type: Eo.KEY_HANDSHAKE_CHECK,\n                pubkey: e.getKeyInfo().ecies.otherPubKey\n            }\n        });\n    }\n    getKeyExchange() {\n        return this.state.keyExchange;\n    }\n    sendMessage(e) {\n        return a(this, void 0, void 0, function*() {\n            return function(e, t) {\n                return a(this, void 0, void 0, function*() {\n                    var n, r, i;\n                    if (!e.state.channelId) throw io.SocketService(\"handleSendMessage: no channelId - Create a channel first\"), new Error(\"Create a channel first\");\n                    if (io.SocketService(`[SocketService: handleSendMessage()] context=${e.state.context} areKeysExchanged=${null === (n = e.state.keyExchange) || void 0 === n ? void 0 : n.areKeysExchanged()}`, t), null === (r = null == t ? void 0 : t.type) || void 0 === r ? void 0 : r.startsWith(\"key_handshake\")) return function(e, t) {\n                        var n;\n                        io.SocketService(`[SocketService: handleKeyHandshake()] context=${e.state.context}`, t), null === (n = e.state.socket) || void 0 === n || n.emit(bo.MESSAGE, {\n                            id: e.state.channelId,\n                            context: e.state.context,\n                            clientType: e.state.isOriginator ? \"dapp\" : \"wallet\",\n                            message: t\n                        });\n                    }(e, t), !0;\n                    !function(e, t) {\n                        var n;\n                        if (!(null === (n = e.state.keyExchange) || void 0 === n ? void 0 : n.areKeysExchanged()) && !e.remote.state.relayPersistence) throw io.SocketService(`[SocketService: validateKeyExchange()] context=${e.state.context} ERROR keys not exchanged`, t), new Error(\"Keys not exchanged BBB\");\n                    }(e, t), function(e, t) {\n                        var n;\n                        const r = null !== (n = null == t ? void 0 : t.method) && void 0 !== n ? n : \"\", i = null == t ? void 0 : t.id;\n                        e.state.isOriginator && i && (e.state.rpcMethodTracker[i] = {\n                            id: i,\n                            timestamp: Date.now(),\n                            method: r\n                        }, e.emit(bo.RPC_UPDATE, e.state.rpcMethodTracker[i]));\n                    }(e, t);\n                    const o = yield Ro(e, t);\n                    return e.remote.state.analytics && e.remote.state.isOriginator && t.method && Lo.includes(t.method.toLowerCase()) && co({\n                        id: null !== (i = e.remote.state.channelId) && void 0 !== i ? i : \"\",\n                        event: So.SDK_RPC_REQUEST,\n                        params: {\n                            method: t.method,\n                            from: \"mobile\"\n                        }\n                    }, e.remote.state.communicationServerUrl).catch((e)=>{}), (function(e, t) {\n                        return a(this, void 0, void 0, function*() {\n                            var n;\n                            const r = null == t ? void 0 : t.id, i = null !== (n = null == t ? void 0 : t.method) && void 0 !== n ? n : \"\";\n                            if (e.state.isOriginator && r) try {\n                                const n = Ao(r, e.state.rpcMethodTracker, 200).then((e)=>({\n                                        type: Po.RPC_CHECK,\n                                        result: e\n                                    })), o = (()=>a(this, void 0, void 0, function*() {\n                                        const t = yield ((e)=>a(void 0, [\n                                                e\n                                            ], void 0, function*({ rpcId: e, instance: t }) {\n                                                for(; t.state.lastRpcId === e || void 0 === t.state.lastRpcId;)yield Mo(200);\n                                                return t.state.lastRpcId;\n                                            }))({\n                                            instance: e,\n                                            rpcId: r\n                                        }), n = yield Ao(t, e.state.rpcMethodTracker, 200);\n                                        return {\n                                            type: Po.SKIPPED_RPC,\n                                            result: n\n                                        };\n                                    }))(), s = yield Promise.race([\n                                    n,\n                                    o\n                                ]);\n                                if (s.type === Po.RPC_CHECK) {\n                                    const e = s.result;\n                                    io.SocketService(`[SocketService:handleRpcReplies()] id=${t.id} ${i} ( ${e.elapsedTime} ms)`, e.result);\n                                } else {\n                                    if (s.type !== Po.SKIPPED_RPC) throw new Error(`Error handling RPC replies for ${r}`);\n                                    {\n                                        const t = Object.assign(Object.assign({}, e.state.rpcMethodTracker[r]), {\n                                            error: new Error(\"SDK_CONNECTION_ISSUE\")\n                                        });\n                                        e.emit(bo.RPC_UPDATE, t);\n                                        const n = {\n                                            data: Object.assign(Object.assign({}, t), {\n                                                jsonrpc: \"2.0\"\n                                            }),\n                                            name: \"metamask-provider\"\n                                        };\n                                        e.emit(bo.MESSAGE, {\n                                            message: n\n                                        });\n                                    }\n                                }\n                            } catch (e) {\n                                throw e;\n                            }\n                        });\n                    })(e, t).catch((e)=>{}), o;\n                });\n            }(this, e);\n        });\n    }\n    ping() {\n        return function(e) {\n            return a(this, void 0, void 0, function*() {\n                var t, n;\n                io.SocketService(`[SocketService: ping()] context=${e.state.context} originator=${e.state.isOriginator} keysExchanged=${null === (t = e.state.keyExchange) || void 0 === t ? void 0 : t.areKeysExchanged()}`), null === (n = e.state.socket) || void 0 === n || n.emit(Co.PING, {\n                    id: e.state.channelId,\n                    context: \"ping\",\n                    clientType: e.remote.state.isOriginator ? \"dapp\" : \"wallet\",\n                    message: \"\"\n                });\n            });\n        }(this);\n    }\n    pause() {\n        return function(e) {\n            return a(this, void 0, void 0, function*() {\n                var t, n;\n                io.SocketService(`[SocketService: pause()] context=${e.state.context}`), e.state.manualDisconnect = !0, (null === (t = e.state.keyExchange) || void 0 === t ? void 0 : t.areKeysExchanged()) && (yield e.sendMessage({\n                    type: Co.PAUSE\n                })), null === (n = e.state.socket) || void 0 === n || n.disconnect();\n            });\n        }(this);\n    }\n    isConnected() {\n        var e;\n        return null === (e = this.state.socket) || void 0 === e ? void 0 : e.connected;\n    }\n    resume() {\n        return function(e) {\n            return a(this, void 0, void 0, function*() {\n                const { state: t, remote: n } = e, { socket: r, channelId: i, context: o, keyExchange: s, isOriginator: c } = t, { isOriginator: l } = n.state;\n                if (io.SocketService(`[SocketService: resume()] channelId=${i} context=${o} connected=${null == r ? void 0 : r.connected} manualDisconnect=${t.manualDisconnect} resumed=${t.resumed} keysExchanged=${null == s ? void 0 : s.areKeysExchanged()}`), !i) throw io.SocketService(\"[SocketService: resume()] channelId is not defined\"), new Error(\"ChannelId is not defined\");\n                (null == r ? void 0 : r.connected) ? (io.SocketService(\"[SocketService: resume()] already connected.\"), r.emit(Co.PING, {\n                    id: i,\n                    clientType: l ? \"dapp\" : \"wallet\",\n                    context: \"on_channel_config\",\n                    message: \"\"\n                }), n.hasRelayPersistence() || (null == s ? void 0 : s.areKeysExchanged()) || (c ? yield e.sendMessage({\n                    type: Co.READY\n                }) : null == s || s.start({\n                    isOriginator: !1\n                }))) : (null == r || r.connect(), io.SocketService(`[SocketService: resume()] after connecting socket --\\x3e connected=${null == r ? void 0 : r.connected}`), null == r || r.emit(bo.JOIN_CHANNEL, {\n                    channelId: i,\n                    context: `${o}_resume`,\n                    clientType: l ? \"dapp\" : \"wallet\"\n                }, (t, n)=>a(this, void 0, void 0, function*() {\n                        try {\n                            yield xo(e, t, n);\n                        } catch (e) {}\n                    }))), t.manualDisconnect = !1, t.resumed = !0;\n            });\n        }(this);\n    }\n    getRPCMethodTracker() {\n        return this.state.rpcMethodTracker;\n    }\n    disconnect(e) {\n        return function(e, t) {\n            var n, r, i, o, s;\n            io.SocketService(`[SocketService: disconnect()] context=${e.state.context}`, t), (null == t ? void 0 : t.terminate) && (null === (r = (n = e.state).removeFocusListener) || void 0 === r || r.call(n), e.state.channelId = t.channelId, null === (i = e.state.socket) || void 0 === i || i.removeAllListeners(), null === (o = e.state.keyExchange) || void 0 === o || o.clean(), e.remote.state.ready = !1, e.state.socket = void 0, e.state.rpcMethodTracker = {}), e.state.manualDisconnect = !0, null === (s = e.state.socket) || void 0 === s || s.disconnect();\n        }(this, e);\n    }\n}\nvar $o, Bo, Ko;\nfunction jo(e) {\n    return ()=>a(this, void 0, void 0, function*() {\n            var t, n, r;\n            const { state: i } = e;\n            if (i.authorized) return;\n            yield (()=>a(this, void 0, void 0, function*() {\n                    for(; !i.walletInfo;)yield Mo(500);\n                }))();\n            const o = \"7.3\".localeCompare((null === (t = i.walletInfo) || void 0 === t ? void 0 : t.version) || \"\");\n            if (io.RemoteCommunication(`[RemoteCommunication: handleAuthorizedEvent()] HACK 'authorized' version=${null === (n = i.walletInfo) || void 0 === n ? void 0 : n.version} compareValue=${o}`), 1 !== o) return;\n            const s = i.platformType === Bo.MobileWeb || i.platformType === Bo.ReactNative || i.platformType === Bo.MetaMaskMobileWebview;\n            io.RemoteCommunication(`[RemoteCommunication: handleAuthorizedEvent()] HACK 'authorized' platform=${i.platformType} secure=${s} channel=${i.channelId} walletVersion=${null === (r = i.walletInfo) || void 0 === r ? void 0 : r.version}`), s && (i.authorized = !0, e.emit(bo.AUTHORIZED));\n        });\n}\nfunction Uo(e) {\n    return (t)=>{\n        const { state: n } = e;\n        io.RemoteCommunication(`[RemoteCommunication: handleChannelCreatedEvent()] context=${n.context} on 'channel_created' channelId=${t}`), e.emit(bo.CHANNEL_CREATED, t);\n    };\n}\nfunction Ho(e, t) {\n    return ()=>{\n        var n, r, i, o;\n        const { state: s } = e;\n        io.RemoteCommunication(`[RemoteCommunication: handleClientsConnectedEvent()] on 'clients_connected' channel=${s.channelId} keysExchanged=${null === (r = null === (n = s.communicationLayer) || void 0 === n ? void 0 : n.getKeyInfo()) || void 0 === r ? void 0 : r.keysExchanged}`), s.analytics && co(Object.assign(Object.assign({\n            id: null !== (i = s.channelId) && void 0 !== i ? i : \"\",\n            event: s.reconnection ? So.RECONNECT : s.isOriginator ? So.REQUEST : So.REQUEST_MOBILE\n        }, s.originatorInfo), {\n            commLayer: t,\n            sdkVersion: s.sdkVersion,\n            walletVersion: null === (o = s.walletInfo) || void 0 === o ? void 0 : o.version,\n            commLayerVersion: uo.version\n        }), s.communicationServerUrl).catch((e)=>{}), s.clientsConnected = !0, s.originatorInfoSent = !1, e.emit(bo.CLIENTS_CONNECTED);\n    };\n}\nfunction Fo(e) {\n    return (t)=>{\n        const { state: n } = e;\n        io.RemoteCommunication(`[RemoteCommunication: handleClientsDisconnectedEvent()] context=${n.context} on 'clients_disconnected' channelId=${t}`), n.relayPersistence || (n.clientsConnected = !1, n.ready = !1, n.authorized = !1), e.emit(bo.CLIENTS_DISCONNECTED, n.channelId), e.setConnectionStatus(vo.DISCONNECTED);\n    };\n}\nfunction zo(e) {\n    return (t)=>{\n        var n;\n        const { state: r } = e;\n        if (io.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] context=${r.context} on 'clients_waiting' numberUsers=${t} ready=${r.ready} autoStarted=${r.originatorConnectStarted}`), e.setConnectionStatus(vo.WAITING), e.emit(bo.CLIENTS_WAITING, t), r.originatorConnectStarted) {\n            io.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] on 'clients_waiting' watch autoStarted=${r.originatorConnectStarted} timeout`, r.autoConnectOptions);\n            const t = (null === (n = r.autoConnectOptions) || void 0 === n ? void 0 : n.timeout) || 3e3, i = setTimeout(()=>{\n                io.RemoteCommunication(`[RemoteCommunication: handleClientsWaitingEvent()] setTimeout(${t}) terminate channelConfig`, r.autoConnectOptions), r.originatorConnectStarted = !1, r.ready || e.setConnectionStatus(vo.TIMEOUT), clearTimeout(i);\n            }, t);\n        }\n    };\n}\nfunction qo(e, t) {\n    return (n)=>{\n        var r, i, o, s, a, c, l, d;\n        const { state: u } = e;\n        if (io.RemoteCommunication(`[RemoteCommunication: handleKeysExchangedEvent()] context=${u.context} on commLayer.'keys_exchanged' channel=${u.channelId}`, n), null === (i = null === (r = u.communicationLayer) || void 0 === r ? void 0 : r.getKeyInfo()) || void 0 === i ? void 0 : i.keysExchanged) {\n            const t = Object.assign(Object.assign({}, u.channelConfig), {\n                channelId: null !== (o = u.channelId) && void 0 !== o ? o : \"\",\n                validUntil: (null === (s = u.channelConfig) || void 0 === s ? void 0 : s.validUntil) || po,\n                localKey: u.communicationLayer.getKeyInfo().ecies.private,\n                otherKey: u.communicationLayer.getKeyInfo().ecies.otherPubKey\n            });\n            null === (a = u.storageManager) || void 0 === a || a.persistChannelConfig(t).catch((e)=>{}), e.setConnectionStatus(vo.LINKED);\n        }\n        !function(e, t) {\n            var n, r, i, o, s, a, c, l;\n            const { state: d } = e;\n            io.RemoteCommunication(`[RemoteCommunication: setLastActiveDate()] channel=${d.channelId}`, t);\n            const u = Object.assign(Object.assign({}, d.channelConfig), {\n                channelId: null !== (n = d.channelId) && void 0 !== n ? n : \"\",\n                validUntil: null !== (i = null === (r = d.channelConfig) || void 0 === r ? void 0 : r.validUntil) && void 0 !== i ? i : 0,\n                relayPersistence: d.relayPersistence,\n                localKey: null === (s = null === (o = d.communicationLayer) || void 0 === o ? void 0 : o.state.keyExchange) || void 0 === s ? void 0 : s.getKeyInfo().ecies.private,\n                otherKey: null === (c = null === (a = d.communicationLayer) || void 0 === a ? void 0 : a.state.keyExchange) || void 0 === c ? void 0 : c.getKeyInfo().ecies.otherPubKey,\n                lastActive: t.getTime()\n            });\n            null === (l = d.storageManager) || void 0 === l || l.persistChannelConfig(u);\n        }(e, new Date), u.analytics && u.channelId && co(Object.assign(Object.assign({\n            id: u.channelId,\n            event: n.isOriginator ? So.CONNECTED : So.CONNECTED_MOBILE\n        }, u.originatorInfo), {\n            sdkVersion: u.sdkVersion,\n            commLayer: t,\n            commLayerVersion: uo.version,\n            walletVersion: null === (c = u.walletInfo) || void 0 === c ? void 0 : c.version\n        }), u.communicationServerUrl).catch((e)=>{}), u.isOriginator = n.isOriginator, n.isOriginator || (null === (l = u.communicationLayer) || void 0 === l || l.sendMessage({\n            type: Co.READY\n        }), u.ready = !0, u.paused = !1), n.isOriginator && !u.originatorInfoSent && (null === (d = u.communicationLayer) || void 0 === d || d.sendMessage({\n            type: Co.ORIGINATOR_INFO,\n            originatorInfo: u.originatorInfo,\n            originator: u.originatorInfo\n        }), u.originatorInfoSent = !0);\n    };\n}\nfunction Vo(e) {\n    return (t)=>{\n        let n = t;\n        t.message && (n = n.message), function(e, t) {\n            const { state: n } = t;\n            if (io.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] context=${n.context} on 'message' typeof=${typeof e}`, e), t.state.ready = !0, n.isOriginator || e.type !== Co.ORIGINATOR_INFO) if (n.isOriginator && e.type === Co.WALLET_INFO) !function(e, t) {\n                const { state: n } = e;\n                n.walletInfo = t.walletInfo, n.paused = !1;\n            }(t, e);\n            else {\n                if (n.isOriginator && e.type === Co.WALLET_INIT) (function(e, t) {\n                    return a(this, void 0, void 0, function*() {\n                        var n, r, i;\n                        const { state: o } = e;\n                        if (o.isOriginator) {\n                            const o = t.data || {};\n                            if (\"object\" == typeof o && \"accounts\" in o && \"chainId\" in o && \"walletKey\" in o) try {\n                                const { channelConfig: t } = e.state;\n                                if (io.RemoteCommunication(\"WALLET_INIT: channelConfig\", JSON.stringify(t, null, 2)), t) {\n                                    const s = o.accounts, a = o.chainId, c = o.walletKey;\n                                    let l, d = !1;\n                                    \"deeplinkProtocol\" in o && (d = Boolean(o.deeplinkProtocol), e.state.deeplinkProtocolAvailable = d), \"walletVersion\" in o && (l = o.walletVersion), yield null === (n = e.state.storageManager) || void 0 === n ? void 0 : n.persistChannelConfig(Object.assign(Object.assign({}, t), {\n                                        otherKey: c,\n                                        walletVersion: l,\n                                        deeplinkProtocolAvailable: d,\n                                        relayPersistence: !0\n                                    })), yield null === (r = e.state.storageManager) || void 0 === r ? void 0 : r.persistAccounts(s), yield null === (i = e.state.storageManager) || void 0 === i ? void 0 : i.persistChainId(a);\n                                }\n                                e.emit(bo.WALLET_INIT, {\n                                    accounts: o.accounts,\n                                    chainId: o.chainId\n                                });\n                            } catch (n) {}\n                        }\n                    });\n                })(t, e).catch((e)=>{\n                    io.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] error=${e}`);\n                });\n                else if (e.type === Co.TERMINATE) (function(e) {\n                    return a(this, void 0, void 0, function*() {\n                        const { state: t } = e;\n                        t.isOriginator && (yield Jo({\n                            options: {\n                                terminate: !0,\n                                sendMessage: !1\n                            },\n                            instance: e\n                        }), e.emit(bo.TERMINATE));\n                    });\n                })(t).catch((e)=>{\n                    io.RemoteCommunication(`[RemoteCommunication: onCommunicationLayerMessage()] error=${e}`);\n                });\n                else if (e.type === Co.PAUSE) !function(e) {\n                    const { state: t } = e;\n                    t.paused = !0, e.setConnectionStatus(vo.PAUSED);\n                }(t);\n                else if (e.type === Co.READY && n.isOriginator) !function(e) {\n                    const { state: t } = e;\n                    e.setConnectionStatus(vo.LINKED);\n                    const n = t.paused;\n                    t.paused = !1, e.emit(bo.CLIENTS_READY, {\n                        isOriginator: t.isOriginator,\n                        walletInfo: t.walletInfo\n                    }), n && (t.authorized = !0, e.emit(bo.AUTHORIZED));\n                }(t);\n                else {\n                    if (e.type === Co.OTP && n.isOriginator) return void function(e, t) {\n                        var n;\n                        const { state: r } = e;\n                        e.emit(bo.OTP, t.otpAnswer), 1 === \"6.6\".localeCompare((null === (n = r.walletInfo) || void 0 === n ? void 0 : n.version) || \"\") && e.emit(bo.SDK_RPC_CALL, {\n                            method: mo.ETH_REQUESTACCOUNTS,\n                            params: []\n                        });\n                    }(t, e);\n                    e.type === Co.AUTHORIZED && n.isOriginator && function(e) {\n                        const { state: t } = e;\n                        t.authorized = !0, e.emit(bo.AUTHORIZED);\n                    }(t);\n                }\n                t.emit(bo.MESSAGE, e);\n            }\n            else !function(e, t) {\n                var n;\n                const { state: r } = e;\n                null === (n = r.communicationLayer) || void 0 === n || n.sendMessage({\n                    type: Co.WALLET_INFO,\n                    walletInfo: r.walletInfo\n                }), r.originatorInfo = t.originatorInfo || t.originator, e.emit(bo.CLIENTS_READY, {\n                    isOriginator: r.isOriginator,\n                    originatorInfo: r.originatorInfo\n                }), r.paused = !1;\n            }(t, e);\n        }(n, e);\n    };\n}\nfunction Wo(e) {\n    return ()=>{\n        const { state: t } = e;\n        io.RemoteCommunication(\"[RemoteCommunication: handleSocketReconnectEvent()] on 'socket_reconnect' -- reset key exchange status / set ready to false\"), t.ready = !1, t.authorized = !1, yo(t), e.emitServiceStatusEvent({\n            context: \"socket_reconnect\"\n        });\n    };\n}\nfunction Go(e) {\n    return ()=>{\n        const { state: t } = e;\n        io.RemoteCommunication(\"[RemoteCommunication: handleSocketDisconnectedEvent()] on 'socket_Disconnected' set ready to false\"), t.ready = !1;\n    };\n}\nfunction Zo(e) {\n    return ()=>a(this, void 0, void 0, function*() {\n            var t, n, r, i, o, s, a;\n            const { state: c } = e;\n            io.RemoteCommunication(`[RemoteCommunication: handleFullPersistenceEvent()] context=${c.context}`), e.state.ready = !0, e.state.clientsConnected = !0, e.state.authorized = !0, e.state.relayPersistence = !0, null === (t = e.state.communicationLayer) || void 0 === t || t.getKeyExchange().setKeysExchanged(!0), e.emit(bo.KEYS_EXCHANGED, {\n                keysExchanged: !0,\n                isOriginator: !0\n            }), e.emit(bo.AUTHORIZED), e.emit(bo.CLIENTS_READY), e.emit(bo.CHANNEL_PERSISTENCE);\n            try {\n                c.channelConfig = Object.assign(Object.assign({}, c.channelConfig), {\n                    localKey: null === (n = c.communicationLayer) || void 0 === n ? void 0 : n.getKeyExchange().getKeyInfo().ecies.private,\n                    otherKey: null === (r = c.communicationLayer) || void 0 === r ? void 0 : r.getKeyExchange().getOtherPublicKey(),\n                    channelId: null !== (i = c.channelId) && void 0 !== i ? i : \"\",\n                    validUntil: null !== (s = null === (o = c.channelConfig) || void 0 === o ? void 0 : o.validUntil) && void 0 !== s ? s : po,\n                    relayPersistence: !0\n                }), yield null === (a = c.storageManager) || void 0 === a ? void 0 : a.persistChannelConfig(c.channelConfig);\n            } catch (t) {}\n        });\n}\nfunction Yo({ communicationLayerPreference: e, otherPublicKey: t, reconnect: n, ecies: r, communicationServerUrl: i = ho, instance: o }) {\n    var s, a, c, l, d, u, h, f, p, g, m;\n    const { state: y } = o;\n    if (io.RemoteCommunication(\"[initCommunicationLayer()] \", JSON.stringify(y, null, 2)), e !== $o.SOCKET) throw new Error(\"Invalid communication protocol\");\n    y.communicationLayer = new Do({\n        communicationLayerPreference: e,\n        otherPublicKey: t,\n        reconnect: n,\n        transports: y.transports,\n        communicationServerUrl: i,\n        context: y.context,\n        ecies: r,\n        logging: y.logging,\n        remote: o\n    });\n    let v = \"undefined\" != typeof document && document.URL || \"\", b = \"undefined\" != typeof document && document.title || \"\";\n    (null === (s = y.dappMetadata) || void 0 === s ? void 0 : s.url) && (v = y.dappMetadata.url), (null === (a = y.dappMetadata) || void 0 === a ? void 0 : a.name) && (b = y.dappMetadata.name);\n    const w = null !== (u = null !== (l = null === (c = y.dappMetadata) || void 0 === c ? void 0 : c.name) && void 0 !== l ? l : null === (d = y.dappMetadata) || void 0 === d ? void 0 : d.url) && void 0 !== u ? u : \"N/A\", E =  false ? 0 : w, C = {\n        url: v,\n        title: b,\n        source: null === (f = y.dappMetadata) || void 0 === f ? void 0 : f.source,\n        dappId: E,\n        icon: (null === (p = y.dappMetadata) || void 0 === p ? void 0 : p.iconUrl) || (null === (g = y.dappMetadata) || void 0 === g ? void 0 : g.base64Icon),\n        platform: y.platformType,\n        apiVersion: uo.version,\n        connector: null === (m = y.dappMetadata) || void 0 === m ? void 0 : m.connector\n    };\n    y.originatorInfo = C;\n    const S = {\n        [bo.AUTHORIZED]: jo(o),\n        [bo.MESSAGE]: Vo(o),\n        [bo.CHANNEL_PERSISTENCE]: Zo(o),\n        [bo.CLIENTS_CONNECTED]: Ho(o, e),\n        [bo.KEYS_EXCHANGED]: qo(o, e),\n        [bo.SOCKET_DISCONNECTED]: Go(o),\n        [bo.SOCKET_RECONNECT]: Wo(o),\n        [bo.CLIENTS_DISCONNECTED]: Fo(o),\n        [bo.KEY_INFO]: ()=>{},\n        [bo.CHANNEL_CREATED]: Uo(o),\n        [bo.CLIENTS_WAITING]: zo(o),\n        [bo.RPC_UPDATE]: (e)=>{\n            o.emit(bo.RPC_UPDATE, e);\n        }\n    };\n    for (const [t, n] of Object.entries(S))try {\n        y.communicationLayer.on(t, n);\n    } catch (e) {}\n}\nfunction Jo(e) {\n    return a(this, arguments, void 0, function*({ options: e, instance: t }) {\n        const { state: n } = t;\n        return io.RemoteCommunication(`[RemoteCommunication: disconnect()] channel=${n.channelId}`, e), new Promise((r, i)=>{\n            var s, a, c, l, d, u;\n            (null == e ? void 0 : e.terminate) ? (t.state.ready && co({\n                id: null !== (s = t.state.channelId) && void 0 !== s ? s : \"\",\n                event: So.TERMINATED\n            }, t.state.communicationServerUrl).catch((e)=>{}), n.ready = !1, n.paused = !1, null === (a = n.storageManager) || void 0 === a || a.terminate(null !== (c = n.channelId) && void 0 !== c ? c : \"\"), t.state.terminated = !0, e.sendMessage ? (null === (l = n.communicationLayer) || void 0 === l ? void 0 : l.getKeyInfo().keysExchanged) && t.state.communicationLayer && Ro(t.state.communicationLayer, {\n                type: Co.TERMINATE\n            }).then(()=>{\n                r(!0);\n            }).catch((e)=>{\n                i(e);\n            }) : r(!0), n.authorized = !1, n.relayPersistence = !1, n.channelId = (0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(), e.channelId = n.channelId, n.channelConfig = void 0, n.originatorConnectStarted = !1, null === (d = n.communicationLayer) || void 0 === d || d.disconnect(e), t.setConnectionStatus(vo.TERMINATED)) : (null === (u = n.communicationLayer) || void 0 === u || u.disconnect(e), t.setConnectionStatus(vo.DISCONNECTED), r(!0));\n        });\n    });\n}\n($o || ($o = {})).SOCKET = \"socket\", function(e) {\n    e.NonBrowser = \"nodejs\", e.MetaMaskMobileWebview = \"in-app-browser\", e.DesktopWeb = \"web-desktop\", e.MobileWeb = \"web-mobile\", e.ReactNative = \"react-native\";\n}(Bo || (Bo = {}));\nclass Xo extends eventemitter2__WEBPACK_IMPORTED_MODULE_2__.EventEmitter2 {\n    constructor(e){\n        super(), this.state = {\n            ready: !1,\n            authorized: !1,\n            isOriginator: !1,\n            terminated: !1,\n            protocolVersion: 1,\n            paused: !1,\n            deeplinkProtocolAvailable: !1,\n            platformType: \"metamask-mobile\",\n            analytics: !1,\n            reconnection: !1,\n            originatorInfoSent: !1,\n            communicationServerUrl: ho,\n            context: \"\",\n            persist: !1,\n            clientsConnected: !1,\n            sessionDuration: po,\n            originatorConnectStarted: !1,\n            debug: !1,\n            _connectionStatus: vo.DISCONNECTED\n        }, this._options = e;\n        const { platformType: n, communicationLayerPreference: r, otherPublicKey: i, reconnect: o, walletInfo: s, dappMetadata: a, protocolVersion: c, transports: l, context: d, relayPersistence: u, ecies: h, analytics: f = !1, storage: p, sdkVersion: g, communicationServerUrl: m = ho, logging: y, autoConnect: v = {\n            timeout: go\n        } } = e;\n        this.state.otherPublicKey = i, this.state.dappMetadata = a, this.state.walletInfo = s, this.state.transports = l, this.state.platformType = n, this.state.analytics = f, this.state.protocolVersion = null != c ? c : 1, this.state.isOriginator = !i, this.state.relayPersistence = u, this.state.communicationServerUrl = m, this.state.context = d, this.state.terminated = !1, this.state.sdkVersion = g, this.setMaxListeners(50), this.setConnectionStatus(vo.DISCONNECTED), (null == p ? void 0 : p.duration) && (this.state.sessionDuration = po), this.state.storageOptions = p, this.state.autoConnectOptions = v, this.state.debug = !0 === (null == y ? void 0 : y.remoteLayer), !0 === (null == y ? void 0 : y.remoteLayer) && debug__WEBPACK_IMPORTED_MODULE_1___default().enable(\"RemoteCommunication:Layer\"), !0 === (null == y ? void 0 : y.serviceLayer) && debug__WEBPACK_IMPORTED_MODULE_1___default().enable(\"SocketService:Layer\"), !0 === (null == y ? void 0 : y.eciesLayer) && debug__WEBPACK_IMPORTED_MODULE_1___default().enable(\"ECIES:Layer\"), !0 === (null == y ? void 0 : y.keyExchangeLayer) && debug__WEBPACK_IMPORTED_MODULE_1___default().enable(\"KeyExchange:Layer\"), this.state.logging = y, (null == p ? void 0 : p.storageManager) && (this.state.storageManager = p.storageManager), io.RemoteCommunication(`[RemoteCommunication: constructor()] protocolVersion=${c} relayPersistence=${u} isOriginator=${this.state.isOriginator} communicationLayerPreference=${r} otherPublicKey=${i} reconnect=${o}`), this.state.isOriginator || Yo({\n            communicationLayerPreference: r,\n            otherPublicKey: i,\n            reconnect: o,\n            ecies: h,\n            communicationServerUrl: m,\n            instance: this\n        }), this.emitServiceStatusEvent({\n            context: \"constructor\"\n        });\n    }\n    initFromDappStorage() {\n        return a(this, void 0, void 0, function*() {\n            var e;\n            if (this.state.storageManager) {\n                const t = yield this.state.storageManager.getPersistedChannelConfig({});\n                t && (this.state.channelConfig = t, this.state.channelId = t.channelId, this.state.deeplinkProtocolAvailable = null !== (e = t.deeplinkProtocolAvailable) && void 0 !== e && e, t.relayPersistence && (this.state.authorized = !0, this.state.ready = !0, this.setConnectionStatus(vo.LINKED), yield this.connectToChannel({\n                    channelId: t.channelId\n                })));\n            }\n            Yo({\n                communicationLayerPreference: $o.SOCKET,\n                otherPublicKey: this.state.otherPublicKey,\n                reconnect: this._options.reconnect,\n                ecies: this._options.ecies,\n                communicationServerUrl: this.state.communicationServerUrl,\n                instance: this\n            });\n        });\n    }\n    originatorSessionConnect() {\n        return a(this, void 0, void 0, function*() {\n            return yield function(e) {\n                return a(this, void 0, void 0, function*() {\n                    var t;\n                    const { state: n } = e;\n                    if (!n.storageManager) return void io.RemoteCommunication(\"[RemoteCommunication: originatorSessionConnect()] no storage manager defined - skip\");\n                    const r = yield n.storageManager.getPersistedChannelConfig({});\n                    if (io.RemoteCommunication(`[RemoteCommunication: originatorSessionConnect()] autoStarted=${n.originatorConnectStarted} channelConfig`, r), null === (t = n.communicationLayer) || void 0 === t ? void 0 : t.isConnected()) return io.RemoteCommunication(\"[RemoteCommunication: originatorSessionConnect()] socket already connected - skip\"), r;\n                    if (r) {\n                        if (r.validUntil > Date.now()) return n.channelConfig = r, n.originatorConnectStarted = !0, n.channelId = null == r ? void 0 : r.channelId, n.reconnection = !0, r;\n                        io.RemoteCommunication(\"[RemoteCommunication: autoConnect()] Session has expired\");\n                    }\n                    n.originatorConnectStarted = !1;\n                });\n            }(this);\n        });\n    }\n    generateChannelIdConnect() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                return a(this, void 0, void 0, function*() {\n                    var t, n, r, i, o, s;\n                    if (!e.communicationLayer) throw new Error(\"communication layer not initialized\");\n                    if (e.ready) throw new Error(\"Channel already connected\");\n                    if (e.channelId && (null === (t = e.communicationLayer) || void 0 === t ? void 0 : t.isConnected())) return e.channelConfig = Object.assign(Object.assign({}, e.channelConfig), {\n                        channelId: e.channelId,\n                        validUntil: Date.now() + e.sessionDuration\n                    }), null === (n = e.storageManager) || void 0 === n || n.persistChannelConfig(e.channelConfig), {\n                        channelId: e.channelId,\n                        privKey: null === (i = null === (r = e.communicationLayer) || void 0 === r ? void 0 : r.getKeyInfo()) || void 0 === i ? void 0 : i.ecies.private,\n                        pubKey: null === (s = null === (o = e.communicationLayer) || void 0 === o ? void 0 : o.getKeyInfo()) || void 0 === s ? void 0 : s.ecies.public\n                    };\n                    io.RemoteCommunication(\"[RemoteCommunication: generateChannelId()]\");\n                    const a = yield e.communicationLayer.createChannel();\n                    io.RemoteCommunication(\"[RemoteCommunication: generateChannelId()] channel created\", a);\n                    const c = Object.assign(Object.assign({}, e.channelConfig), {\n                        channelId: a.channelId,\n                        localKey: a.privKey,\n                        validUntil: Date.now() + e.sessionDuration\n                    });\n                    return e.channelId = a.channelId, e.channelConfig = c, {\n                        channelId: e.channelId,\n                        pubKey: a.pubKey,\n                        privKey: a.privKey\n                    };\n                });\n            }(this.state);\n        });\n    }\n    clean() {\n        return yo(this.state);\n    }\n    connectToChannel({ channelId: e, withKeyExchange: t, authorized: n }) {\n        return function(e) {\n            return a(this, arguments, void 0, function*({ channelId: e, withKeyExchange: t, authorized: n, state: r }) {\n                var o, s, a;\n                if (!(0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(e)) throw io.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${r.context} invalid channel channelId=${e}`), new Error(`Invalid channel ${e}`);\n                if (io.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${r.context} channelId=${e} withKeyExchange=${t}`), null === (o = r.communicationLayer) || void 0 === o ? void 0 : o.isConnected()) return void io.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${r.context} already connected - interrupt connection.`);\n                r.channelId = e, yield null === (s = r.communicationLayer) || void 0 === s ? void 0 : s.connectToChannel({\n                    channelId: e,\n                    authorized: n,\n                    withKeyExchange: t\n                });\n                const c = Object.assign(Object.assign({}, r.channelConfig), {\n                    channelId: e,\n                    validUntil: Date.now() + r.sessionDuration\n                });\n                r.channelConfig = c, null === (a = r.storageManager) || void 0 === a || a.persistChannelConfig(c);\n            });\n        }({\n            channelId: e,\n            authorized: n,\n            withKeyExchange: t,\n            state: this.state\n        });\n    }\n    sendMessage(e) {\n        return function(e, t) {\n            return a(this, void 0, void 0, function*() {\n                var n, r;\n                const { state: i } = e;\n                io.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${i.context} paused=${i.paused} ready=${i.ready} relayPersistence=${i.relayPersistence} authorized=${i.authorized} socket=${null === (n = i.communicationLayer) || void 0 === n ? void 0 : n.isConnected()} clientsConnected=${i.clientsConnected} status=${i._connectionStatus}`, t), i.relayPersistence || i.ready && (null === (r = i.communicationLayer) || void 0 === r ? void 0 : r.isConnected()) && i.clientsConnected || (io.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${i.context}  SKIP message waiting for MM mobile readiness.`), yield new Promise((t)=>{\n                    e.once(bo.CLIENTS_READY, t);\n                }), io.RemoteCommunication(`[RemoteCommunication: sendMessage()] context=${i.context}  AFTER SKIP / READY -- sending pending message`));\n                try {\n                    const n = yield function(e, t) {\n                        return a(this, void 0, void 0, function*() {\n                            return new Promise((n)=>{\n                                var r;\n                                const { state: i } = e;\n                                io.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] context=${i.context} ready=${i.ready} authorized=${i.authorized} method=${t.method}`), !i.isOriginator || i.authorized || i.relayPersistence ? null === (r = i.communicationLayer) || void 0 === r || r.sendMessage(t).then((e)=>{\n                                    n(e);\n                                }).catch((e)=>{\n                                    n(!1);\n                                }) : e.once(bo.AUTHORIZED, ()=>{\n                                    var e;\n                                    io.RemoteCommunication(`[RemoteCommunication: handleAuthorization()] context=${i.context}  AFTER SKIP / AUTHORIZED -- sending pending message`), null === (e = i.communicationLayer) || void 0 === e || e.sendMessage(t).then((e)=>{\n                                        n(e);\n                                    }).catch((e)=>{\n                                        n(!1);\n                                    });\n                                });\n                            });\n                        });\n                    }(e, t);\n                    return n;\n                } catch (e) {\n                    throw e;\n                }\n            });\n        }(this, e);\n    }\n    testStorage() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                return a(this, void 0, void 0, function*() {\n                    var t;\n                    const n = yield null === (t = e.storageManager) || void 0 === t ? void 0 : t.getPersistedChannelConfig();\n                    io.RemoteCommunication(\"[RemoteCommunication: testStorage()] res\", n);\n                });\n            }(this.state);\n        });\n    }\n    hasDeeplinkProtocol() {\n        return this.state.deeplinkProtocolAvailable;\n    }\n    getChannelConfig() {\n        return this.state.channelConfig;\n    }\n    isReady() {\n        return this.state.ready;\n    }\n    isConnected() {\n        var e;\n        return null === (e = this.state.communicationLayer) || void 0 === e ? void 0 : e.isConnected();\n    }\n    isAuthorized() {\n        return this.state.authorized;\n    }\n    isPaused() {\n        return this.state.paused;\n    }\n    getCommunicationLayer() {\n        return this.state.communicationLayer;\n    }\n    ping() {\n        return a(this, void 0, void 0, function*() {\n            var e;\n            io.RemoteCommunication(`[RemoteCommunication: ping()] channel=${this.state.channelId}`), yield null === (e = this.state.communicationLayer) || void 0 === e ? void 0 : e.ping();\n        });\n    }\n    testLogger() {\n        io.RemoteCommunication(`testLogger() channel=${this.state.channelId}`), io.SocketService(`testLogger() channel=${this.state.channelId}`), io.Ecies(`testLogger() channel=${this.state.channelId}`), io.KeyExchange(`testLogger() channel=${this.state.channelId}`);\n    }\n    keyCheck() {\n        var e;\n        io.RemoteCommunication(`[RemoteCommunication: keyCheck()] channel=${this.state.channelId}`), null === (e = this.state.communicationLayer) || void 0 === e || e.keyCheck();\n    }\n    setConnectionStatus(e) {\n        this.state._connectionStatus !== e && (this.state._connectionStatus = e, this.emit(bo.CONNECTION_STATUS, e), this.emitServiceStatusEvent({\n            context: \"setConnectionStatus\"\n        }));\n    }\n    emitServiceStatusEvent(e = {}) {\n        this.emit(bo.SERVICE_STATUS, this.getServiceStatus());\n    }\n    getConnectionStatus() {\n        return this.state._connectionStatus;\n    }\n    getServiceStatus() {\n        return {\n            originatorInfo: this.state.originatorInfo,\n            keyInfo: this.getKeyInfo(),\n            connectionStatus: this.state._connectionStatus,\n            channelConfig: this.state.channelConfig,\n            channelId: this.state.channelId\n        };\n    }\n    getKeyInfo() {\n        var e;\n        return null === (e = this.state.communicationLayer) || void 0 === e ? void 0 : e.getKeyInfo();\n    }\n    resetKeys() {\n        var e;\n        null === (e = this.state.communicationLayer) || void 0 === e || e.resetKeys();\n    }\n    setOtherPublicKey(e) {\n        var t;\n        const n = null === (t = this.state.communicationLayer) || void 0 === t ? void 0 : t.getKeyExchange();\n        if (!n) throw new Error(\"KeyExchange is not initialized.\");\n        n.getOtherPublicKey() !== e && n.setOtherPublicKey(e);\n    }\n    pause() {\n        return a(this, void 0, void 0, function*() {\n            var e;\n            io.RemoteCommunication(`[RemoteCommunication: pause()] channel=${this.state.channelId}`), yield null === (e = this.state.communicationLayer) || void 0 === e ? void 0 : e.pause(), this.setConnectionStatus(vo.PAUSED);\n        });\n    }\n    getVersion() {\n        return uo.version;\n    }\n    hasRelayPersistence() {\n        var e;\n        return null !== (e = this.state.relayPersistence) && void 0 !== e && e;\n    }\n    resume() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                return a(this, void 0, void 0, function*() {\n                    var t;\n                    const { state: n } = e;\n                    io.RemoteCommunication(`[RemoteCommunication: resume()] channel=${n.channelId}`), yield null === (t = n.communicationLayer) || void 0 === t ? void 0 : t.resume(), e.setConnectionStatus(vo.LINKED);\n                });\n            }(this);\n        });\n    }\n    encrypt(e) {\n        var t, n, r;\n        const i = null === (t = this.state.communicationLayer) || void 0 === t ? void 0 : t.getKeyExchange(), o = null == i ? void 0 : i.getOtherPublicKey();\n        if (!o) throw new Error(\"KeyExchange not completed\");\n        return null === (r = null === (n = this.state.communicationLayer) || void 0 === n ? void 0 : n.state.eciesInstance) || void 0 === r ? void 0 : r.encrypt(e, o);\n    }\n    decrypt(e) {\n        var t, n, r;\n        if (!(null === (t = this.state.communicationLayer) || void 0 === t ? void 0 : t.state.eciesInstance)) throw new Error(\"ECIES instance is not initialized\");\n        return null === (r = null === (n = this.state.communicationLayer) || void 0 === n ? void 0 : n.state.eciesInstance) || void 0 === r ? void 0 : r.decrypt(e);\n    }\n    getChannelId() {\n        return this.state.channelId;\n    }\n    getRPCMethodTracker() {\n        var e;\n        return null === (e = this.state.communicationLayer) || void 0 === e ? void 0 : e.getRPCMethodTracker();\n    }\n    reject({ channelId: e }) {\n        return function(e) {\n            return a(this, arguments, void 0, function*({ channelId: e, state: t }) {\n                var n, r, o;\n                if (!(0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(e)) throw io.RemoteCommunication(`[RemoteCommunication: connectToChannel()] context=${t.context} invalid channel channelId=${e}`), new Error(`Invalid channel ${e}`);\n                if (t.isOriginator) return void io.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} isOriginator=${t.isOriginator} channelId=${e}`);\n                const { socket: s } = null !== (r = null === (n = t.communicationLayer) || void 0 === n ? void 0 : n.state) && void 0 !== r ? r : {};\n                (null == s ? void 0 : s.connected) || (io.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} socket already connected`), null == s || s.connect()), co(Object.assign(Object.assign({\n                    id: e,\n                    event: So.REJECTED\n                }, t.originatorInfo), {\n                    sdkVersion: t.sdkVersion,\n                    commLayerVersion: uo.version,\n                    walletVersion: null === (o = t.walletInfo) || void 0 === o ? void 0 : o.version\n                }), t.communicationServerUrl).catch((e)=>{}), yield new Promise((n, r)=>{\n                    null == s || s.emit(bo.REJECTED, {\n                        channelId: e\n                    }, (e, i)=>{\n                        io.RemoteCommunication(`[RemoteCommunication: reject()] context=${t.context} socket=${null == s ? void 0 : s.id}`, {\n                            error: e,\n                            response: i\n                        }), e ? r(e) : n(i);\n                    });\n                });\n            });\n        }({\n            channelId: e,\n            state: this.state\n        });\n    }\n    disconnect(e) {\n        return a(this, void 0, void 0, function*() {\n            return Jo({\n                options: e,\n                instance: this\n            });\n        });\n    }\n}\n!function(e) {\n    e.RENEW = \"renew\", e.LINK = \"link\";\n}(Ko || (Ko = {}));\nvar Qo = \"ERC721\", es = \"ERC1155\", ts = {\n    errors: {\n        disconnected: ()=>\"MetaMask: Disconnected from chain. Attempting to connect.\",\n        permanentlyDisconnected: ()=>\"MetaMask: Disconnected from MetaMask background. Page reload required.\",\n        sendSiteMetadata: ()=>\"MetaMask: Failed to send site metadata. This is an internal error, please report this bug.\",\n        unsupportedSync: (e)=>`MetaMask: The MetaMask Ethereum provider does not support synchronous methods like ${e} without a callback parameter.`,\n        invalidDuplexStream: ()=>\"Must provide a Node.js-style duplex stream.\",\n        invalidNetworkParams: ()=>\"MetaMask: Received invalid network parameters. Please report this bug.\",\n        invalidRequestArgs: ()=>\"Expected a single, non-array, object argument.\",\n        invalidRequestMethod: ()=>\"'args.method' must be a non-empty string.\",\n        invalidRequestParams: ()=>\"'args.params' must be an object or array if provided.\",\n        invalidLoggerObject: ()=>\"'args.logger' must be an object if provided.\",\n        invalidLoggerMethod: (e)=>`'args.logger' must include required method '${e}'.`\n    },\n    info: {\n        connected: (e)=>`MetaMask: Connected to chain with ID \"${e}\".`\n    },\n    warnings: {\n        chainIdDeprecation: \"MetaMask: 'ethereum.chainId' is deprecated and may be removed in the future. Please use the 'eth_chainId' RPC method instead.\\nFor more information, see: https://github.com/MetaMask/metamask-improvement-proposals/discussions/23\",\n        networkVersionDeprecation: \"MetaMask: 'ethereum.networkVersion' is deprecated and may be removed in the future. Please use the 'net_version' RPC method instead.\\nFor more information, see: https://github.com/MetaMask/metamask-improvement-proposals/discussions/23\",\n        selectedAddressDeprecation: \"MetaMask: 'ethereum.selectedAddress' is deprecated and may be removed in the future. Please use the 'eth_accounts' RPC method instead.\\nFor more information, see: https://github.com/MetaMask/metamask-improvement-proposals/discussions/23\",\n        enableDeprecation: \"MetaMask: 'ethereum.enable()' is deprecated and may be removed in the future. Please use the 'eth_requestAccounts' RPC method instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1102\",\n        sendDeprecation: \"MetaMask: 'ethereum.send(...)' is deprecated and may be removed in the future. Please use 'ethereum.sendAsync(...)' or 'ethereum.request(...)' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193\",\n        events: {\n            close: \"MetaMask: The event 'close' is deprecated and may be removed in the future. Please use 'disconnect' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#disconnect\",\n            data: \"MetaMask: The event 'data' is deprecated and will be removed in the future. Use 'message' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message\",\n            networkChanged: \"MetaMask: The event 'networkChanged' is deprecated and may be removed in the future. Use 'chainChanged' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#chainchanged\",\n            notification: \"MetaMask: The event 'notification' is deprecated and may be removed in the future. Use 'message' instead.\\nFor more information, see: https://eips.ethereum.org/EIPS/eip-1193#message\"\n        },\n        rpc: {\n            ethDecryptDeprecation: \"MetaMask: The RPC method 'eth_decrypt' is deprecated and may be removed in the future.\\nFor more information, see: https://medium.com/metamask/metamask-api-method-deprecation-2b0564a84686\",\n            ethGetEncryptionPublicKeyDeprecation: \"MetaMask: The RPC method 'eth_getEncryptionPublicKey' is deprecated and may be removed in the future.\\nFor more information, see: https://medium.com/metamask/metamask-api-method-deprecation-2b0564a84686\",\n            walletWatchAssetNFTExperimental: \"MetaMask: The RPC method 'wallet_watchAsset' is experimental for ERC721/ERC1155 assets and may change in the future.\\nFor more information, see: https://github.com/MetaMask/metamask-improvement-proposals/blob/main/MIPs/mip-1.md and https://github.com/MetaMask/metamask-improvement-proposals/blob/main/PROCESS-GUIDE.md#proposal-lifecycle\"\n        },\n        experimentalMethods: \"MetaMask: 'ethereum._metamask' exposes non-standard, experimental methods. They may be removed or changed without warning.\"\n    }\n};\nfunction ns(e) {\n    const t = {\n        ethDecryptDeprecation: !1,\n        ethGetEncryptionPublicKeyDeprecation: !1,\n        walletWatchAssetNFTExperimental: !1\n    };\n    return (n, r, i)=>{\n        t.ethDecryptDeprecation || \"eth_decrypt\" !== n.method ? t.ethGetEncryptionPublicKeyDeprecation || \"eth_getEncryptionPublicKey\" !== n.method ? !t.walletWatchAssetNFTExperimental && \"wallet_watchAsset\" === n.method && [\n            Qo,\n            es\n        ].includes(n.params?.type || \"\") && (e.warn(ts.warnings.rpc.walletWatchAssetNFTExperimental), t.walletWatchAssetNFTExperimental = !0) : (e.warn(ts.warnings.rpc.ethGetEncryptionPublicKeyDeprecation), t.ethGetEncryptionPublicKeyDeprecation = !0) : (e.warn(ts.warnings.rpc.ethDecryptDeprecation), t.ethDecryptDeprecation = !0), i();\n    };\n}\nvar rs = 4294967295, is = Math.floor(Math.random() * rs);\nfunction os() {\n    return (e, t, n, r)=>{\n        const i = e.id, o = is = (is + 1) % rs;\n        e.id = o, t.id = o, n((n)=>{\n            e.id = i, t.id = i, n();\n        });\n    };\n}\nvar ss = (e, t, n)=>{\n    if (!t.has(e)) throw TypeError(\"Cannot \" + n);\n}, as = (e, t, n)=>(ss(e, t, \"read from private field\"), n ? n.call(e) : t.get(e)), cs = (e, t, n)=>{\n    if (t.has(e)) throw TypeError(\"Cannot add the same private member more than once\");\n    t instanceof WeakSet ? t.add(e) : t.set(e, n);\n}, ls = (e, t, n, r)=>(ss(e, t, \"write to private field\"), t.set(e, n), n), ds = (e, t, n)=>(ss(e, t, \"access private method\"), n), us = {\n    invalidInput: -32e3,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    limitExceeded: -32005,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603\n}, hs = {\n    \"-32700\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\n    },\n    \"-32600\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"The JSON sent is not a valid Request object.\"\n    },\n    \"-32601\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"The method does not exist / is not available.\"\n    },\n    \"-32602\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Invalid method parameter(s).\"\n    },\n    \"-32603\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Internal JSON-RPC error.\"\n    },\n    \"-32000\": {\n        standard: \"EIP-1474\",\n        message: \"Invalid input.\"\n    },\n    \"-32001\": {\n        standard: \"EIP-1474\",\n        message: \"Resource not found.\"\n    },\n    \"-32002\": {\n        standard: \"EIP-1474\",\n        message: \"Resource unavailable.\"\n    },\n    \"-32003\": {\n        standard: \"EIP-1474\",\n        message: \"Transaction rejected.\"\n    },\n    \"-32004\": {\n        standard: \"EIP-1474\",\n        message: \"Method not supported.\"\n    },\n    \"-32005\": {\n        standard: \"EIP-1474\",\n        message: \"Request limit exceeded.\"\n    },\n    4001: {\n        standard: \"EIP-1193\",\n        message: \"User rejected the request.\"\n    },\n    4100: {\n        standard: \"EIP-1193\",\n        message: \"The requested account and/or method has not been authorized by the user.\"\n    },\n    4200: {\n        standard: \"EIP-1193\",\n        message: \"The requested method is not supported by this Ethereum provider.\"\n    },\n    4900: {\n        standard: \"EIP-1193\",\n        message: \"The provider is disconnected from all chains.\"\n    },\n    4901: {\n        standard: \"EIP-1193\",\n        message: \"The provider is disconnected from the specified chain.\"\n    }\n};\nfunction fs(e) {\n    return Boolean(e) && \"object\" == typeof e && !Array.isArray(e);\n}\nvar ps = (e, t)=>Object.hasOwnProperty.call(e, t);\nclass gs extends TypeError {\n    constructor(e, t){\n        let n;\n        const { message: r, explanation: i, ...o } = e, { path: s } = e, a = 0 === s.length ? r : `At path: ${s.join(\".\")} -- ${r}`;\n        super(i ?? a), null != i && (this.cause = a), Object.assign(this, o), this.name = this.constructor.name, this.failures = ()=>n ?? (n = [\n                e,\n                ...t()\n            ]);\n    }\n}\nfunction ms(e) {\n    return \"object\" == typeof e && null != e;\n}\nfunction ys(e) {\n    return \"symbol\" == typeof e ? e.toString() : \"string\" == typeof e ? JSON.stringify(e) : `${e}`;\n}\nfunction vs(e, t, n, r) {\n    if (!0 === e) return;\n    !1 === e ? e = {} : \"string\" == typeof e && (e = {\n        message: e\n    });\n    const { path: i, branch: o } = t, { type: s } = n, { refinement: a, message: c = `Expected a value of type \\`${s}\\`${a ? ` with refinement \\`${a}\\`` : \"\"}, but received: \\`${ys(r)}\\`` } = e;\n    return {\n        value: r,\n        type: s,\n        refinement: a,\n        key: i[i.length - 1],\n        path: i,\n        branch: o,\n        ...e,\n        message: c\n    };\n}\nfunction* bs(e, t, n, r) {\n    (function(e) {\n        return ms(e) && \"function\" == typeof e[Symbol.iterator];\n    })(e) || (e = [\n        e\n    ]);\n    for (const i of e){\n        const e = vs(i, t, n, r);\n        e && (yield e);\n    }\n}\nfunction* ws(e, t, n = {}) {\n    const { path: r = [], branch: i = [\n        e\n    ], coerce: o = !1, mask: s = !1 } = n, a = {\n        path: r,\n        branch: i\n    };\n    if (o && (e = t.coercer(e, a), s && \"type\" !== t.type && ms(t.schema) && ms(e) && !Array.isArray(e))) for(const n in e)void 0 === t.schema[n] && delete e[n];\n    let c = \"valid\";\n    for (const r of t.validator(e, a))r.explanation = n.message, c = \"not_valid\", yield [\n        r,\n        void 0\n    ];\n    for (let [l, d, u] of t.entries(e, a)){\n        const t = ws(d, u, {\n            path: void 0 === l ? r : [\n                ...r,\n                l\n            ],\n            branch: void 0 === l ? i : [\n                ...i,\n                d\n            ],\n            coerce: o,\n            mask: s,\n            message: n.message\n        });\n        for (const n of t)n[0] ? (c = null != n[0].refinement ? \"not_refined\" : \"not_valid\", yield [\n            n[0],\n            void 0\n        ]) : o && (d = n[1], void 0 === l ? e = d : e instanceof Map ? e.set(l, d) : e instanceof Set ? e.add(d) : ms(e) && (void 0 !== d || l in e) && (e[l] = d));\n    }\n    if (\"not_valid\" !== c) for (const r of t.refiner(e, a))r.explanation = n.message, c = \"not_refined\", yield [\n        r,\n        void 0\n    ];\n    \"valid\" === c && (yield [\n        void 0,\n        e\n    ]);\n}\nclass Es {\n    constructor(e){\n        const { type: t, schema: n, validator: r, refiner: i, coercer: o = (e)=>e, entries: s = function*() {} } = e;\n        this.type = t, this.schema = n, this.entries = s, this.coercer = o, this.validator = r ? (e, t)=>bs(r(e, t), t, this, e) : ()=>[], this.refiner = i ? (e, t)=>bs(i(e, t), t, this, e) : ()=>[];\n    }\n    assert(e, t) {\n        return Cs(e, this, t);\n    }\n    create(e, t) {\n        return Ss(e, this, t);\n    }\n    is(e) {\n        return _s(e, this);\n    }\n    mask(e, t) {\n        return function(e, t, n) {\n            const r = ks(e, t, {\n                coerce: !0,\n                mask: !0,\n                message: n\n            });\n            if (r[0]) throw r[0];\n            return r[1];\n        }(e, this, t);\n    }\n    validate(e, t = {}) {\n        return ks(e, this, t);\n    }\n}\nfunction Cs(e, t, n) {\n    const r = ks(e, t, {\n        message: n\n    });\n    if (r[0]) throw r[0];\n}\nfunction Ss(e, t, n) {\n    const r = ks(e, t, {\n        coerce: !0,\n        message: n\n    });\n    if (r[0]) throw r[0];\n    return r[1];\n}\nfunction _s(e, t) {\n    return !ks(e, t)[0];\n}\nfunction ks(e, t, n = {}) {\n    const r = ws(e, t, n), i = function(e) {\n        const { done: t, value: n } = e.next();\n        return t ? void 0 : n;\n    }(r);\n    if (i[0]) {\n        const e = new gs(i[0], function*() {\n            for (const e of r)e[0] && (yield e[0]);\n        });\n        return [\n            e,\n            void 0\n        ];\n    }\n    return [\n        void 0,\n        i[1]\n    ];\n}\nfunction xs(e, t) {\n    return new Es({\n        type: e,\n        schema: null,\n        validator: t\n    });\n}\nfunction Ms(e) {\n    let t;\n    return new Es({\n        type: \"lazy\",\n        schema: null,\n        *entries (n, r) {\n            t ?? (t = e()), yield* t.entries(n, r);\n        },\n        validator: (n, r)=>(t ?? (t = e()), t.validator(n, r)),\n        coercer: (n, r)=>(t ?? (t = e()), t.coercer(n, r)),\n        refiner: (n, r)=>(t ?? (t = e()), t.refiner(n, r))\n    });\n}\nfunction As(e) {\n    return new Es({\n        type: \"array\",\n        schema: e,\n        *entries (t) {\n            if (e && Array.isArray(t)) for (const [n, r] of t.entries())yield [\n                n,\n                r,\n                e\n            ];\n        },\n        coercer: (e)=>Array.isArray(e) ? e.slice() : e,\n        validator: (e)=>Array.isArray(e) || `Expected an array value, but received: ${ys(e)}`\n    });\n}\nfunction Is(e) {\n    const t = ys(e), n = typeof e;\n    return new Es({\n        type: \"literal\",\n        schema: \"string\" === n || \"number\" === n || \"boolean\" === n ? e : null,\n        validator: (n)=>n === e || `Expected the literal \\`${t}\\`, but received: ${ys(n)}`\n    });\n}\nfunction Rs() {\n    return xs(\"number\", (e)=>\"number\" == typeof e && !isNaN(e) || `Expected a number, but received: ${ys(e)}`);\n}\nfunction Ps(e) {\n    const t = e ? Object.keys(e) : [], n = xs(\"never\", ()=>!1);\n    return new Es({\n        type: \"object\",\n        schema: e || null,\n        *entries (r) {\n            if (e && ms(r)) {\n                const i = new Set(Object.keys(r));\n                for (const n of t)i.delete(n), yield [\n                    n,\n                    r[n],\n                    e[n]\n                ];\n                for (const e of i)yield [\n                    e,\n                    r[e],\n                    n\n                ];\n            }\n        },\n        validator: (e)=>ms(e) || `Expected an object, but received: ${ys(e)}`,\n        coercer: (e)=>ms(e) ? {\n                ...e\n            } : e\n    });\n}\nfunction Ls(e) {\n    return new Es({\n        ...e,\n        validator: (t, n)=>void 0 === t || e.validator(t, n),\n        refiner: (t, n)=>void 0 === t || e.refiner(t, n)\n    });\n}\nfunction Os(e, t) {\n    return new Es({\n        type: \"record\",\n        schema: null,\n        *entries (n) {\n            if (ms(n)) for(const r in n){\n                const i = n[r];\n                yield [\n                    r,\n                    r,\n                    e\n                ], yield [\n                    r,\n                    i,\n                    t\n                ];\n            }\n        },\n        validator: (e)=>ms(e) || `Expected an object, but received: ${ys(e)}`\n    });\n}\nfunction Ts() {\n    return xs(\"string\", (e)=>\"string\" == typeof e || `Expected a string, but received: ${ys(e)}`);\n}\nfunction Ns(e) {\n    const t = e.map((e)=>e.type).join(\" | \");\n    return new Es({\n        type: \"union\",\n        schema: null,\n        coercer (t) {\n            for (const n of e){\n                const [e, r] = n.validate(t, {\n                    coerce: !0\n                });\n                if (!e) return r;\n            }\n            return t;\n        },\n        validator (n, r) {\n            const i = [];\n            for (const t of e){\n                const [...e] = ws(n, t, r), [o] = e;\n                if (!o[0]) return [];\n                for (const [t] of e)t && i.push(t);\n            }\n            return [\n                `Expected the value to satisfy a union of \\`${t}\\`, but received: ${ys(n)}`,\n                ...i\n            ];\n        }\n    });\n}\nfunction Ds(e) {\n    return (function(e) {\n        return function(e) {\n            return \"object\" == typeof e && null !== e && \"message\" in e;\n        }(e) && \"string\" == typeof e.message ? e.message : null == e ? \"\" : String(e);\n    })(e).replace(/\\.$/u, \"\");\n}\nfunction $s(e, t) {\n    return n = e, Boolean(\"string\" == typeof n?.prototype?.constructor?.name) ? new e({\n        message: t\n    }) : e({\n        message: t\n    });\n    var n;\n}\nvar Bs = class extends Error {\n    constructor(e){\n        super(e.message), this.code = \"ERR_ASSERTION\";\n    }\n};\nfunction Ks() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction js() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\nvar Us = Ks, Hs = js;\nfunction Fs(e) {\n    if (Us === setTimeout) return setTimeout(e, 0);\n    if ((Us === Ks || !Us) && setTimeout) return Us = setTimeout, setTimeout(e, 0);\n    try {\n        return Us(e, 0);\n    } catch (t) {\n        try {\n            return Us.call(null, e, 0);\n        } catch (t) {\n            return Us.call(this, e, 0);\n        }\n    }\n}\n\"function\" == typeof c.setTimeout && (Us = setTimeout), \"function\" == typeof c.clearTimeout && (Hs = clearTimeout);\nvar zs, qs = [], Vs = !1, Ws = -1;\nfunction Gs() {\n    Vs && zs && (Vs = !1, zs.length ? qs = zs.concat(qs) : Ws = -1, qs.length && Zs());\n}\nfunction Zs() {\n    if (!Vs) {\n        var e = Fs(Gs);\n        Vs = !0;\n        for(var t = qs.length; t;){\n            for(zs = qs, qs = []; ++Ws < t;)zs && zs[Ws].run();\n            Ws = -1, t = qs.length;\n        }\n        zs = null, Vs = !1, function(e) {\n            if (Hs === clearTimeout) return clearTimeout(e);\n            if ((Hs === js || !Hs) && clearTimeout) return Hs = clearTimeout, clearTimeout(e);\n            try {\n                return Hs(e);\n            } catch (t) {\n                try {\n                    return Hs.call(null, e);\n                } catch (t) {\n                    return Hs.call(this, e);\n                }\n            }\n        }(e);\n    }\n}\nfunction Ys(e, t) {\n    this.fun = e, this.array = t;\n}\nYs.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\nfunction Js() {}\nvar Xs = Js, Qs = Js, ea = Js, ta = Js, na = Js, ra = Js, ia = Js;\nvar oa = c.performance || {}, sa = oa.now || oa.mozNow || oa.msNow || oa.oNow || oa.webkitNow || function() {\n    return (new Date).getTime();\n};\nvar aa = new Date;\nvar ca = {\n    nextTick: function(e) {\n        var t = new Array(arguments.length - 1);\n        if (arguments.length > 1) for(var n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];\n        qs.push(new Ys(e, t)), 1 !== qs.length || Vs || Fs(Zs);\n    },\n    title: \"browser\",\n    browser: !0,\n    env: {},\n    argv: [],\n    version: \"\",\n    versions: {},\n    on: Xs,\n    addListener: Qs,\n    once: ea,\n    off: ta,\n    removeListener: na,\n    removeAllListeners: ra,\n    emit: ia,\n    binding: function(e) {\n        throw new Error(\"process.binding is not supported\");\n    },\n    cwd: function() {\n        return \"/\";\n    },\n    chdir: function(e) {\n        throw new Error(\"process.chdir is not supported\");\n    },\n    umask: function() {\n        return 0;\n    },\n    hrtime: function(e) {\n        var t = .001 * sa.call(oa), n = Math.floor(t), r = Math.floor(t % 1 * 1e9);\n        return e && (n -= e[0], (r -= e[1]) < 0 && (n--, r += 1e9)), [\n            n,\n            r\n        ];\n    },\n    platform: \"browser\",\n    release: {},\n    config: {},\n    uptime: function() {\n        return (new Date - aa) / 1e3;\n    }\n}, la = (e)=>Ps(e);\nfunction da({ path: e, branch: t }) {\n    const n = e[e.length - 1];\n    return ps(t[t.length - 2], n);\n}\nfunction ua(e) {\n    return new Es({\n        ...e,\n        type: `optional ${e.type}`,\n        validator: (t, n)=>!da(n) || e.validator(t, n),\n        refiner: (t, n)=>!da(n) || e.refiner(t, n)\n    });\n}\nvar ha, fa, pa, ga = Ns([\n    Is(null),\n    xs(\"boolean\", (e)=>\"boolean\" == typeof e),\n    xs(\"finite number\", (e)=>_s(e, Rs()) && Number.isFinite(e)),\n    Ts(),\n    As(Ms(()=>ga)),\n    Os(Ts(), Ms(()=>ga))\n]), ma = (ha = ga, fa = xs(\"any\", ()=>!0), pa = (e)=>((function(e, t, n = \"Assertion failed\", r = Bs) {\n        try {\n            Cs(e, t);\n        } catch (e) {\n            throw $s(r, `${n}: ${Ds(e)}.`);\n        }\n    })(e, ga), JSON.parse(JSON.stringify(e, (e, t)=>{\n        if (\"__proto__\" !== e && \"constructor\" !== e) return t;\n    }))), new Es({\n    ...ha,\n    coercer: (e, t)=>_s(e, fa) ? ha.coercer(pa(e, t), t) : ha.coercer(e, t)\n}));\nfunction ya(e) {\n    try {\n        return function(e) {\n            Ss(e, ma);\n        }(e), !0;\n    } catch  {\n        return !1;\n    }\n}\nvar va = Is(\"2.0\"), ba = function(e) {\n    return new Es({\n        ...e,\n        validator: (t, n)=>null === t || e.validator(t, n),\n        refiner: (t, n)=>null === t || e.refiner(t, n)\n    });\n}(Ns([\n    Rs(),\n    Ts()\n])), wa = la({\n    code: xs(\"integer\", (e)=>\"number\" == typeof e && !isNaN(e) && Number.isInteger(e) || `Expected an integer, but received: ${ys(e)}`),\n    message: Ts(),\n    data: ua(ma),\n    stack: ua(Ts())\n}), Ea = Ns([\n    Os(Ts(), ma),\n    As(ma)\n]), Ca = la({\n    id: ba,\n    jsonrpc: va,\n    method: Ts(),\n    params: ua(Ea)\n}), Sa = la({\n    jsonrpc: va,\n    method: Ts(),\n    params: ua(Ea)\n});\nfunction _a(e) {\n    return _s(e, Ca);\n}\nfunction ka(e) {\n    return _s(e, wa);\n}\nPs({\n    id: ba,\n    jsonrpc: va,\n    result: Ls(xs(\"unknown\", ()=>!0)),\n    error: Ls(wa)\n}), Ns([\n    la({\n        id: ba,\n        jsonrpc: va,\n        result: ma\n    }),\n    la({\n        id: ba,\n        jsonrpc: va,\n        error: wa\n    })\n]);\nvar xa = us.internal, Ma = \"Unspecified error message. This is a bug, please report it.\", Aa = {\n    code: xa,\n    message: Ra(xa)\n}, Ia = \"Unspecified server error.\";\nfunction Ra(e, t = Ma) {\n    if (function(e) {\n        return Number.isInteger(e);\n    }(e)) {\n        const t = e.toString();\n        if (ps(hs, t)) return hs[t].message;\n        if (function(e) {\n            return e >= -32099 && e <= -32e3;\n        }(e)) return Ia;\n    }\n    return t;\n}\nfunction Pa(e, { fallbackError: t = Aa, shouldIncludeStack: n = !0 } = {}) {\n    if (!ka(t)) throw new Error(\"Must provide fallback error with integer number code and string message.\");\n    const r = function(e, t) {\n        if (e && \"object\" == typeof e && \"serialize\" in e && \"function\" == typeof e.serialize) return e.serialize();\n        if (ka(e)) return e;\n        const n = La(e), r = {\n            ...t,\n            data: {\n                cause: n\n            }\n        };\n        return r;\n    }(e, t);\n    return n || delete r.stack, r;\n}\nfunction La(e) {\n    return Array.isArray(e) ? e.map((e)=>ya(e) ? e : fs(e) ? Oa(e) : null) : fs(e) ? Oa(e) : ya(e) ? e : null;\n}\nfunction Oa(e) {\n    return Object.getOwnPropertyNames(e).reduce((t, n)=>{\n        const r = e[n];\n        return ya(r) && (t[n] = r), t;\n    }, {});\n}\nvar Ta = ja;\nja.default = ja, ja.stable = za, ja.stableStringify = za;\nvar Na = \"[...]\", Da = \"[Circular]\", $a = [], Ba = [];\nfunction Ka() {\n    return {\n        depthLimit: Number.MAX_SAFE_INTEGER,\n        edgesLimit: Number.MAX_SAFE_INTEGER\n    };\n}\nfunction ja(e, t, n, r) {\n    var i;\n    void 0 === r && (r = Ka()), Ha(e, \"\", 0, [], void 0, 0, r);\n    try {\n        i = 0 === Ba.length ? JSON.stringify(e, t, n) : JSON.stringify(e, Va(t), n);\n    } catch (e) {\n        return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\");\n    } finally{\n        for(; 0 !== $a.length;){\n            var o = $a.pop();\n            4 === o.length ? Object.defineProperty(o[0], o[1], o[3]) : o[0][o[1]] = o[2];\n        }\n    }\n    return i;\n}\nfunction Ua(e, t, n, r) {\n    var i = Object.getOwnPropertyDescriptor(r, n);\n    void 0 !== i.get ? i.configurable ? (Object.defineProperty(r, n, {\n        value: e\n    }), $a.push([\n        r,\n        n,\n        t,\n        i\n    ])) : Ba.push([\n        t,\n        n,\n        e\n    ]) : (r[n] = e, $a.push([\n        r,\n        n,\n        t\n    ]));\n}\nfunction Ha(e, t, n, r, i, o, s) {\n    var a;\n    if (o += 1, \"object\" == typeof e && null !== e) {\n        for(a = 0; a < r.length; a++)if (r[a] === e) return void Ua(Da, e, t, i);\n        if (void 0 !== s.depthLimit && o > s.depthLimit) return void Ua(Na, e, t, i);\n        if (void 0 !== s.edgesLimit && n + 1 > s.edgesLimit) return void Ua(Na, e, t, i);\n        if (r.push(e), Array.isArray(e)) for(a = 0; a < e.length; a++)Ha(e[a], a, a, r, e, o, s);\n        else {\n            var c = Object.keys(e);\n            for(a = 0; a < c.length; a++){\n                var l = c[a];\n                Ha(e[l], l, a, r, e, o, s);\n            }\n        }\n        r.pop();\n    }\n}\nfunction Fa(e, t) {\n    return e < t ? -1 : e > t ? 1 : 0;\n}\nfunction za(e, t, n, r) {\n    void 0 === r && (r = Ka());\n    var i, o = qa(e, \"\", 0, [], void 0, 0, r) || e;\n    try {\n        i = 0 === Ba.length ? JSON.stringify(o, t, n) : JSON.stringify(o, Va(t), n);\n    } catch (e) {\n        return JSON.stringify(\"[unable to serialize, circular reference is too complex to analyze]\");\n    } finally{\n        for(; 0 !== $a.length;){\n            var s = $a.pop();\n            4 === s.length ? Object.defineProperty(s[0], s[1], s[3]) : s[0][s[1]] = s[2];\n        }\n    }\n    return i;\n}\nfunction qa(e, t, n, r, i, o, s) {\n    var a;\n    if (o += 1, \"object\" == typeof e && null !== e) {\n        for(a = 0; a < r.length; a++)if (r[a] === e) return void Ua(Da, e, t, i);\n        try {\n            if (\"function\" == typeof e.toJSON) return;\n        } catch (e) {\n            return;\n        }\n        if (void 0 !== s.depthLimit && o > s.depthLimit) return void Ua(Na, e, t, i);\n        if (void 0 !== s.edgesLimit && n + 1 > s.edgesLimit) return void Ua(Na, e, t, i);\n        if (r.push(e), Array.isArray(e)) for(a = 0; a < e.length; a++)qa(e[a], a, a, r, e, o, s);\n        else {\n            var c = {}, l = Object.keys(e).sort(Fa);\n            for(a = 0; a < l.length; a++){\n                var d = l[a];\n                qa(e[d], d, a, r, e, o, s), c[d] = e[d];\n            }\n            if (void 0 === i) return c;\n            $a.push([\n                i,\n                t,\n                e\n            ]), i[t] = c;\n        }\n        r.pop();\n    }\n}\nfunction Va(e) {\n    return e = void 0 !== e ? e : function(e, t) {\n        return t;\n    }, function(t, n) {\n        if (Ba.length > 0) for(var r = 0; r < Ba.length; r++){\n            var i = Ba[r];\n            if (i[1] === t && i[0] === n) {\n                n = i[2], Ba.splice(r, 1);\n                break;\n            }\n        }\n        return e.call(this, t, n);\n    };\n}\nvar Wa = de(Ta), Ga = class extends Error {\n    constructor(e, t, n){\n        if (!Number.isInteger(e)) throw new Error('\"code\" must be an integer.');\n        if (!t || \"string\" != typeof t) throw new Error('\"message\" must be a non-empty string.');\n        super(t), this.code = e, void 0 !== n && (this.data = n);\n    }\n    serialize() {\n        const e = {\n            code: this.code,\n            message: this.message\n        };\n        return void 0 !== this.data && (e.data = this.data, function(e) {\n            if (\"object\" != typeof e || null === e) return !1;\n            try {\n                let t = e;\n                for(; null !== Object.getPrototypeOf(t);)t = Object.getPrototypeOf(t);\n                return Object.getPrototypeOf(e) === t;\n            } catch (e) {\n                return !1;\n            }\n        }(this.data) && (e.data.cause = La(this.data.cause))), this.stack && (e.stack = this.stack), e;\n    }\n    toString() {\n        return Wa(this.serialize(), Za, 2);\n    }\n};\nfunction Za(e, t) {\n    if (\"[Circular]\" !== t) return t;\n}\nvar Ya = (e)=>Ja(us.invalidRequest, e);\nfunction Ja(e, t) {\n    const [n, r] = function(e) {\n        if (e) {\n            if (\"string\" == typeof e) return [\n                e\n            ];\n            if (\"object\" == typeof e && !Array.isArray(e)) {\n                const { message: t, data: n } = e;\n                if (t && \"string\" != typeof t) throw new Error(\"Must specify string message.\");\n                return [\n                    t ?? void 0,\n                    n\n                ];\n            }\n        }\n        return [];\n    }(t);\n    return new Ga(e, n ?? Ra(e), r);\n}\nvar Xa = {};\nfunction Qa() {}\nfunction ec() {\n    ec.init.call(this);\n}\nfunction tc(e) {\n    return void 0 === e._maxListeners ? ec.defaultMaxListeners : e._maxListeners;\n}\nfunction nc(e, t, n, r) {\n    var i, o, s;\n    if (\"function\" != typeof n) throw new TypeError('\"listener\" argument must be a function');\n    if ((o = e._events) ? (o.newListener && (e.emit(\"newListener\", t, n.listener ? n.listener : n), o = e._events), s = o[t]) : (o = e._events = new Qa, e._eventsCount = 0), s) {\n        if (\"function\" == typeof s ? s = o[t] = r ? [\n            n,\n            s\n        ] : [\n            s,\n            n\n        ] : r ? s.unshift(n) : s.push(n), !s.warned && (i = tc(e)) && i > 0 && s.length > i) {\n            s.warned = !0;\n            var a = new Error(\"Possible EventEmitter memory leak detected. \" + s.length + \" \" + t + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n            a.name = \"MaxListenersExceededWarning\", a.emitter = e, a.type = t, a.count = s.length, function(e) {\n                \"function\" == typeof console.warn ? console.warn(e) : console.log(e);\n            }(a);\n        }\n    } else s = o[t] = n, ++e._eventsCount;\n    return e;\n}\nfunction rc(e, t, n) {\n    var r = !1;\n    function i() {\n        e.removeListener(t, i), r || (r = !0, n.apply(e, arguments));\n    }\n    return i.listener = n, i;\n}\nfunction ic(e) {\n    var t = this._events;\n    if (t) {\n        var n = t[e];\n        if (\"function\" == typeof n) return 1;\n        if (n) return n.length;\n    }\n    return 0;\n}\nfunction oc(e, t) {\n    for(var n = new Array(t); t--;)n[t] = e[t];\n    return n;\n}\nQa.prototype = Object.create(null), ec.EventEmitter = ec, ec.usingDomains = !1, ec.prototype.domain = void 0, ec.prototype._events = void 0, ec.prototype._maxListeners = void 0, ec.defaultMaxListeners = 10, ec.init = function() {\n    this.domain = null, ec.usingDomains && undefined.active, this._events && this._events !== Object.getPrototypeOf(this)._events || (this._events = new Qa, this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;\n}, ec.prototype.setMaxListeners = function(e) {\n    if (\"number\" != typeof e || e < 0 || isNaN(e)) throw new TypeError('\"n\" argument must be a positive number');\n    return this._maxListeners = e, this;\n}, ec.prototype.getMaxListeners = function() {\n    return tc(this);\n}, ec.prototype.emit = function(e) {\n    var t, n, r, i, o, s, a, c = \"error\" === e;\n    if (s = this._events) c = c && null == s.error;\n    else if (!c) return !1;\n    if (a = this.domain, c) {\n        if (t = arguments[1], !a) {\n            if (t instanceof Error) throw t;\n            var l = new Error('Uncaught, unspecified \"error\" event. (' + t + \")\");\n            throw l.context = t, l;\n        }\n        return t || (t = new Error('Uncaught, unspecified \"error\" event')), t.domainEmitter = this, t.domain = a, t.domainThrown = !1, a.emit(\"error\", t), !1;\n    }\n    if (!(n = s[e])) return !1;\n    var d = \"function\" == typeof n;\n    switch(r = arguments.length){\n        case 1:\n            !function(e, t, n) {\n                if (t) e.call(n);\n                else for(var r = e.length, i = oc(e, r), o = 0; o < r; ++o)i[o].call(n);\n            }(n, d, this);\n            break;\n        case 2:\n            !function(e, t, n, r) {\n                if (t) e.call(n, r);\n                else for(var i = e.length, o = oc(e, i), s = 0; s < i; ++s)o[s].call(n, r);\n            }(n, d, this, arguments[1]);\n            break;\n        case 3:\n            !function(e, t, n, r, i) {\n                if (t) e.call(n, r, i);\n                else for(var o = e.length, s = oc(e, o), a = 0; a < o; ++a)s[a].call(n, r, i);\n            }(n, d, this, arguments[1], arguments[2]);\n            break;\n        case 4:\n            !function(e, t, n, r, i, o) {\n                if (t) e.call(n, r, i, o);\n                else for(var s = e.length, a = oc(e, s), c = 0; c < s; ++c)a[c].call(n, r, i, o);\n            }(n, d, this, arguments[1], arguments[2], arguments[3]);\n            break;\n        default:\n            for(i = new Array(r - 1), o = 1; o < r; o++)i[o - 1] = arguments[o];\n            !function(e, t, n, r) {\n                if (t) e.apply(n, r);\n                else for(var i = e.length, o = oc(e, i), s = 0; s < i; ++s)o[s].apply(n, r);\n            }(n, d, this, i);\n    }\n    return !0;\n}, ec.prototype.addListener = function(e, t) {\n    return nc(this, e, t, !1);\n}, ec.prototype.on = ec.prototype.addListener, ec.prototype.prependListener = function(e, t) {\n    return nc(this, e, t, !0);\n}, ec.prototype.once = function(e, t) {\n    if (\"function\" != typeof t) throw new TypeError('\"listener\" argument must be a function');\n    return this.on(e, rc(this, e, t)), this;\n}, ec.prototype.prependOnceListener = function(e, t) {\n    if (\"function\" != typeof t) throw new TypeError('\"listener\" argument must be a function');\n    return this.prependListener(e, rc(this, e, t)), this;\n}, ec.prototype.removeListener = function(e, t) {\n    var n, r, i, o, s;\n    if (\"function\" != typeof t) throw new TypeError('\"listener\" argument must be a function');\n    if (!(r = this._events)) return this;\n    if (!(n = r[e])) return this;\n    if (n === t || n.listener && n.listener === t) 0 == --this._eventsCount ? this._events = new Qa : (delete r[e], r.removeListener && this.emit(\"removeListener\", e, n.listener || t));\n    else if (\"function\" != typeof n) {\n        for(i = -1, o = n.length; o-- > 0;)if (n[o] === t || n[o].listener && n[o].listener === t) {\n            s = n[o].listener, i = o;\n            break;\n        }\n        if (i < 0) return this;\n        if (1 === n.length) {\n            if (n[0] = void 0, 0 == --this._eventsCount) return this._events = new Qa, this;\n            delete r[e];\n        } else !function(e, t) {\n            for(var n = t, r = n + 1, i = e.length; r < i; n += 1, r += 1)e[n] = e[r];\n            e.pop();\n        }(n, i);\n        r.removeListener && this.emit(\"removeListener\", e, s || t);\n    }\n    return this;\n}, ec.prototype.off = function(e, t) {\n    return this.removeListener(e, t);\n}, ec.prototype.removeAllListeners = function(e) {\n    var t, n;\n    if (!(n = this._events)) return this;\n    if (!n.removeListener) return 0 === arguments.length ? (this._events = new Qa, this._eventsCount = 0) : n[e] && (0 == --this._eventsCount ? this._events = new Qa : delete n[e]), this;\n    if (0 === arguments.length) {\n        for(var r, i = Object.keys(n), o = 0; o < i.length; ++o)\"removeListener\" !== (r = i[o]) && this.removeAllListeners(r);\n        return this.removeAllListeners(\"removeListener\"), this._events = new Qa, this._eventsCount = 0, this;\n    }\n    if (\"function\" == typeof (t = n[e])) this.removeListener(e, t);\n    else if (t) do {\n        this.removeListener(e, t[t.length - 1]);\n    }while (t[0]);\n    return this;\n}, ec.prototype.listeners = function(e) {\n    var t, n, r = this._events;\n    return n = r && (t = r[e]) ? \"function\" == typeof t ? [\n        t.listener || t\n    ] : function(e) {\n        for(var t = new Array(e.length), n = 0; n < t.length; ++n)t[n] = e[n].listener || e[n];\n        return t;\n    }(t) : [], n;\n}, ec.listenerCount = function(e, t) {\n    return \"function\" == typeof e.listenerCount ? e.listenerCount(t) : ic.call(e, t);\n}, ec.prototype.listenerCount = ic, ec.prototype.eventNames = function() {\n    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\nvar sc = ue(Object.freeze({\n    __proto__: null,\n    EventEmitter: ec,\n    default: ec\n}));\nObject.defineProperty(Xa, \"__esModule\", {\n    value: !0\n});\nconst ac = sc;\nfunction cc(e, t, n) {\n    try {\n        Reflect.apply(e, t, n);\n    } catch (e) {\n        setTimeout(()=>{\n            throw e;\n        });\n    }\n}\nlet lc = class extends ac.EventEmitter {\n    emit(e, ...t) {\n        let n = \"error\" === e;\n        const r = this._events;\n        if (void 0 !== r) n = n && void 0 === r.error;\n        else if (!n) return !1;\n        if (n) {\n            let e;\n            if (t.length > 0 && ([e] = t), e instanceof Error) throw e;\n            const n = new Error(\"Unhandled error.\" + (e ? ` (${e.message})` : \"\"));\n            throw n.context = e, n;\n        }\n        const i = r[e];\n        if (void 0 === i) return !1;\n        if (\"function\" == typeof i) cc(i, this, t);\n        else {\n            const e = i.length, n = function(e) {\n                const t = e.length, n = new Array(t);\n                for(let r = 0; r < t; r += 1)n[r] = e[r];\n                return n;\n            }(i);\n            for(let r = 0; r < e; r += 1)cc(n[r], this, t);\n        }\n        return !0;\n    }\n};\nvar dc, uc, hc, fc, pc, gc, mc, yc, vc, bc, wc, Ec, Cc, Sc, _c, kc, xc, Mc, Ac, Ic = Xa.default = lc, Rc = class e extends Ic {\n    constructor({ notificationHandler: e } = {}){\n        super(), cs(this, fc), cs(this, gc), cs(this, yc), cs(this, dc, !1), cs(this, uc, void 0), cs(this, hc, void 0), ls(this, uc, []), ls(this, hc, e);\n    }\n    destroy() {\n        as(this, uc).forEach((e)=>{\n            \"destroy\" in e && \"function\" == typeof e.destroy && e.destroy();\n        }), ls(this, uc, []), ls(this, dc, !0);\n    }\n    push(e) {\n        ds(this, fc, pc).call(this), as(this, uc).push(e);\n    }\n    handle(e, t) {\n        if (ds(this, fc, pc).call(this), t && \"function\" != typeof t) throw new Error('\"callback\" must be a function if provided.');\n        return Array.isArray(e) ? t ? ds(this, gc, mc).call(this, e, t) : ds(this, gc, mc).call(this, e) : t ? ds(this, yc, vc).call(this, e, t) : this._promiseHandle(e);\n    }\n    asMiddleware() {\n        return ds(this, fc, pc).call(this), async (t, n, r, i)=>{\n            var o, s;\n            try {\n                const [a, c, l] = await ds(o = e, Ec, Cc).call(o, t, n, as(this, uc));\n                return c ? (await ds(s = e, kc, xc).call(s, l), i(a)) : r(async (t)=>{\n                    var n;\n                    try {\n                        await ds(n = e, kc, xc).call(n, l);\n                    } catch (e) {\n                        return t(e);\n                    }\n                    return t();\n                });\n            } catch (e) {\n                return i(e);\n            }\n        };\n    }\n    async _promiseHandle(e) {\n        return new Promise((t, n)=>{\n            ds(this, yc, vc).call(this, e, (e, r)=>{\n                e && void 0 === r ? n(e) : t(r);\n            }).catch(n);\n        });\n    }\n};\ndc = new WeakMap, uc = new WeakMap, hc = new WeakMap, fc = new WeakSet, pc = function() {\n    if (as(this, dc)) throw new Error(\"This engine is destroyed and can no longer be used.\");\n}, gc = new WeakSet, mc = async function(e, t) {\n    try {\n        if (0 === e.length) {\n            const e = [\n                {\n                    id: null,\n                    jsonrpc: \"2.0\",\n                    error: new Ga(us.invalidRequest, \"Request batch must contain plain objects. Received an empty array\")\n                }\n            ];\n            return t ? t(null, e) : e;\n        }\n        const n = (await Promise.all(e.map(this._promiseHandle.bind(this)))).filter((e)=>void 0 !== e);\n        return t ? t(null, n) : n;\n    } catch (e) {\n        if (t) return t(e);\n        throw e;\n    }\n}, yc = new WeakSet, vc = async function(e, t) {\n    var n;\n    if (!e || Array.isArray(e) || \"object\" != typeof e) {\n        const n = new Ga(us.invalidRequest, \"Requests must be plain objects. Received: \" + typeof e, {\n            request: e\n        });\n        return t(n, {\n            id: null,\n            jsonrpc: \"2.0\",\n            error: n\n        });\n    }\n    if (\"string\" != typeof e.method) {\n        const n = new Ga(us.invalidRequest, \"Must specify a string method. Received: \" + typeof e.method, {\n            request: e\n        });\n        return as(this, hc) && !_a(e) ? t(null) : t(n, {\n            id: e.id ?? null,\n            jsonrpc: \"2.0\",\n            error: n\n        });\n    }\n    if (as(this, hc) && _s(e, Sa) && !_a(e)) {\n        try {\n            await as(this, hc).call(this, e);\n        } catch (e) {\n            return t(e);\n        }\n        return t(null);\n    }\n    let r = null;\n    const i = {\n        ...e\n    }, o = {\n        id: i.id,\n        jsonrpc: i.jsonrpc\n    };\n    try {\n        await ds(n = Rc, bc, wc).call(n, i, o, as(this, uc));\n    } catch (e) {\n        r = e;\n    }\n    return r && (delete o.result, o.error || (o.error = Pa(r))), t(r, o);\n}, bc = new WeakSet, wc = async function(e, t, n) {\n    var r, i, o;\n    const [s, a, c] = await ds(r = Rc, Ec, Cc).call(r, e, t, n);\n    if (ds(i = Rc, Mc, Ac).call(i, e, t, a), await ds(o = Rc, kc, xc).call(o, c), s) throw s;\n}, Ec = new WeakSet, Cc = async function(e, t, n) {\n    var r;\n    const i = [];\n    let o = null, s = !1;\n    for (const a of n)if ([o, s] = await ds(r = Rc, Sc, _c).call(r, e, t, a, i), s) break;\n    return [\n        o,\n        s,\n        i.reverse()\n    ];\n}, Sc = new WeakSet, _c = async function(e, t, n, r) {\n    return new Promise((i)=>{\n        const o = (e)=>{\n            const n = e || t.error;\n            n && (t.error = Pa(n)), i([\n                n,\n                !0\n            ]);\n        }, s = (n)=>{\n            t.error ? o(t.error) : (n && (\"function\" != typeof n && o(new Ga(us.internal, `JsonRpcEngine: \"next\" return handlers must be functions. Received \"${typeof n}\" for request:\\n${Lc(e)}`, {\n                request: e\n            })), r.push(n)), i([\n                null,\n                !1\n            ]));\n        };\n        try {\n            n(e, t, s, o);\n        } catch (e) {\n            o(e);\n        }\n    });\n}, kc = new WeakSet, xc = async function(e) {\n    for (const t of e)await new Promise((e, n)=>{\n        t((t)=>t ? n(t) : e());\n    });\n}, Mc = new WeakSet, Ac = function(e, t, n) {\n    if (!ps(t, \"result\") && !ps(t, \"error\")) throw new Ga(us.internal, `JsonRpcEngine: Response has no error or result for request:\\n${Lc(e)}`, {\n        request: e\n    });\n    if (!n) throw new Ga(us.internal, `JsonRpcEngine: Nothing ended request:\\n${Lc(e)}`, {\n        request: e\n    });\n}, cs(Rc, bc), cs(Rc, Ec), cs(Rc, Sc), cs(Rc, kc), cs(Rc, Mc);\nvar Pc = Rc;\nfunction Lc(e) {\n    return JSON.stringify(e, null, 2);\n}\nvar Oc = Object.freeze([\n    \"eth_subscription\"\n]), Tc = (e = console)=>[\n        os(),\n        Nc(e),\n        ns(e)\n    ];\nfunction Nc(e) {\n    return (t, n, r)=>{\n        \"string\" == typeof t.method && t.method || (n.error = Ya({\n            message: \"The request 'method' must be a non-empty string.\",\n            data: t\n        })), r((t)=>{\n            const { error: r } = n;\n            return r ? (e.error(`MetaMask - RPC Error: ${r.message}`, r), t()) : t();\n        });\n    };\n}\nvar Dc = (e, t, n = !0)=>(r, i)=>{\n        r || i.error ? t(r || i.error) : !n || Array.isArray(i) ? e(i) : e(i.result);\n    }, $c = (e)=>Boolean(e) && \"string\" == typeof e && e.startsWith(\"0x\"), Bc = ()=>{};\nasync function Kc(e, t) {\n    try {\n        const t = await async function() {\n            return {\n                name: jc(window),\n                icon: await Uc(window)\n            };\n        }();\n        e.handle({\n            jsonrpc: \"2.0\",\n            id: 1,\n            method: \"metamask_sendDomainMetadata\",\n            params: t\n        }, Bc);\n    } catch (e) {\n        t.error({\n            message: ts.errors.sendSiteMetadata(),\n            originalError: e\n        });\n    }\n}\nfunction jc(e) {\n    const { document: t } = e, n = t.querySelector('head > meta[property=\"og:site_name\"]');\n    if (n) return n.content;\n    const r = t.querySelector('head > meta[name=\"title\"]');\n    return r ? r.content : t.title && t.title.length > 0 ? t.title : window.location.hostname;\n}\nasync function Uc(e) {\n    const { document: t } = e, n = t.querySelectorAll('head > link[rel~=\"icon\"]');\n    for (const e of Array.from(n))if (e && await Hc(e.href)) return e.href;\n    return null;\n}\nasync function Hc(e) {\n    return new Promise((t, n)=>{\n        try {\n            const n = document.createElement(\"img\");\n            n.onload = ()=>t(!0), n.onerror = ()=>t(!1), n.src = e;\n        } catch (e) {\n            n(e);\n        }\n    });\n}\nvar Fc = (e, t, n)=>{\n    if (!t.has(e)) throw TypeError(\"Cannot \" + n);\n}, zc = (e, t, n)=>(Fc(e, t, \"read from private field\"), n ? n.call(e) : t.get(e)), qc = (e, t, n)=>{\n    if (t.has(e)) throw TypeError(\"Cannot add the same private member more than once\");\n    t instanceof WeakSet ? t.add(e) : t.set(e, n);\n}, Vc = (e, t, n, r)=>(Fc(e, t, \"write to private field\"), t.set(e, n), n);\nfunction Wc(e, t, n) {\n    try {\n        Reflect.apply(e, t, n);\n    } catch (e) {\n        setTimeout(()=>{\n            throw e;\n        });\n    }\n}\nclass Gc extends ec {\n    emit(e, ...t) {\n        let n = \"error\" === e;\n        const r = this._events;\n        if (void 0 !== r) n = n && void 0 === r.error;\n        else if (!n) return !1;\n        if (n) {\n            let e;\n            if (t.length > 0 && ([e] = t), e instanceof Error) throw e;\n            const n = new Error(\"Unhandled error.\" + (e ? ` (${e.message})` : \"\"));\n            throw n.context = e, n;\n        }\n        const i = r[e];\n        if (void 0 === i) return !1;\n        if (\"function\" == typeof i) Wc(i, this, t);\n        else {\n            const e = i.length, n = function(e) {\n                const t = e.length, n = new Array(t);\n                for(let r = 0; r < t; r += 1)n[r] = e[r];\n                return n;\n            }(i);\n            for(let r = 0; r < e; r += 1)Wc(n[r], this, t);\n        }\n        return !0;\n    }\n}\nvar Zc, Yc, Jc = function e(t, n) {\n    if (t === n) return !0;\n    if (t && n && \"object\" == typeof t && \"object\" == typeof n) {\n        if (t.constructor !== n.constructor) return !1;\n        var r, i, o;\n        if (Array.isArray(t)) {\n            if ((r = t.length) != n.length) return !1;\n            for(i = r; 0 != i--;)if (!e(t[i], n[i])) return !1;\n            return !0;\n        }\n        if (t.constructor === RegExp) return t.source === n.source && t.flags === n.flags;\n        if (t.valueOf !== Object.prototype.valueOf) return t.valueOf() === n.valueOf();\n        if (t.toString !== Object.prototype.toString) return t.toString() === n.toString();\n        if ((r = (o = Object.keys(t)).length) !== Object.keys(n).length) return !1;\n        for(i = r; 0 != i--;)if (!Object.prototype.hasOwnProperty.call(n, o[i])) return !1;\n        for(i = r; 0 != i--;){\n            var s = o[i];\n            if (!e(t[s], n[s])) return !1;\n        }\n        return !0;\n    }\n    return t != t && n != n;\n}, Xc = de(Jc), Qc = class e extends Gc {\n    constructor({ logger: t = console, maxEventListeners: n = 100, rpcMiddleware: r = [] } = {}){\n        super(), qc(this, Zc, void 0), qc(this, Yc, void 0), this._log = t, this.setMaxListeners(n), this._state = {\n            ...e._defaultState\n        }, Vc(this, Yc, null), Vc(this, Zc, null), this._handleAccountsChanged = this._handleAccountsChanged.bind(this), this._handleConnect = this._handleConnect.bind(this), this._handleChainChanged = this._handleChainChanged.bind(this), this._handleDisconnect = this._handleDisconnect.bind(this), this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this), this._rpcRequest = this._rpcRequest.bind(this), this.request = this.request.bind(this);\n        const i = new Pc;\n        r.forEach((e)=>i.push(e)), this._rpcEngine = i;\n    }\n    get chainId() {\n        return zc(this, Zc);\n    }\n    get selectedAddress() {\n        return zc(this, Yc);\n    }\n    isConnected() {\n        return this._state.isConnected;\n    }\n    async request(e) {\n        if (!e || \"object\" != typeof e || Array.isArray(e)) throw Ya({\n            message: ts.errors.invalidRequestArgs(),\n            data: e\n        });\n        const { method: t, params: n } = e;\n        if (\"string\" != typeof t || 0 === t.length) throw Ya({\n            message: ts.errors.invalidRequestMethod(),\n            data: e\n        });\n        if (void 0 !== n && !Array.isArray(n) && (\"object\" != typeof n || null === n)) throw Ya({\n            message: ts.errors.invalidRequestParams(),\n            data: e\n        });\n        const r = null == n ? {\n            method: t\n        } : {\n            method: t,\n            params: n\n        };\n        return new Promise((e, t)=>{\n            this._rpcRequest(r, Dc(e, t));\n        });\n    }\n    _initializeState(e) {\n        if (this._state.initialized) throw new Error(\"Provider already initialized.\");\n        if (e) {\n            const { accounts: t, chainId: n, isUnlocked: r, networkVersion: i } = e;\n            this._handleConnect(n), this._handleChainChanged({\n                chainId: n,\n                networkVersion: i\n            }), this._handleUnlockStateChanged({\n                accounts: t,\n                isUnlocked: r\n            }), this._handleAccountsChanged(t);\n        }\n        this._state.initialized = !0, this.emit(\"_initialized\");\n    }\n    _rpcRequest(e, t) {\n        let n = t;\n        return Array.isArray(e) || (e.jsonrpc || (e.jsonrpc = \"2.0\"), \"eth_accounts\" !== e.method && \"eth_requestAccounts\" !== e.method || (n = (n, r)=>{\n            this._handleAccountsChanged(r.result ?? [], \"eth_accounts\" === e.method), t(n, r);\n        })), this._rpcEngine.handle(e, n);\n    }\n    _handleConnect(e) {\n        this._state.isConnected || (this._state.isConnected = !0, this.emit(\"connect\", {\n            chainId: e\n        }), this._log.debug(ts.info.connected(e)));\n    }\n    _handleDisconnect(e, t) {\n        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !e) {\n            let n;\n            this._state.isConnected = !1, e ? (n = new Ga(1013, t ?? ts.errors.disconnected()), this._log.debug(n)) : (n = new Ga(1011, t ?? ts.errors.permanentlyDisconnected()), this._log.error(n), Vc(this, Zc, null), this._state.accounts = null, Vc(this, Yc, null), this._state.isUnlocked = !1, this._state.isPermanentlyDisconnected = !0), this.emit(\"disconnect\", n);\n        }\n    }\n    _handleChainChanged({ chainId: e } = {}) {\n        $c(e) ? (this._handleConnect(e), e !== zc(this, Zc) && (Vc(this, Zc, e), this._state.initialized && this.emit(\"chainChanged\", zc(this, Zc)))) : this._log.error(ts.errors.invalidNetworkParams(), {\n            chainId: e\n        });\n    }\n    _handleAccountsChanged(e, t = !1) {\n        let n = e;\n        Array.isArray(e) || (this._log.error(\"MetaMask: Received invalid accounts parameter. Please report this bug.\", e), n = []);\n        for (const t of e)if (\"string\" != typeof t) {\n            this._log.error(\"MetaMask: Received non-string account. Please report this bug.\", e), n = [];\n            break;\n        }\n        if (!Xc(this._state.accounts, n) && (t && null !== this._state.accounts && this._log.error(\"MetaMask: 'eth_accounts' unexpectedly updated accounts. Please report this bug.\", n), this._state.accounts = n, zc(this, Yc) !== n[0] && Vc(this, Yc, n[0] || null), this._state.initialized)) {\n            const e = [\n                ...n\n            ];\n            this.emit(\"accountsChanged\", e);\n        }\n    }\n    _handleUnlockStateChanged({ accounts: e, isUnlocked: t } = {}) {\n        \"boolean\" == typeof t ? t !== this._state.isUnlocked && (this._state.isUnlocked = t, this._handleAccountsChanged(e ?? [])) : this._log.error(\"MetaMask: Received invalid isUnlocked parameter. Please report this bug.\");\n    }\n};\nZc = new WeakMap, Yc = new WeakMap, Qc._defaultState = {\n    accounts: null,\n    isConnected: !1,\n    isUnlocked: !1,\n    initialized: !1,\n    isPermanentlyDisconnected: !1\n};\nvar el, tl, nl = Qc, rl = {\n    exports: {}\n};\nfunction il() {\n    return tl ? el : (tl = 1, el = sc.EventEmitter);\n}\nvar ol, sl = ue(ce);\nol = \"function\" == typeof Object.create ? function(e, t) {\n    e.super_ = t, e.prototype = Object.create(t.prototype, {\n        constructor: {\n            value: e,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n        }\n    });\n} : function(e, t) {\n    e.super_ = t;\n    var n = function() {};\n    n.prototype = t.prototype, e.prototype = new n, e.prototype.constructor = e;\n};\nvar al = Object.getOwnPropertyDescriptors || function(e) {\n    for(var t = Object.keys(e), n = {}, r = 0; r < t.length; r++)n[t[r]] = Object.getOwnPropertyDescriptor(e, t[r]);\n    return n;\n}, cl = /%[sdj%]/g;\nfunction ll(e) {\n    if (!kl(e)) {\n        for(var t = [], n = 0; n < arguments.length; n++)t.push(pl(arguments[n]));\n        return t.join(\" \");\n    }\n    n = 1;\n    for(var r = arguments, i = r.length, o = String(e).replace(cl, function(e) {\n        if (\"%%\" === e) return \"%\";\n        if (n >= i) return e;\n        switch(e){\n            case \"%s\":\n                return String(r[n++]);\n            case \"%d\":\n                return Number(r[n++]);\n            case \"%j\":\n                try {\n                    return JSON.stringify(r[n++]);\n                } catch (e) {\n                    return \"[Circular]\";\n                }\n            default:\n                return e;\n        }\n    }), s = r[n]; n < i; s = r[++n])Cl(s) || !Il(s) ? o += \" \" + s : o += \" \" + pl(s);\n    return o;\n}\nfunction dl(e, t) {\n    if (Ml(c.process)) return function() {\n        return dl(e, t).apply(this, arguments);\n    };\n    if (!0 === ca.noDeprecation) return e;\n    var n = !1;\n    return function() {\n        if (!n) {\n            if (ca.throwDeprecation) throw new Error(t);\n            ca.traceDeprecation ? console.trace(t) : console.error(t), n = !0;\n        }\n        return e.apply(this, arguments);\n    };\n}\nvar ul, hl = {};\nfunction fl(e) {\n    if (Ml(ul) && (ul = ca.env.NODE_DEBUG || \"\"), e = e.toUpperCase(), !hl[e]) if (new RegExp(\"\\\\b\" + e + \"\\\\b\", \"i\").test(ul)) {\n        hl[e] = function() {\n            var t = ll.apply(null, arguments);\n            console.error(\"%s %d: %s\", e, 0, t);\n        };\n    } else hl[e] = function() {};\n    return hl[e];\n}\nfunction pl(e, t) {\n    var n = {\n        seen: [],\n        stylize: ml\n    };\n    return arguments.length >= 3 && (n.depth = arguments[2]), arguments.length >= 4 && (n.colors = arguments[3]), El(t) ? n.showHidden = t : t && Kl(n, t), Ml(n.showHidden) && (n.showHidden = !1), Ml(n.depth) && (n.depth = 2), Ml(n.colors) && (n.colors = !1), Ml(n.customInspect) && (n.customInspect = !0), n.colors && (n.stylize = gl), yl(n, e, n.depth);\n}\nfunction gl(e, t) {\n    var n = pl.styles[t];\n    return n ? \"\\x1b[\" + pl.colors[n][0] + \"m\" + e + \"\\x1b[\" + pl.colors[n][1] + \"m\" : e;\n}\nfunction ml(e, t) {\n    return e;\n}\nfunction yl(e, t, n) {\n    if (e.customInspect && t && Ll(t.inspect) && t.inspect !== pl && (!t.constructor || t.constructor.prototype !== t)) {\n        var r = t.inspect(n, e);\n        return kl(r) || (r = yl(e, r, n)), r;\n    }\n    var i = function(e, t) {\n        if (Ml(t)) return e.stylize(\"undefined\", \"undefined\");\n        if (kl(t)) {\n            var n = \"'\" + JSON.stringify(t).replace(/^\"|\"$/g, \"\").replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + \"'\";\n            return e.stylize(n, \"string\");\n        }\n        if (_l(t)) return e.stylize(\"\" + t, \"number\");\n        if (El(t)) return e.stylize(\"\" + t, \"boolean\");\n        if (Cl(t)) return e.stylize(\"null\", \"null\");\n    }(e, t);\n    if (i) return i;\n    var o = Object.keys(t), s = function(e) {\n        var t = {};\n        return e.forEach(function(e, n) {\n            t[e] = !0;\n        }), t;\n    }(o);\n    if (e.showHidden && (o = Object.getOwnPropertyNames(t)), Pl(t) && (o.indexOf(\"message\") >= 0 || o.indexOf(\"description\") >= 0)) return vl(t);\n    if (0 === o.length) {\n        if (Ll(t)) {\n            var a = t.name ? \": \" + t.name : \"\";\n            return e.stylize(\"[Function\" + a + \"]\", \"special\");\n        }\n        if (Al(t)) return e.stylize(RegExp.prototype.toString.call(t), \"regexp\");\n        if (Rl(t)) return e.stylize(Date.prototype.toString.call(t), \"date\");\n        if (Pl(t)) return vl(t);\n    }\n    var c, l = \"\", d = !1, u = [\n        \"{\",\n        \"}\"\n    ];\n    (wl(t) && (d = !0, u = [\n        \"[\",\n        \"]\"\n    ]), Ll(t)) && (l = \" [Function\" + (t.name ? \": \" + t.name : \"\") + \"]\");\n    return Al(t) && (l = \" \" + RegExp.prototype.toString.call(t)), Rl(t) && (l = \" \" + Date.prototype.toUTCString.call(t)), Pl(t) && (l = \" \" + vl(t)), 0 !== o.length || d && 0 != t.length ? n < 0 ? Al(t) ? e.stylize(RegExp.prototype.toString.call(t), \"regexp\") : e.stylize(\"[Object]\", \"special\") : (e.seen.push(t), c = d ? function(e, t, n, r, i) {\n        for(var o = [], s = 0, a = t.length; s < a; ++s)jl(t, String(s)) ? o.push(bl(e, t, n, r, String(s), !0)) : o.push(\"\");\n        return i.forEach(function(i) {\n            i.match(/^\\d+$/) || o.push(bl(e, t, n, r, i, !0));\n        }), o;\n    }(e, t, n, s, o) : o.map(function(r) {\n        return bl(e, t, n, s, r, d);\n    }), e.seen.pop(), function(e, t, n) {\n        var r = e.reduce(function(e, t) {\n            return t.indexOf(\"\\n\"), e + t.replace(/\\u001b\\[\\d\\d?m/g, \"\").length + 1;\n        }, 0);\n        if (r > 60) return n[0] + (\"\" === t ? \"\" : t + \"\\n \") + \" \" + e.join(\",\\n  \") + \" \" + n[1];\n        return n[0] + t + \" \" + e.join(\", \") + \" \" + n[1];\n    }(c, l, u)) : u[0] + l + u[1];\n}\nfunction vl(e) {\n    return \"[\" + Error.prototype.toString.call(e) + \"]\";\n}\nfunction bl(e, t, n, r, i, o) {\n    var s, a, c;\n    if ((c = Object.getOwnPropertyDescriptor(t, i) || {\n        value: t[i]\n    }).get ? a = c.set ? e.stylize(\"[Getter/Setter]\", \"special\") : e.stylize(\"[Getter]\", \"special\") : c.set && (a = e.stylize(\"[Setter]\", \"special\")), jl(r, i) || (s = \"[\" + i + \"]\"), a || (e.seen.indexOf(c.value) < 0 ? (a = Cl(n) ? yl(e, c.value, null) : yl(e, c.value, n - 1)).indexOf(\"\\n\") > -1 && (a = o ? a.split(\"\\n\").map(function(e) {\n        return \"  \" + e;\n    }).join(\"\\n\").substr(2) : \"\\n\" + a.split(\"\\n\").map(function(e) {\n        return \"   \" + e;\n    }).join(\"\\n\")) : a = e.stylize(\"[Circular]\", \"special\")), Ml(s)) {\n        if (o && i.match(/^\\d+$/)) return a;\n        (s = JSON.stringify(\"\" + i)).match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/) ? (s = s.substr(1, s.length - 2), s = e.stylize(s, \"name\")) : (s = s.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\"), s = e.stylize(s, \"string\"));\n    }\n    return s + \": \" + a;\n}\nfunction wl(e) {\n    return Array.isArray(e);\n}\nfunction El(e) {\n    return \"boolean\" == typeof e;\n}\nfunction Cl(e) {\n    return null === e;\n}\nfunction Sl(e) {\n    return null == e;\n}\nfunction _l(e) {\n    return \"number\" == typeof e;\n}\nfunction kl(e) {\n    return \"string\" == typeof e;\n}\nfunction xl(e) {\n    return \"symbol\" == typeof e;\n}\nfunction Ml(e) {\n    return void 0 === e;\n}\nfunction Al(e) {\n    return Il(e) && \"[object RegExp]\" === Nl(e);\n}\nfunction Il(e) {\n    return \"object\" == typeof e && null !== e;\n}\nfunction Rl(e) {\n    return Il(e) && \"[object Date]\" === Nl(e);\n}\nfunction Pl(e) {\n    return Il(e) && (\"[object Error]\" === Nl(e) || e instanceof Error);\n}\nfunction Ll(e) {\n    return \"function\" == typeof e;\n}\nfunction Ol(e) {\n    return null === e || \"boolean\" == typeof e || \"number\" == typeof e || \"string\" == typeof e || \"symbol\" == typeof e || void 0 === e;\n}\nfunction Tl(e) {\n    return S.isBuffer(e);\n}\nfunction Nl(e) {\n    return Object.prototype.toString.call(e);\n}\nfunction Dl(e) {\n    return e < 10 ? \"0\" + e.toString(10) : e.toString(10);\n}\npl.colors = {\n    bold: [\n        1,\n        22\n    ],\n    italic: [\n        3,\n        23\n    ],\n    underline: [\n        4,\n        24\n    ],\n    inverse: [\n        7,\n        27\n    ],\n    white: [\n        37,\n        39\n    ],\n    grey: [\n        90,\n        39\n    ],\n    black: [\n        30,\n        39\n    ],\n    blue: [\n        34,\n        39\n    ],\n    cyan: [\n        36,\n        39\n    ],\n    green: [\n        32,\n        39\n    ],\n    magenta: [\n        35,\n        39\n    ],\n    red: [\n        31,\n        39\n    ],\n    yellow: [\n        33,\n        39\n    ]\n}, pl.styles = {\n    special: \"cyan\",\n    number: \"yellow\",\n    boolean: \"yellow\",\n    undefined: \"grey\",\n    null: \"bold\",\n    string: \"green\",\n    date: \"magenta\",\n    regexp: \"red\"\n};\nvar $l = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n];\nfunction Bl() {\n    console.log(\"%s - %s\", function() {\n        var e = new Date, t = [\n            Dl(e.getHours()),\n            Dl(e.getMinutes()),\n            Dl(e.getSeconds())\n        ].join(\":\");\n        return [\n            e.getDate(),\n            $l[e.getMonth()],\n            t\n        ].join(\" \");\n    }(), ll.apply(null, arguments));\n}\nfunction Kl(e, t) {\n    if (!t || !Il(t)) return e;\n    for(var n = Object.keys(t), r = n.length; r--;)e[n[r]] = t[n[r]];\n    return e;\n}\nfunction jl(e, t) {\n    return Object.prototype.hasOwnProperty.call(e, t);\n}\nvar Ul = \"undefined\" != typeof Symbol ? Symbol(\"util.promisify.custom\") : void 0;\nfunction Hl(e) {\n    if (\"function\" != typeof e) throw new TypeError('The \"original\" argument must be of type Function');\n    if (Ul && e[Ul]) {\n        var t;\n        if (\"function\" != typeof (t = e[Ul])) throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n        return Object.defineProperty(t, Ul, {\n            value: t,\n            enumerable: !1,\n            writable: !1,\n            configurable: !0\n        }), t;\n    }\n    function t() {\n        for(var t, n, r = new Promise(function(e, r) {\n            t = e, n = r;\n        }), i = [], o = 0; o < arguments.length; o++)i.push(arguments[o]);\n        i.push(function(e, r) {\n            e ? n(e) : t(r);\n        });\n        try {\n            e.apply(this, i);\n        } catch (e) {\n            n(e);\n        }\n        return r;\n    }\n    return Object.setPrototypeOf(t, Object.getPrototypeOf(e)), Ul && Object.defineProperty(t, Ul, {\n        value: t,\n        enumerable: !1,\n        writable: !1,\n        configurable: !0\n    }), Object.defineProperties(t, al(e));\n}\nfunction Fl(e, t) {\n    if (!e) {\n        var n = new Error(\"Promise was rejected with a falsy value\");\n        n.reason = e, e = n;\n    }\n    return t(e);\n}\nfunction zl(e) {\n    if (\"function\" != typeof e) throw new TypeError('The \"original\" argument must be of type Function');\n    function t() {\n        for(var t = [], n = 0; n < arguments.length; n++)t.push(arguments[n]);\n        var r = t.pop();\n        if (\"function\" != typeof r) throw new TypeError(\"The last argument must be of type Function\");\n        var i = this, o = function() {\n            return r.apply(i, arguments);\n        };\n        e.apply(this, t).then(function(e) {\n            ca.nextTick(o.bind(null, null, e));\n        }, function(e) {\n            ca.nextTick(Fl.bind(null, e, o));\n        });\n    }\n    return Object.setPrototypeOf(t, Object.getPrototypeOf(e)), Object.defineProperties(t, al(e)), t;\n}\nHl.custom = Ul;\nvar ql, Vl, Wl, Gl, Zl = {\n    inherits: ol,\n    _extend: Kl,\n    log: Bl,\n    isBuffer: Tl,\n    isPrimitive: Ol,\n    isFunction: Ll,\n    isError: Pl,\n    isDate: Rl,\n    isObject: Il,\n    isRegExp: Al,\n    isUndefined: Ml,\n    isSymbol: xl,\n    isString: kl,\n    isNumber: _l,\n    isNullOrUndefined: Sl,\n    isNull: Cl,\n    isBoolean: El,\n    isArray: wl,\n    inspect: pl,\n    deprecate: dl,\n    format: ll,\n    debuglog: fl,\n    promisify: Hl,\n    callbackify: zl\n}, Yl = ue(Object.freeze({\n    __proto__: null,\n    _extend: Kl,\n    callbackify: zl,\n    debuglog: fl,\n    default: Zl,\n    deprecate: dl,\n    format: ll,\n    inherits: ol,\n    inspect: pl,\n    isArray: wl,\n    isBoolean: El,\n    isBuffer: Tl,\n    isDate: Rl,\n    isError: Pl,\n    isFunction: Ll,\n    isNull: Cl,\n    isNullOrUndefined: Sl,\n    isNumber: _l,\n    isObject: Il,\n    isPrimitive: Ol,\n    isRegExp: Al,\n    isString: kl,\n    isSymbol: xl,\n    isUndefined: Ml,\n    log: Bl,\n    promisify: Hl\n}));\nfunction Jl() {\n    if (Vl) return ql;\n    function e(e, t) {\n        var n = Object.keys(e);\n        if (Object.getOwnPropertySymbols) {\n            var r = Object.getOwnPropertySymbols(e);\n            t && (r = r.filter(function(t) {\n                return Object.getOwnPropertyDescriptor(e, t).enumerable;\n            })), n.push.apply(n, r);\n        }\n        return n;\n    }\n    function t(t) {\n        for(var r = 1; r < arguments.length; r++){\n            var i = null != arguments[r] ? arguments[r] : {};\n            r % 2 ? e(Object(i), !0).forEach(function(e) {\n                n(t, e, i[e]);\n            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : e(Object(i)).forEach(function(e) {\n                Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e));\n            });\n        }\n        return t;\n    }\n    function n(e, t, n) {\n        return (t = i(t)) in e ? Object.defineProperty(e, t, {\n            value: n,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }) : e[t] = n, e;\n    }\n    function r(e, t, n) {\n        return t && function(e, t) {\n            for(var n = 0; n < t.length; n++){\n                var r = t[n];\n                r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, i(r.key), r);\n            }\n        }(e.prototype, t), Object.defineProperty(e, \"prototype\", {\n            writable: !1\n        }), e;\n    }\n    function i(e) {\n        var t = function(e, t) {\n            if (\"object\" != typeof e || null === e) return e;\n            var n = e[Symbol.toPrimitive];\n            if (void 0 !== n) {\n                var r = n.call(e, t || \"default\");\n                if (\"object\" != typeof r) return r;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (\"string\" === t ? String : Number)(e);\n        }(e, \"string\");\n        return \"symbol\" == typeof t ? t : String(t);\n    }\n    Vl = 1;\n    var o = sl.Buffer, s = Yl.inspect, a = s && s.custom || \"inspect\";\n    return ql = function() {\n        function e() {\n            !function(e, t) {\n                if (!(e instanceof t)) throw new TypeError(\"Cannot call a class as a function\");\n            }(this, e), this.head = null, this.tail = null, this.length = 0;\n        }\n        return r(e, [\n            {\n                key: \"push\",\n                value: function(e) {\n                    var t = {\n                        data: e,\n                        next: null\n                    };\n                    this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;\n                }\n            },\n            {\n                key: \"unshift\",\n                value: function(e) {\n                    var t = {\n                        data: e,\n                        next: this.head\n                    };\n                    0 === this.length && (this.tail = t), this.head = t, ++this.length;\n                }\n            },\n            {\n                key: \"shift\",\n                value: function() {\n                    if (0 !== this.length) {\n                        var e = this.head.data;\n                        return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;\n                    }\n                }\n            },\n            {\n                key: \"clear\",\n                value: function() {\n                    this.head = this.tail = null, this.length = 0;\n                }\n            },\n            {\n                key: \"join\",\n                value: function(e) {\n                    if (0 === this.length) return \"\";\n                    for(var t = this.head, n = \"\" + t.data; t = t.next;)n += e + t.data;\n                    return n;\n                }\n            },\n            {\n                key: \"concat\",\n                value: function(e) {\n                    if (0 === this.length) return o.alloc(0);\n                    for(var t, n, r, i = o.allocUnsafe(e >>> 0), s = this.head, a = 0; s;)t = s.data, n = i, r = a, o.prototype.copy.call(t, n, r), a += s.data.length, s = s.next;\n                    return i;\n                }\n            },\n            {\n                key: \"consume\",\n                value: function(e, t) {\n                    var n;\n                    return e < this.head.data.length ? (n = this.head.data.slice(0, e), this.head.data = this.head.data.slice(e)) : n = e === this.head.data.length ? this.shift() : t ? this._getString(e) : this._getBuffer(e), n;\n                }\n            },\n            {\n                key: \"first\",\n                value: function() {\n                    return this.head.data;\n                }\n            },\n            {\n                key: \"_getString\",\n                value: function(e) {\n                    var t = this.head, n = 1, r = t.data;\n                    for(e -= r.length; t = t.next;){\n                        var i = t.data, o = e > i.length ? i.length : e;\n                        if (o === i.length ? r += i : r += i.slice(0, e), 0 === (e -= o)) {\n                            o === i.length ? (++n, t.next ? this.head = t.next : this.head = this.tail = null) : (this.head = t, t.data = i.slice(o));\n                            break;\n                        }\n                        ++n;\n                    }\n                    return this.length -= n, r;\n                }\n            },\n            {\n                key: \"_getBuffer\",\n                value: function(e) {\n                    var t = o.allocUnsafe(e), n = this.head, r = 1;\n                    for(n.data.copy(t), e -= n.data.length; n = n.next;){\n                        var i = n.data, s = e > i.length ? i.length : e;\n                        if (i.copy(t, t.length - e, 0, s), 0 === (e -= s)) {\n                            s === i.length ? (++r, n.next ? this.head = n.next : this.head = this.tail = null) : (this.head = n, n.data = i.slice(s));\n                            break;\n                        }\n                        ++r;\n                    }\n                    return this.length -= r, t;\n                }\n            },\n            {\n                key: a,\n                value: function(e, n) {\n                    return s(this, t(t({}, n), {}, {\n                        depth: 0,\n                        customInspect: !1\n                    }));\n                }\n            }\n        ]), e;\n    }(), ql;\n}\nfunction Xl() {\n    if (Gl) return Wl;\n    function e(e, r) {\n        n(e, r), t(e);\n    }\n    function t(e) {\n        e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit(\"close\");\n    }\n    function n(e, t) {\n        e.emit(\"error\", t);\n    }\n    return Gl = 1, Wl = {\n        destroy: function(r, i) {\n            var o = this, s = this._readableState && this._readableState.destroyed, a = this._writableState && this._writableState.destroyed;\n            return s || a ? (i ? i(r) : r && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, ca.nextTick(n, this, r)) : ca.nextTick(n, this, r)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(r || null, function(n) {\n                !i && n ? o._writableState ? o._writableState.errorEmitted ? ca.nextTick(t, o) : (o._writableState.errorEmitted = !0, ca.nextTick(e, o, n)) : ca.nextTick(e, o, n) : i ? (ca.nextTick(t, o), i(n)) : ca.nextTick(t, o);\n            }), this);\n        },\n        undestroy: function() {\n            this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);\n        },\n        errorOrDestroy: function(e, t) {\n            var n = e._readableState, r = e._writableState;\n            n && n.autoDestroy || r && r.autoDestroy ? e.destroy(t) : e.emit(\"error\", t);\n        }\n    }, Wl;\n}\nvar Ql = {};\nvar ed, td, nd = {};\nfunction rd(e, t, n) {\n    n || (n = Error);\n    var r = function(e) {\n        var n, r;\n        function i(n, r, i) {\n            return e.call(this, function(e, n, r) {\n                return \"string\" == typeof t ? t : t(e, n, r);\n            }(n, r, i)) || this;\n        }\n        return r = e, (n = i).prototype = Object.create(r.prototype), n.prototype.constructor = n, n.__proto__ = r, i;\n    }(n);\n    r.prototype.name = n.name, r.prototype.code = e, nd[e] = r;\n}\nfunction id(e, t) {\n    if (Array.isArray(e)) {\n        var n = e.length;\n        return e = e.map(function(e) {\n            return String(e);\n        }), n > 2 ? \"one of \".concat(t, \" \").concat(e.slice(0, n - 1).join(\", \"), \", or \") + e[n - 1] : 2 === n ? \"one of \".concat(t, \" \").concat(e[0], \" or \").concat(e[1]) : \"of \".concat(t, \" \").concat(e[0]);\n    }\n    return \"of \".concat(t, \" \").concat(String(e));\n}\nfunction od() {\n    if (td) return ed;\n    td = 1;\n    var e = Ql.codes.ERR_INVALID_OPT_VALUE;\n    return ed = {\n        getHighWaterMark: function(t, n, r, i) {\n            var o = function(e, t, n) {\n                return null != e.highWaterMark ? e.highWaterMark : t ? e[n] : null;\n            }(n, i, r);\n            if (null != o) {\n                if (!isFinite(o) || Math.floor(o) !== o || o < 0) throw new e(i ? r : \"highWaterMark\", o);\n                return Math.floor(o);\n            }\n            return t.objectMode ? 16 : 16384;\n        }\n    };\n}\nrd(\"ERR_INVALID_OPT_VALUE\", function(e, t) {\n    return 'The value \"' + t + '\" is invalid for option \"' + e + '\"';\n}, TypeError), rd(\"ERR_INVALID_ARG_TYPE\", function(e, t, n) {\n    var r, i, o;\n    if (\"string\" == typeof t && (i = \"not \", t.substr(0, i.length) === i) ? (r = \"must not be\", t = t.replace(/^not /, \"\")) : r = \"must be\", function(e, t, n) {\n        return (void 0 === n || n > e.length) && (n = e.length), e.substring(n - t.length, n) === t;\n    }(e, \" argument\")) o = \"The \".concat(e, \" \").concat(r, \" \").concat(id(t, \"type\"));\n    else {\n        var s = function(e, t, n) {\n            return \"number\" != typeof n && (n = 0), !(n + t.length > e.length) && -1 !== e.indexOf(t, n);\n        }(e, \".\") ? \"property\" : \"argument\";\n        o = 'The \"'.concat(e, '\" ').concat(s, \" \").concat(r, \" \").concat(id(t, \"type\"));\n    }\n    return o += \". Received type \".concat(typeof n);\n}, TypeError), rd(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\"), rd(\"ERR_METHOD_NOT_IMPLEMENTED\", function(e) {\n    return \"The \" + e + \" method is not implemented\";\n}), rd(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\"), rd(\"ERR_STREAM_DESTROYED\", function(e) {\n    return \"Cannot call \" + e + \" after a stream was destroyed\";\n}), rd(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\"), rd(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\"), rd(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\"), rd(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError), rd(\"ERR_UNKNOWN_ENCODING\", function(e) {\n    return \"Unknown encoding: \" + e;\n}, TypeError), rd(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\"), Ql.codes = nd;\nvar sd, ad, cd, ld, dd, ud, hd = \"function\" == typeof Object.create ? function(e, t) {\n    e.super_ = t, e.prototype = Object.create(t.prototype, {\n        constructor: {\n            value: e,\n            enumerable: !1,\n            writable: !0,\n            configurable: !0\n        }\n    });\n} : function(e, t) {\n    e.super_ = t;\n    var n = function() {};\n    n.prototype = t.prototype, e.prototype = new n, e.prototype.constructor = e;\n}, fd = ue(Object.freeze({\n    __proto__: null,\n    default: hd\n}));\nfunction pd() {\n    if (ad) return sd;\n    function e(e) {\n        try {\n            if (!le.localStorage) return !1;\n        } catch (e) {\n            return !1;\n        }\n        var t = le.localStorage[e];\n        return null != t && \"true\" === String(t).toLowerCase();\n    }\n    return ad = 1, sd = function(t, n) {\n        if (e(\"noDeprecation\")) return t;\n        var r = !1;\n        return function() {\n            if (!r) {\n                if (e(\"throwDeprecation\")) throw new Error(n);\n                e(\"traceDeprecation\") ? console.trace(n) : console.warn(n), r = !0;\n            }\n            return t.apply(this, arguments);\n        };\n    }, sd;\n}\nfunction gd() {\n    if (ld) return cd;\n    function e(e) {\n        var t = this;\n        this.next = null, this.entry = null, this.finish = function() {\n            !function(e, t, n) {\n                var r = e.entry;\n                e.entry = null;\n                for(; r;){\n                    var i = r.callback;\n                    t.pendingcb--, i(n), r = r.next;\n                }\n                t.corkedRequestsFree.next = e;\n            }(t, e);\n        };\n    }\n    var t;\n    ld = 1, cd = E, E.WritableState = w;\n    var n = {\n        deprecate: pd()\n    }, r = il(), i = sl.Buffer, o = (void 0 !== le ? le :  false ? 0 : \"undefined\" != typeof self ? self : {}).Uint8Array || function() {};\n    var s, a = Xl(), c = od().getHighWaterMark, l = Ql.codes, d = l.ERR_INVALID_ARG_TYPE, u = l.ERR_METHOD_NOT_IMPLEMENTED, h = l.ERR_MULTIPLE_CALLBACK, f = l.ERR_STREAM_CANNOT_PIPE, p = l.ERR_STREAM_DESTROYED, g = l.ERR_STREAM_NULL_VALUES, m = l.ERR_STREAM_WRITE_AFTER_END, y = l.ERR_UNKNOWN_ENCODING, v = a.errorOrDestroy;\n    function b() {}\n    function w(n, r, i) {\n        t = t || md(), n = n || {}, \"boolean\" != typeof i && (i = r instanceof t), this.objectMode = !!n.objectMode, i && (this.objectMode = this.objectMode || !!n.writableObjectMode), this.highWaterMark = c(this, n, \"writableHighWaterMark\", i), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;\n        var o = !1 === n.decodeStrings;\n        this.decodeStrings = !o, this.defaultEncoding = n.defaultEncoding || \"utf8\", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(e) {\n            !function(e, t) {\n                var n = e._writableState, r = n.sync, i = n.writecb;\n                if (\"function\" != typeof i) throw new h;\n                if (function(e) {\n                    e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;\n                }(n), t) !function(e, t, n, r, i) {\n                    --t.pendingcb, n ? (ca.nextTick(i, r), ca.nextTick(M, e, t), e._writableState.errorEmitted = !0, v(e, r)) : (i(r), e._writableState.errorEmitted = !0, v(e, r), M(e, t));\n                }(e, n, r, t, i);\n                else {\n                    var o = k(n) || e.destroyed;\n                    o || n.corked || n.bufferProcessing || !n.bufferedRequest || _(e, n), r ? ca.nextTick(S, e, n, o, i) : S(e, n, o, i);\n                }\n            }(r, e);\n        }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = !1 !== n.emitClose, this.autoDestroy = !!n.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new e(this);\n    }\n    function E(e) {\n        var n = this instanceof (t = t || md());\n        if (!n && !s.call(E, this)) return new E(e);\n        this._writableState = new w(e, this, n), this.writable = !0, e && (\"function\" == typeof e.write && (this._write = e.write), \"function\" == typeof e.writev && (this._writev = e.writev), \"function\" == typeof e.destroy && (this._destroy = e.destroy), \"function\" == typeof e.final && (this._final = e.final)), r.call(this);\n    }\n    function C(e, t, n, r, i, o, s) {\n        t.writelen = r, t.writecb = s, t.writing = !0, t.sync = !0, t.destroyed ? t.onwrite(new p(\"write\")) : n ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;\n    }\n    function S(e, t, n, r) {\n        n || function(e, t) {\n            0 === t.length && t.needDrain && (t.needDrain = !1, e.emit(\"drain\"));\n        }(e, t), t.pendingcb--, r(), M(e, t);\n    }\n    function _(t, n) {\n        n.bufferProcessing = !0;\n        var r = n.bufferedRequest;\n        if (t._writev && r && r.next) {\n            var i = n.bufferedRequestCount, o = new Array(i), s = n.corkedRequestsFree;\n            s.entry = r;\n            for(var a = 0, c = !0; r;)o[a] = r, r.isBuf || (c = !1), r = r.next, a += 1;\n            o.allBuffers = c, C(t, n, !0, n.length, o, \"\", s.finish), n.pendingcb++, n.lastBufferedRequest = null, s.next ? (n.corkedRequestsFree = s.next, s.next = null) : n.corkedRequestsFree = new e(n), n.bufferedRequestCount = 0;\n        } else {\n            for(; r;){\n                var l = r.chunk, d = r.encoding, u = r.callback;\n                if (C(t, n, !1, n.objectMode ? 1 : l.length, l, d, u), r = r.next, n.bufferedRequestCount--, n.writing) break;\n            }\n            null === r && (n.lastBufferedRequest = null);\n        }\n        n.bufferedRequest = r, n.bufferProcessing = !1;\n    }\n    function k(e) {\n        return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;\n    }\n    function x(e, t) {\n        e._final(function(n) {\n            t.pendingcb--, n && v(e, n), t.prefinished = !0, e.emit(\"prefinish\"), M(e, t);\n        });\n    }\n    function M(e, t) {\n        var n = k(t);\n        if (n && (function(e, t) {\n            t.prefinished || t.finalCalled || (\"function\" != typeof e._final || t.destroyed ? (t.prefinished = !0, e.emit(\"prefinish\")) : (t.pendingcb++, t.finalCalled = !0, ca.nextTick(x, e, t)));\n        }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit(\"finish\"), t.autoDestroy))) {\n            var r = e._readableState;\n            (!r || r.autoDestroy && r.endEmitted) && e.destroy();\n        }\n        return n;\n    }\n    return fd(E, r), w.prototype.getBuffer = function() {\n        for(var e = this.bufferedRequest, t = []; e;)t.push(e), e = e.next;\n        return t;\n    }, function() {\n        try {\n            Object.defineProperty(w.prototype, \"buffer\", {\n                get: n.deprecate(function() {\n                    return this.getBuffer();\n                }, \"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.\", \"DEP0003\")\n            });\n        } catch (e) {}\n    }(), \"function\" == typeof Symbol && Symbol.hasInstance && \"function\" == typeof Function.prototype[Symbol.hasInstance] ? (s = Function.prototype[Symbol.hasInstance], Object.defineProperty(E, Symbol.hasInstance, {\n        value: function(e) {\n            return !!s.call(this, e) || this === E && e && e._writableState instanceof w;\n        }\n    })) : s = function(e) {\n        return e instanceof this;\n    }, E.prototype.pipe = function() {\n        v(this, new f);\n    }, E.prototype.write = function(e, t, n) {\n        var r, s = this._writableState, a = !1, c = !s.objectMode && (r = e, i.isBuffer(r) || r instanceof o);\n        return c && !i.isBuffer(e) && (e = function(e) {\n            return i.from(e);\n        }(e)), \"function\" == typeof t && (n = t, t = null), c ? t = \"buffer\" : t || (t = s.defaultEncoding), \"function\" != typeof n && (n = b), s.ending ? function(e, t) {\n            var n = new m;\n            v(e, n), ca.nextTick(t, n);\n        }(this, n) : (c || function(e, t, n, r) {\n            var i;\n            return null === n ? i = new g : \"string\" == typeof n || t.objectMode || (i = new d(\"chunk\", [\n                \"string\",\n                \"Buffer\"\n            ], n)), !i || (v(e, i), ca.nextTick(r, i), !1);\n        }(this, s, e, n)) && (s.pendingcb++, a = function(e, t, n, r, o, s) {\n            if (!n) {\n                var a = function(e, t, n) {\n                    e.objectMode || !1 === e.decodeStrings || \"string\" != typeof t || (t = i.from(t, n));\n                    return t;\n                }(t, r, o);\n                r !== a && (n = !0, o = \"buffer\", r = a);\n            }\n            var c = t.objectMode ? 1 : r.length;\n            t.length += c;\n            var l = t.length < t.highWaterMark;\n            l || (t.needDrain = !0);\n            if (t.writing || t.corked) {\n                var d = t.lastBufferedRequest;\n                t.lastBufferedRequest = {\n                    chunk: r,\n                    encoding: o,\n                    isBuf: n,\n                    callback: s,\n                    next: null\n                }, d ? d.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;\n            } else C(e, t, !1, c, r, o, s);\n            return l;\n        }(this, s, c, e, t, n)), a;\n    }, E.prototype.cork = function() {\n        this._writableState.corked++;\n    }, E.prototype.uncork = function() {\n        var e = this._writableState;\n        e.corked && (e.corked--, e.writing || e.corked || e.bufferProcessing || !e.bufferedRequest || _(this, e));\n    }, E.prototype.setDefaultEncoding = function(e) {\n        if (\"string\" == typeof e && (e = e.toLowerCase()), !([\n            \"hex\",\n            \"utf8\",\n            \"utf-8\",\n            \"ascii\",\n            \"binary\",\n            \"base64\",\n            \"ucs2\",\n            \"ucs-2\",\n            \"utf16le\",\n            \"utf-16le\",\n            \"raw\"\n        ].indexOf((e + \"\").toLowerCase()) > -1)) throw new y(e);\n        return this._writableState.defaultEncoding = e, this;\n    }, Object.defineProperty(E.prototype, \"writableBuffer\", {\n        enumerable: !1,\n        get: function() {\n            return this._writableState && this._writableState.getBuffer();\n        }\n    }), Object.defineProperty(E.prototype, \"writableHighWaterMark\", {\n        enumerable: !1,\n        get: function() {\n            return this._writableState.highWaterMark;\n        }\n    }), E.prototype._write = function(e, t, n) {\n        n(new u(\"_write()\"));\n    }, E.prototype._writev = null, E.prototype.end = function(e, t, n) {\n        var r = this._writableState;\n        return \"function\" == typeof e ? (n = e, e = null, t = null) : \"function\" == typeof t && (n = t, t = null), null != e && this.write(e, t), r.corked && (r.corked = 1, this.uncork()), r.ending || function(e, t, n) {\n            t.ending = !0, M(e, t), n && (t.finished ? ca.nextTick(n) : e.once(\"finish\", n));\n            t.ended = !0, e.writable = !1;\n        }(this, r, n), this;\n    }, Object.defineProperty(E.prototype, \"writableLength\", {\n        enumerable: !1,\n        get: function() {\n            return this._writableState.length;\n        }\n    }), Object.defineProperty(E.prototype, \"destroyed\", {\n        enumerable: !1,\n        get: function() {\n            return void 0 !== this._writableState && this._writableState.destroyed;\n        },\n        set: function(e) {\n            this._writableState && (this._writableState.destroyed = e);\n        }\n    }), E.prototype.destroy = a.destroy, E.prototype._undestroy = a.undestroy, E.prototype._destroy = function(e, t) {\n        t(e);\n    }, cd;\n}\nfunction md() {\n    if (ud) return dd;\n    ud = 1;\n    var e = Object.keys || function(e) {\n        var t = [];\n        for(var n in e)t.push(n);\n        return t;\n    };\n    dd = s;\n    var t = Od(), n = gd();\n    fd(s, t);\n    for(var r = e(n.prototype), i = 0; i < r.length; i++){\n        var o = r[i];\n        s.prototype[o] || (s.prototype[o] = n.prototype[o]);\n    }\n    function s(e) {\n        if (!(this instanceof s)) return new s(e);\n        t.call(this, e), n.call(this, e), this.allowHalfOpen = !0, e && (!1 === e.readable && (this.readable = !1), !1 === e.writable && (this.writable = !1), !1 === e.allowHalfOpen && (this.allowHalfOpen = !1, this.once(\"end\", a)));\n    }\n    function a() {\n        this._writableState.ended || ca.nextTick(c, this);\n    }\n    function c(e) {\n        e.end();\n    }\n    return Object.defineProperty(s.prototype, \"writableHighWaterMark\", {\n        enumerable: !1,\n        get: function() {\n            return this._writableState.highWaterMark;\n        }\n    }), Object.defineProperty(s.prototype, \"writableBuffer\", {\n        enumerable: !1,\n        get: function() {\n            return this._writableState && this._writableState.getBuffer();\n        }\n    }), Object.defineProperty(s.prototype, \"writableLength\", {\n        enumerable: !1,\n        get: function() {\n            return this._writableState.length;\n        }\n    }), Object.defineProperty(s.prototype, \"destroyed\", {\n        enumerable: !1,\n        get: function() {\n            return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;\n        },\n        set: function(e) {\n            void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);\n        }\n    }), dd;\n}\nvar yd = S.isEncoding || function(e) {\n    switch(e && e.toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n            return !0;\n        default:\n            return !1;\n    }\n};\nfunction vd(e) {\n    switch(this.encoding = (e || \"utf8\").toLowerCase().replace(/[-_]/, \"\"), function(e) {\n        if (e && !yd(e)) throw new Error(\"Unknown encoding: \" + e);\n    }(e), this.encoding){\n        case \"utf8\":\n            this.surrogateSize = 3;\n            break;\n        case \"ucs2\":\n        case \"utf16le\":\n            this.surrogateSize = 2, this.detectIncompleteChar = wd;\n            break;\n        case \"base64\":\n            this.surrogateSize = 3, this.detectIncompleteChar = Ed;\n            break;\n        default:\n            return void (this.write = bd);\n    }\n    this.charBuffer = new S(6), this.charReceived = 0, this.charLength = 0;\n}\nfunction bd(e) {\n    return e.toString(this.encoding);\n}\nfunction wd(e) {\n    this.charReceived = e.length % 2, this.charLength = this.charReceived ? 2 : 0;\n}\nfunction Ed(e) {\n    this.charReceived = e.length % 3, this.charLength = this.charReceived ? 3 : 0;\n}\nvd.prototype.write = function(e) {\n    for(var t = \"\"; this.charLength;){\n        var n = e.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : e.length;\n        if (e.copy(this.charBuffer, this.charReceived, 0, n), this.charReceived += n, this.charReceived < this.charLength) return \"\";\n        if (e = e.slice(n, e.length), !((i = (t = this.charBuffer.slice(0, this.charLength).toString(this.encoding)).charCodeAt(t.length - 1)) >= 55296 && i <= 56319)) {\n            if (this.charReceived = this.charLength = 0, 0 === e.length) return t;\n            break;\n        }\n        this.charLength += this.surrogateSize, t = \"\";\n    }\n    this.detectIncompleteChar(e);\n    var r = e.length;\n    this.charLength && (e.copy(this.charBuffer, 0, e.length - this.charReceived, r), r -= this.charReceived);\n    var i;\n    r = (t += e.toString(this.encoding, 0, r)).length - 1;\n    if ((i = t.charCodeAt(r)) >= 55296 && i <= 56319) {\n        var o = this.surrogateSize;\n        return this.charLength += o, this.charReceived += o, this.charBuffer.copy(this.charBuffer, o, 0, o), e.copy(this.charBuffer, 0, 0, o), t.substring(0, r);\n    }\n    return t;\n}, vd.prototype.detectIncompleteChar = function(e) {\n    for(var t = e.length >= 3 ? 3 : e.length; t > 0; t--){\n        var n = e[e.length - t];\n        if (1 == t && n >> 5 == 6) {\n            this.charLength = 2;\n            break;\n        }\n        if (t <= 2 && n >> 4 == 14) {\n            this.charLength = 3;\n            break;\n        }\n        if (t <= 3 && n >> 3 == 30) {\n            this.charLength = 4;\n            break;\n        }\n    }\n    this.charReceived = t;\n}, vd.prototype.end = function(e) {\n    var t = \"\";\n    if (e && e.length && (t = this.write(e)), this.charReceived) {\n        var n = this.charReceived, r = this.charBuffer, i = this.encoding;\n        t += r.slice(0, n).toString(i);\n    }\n    return t;\n};\nvar Cd = ue(Object.freeze({\n    __proto__: null,\n    StringDecoder: vd\n})), Sd = Ql.codes.ERR_STREAM_PREMATURE_CLOSE;\nfunction _d() {}\nvar kd, xd, Md, Ad, Id, Rd, Pd = function e(t, n, r) {\n    if (\"function\" == typeof n) return e(t, null, n);\n    n || (n = {}), r = function(e) {\n        var t = !1;\n        return function() {\n            if (!t) {\n                t = !0;\n                for(var n = arguments.length, r = new Array(n), i = 0; i < n; i++)r[i] = arguments[i];\n                e.apply(this, r);\n            }\n        };\n    }(r || _d);\n    var i = n.readable || !1 !== n.readable && t.readable, o = n.writable || !1 !== n.writable && t.writable, s = function() {\n        t.writable || c();\n    }, a = t._writableState && t._writableState.finished, c = function() {\n        o = !1, a = !0, i || r.call(t);\n    }, l = t._readableState && t._readableState.endEmitted, d = function() {\n        i = !1, l = !0, o || r.call(t);\n    }, u = function(e) {\n        r.call(t, e);\n    }, h = function() {\n        var e;\n        return i && !l ? (t._readableState && t._readableState.ended || (e = new Sd), r.call(t, e)) : o && !a ? (t._writableState && t._writableState.ended || (e = new Sd), r.call(t, e)) : void 0;\n    }, f = function() {\n        t.req.on(\"finish\", c);\n    };\n    return !function(e) {\n        return e.setHeader && \"function\" == typeof e.abort;\n    }(t) ? o && !t._writableState && (t.on(\"end\", s), t.on(\"close\", s)) : (t.on(\"complete\", c), t.on(\"abort\", h), t.req ? f() : t.on(\"request\", f)), t.on(\"end\", d), t.on(\"finish\", c), !1 !== n.error && t.on(\"error\", u), t.on(\"close\", h), function() {\n        t.removeListener(\"complete\", c), t.removeListener(\"abort\", h), t.removeListener(\"request\", f), t.req && t.req.removeListener(\"finish\", c), t.removeListener(\"end\", s), t.removeListener(\"close\", s), t.removeListener(\"finish\", c), t.removeListener(\"end\", d), t.removeListener(\"error\", u), t.removeListener(\"close\", h);\n    };\n};\nfunction Ld() {\n    if (xd) return kd;\n    var e;\n    function t(e, t, n) {\n        return (t = function(e) {\n            var t = function(e, t) {\n                if (\"object\" != typeof e || null === e) return e;\n                var n = e[Symbol.toPrimitive];\n                if (void 0 !== n) {\n                    var r = n.call(e, t || \"default\");\n                    if (\"object\" != typeof r) return r;\n                    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n                }\n                return (\"string\" === t ? String : Number)(e);\n            }(e, \"string\");\n            return \"symbol\" == typeof t ? t : String(t);\n        }(t)) in e ? Object.defineProperty(e, t, {\n            value: n,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }) : e[t] = n, e;\n    }\n    xd = 1;\n    var n = Pd, r = Symbol(\"lastResolve\"), i = Symbol(\"lastReject\"), o = Symbol(\"error\"), s = Symbol(\"ended\"), a = Symbol(\"lastPromise\"), c = Symbol(\"handlePromise\"), l = Symbol(\"stream\");\n    function d(e, t) {\n        return {\n            value: e,\n            done: t\n        };\n    }\n    function u(e) {\n        var t = e[r];\n        if (null !== t) {\n            var n = e[l].read();\n            null !== n && (e[a] = null, e[r] = null, e[i] = null, t(d(n, !1)));\n        }\n    }\n    function h(e) {\n        ca.nextTick(u, e);\n    }\n    var f = Object.getPrototypeOf(function() {}), p = Object.setPrototypeOf((t(e = {\n        get stream () {\n            return this[l];\n        },\n        next: function() {\n            var e = this, t = this[o];\n            if (null !== t) return Promise.reject(t);\n            if (this[s]) return Promise.resolve(d(void 0, !0));\n            if (this[l].destroyed) return new Promise(function(t, n) {\n                ca.nextTick(function() {\n                    e[o] ? n(e[o]) : t(d(void 0, !0));\n                });\n            });\n            var n, r = this[a];\n            if (r) n = new Promise(function(e, t) {\n                return function(n, r) {\n                    e.then(function() {\n                        t[s] ? n(d(void 0, !0)) : t[c](n, r);\n                    }, r);\n                };\n            }(r, this));\n            else {\n                var i = this[l].read();\n                if (null !== i) return Promise.resolve(d(i, !1));\n                n = new Promise(this[c]);\n            }\n            return this[a] = n, n;\n        }\n    }, Symbol.asyncIterator, function() {\n        return this;\n    }), t(e, \"return\", function() {\n        var e = this;\n        return new Promise(function(t, n) {\n            e[l].destroy(null, function(e) {\n                e ? n(e) : t(d(void 0, !0));\n            });\n        });\n    }), e), f);\n    return kd = function(e) {\n        var u, f = Object.create(p, (t(u = {}, l, {\n            value: e,\n            writable: !0\n        }), t(u, r, {\n            value: null,\n            writable: !0\n        }), t(u, i, {\n            value: null,\n            writable: !0\n        }), t(u, o, {\n            value: null,\n            writable: !0\n        }), t(u, s, {\n            value: e._readableState.endEmitted,\n            writable: !0\n        }), t(u, c, {\n            value: function(e, t) {\n                var n = f[l].read();\n                n ? (f[a] = null, f[r] = null, f[i] = null, e(d(n, !1))) : (f[r] = e, f[i] = t);\n            },\n            writable: !0\n        }), u));\n        return f[a] = null, n(e, function(e) {\n            if (e && \"ERR_STREAM_PREMATURE_CLOSE\" !== e.code) {\n                var t = f[i];\n                return null !== t && (f[a] = null, f[r] = null, f[i] = null, t(e)), void (f[o] = e);\n            }\n            var n = f[r];\n            null !== n && (f[a] = null, f[r] = null, f[i] = null, n(d(void 0, !0))), f[s] = !0;\n        }), e.on(\"readable\", h.bind(null, f)), f;\n    }, kd;\n}\nfunction Od() {\n    if (Rd) return Id;\n    var e;\n    Rd = 1, Id = E, E.ReadableState = w, sc.EventEmitter;\n    var t = function(e, t) {\n        return e.listeners(t).length;\n    }, n = il(), r = sl.Buffer, i = (void 0 !== le ? le :  false ? 0 : \"undefined\" != typeof self ? self : {}).Uint8Array || function() {};\n    var o, s = Yl;\n    o = s && s.debuglog ? s.debuglog(\"stream\") : function() {};\n    var a, c, l, d = Jl(), u = Xl(), h = od().getHighWaterMark, f = Ql.codes, p = f.ERR_INVALID_ARG_TYPE, g = f.ERR_STREAM_PUSH_AFTER_EOF, m = f.ERR_METHOD_NOT_IMPLEMENTED, y = f.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n    fd(E, n);\n    var v = u.errorOrDestroy, b = [\n        \"error\",\n        \"close\",\n        \"destroy\",\n        \"pause\",\n        \"resume\"\n    ];\n    function w(t, n, r) {\n        e = e || md(), t = t || {}, \"boolean\" != typeof r && (r = n instanceof e), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = h(this, t, \"readableHighWaterMark\", r), this.buffer = new d, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = !1 !== t.emitClose, this.autoDestroy = !!t.autoDestroy, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || \"utf8\", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (a || (a = Cd.StringDecoder), this.decoder = new a(t.encoding), this.encoding = t.encoding);\n    }\n    function E(t) {\n        if (e = e || md(), !(this instanceof E)) return new E(t);\n        var r = this instanceof e;\n        this._readableState = new w(t, this, r), this.readable = !0, t && (\"function\" == typeof t.read && (this._read = t.read), \"function\" == typeof t.destroy && (this._destroy = t.destroy)), n.call(this);\n    }\n    function C(e, t, n, s, a) {\n        o(\"readableAddChunk\", t);\n        var c, l = e._readableState;\n        if (null === t) l.reading = !1, function(e, t) {\n            if (o(\"onEofChunk\"), t.ended) return;\n            if (t.decoder) {\n                var n = t.decoder.end();\n                n && n.length && (t.buffer.push(n), t.length += t.objectMode ? 1 : n.length);\n            }\n            t.ended = !0, t.sync ? x(e) : (t.needReadable = !1, t.emittedReadable || (t.emittedReadable = !0, M(e)));\n        }(e, l);\n        else if (a || (c = function(e, t) {\n            var n;\n            o = t, r.isBuffer(o) || o instanceof i || \"string\" == typeof t || void 0 === t || e.objectMode || (n = new p(\"chunk\", [\n                \"string\",\n                \"Buffer\",\n                \"Uint8Array\"\n            ], t));\n            var o;\n            return n;\n        }(l, t)), c) v(e, c);\n        else if (l.objectMode || t && t.length > 0) if (\"string\" == typeof t || l.objectMode || Object.getPrototypeOf(t) === r.prototype || (t = function(e) {\n            return r.from(e);\n        }(t)), s) l.endEmitted ? v(e, new y) : S(e, l, t, !0);\n        else if (l.ended) v(e, new g);\n        else {\n            if (l.destroyed) return !1;\n            l.reading = !1, l.decoder && !n ? (t = l.decoder.write(t), l.objectMode || 0 !== t.length ? S(e, l, t, !1) : A(e, l)) : S(e, l, t, !1);\n        }\n        else s || (l.reading = !1, A(e, l));\n        return !l.ended && (l.length < l.highWaterMark || 0 === l.length);\n    }\n    function S(e, t, n, r) {\n        t.flowing && 0 === t.length && !t.sync ? (t.awaitDrain = 0, e.emit(\"data\", n)) : (t.length += t.objectMode ? 1 : n.length, r ? t.buffer.unshift(n) : t.buffer.push(n), t.needReadable && x(e)), A(e, t);\n    }\n    Object.defineProperty(E.prototype, \"destroyed\", {\n        enumerable: !1,\n        get: function() {\n            return void 0 !== this._readableState && this._readableState.destroyed;\n        },\n        set: function(e) {\n            this._readableState && (this._readableState.destroyed = e);\n        }\n    }), E.prototype.destroy = u.destroy, E.prototype._undestroy = u.undestroy, E.prototype._destroy = function(e, t) {\n        t(e);\n    }, E.prototype.push = function(e, t) {\n        var n, i = this._readableState;\n        return i.objectMode ? n = !0 : \"string\" == typeof e && ((t = t || i.defaultEncoding) !== i.encoding && (e = r.from(e, t), t = \"\"), n = !0), C(this, e, t, !1, n);\n    }, E.prototype.unshift = function(e) {\n        return C(this, e, null, !0, !1);\n    }, E.prototype.isPaused = function() {\n        return !1 === this._readableState.flowing;\n    }, E.prototype.setEncoding = function(e) {\n        a || (a = Cd.StringDecoder);\n        var t = new a(e);\n        this._readableState.decoder = t, this._readableState.encoding = this._readableState.decoder.encoding;\n        for(var n = this._readableState.buffer.head, r = \"\"; null !== n;)r += t.write(n.data), n = n.next;\n        return this._readableState.buffer.clear(), \"\" !== r && this._readableState.buffer.push(r), this._readableState.length = r.length, this;\n    };\n    var _ = 1073741824;\n    function k(e, t) {\n        return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function(e) {\n            return e >= _ ? e = _ : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;\n        }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));\n    }\n    function x(e) {\n        var t = e._readableState;\n        o(\"emitReadable\", t.needReadable, t.emittedReadable), t.needReadable = !1, t.emittedReadable || (o(\"emitReadable\", t.flowing), t.emittedReadable = !0, ca.nextTick(M, e));\n    }\n    function M(e) {\n        var t = e._readableState;\n        o(\"emitReadable_\", t.destroyed, t.length, t.ended), t.destroyed || !t.length && !t.ended || (e.emit(\"readable\"), t.emittedReadable = !1), t.needReadable = !t.flowing && !t.ended && t.length <= t.highWaterMark, O(e);\n    }\n    function A(e, t) {\n        t.readingMore || (t.readingMore = !0, ca.nextTick(I, e, t));\n    }\n    function I(e, t) {\n        for(; !t.reading && !t.ended && (t.length < t.highWaterMark || t.flowing && 0 === t.length);){\n            var n = t.length;\n            if (o(\"maybeReadMore read 0\"), e.read(0), n === t.length) break;\n        }\n        t.readingMore = !1;\n    }\n    function R(e) {\n        var t = e._readableState;\n        t.readableListening = e.listenerCount(\"readable\") > 0, t.resumeScheduled && !t.paused ? t.flowing = !0 : e.listenerCount(\"data\") > 0 && e.resume();\n    }\n    function P(e) {\n        o(\"readable nexttick read 0\"), e.read(0);\n    }\n    function L(e, t) {\n        o(\"resume\", t.reading), t.reading || e.read(0), t.resumeScheduled = !1, e.emit(\"resume\"), O(e), t.flowing && !t.reading && e.read(0);\n    }\n    function O(e) {\n        var t = e._readableState;\n        for(o(\"flow\", t.flowing); t.flowing && null !== e.read(););\n    }\n    function T(e, t) {\n        return 0 === t.length ? null : (t.objectMode ? n = t.buffer.shift() : !e || e >= t.length ? (n = t.decoder ? t.buffer.join(\"\") : 1 === t.buffer.length ? t.buffer.first() : t.buffer.concat(t.length), t.buffer.clear()) : n = t.buffer.consume(e, t.decoder), n);\n        var n;\n    }\n    function N(e) {\n        var t = e._readableState;\n        o(\"endReadable\", t.endEmitted), t.endEmitted || (t.ended = !0, ca.nextTick(D, t, e));\n    }\n    function D(e, t) {\n        if (o(\"endReadableNT\", e.endEmitted, e.length), !e.endEmitted && 0 === e.length && (e.endEmitted = !0, t.readable = !1, t.emit(\"end\"), e.autoDestroy)) {\n            var n = t._writableState;\n            (!n || n.autoDestroy && n.finished) && t.destroy();\n        }\n    }\n    function $(e, t) {\n        for(var n = 0, r = e.length; n < r; n++)if (e[n] === t) return n;\n        return -1;\n    }\n    return E.prototype.read = function(e) {\n        o(\"read\", e), e = parseInt(e, 10);\n        var t = this._readableState, n = e;\n        if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && ((0 !== t.highWaterMark ? t.length >= t.highWaterMark : t.length > 0) || t.ended)) return o(\"read: emitReadable\", t.length, t.ended), 0 === t.length && t.ended ? N(this) : x(this), null;\n        if (0 === (e = k(e, t)) && t.ended) return 0 === t.length && N(this), null;\n        var r, i = t.needReadable;\n        return o(\"need readable\", i), (0 === t.length || t.length - e < t.highWaterMark) && o(\"length less than watermark\", i = !0), t.ended || t.reading ? o(\"reading or ended\", i = !1) : i && (o(\"do read\"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), this._read(t.highWaterMark), t.sync = !1, t.reading || (e = k(n, t))), null === (r = e > 0 ? T(e, t) : null) ? (t.needReadable = t.length <= t.highWaterMark, e = 0) : (t.length -= e, t.awaitDrain = 0), 0 === t.length && (t.ended || (t.needReadable = !0), n !== e && t.ended && N(this)), null !== r && this.emit(\"data\", r), r;\n    }, E.prototype._read = function(e) {\n        v(this, new m(\"_read()\"));\n    }, E.prototype.pipe = function(e, n) {\n        var r = this, i = this._readableState;\n        switch(i.pipesCount){\n            case 0:\n                i.pipes = e;\n                break;\n            case 1:\n                i.pipes = [\n                    i.pipes,\n                    e\n                ];\n                break;\n            default:\n                i.pipes.push(e);\n        }\n        i.pipesCount += 1, o(\"pipe count=%d opts=%j\", i.pipesCount, n);\n        var s = (!n || !1 !== n.end) && e !== ca.stdout && e !== ca.stderr ? c : g;\n        function a(t, n) {\n            o(\"onunpipe\"), t === r && n && !1 === n.hasUnpiped && (n.hasUnpiped = !0, o(\"cleanup\"), e.removeListener(\"close\", f), e.removeListener(\"finish\", p), e.removeListener(\"drain\", l), e.removeListener(\"error\", h), e.removeListener(\"unpipe\", a), r.removeListener(\"end\", c), r.removeListener(\"end\", g), r.removeListener(\"data\", u), d = !0, !i.awaitDrain || e._writableState && !e._writableState.needDrain || l());\n        }\n        function c() {\n            o(\"onend\"), e.end();\n        }\n        i.endEmitted ? ca.nextTick(s) : r.once(\"end\", s), e.on(\"unpipe\", a);\n        var l = function(e) {\n            return function() {\n                var n = e._readableState;\n                o(\"pipeOnDrain\", n.awaitDrain), n.awaitDrain && n.awaitDrain--, 0 === n.awaitDrain && t(e, \"data\") && (n.flowing = !0, O(e));\n            };\n        }(r);\n        e.on(\"drain\", l);\n        var d = !1;\n        function u(t) {\n            o(\"ondata\");\n            var n = e.write(t);\n            o(\"dest.write\", n), !1 === n && ((1 === i.pipesCount && i.pipes === e || i.pipesCount > 1 && -1 !== $(i.pipes, e)) && !d && (o(\"false write response, pause\", i.awaitDrain), i.awaitDrain++), r.pause());\n        }\n        function h(n) {\n            o(\"onerror\", n), g(), e.removeListener(\"error\", h), 0 === t(e, \"error\") && v(e, n);\n        }\n        function f() {\n            e.removeListener(\"finish\", p), g();\n        }\n        function p() {\n            o(\"onfinish\"), e.removeListener(\"close\", f), g();\n        }\n        function g() {\n            o(\"unpipe\"), r.unpipe(e);\n        }\n        return r.on(\"data\", u), function(e, t, n) {\n            if (\"function\" == typeof e.prependListener) return e.prependListener(t, n);\n            e._events && e._events[t] ? Array.isArray(e._events[t]) ? e._events[t].unshift(n) : e._events[t] = [\n                n,\n                e._events[t]\n            ] : e.on(t, n);\n        }(e, \"error\", h), e.once(\"close\", f), e.once(\"finish\", p), e.emit(\"pipe\", r), i.flowing || (o(\"pipe resume\"), r.resume()), e;\n    }, E.prototype.unpipe = function(e) {\n        var t = this._readableState, n = {\n            hasUnpiped: !1\n        };\n        if (0 === t.pipesCount) return this;\n        if (1 === t.pipesCount) return e && e !== t.pipes || (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, e && e.emit(\"unpipe\", this, n)), this;\n        if (!e) {\n            var r = t.pipes, i = t.pipesCount;\n            t.pipes = null, t.pipesCount = 0, t.flowing = !1;\n            for(var o = 0; o < i; o++)r[o].emit(\"unpipe\", this, {\n                hasUnpiped: !1\n            });\n            return this;\n        }\n        var s = $(t.pipes, e);\n        return -1 === s || (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit(\"unpipe\", this, n)), this;\n    }, E.prototype.on = function(e, t) {\n        var r = n.prototype.on.call(this, e, t), i = this._readableState;\n        return \"data\" === e ? (i.readableListening = this.listenerCount(\"readable\") > 0, !1 !== i.flowing && this.resume()) : \"readable\" === e && (i.endEmitted || i.readableListening || (i.readableListening = i.needReadable = !0, i.flowing = !1, i.emittedReadable = !1, o(\"on readable\", i.length, i.reading), i.length ? x(this) : i.reading || ca.nextTick(P, this))), r;\n    }, E.prototype.addListener = E.prototype.on, E.prototype.removeListener = function(e, t) {\n        var r = n.prototype.removeListener.call(this, e, t);\n        return \"readable\" === e && ca.nextTick(R, this), r;\n    }, E.prototype.removeAllListeners = function(e) {\n        var t = n.prototype.removeAllListeners.apply(this, arguments);\n        return \"readable\" !== e && void 0 !== e || ca.nextTick(R, this), t;\n    }, E.prototype.resume = function() {\n        var e = this._readableState;\n        return e.flowing || (o(\"resume\"), e.flowing = !e.readableListening, function(e, t) {\n            t.resumeScheduled || (t.resumeScheduled = !0, ca.nextTick(L, e, t));\n        }(this, e)), e.paused = !1, this;\n    }, E.prototype.pause = function() {\n        return o(\"call pause flowing=%j\", this._readableState.flowing), !1 !== this._readableState.flowing && (o(\"pause\"), this._readableState.flowing = !1, this.emit(\"pause\")), this._readableState.paused = !0, this;\n    }, E.prototype.wrap = function(e) {\n        var t = this, n = this._readableState, r = !1;\n        for(var i in e.on(\"end\", function() {\n            if (o(\"wrapped end\"), n.decoder && !n.ended) {\n                var e = n.decoder.end();\n                e && e.length && t.push(e);\n            }\n            t.push(null);\n        }), e.on(\"data\", function(i) {\n            (o(\"wrapped data\"), n.decoder && (i = n.decoder.write(i)), n.objectMode && null == i) || (n.objectMode || i && i.length) && (t.push(i) || (r = !0, e.pause()));\n        }), e)void 0 === this[i] && \"function\" == typeof e[i] && (this[i] = function(t) {\n            return function() {\n                return e[t].apply(e, arguments);\n            };\n        }(i));\n        for(var s = 0; s < b.length; s++)e.on(b[s], this.emit.bind(this, b[s]));\n        return this._read = function(t) {\n            o(\"wrapped _read\", t), r && (r = !1, e.resume());\n        }, this;\n    }, \"function\" == typeof Symbol && (E.prototype[Symbol.asyncIterator] = function() {\n        return void 0 === c && (c = Ld()), c(this);\n    }), Object.defineProperty(E.prototype, \"readableHighWaterMark\", {\n        enumerable: !1,\n        get: function() {\n            return this._readableState.highWaterMark;\n        }\n    }), Object.defineProperty(E.prototype, \"readableBuffer\", {\n        enumerable: !1,\n        get: function() {\n            return this._readableState && this._readableState.buffer;\n        }\n    }), Object.defineProperty(E.prototype, \"readableFlowing\", {\n        enumerable: !1,\n        get: function() {\n            return this._readableState.flowing;\n        },\n        set: function(e) {\n            this._readableState && (this._readableState.flowing = e);\n        }\n    }), E._fromList = T, Object.defineProperty(E.prototype, \"readableLength\", {\n        enumerable: !1,\n        get: function() {\n            return this._readableState.length;\n        }\n    }), \"function\" == typeof Symbol && (E.from = function(e, t) {\n        return void 0 === l && (l = Ad ? Md : (Ad = 1, Md = function() {\n            throw new Error(\"Readable.from is not available in the browser\");\n        })), l(E, e, t);\n    }), Id;\n}\nvar Td = Hd, Nd = Ql.codes, Dd = Nd.ERR_METHOD_NOT_IMPLEMENTED, $d = Nd.ERR_MULTIPLE_CALLBACK, Bd = Nd.ERR_TRANSFORM_ALREADY_TRANSFORMING, Kd = Nd.ERR_TRANSFORM_WITH_LENGTH_0, jd = md();\nfunction Ud(e, t) {\n    var n = this._transformState;\n    n.transforming = !1;\n    var r = n.writecb;\n    if (null === r) return this.emit(\"error\", new $d);\n    n.writechunk = null, n.writecb = null, null != t && this.push(t), r(e);\n    var i = this._readableState;\n    i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);\n}\nfunction Hd(e) {\n    if (!(this instanceof Hd)) return new Hd(e);\n    jd.call(this, e), this._transformState = {\n        afterTransform: Ud.bind(this),\n        needTransform: !1,\n        transforming: !1,\n        writecb: null,\n        writechunk: null,\n        writeencoding: null\n    }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && (\"function\" == typeof e.transform && (this._transform = e.transform), \"function\" == typeof e.flush && (this._flush = e.flush)), this.on(\"prefinish\", Fd);\n}\nfunction Fd() {\n    var e = this;\n    \"function\" != typeof this._flush || this._readableState.destroyed ? zd(this, null, null) : this._flush(function(t, n) {\n        zd(e, t, n);\n    });\n}\nfunction zd(e, t, n) {\n    if (t) return e.emit(\"error\", t);\n    if (null != n && e.push(n), e._writableState.length) throw new Kd;\n    if (e._transformState.transforming) throw new Bd;\n    return e.push(null);\n}\nfd(Hd, jd), Hd.prototype.push = function(e, t) {\n    return this._transformState.needTransform = !1, jd.prototype.push.call(this, e, t);\n}, Hd.prototype._transform = function(e, t, n) {\n    n(new Dd(\"_transform()\"));\n}, Hd.prototype._write = function(e, t, n) {\n    var r = this._transformState;\n    if (r.writecb = n, r.writechunk = e, r.writeencoding = t, !r.transforming) {\n        var i = this._readableState;\n        (r.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);\n    }\n}, Hd.prototype._read = function(e) {\n    var t = this._transformState;\n    null === t.writechunk || t.transforming ? t.needTransform = !0 : (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform));\n}, Hd.prototype._destroy = function(e, t) {\n    jd.prototype._destroy.call(this, e, function(e) {\n        t(e);\n    });\n};\nvar qd, Vd = Gd, Wd = Td;\nfunction Gd(e) {\n    if (!(this instanceof Gd)) return new Gd(e);\n    Wd.call(this, e);\n}\nfd(Gd, Wd), Gd.prototype._transform = function(e, t, n) {\n    n(null, e);\n};\nvar Zd = Ql.codes, Yd = Zd.ERR_MISSING_ARGS, Jd = Zd.ERR_STREAM_DESTROYED;\nfunction Xd(e) {\n    if (e) throw e;\n}\nfunction Qd(e) {\n    e();\n}\nfunction eu(e, t) {\n    return e.pipe(t);\n}\nvar tu = function() {\n    for(var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n];\n    var r, i = function(e) {\n        return e.length ? \"function\" != typeof e[e.length - 1] ? Xd : e.pop() : Xd;\n    }(t);\n    if (Array.isArray(t[0]) && (t = t[0]), t.length < 2) throw new Yd(\"streams\");\n    var o = t.map(function(e, n) {\n        var s = n < t.length - 1;\n        return function(e, t, n, r) {\n            r = function(e) {\n                var t = !1;\n                return function() {\n                    t || (t = !0, e.apply(void 0, arguments));\n                };\n            }(r);\n            var i = !1;\n            e.on(\"close\", function() {\n                i = !0;\n            }), void 0 === qd && (qd = Pd), qd(e, {\n                readable: t,\n                writable: n\n            }, function(e) {\n                if (e) return r(e);\n                i = !0, r();\n            });\n            var o = !1;\n            return function(t) {\n                if (!i && !o) return o = !0, function(e) {\n                    return e.setHeader && \"function\" == typeof e.abort;\n                }(e) ? e.abort() : \"function\" == typeof e.destroy ? e.destroy() : void r(t || new Jd(\"pipe\"));\n            };\n        }(e, s, n > 0, function(e) {\n            r || (r = e), e && o.forEach(Qd), s || (o.forEach(Qd), i(r));\n        });\n    });\n    return t.reduce(eu);\n};\n!function(e, t) {\n    (t = rl.exports = Od()).Stream = t, t.Readable = t, t.Writable = gd(), t.Duplex = md(), t.Transform = Td, t.PassThrough = Vd, t.finished = Pd, t.pipeline = tu;\n}(0, rl.exports);\nvar nu = rl.exports;\nfunction ru(e = {}) {\n    const t = {}, n = new nu.Duplex({\n        objectMode: !0,\n        read: ()=>{},\n        write: function(n, o, s) {\n            let a = null;\n            try {\n                !n.id ? function(n) {\n                    e?.retryOnMessage && n.method === e.retryOnMessage && Object.values(t).forEach(({ req: e, retryCount: n = 0 })=>{\n                        if (!e.id) return;\n                        if (n >= 3) throw new Error(`StreamMiddleware - Retry limit exceeded for request id \"${e.id}\"`);\n                        const r = t[e.id];\n                        r && (r.retryCount = n + 1), i(e);\n                    });\n                    r.emit(\"notification\", n);\n                }(n) : function(e) {\n                    const { id: n } = e;\n                    if (null === n) return;\n                    const r = t[n];\n                    if (!r) return void console.warn(`StreamMiddleware - Unknown response id \"${n}\"`);\n                    delete t[n], Object.assign(r.res, e), setTimeout(r.end);\n                }(n);\n            } catch (e) {\n                a = e;\n            }\n            s(a);\n        }\n    }), r = new Ic;\n    return {\n        events: r,\n        middleware: (e, n, r, o)=>{\n            t[e.id] = {\n                req: e,\n                res: n,\n                next: r,\n                end: o\n            }, i(e);\n        },\n        stream: n\n    };\n    function i(e) {\n        n.push(e);\n    }\n}\nvar iu = {}, ou = {\n    exports: {}\n}, su = function e(t, n) {\n    if (t && n) return e(t)(n);\n    if (\"function\" != typeof t) throw new TypeError(\"need wrapper function\");\n    return Object.keys(t).forEach(function(e) {\n        r[e] = t[e];\n    }), r;\n    function r() {\n        for(var e = new Array(arguments.length), n = 0; n < e.length; n++)e[n] = arguments[n];\n        var r = t.apply(this, e), i = e[e.length - 1];\n        return \"function\" == typeof r && r !== i && Object.keys(i).forEach(function(e) {\n            r[e] = i[e];\n        }), r;\n    }\n};\nvar au = su;\nfunction cu(e) {\n    var t = function() {\n        return t.called ? t.value : (t.called = !0, t.value = e.apply(this, arguments));\n    };\n    return t.called = !1, t;\n}\nfunction lu(e) {\n    var t = function() {\n        if (t.called) throw new Error(t.onceError);\n        return t.called = !0, t.value = e.apply(this, arguments);\n    }, n = e.name || \"Function wrapped with `once`\";\n    return t.onceError = n + \" shouldn't be called more than once\", t.called = !1, t;\n}\nou.exports = au(cu), ou.exports.strict = au(lu), cu.proto = cu(function() {\n    Object.defineProperty(Function.prototype, \"once\", {\n        value: function() {\n            return cu(this);\n        },\n        configurable: !0\n    }), Object.defineProperty(Function.prototype, \"onceStrict\", {\n        value: function() {\n            return lu(this);\n        },\n        configurable: !0\n    });\n});\nvar du = ou.exports, uu = {};\nObject.defineProperty(uu, \"__esModule\", {\n    value: !0\n}), uu.Substream = void 0;\nconst hu = nu;\nclass fu extends hu.Duplex {\n    constructor({ parent: e, name: t }){\n        super({\n            objectMode: !0\n        }), this._parent = e, this._name = t;\n    }\n    _read() {}\n    _write(e, t, n) {\n        this._parent.push({\n            name: this._name,\n            data: e\n        }), n();\n    }\n}\nuu.Substream = fu;\nvar pu = le && le.__importDefault || function(e) {\n    return e && e.__esModule ? e : {\n        default: e\n    };\n};\nObject.defineProperty(iu, \"__esModule\", {\n    value: !0\n}), iu.ObjectMultiplex = void 0;\nconst gu = nu, mu = pu(du), yu = uu, vu = Symbol(\"IGNORE_SUBSTREAM\");\nlet bu = class extends gu.Duplex {\n    constructor(e = {}){\n        super(Object.assign(Object.assign({}, e), {\n            objectMode: !0\n        })), this._substreams = {};\n    }\n    createStream(e) {\n        if (this.destroyed) throw new Error(`ObjectMultiplex - parent stream for name \"${e}\" already destroyed`);\n        if (this._readableState.ended || this._writableState.ended) throw new Error(`ObjectMultiplex - parent stream for name \"${e}\" already ended`);\n        if (!e) throw new Error(\"ObjectMultiplex - name must not be empty\");\n        if (this._substreams[e]) throw new Error(`ObjectMultiplex - Substream for name \"${e}\" already exists`);\n        const t = new yu.Substream({\n            parent: this,\n            name: e\n        });\n        return this._substreams[e] = t, function(e, t) {\n            const n = (0, mu.default)(t);\n            (0, gu.finished)(e, {\n                readable: !1\n            }, n), (0, gu.finished)(e, {\n                writable: !1\n            }, n);\n        }(this, (e)=>t.destroy(e || void 0)), t;\n    }\n    ignoreStream(e) {\n        if (!e) throw new Error(\"ObjectMultiplex - name must not be empty\");\n        if (this._substreams[e]) throw new Error(`ObjectMultiplex - Substream for name \"${e}\" already exists`);\n        this._substreams[e] = vu;\n    }\n    _read() {}\n    _write(e, t, n) {\n        const { name: r, data: i } = e;\n        if (!r) return console.warn(`ObjectMultiplex - malformed chunk without name \"${e}\"`), n();\n        const o = this._substreams[r];\n        return o ? (o !== vu && o.push(i), n()) : (console.warn(`ObjectMultiplex - orphaned data for stream \"${r}\"`), n());\n    }\n};\niu.ObjectMultiplex = bu;\nvar wu = de(iu.ObjectMultiplex);\nconst Eu = (e)=>null !== e && \"object\" == typeof e && \"function\" == typeof e.pipe;\nEu.writable = (e)=>Eu(e) && !1 !== e.writable && \"function\" == typeof e._write && \"object\" == typeof e._writableState, Eu.readable = (e)=>Eu(e) && !1 !== e.readable && \"function\" == typeof e._read && \"object\" == typeof e._readableState, Eu.duplex = (e)=>Eu.writable(e) && Eu.readable(e), Eu.transform = (e)=>Eu.duplex(e) && \"function\" == typeof e._transform;\nvar Cu, Su = Eu, _u = class extends nl {\n    constructor(e, { jsonRpcStreamName: t, logger: n = console, maxEventListeners: r = 100, rpcMiddleware: i = [] }){\n        if (super({\n            logger: n,\n            maxEventListeners: r,\n            rpcMiddleware: i\n        }), !Su.duplex(e)) throw new Error(ts.errors.invalidDuplexStream());\n        this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n        const o = new wu;\n        nu.pipeline(e, o, e, this._handleStreamDisconnect.bind(this, \"MetaMask\")), this._jsonRpcConnection = ru({\n            retryOnMessage: \"METAMASK_EXTENSION_CONNECT_CAN_RETRY\"\n        }), nu.pipeline(this._jsonRpcConnection.stream, o.createStream(t), this._jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"MetaMask RpcProvider\")), this._rpcEngine.push(this._jsonRpcConnection.middleware), this._jsonRpcConnection.events.on(\"notification\", (t)=>{\n            const { method: n, params: r } = t;\n            \"metamask_accountsChanged\" === n ? this._handleAccountsChanged(r) : \"metamask_unlockStateChanged\" === n ? this._handleUnlockStateChanged(r) : \"metamask_chainChanged\" === n ? this._handleChainChanged(r) : Oc.includes(n) ? this.emit(\"message\", {\n                type: n,\n                data: r\n            }) : \"METAMASK_STREAM_FAILURE\" === n && e.destroy(new Error(ts.errors.permanentlyDisconnected()));\n        });\n    }\n    async _initializeStateAsync() {\n        let e;\n        try {\n            e = await this.request({\n                method: \"metamask_getProviderState\"\n            });\n        } catch (e) {\n            this._log.error(\"MetaMask: Failed to get initial state. Please report this bug.\", e);\n        }\n        this._initializeState(e);\n    }\n    _handleStreamDisconnect(e, t) {\n        let n = `MetaMask: Lost connection to \"${e}\".`;\n        t?.stack && (n += `\\n${t.stack}`), this._log.warn(n), this.listenerCount(\"error\") > 0 && this.emit(\"error\", n), this._handleDisconnect(!1, t ? t.message : void 0);\n    }\n    _handleChainChanged({ chainId: e, networkVersion: t } = {}) {\n        $c(e) && ((e)=>Boolean(e) && \"string\" == typeof e)(t) ? \"loading\" === t ? this._handleDisconnect(!0) : super._handleChainChanged({\n            chainId: e\n        }) : this._log.error(ts.errors.invalidNetworkParams(), {\n            chainId: e,\n            networkVersion: t\n        });\n    }\n}, ku = class extends _u {\n    constructor(e, { jsonRpcStreamName: t = \"metamask-provider\", logger: n = console, maxEventListeners: r = 100, shouldSendMetadata: i } = {}){\n        if (super(e, {\n            jsonRpcStreamName: t,\n            logger: n,\n            maxEventListeners: r,\n            rpcMiddleware: Tc(n)\n        }), this._sentWarnings = {\n            chainId: !1,\n            networkVersion: !1,\n            selectedAddress: !1,\n            enable: !1,\n            experimentalMethods: !1,\n            send: !1,\n            events: {\n                close: !1,\n                data: !1,\n                networkChanged: !1,\n                notification: !1\n            }\n        }, qc(this, Cu, void 0), this._initializeStateAsync(), Vc(this, Cu, null), this.isMetaMask = !0, this._sendSync = this._sendSync.bind(this), this.enable = this.enable.bind(this), this.send = this.send.bind(this), this.sendAsync = this.sendAsync.bind(this), this._warnOfDeprecation = this._warnOfDeprecation.bind(this), this._metamask = this._getExperimentalApi(), this._jsonRpcConnection.events.on(\"notification\", (e)=>{\n            const { method: t } = e;\n            Oc.includes(t) && (this.emit(\"data\", e), this.emit(\"notification\", e.params.result));\n        }), i) if (\"complete\" === document.readyState) Kc(this._rpcEngine, this._log);\n        else {\n            const e = ()=>{\n                Kc(this._rpcEngine, this._log), window.removeEventListener(\"DOMContentLoaded\", e);\n            };\n            window.addEventListener(\"DOMContentLoaded\", e);\n        }\n    }\n    get chainId() {\n        return this._sentWarnings.chainId || (this._log.warn(ts.warnings.chainIdDeprecation), this._sentWarnings.chainId = !0), super.chainId;\n    }\n    get networkVersion() {\n        return this._sentWarnings.networkVersion || (this._log.warn(ts.warnings.networkVersionDeprecation), this._sentWarnings.networkVersion = !0), zc(this, Cu);\n    }\n    get selectedAddress() {\n        return this._sentWarnings.selectedAddress || (this._log.warn(ts.warnings.selectedAddressDeprecation), this._sentWarnings.selectedAddress = !0), super.selectedAddress;\n    }\n    sendAsync(e, t) {\n        this._rpcRequest(e, t);\n    }\n    addListener(e, t) {\n        return this._warnOfDeprecation(e), super.addListener(e, t);\n    }\n    on(e, t) {\n        return this._warnOfDeprecation(e), super.on(e, t);\n    }\n    once(e, t) {\n        return this._warnOfDeprecation(e), super.once(e, t);\n    }\n    prependListener(e, t) {\n        return this._warnOfDeprecation(e), super.prependListener(e, t);\n    }\n    prependOnceListener(e, t) {\n        return this._warnOfDeprecation(e), super.prependOnceListener(e, t);\n    }\n    _handleDisconnect(e, t) {\n        super._handleDisconnect(e, t), zc(this, Cu) && !e && Vc(this, Cu, null);\n    }\n    _warnOfDeprecation(e) {\n        !1 === this._sentWarnings?.events[e] && (this._log.warn(ts.warnings.events[e]), this._sentWarnings.events[e] = !0);\n    }\n    async enable() {\n        return this._sentWarnings.enable || (this._log.warn(ts.warnings.enableDeprecation), this._sentWarnings.enable = !0), new Promise((e, t)=>{\n            try {\n                this._rpcRequest({\n                    method: \"eth_requestAccounts\",\n                    params: []\n                }, Dc(e, t));\n            } catch (e) {\n                t(e);\n            }\n        });\n    }\n    send(e, t) {\n        return this._sentWarnings.send || (this._log.warn(ts.warnings.sendDeprecation), this._sentWarnings.send = !0), \"string\" != typeof e || t && !Array.isArray(t) ? e && \"object\" == typeof e && \"function\" == typeof t ? this._rpcRequest(e, t) : this._sendSync(e) : new Promise((n, r)=>{\n            try {\n                this._rpcRequest({\n                    method: e,\n                    params: t\n                }, Dc(n, r, !1));\n            } catch (e) {\n                r(e);\n            }\n        });\n    }\n    _sendSync(e) {\n        let t;\n        switch(e.method){\n            case \"eth_accounts\":\n                t = this.selectedAddress ? [\n                    this.selectedAddress\n                ] : [];\n                break;\n            case \"eth_coinbase\":\n                t = this.selectedAddress ?? null;\n                break;\n            case \"eth_uninstallFilter\":\n                this._rpcRequest(e, Bc), t = !0;\n                break;\n            case \"net_version\":\n                t = zc(this, Cu) ?? null;\n                break;\n            default:\n                throw new Error(ts.errors.unsupportedSync(e.method));\n        }\n        return {\n            id: e.id,\n            jsonrpc: e.jsonrpc,\n            result: t\n        };\n    }\n    _getExperimentalApi() {\n        return new Proxy({\n            isUnlocked: async ()=>(this._state.initialized || await new Promise((e)=>{\n                    this.on(\"_initialized\", ()=>e());\n                }), this._state.isUnlocked),\n            requestBatch: async (e)=>{\n                if (!Array.isArray(e)) throw Ya({\n                    message: \"Batch requests must be made with an array of request objects.\",\n                    data: e\n                });\n                return new Promise((t, n)=>{\n                    this._rpcRequest(e, Dc(t, n));\n                });\n            }\n        }, {\n            get: (e, t, ...n)=>(this._sentWarnings.experimentalMethods || (this._log.warn(ts.warnings.experimentalMethods), this._sentWarnings.experimentalMethods = !0), Reflect.get(e, t, ...n))\n        });\n    }\n    _handleChainChanged({ chainId: e, networkVersion: t } = {}) {\n        super._handleChainChanged({\n            chainId: e,\n            networkVersion: t\n        }), this._state.isConnected && t !== zc(this, Cu) && (Vc(this, Cu, t), this._state.initialized && this.emit(\"networkChanged\", zc(this, Cu)));\n    }\n};\nCu = new WeakMap;\nconst xu = debug__WEBPACK_IMPORTED_MODULE_1___default()(\"MM_SDK\");\nxu.color = \"#FFAC1C\";\nvar Mu = {}, Au = {};\nObject.defineProperty(Au, \"__esModule\", {\n    value: !0\n}), Au.EthereumProviderError = Au.EthereumRpcError = void 0;\nconst Iu = Ta;\nclass Ru extends Error {\n    constructor(e, t, n){\n        if (!Number.isInteger(e)) throw new Error('\"code\" must be an integer.');\n        if (!t || \"string\" != typeof t) throw new Error('\"message\" must be a nonempty string.');\n        super(t), this.code = e, void 0 !== n && (this.data = n);\n    }\n    serialize() {\n        const e = {\n            code: this.code,\n            message: this.message\n        };\n        return void 0 !== this.data && (e.data = this.data), this.stack && (e.stack = this.stack), e;\n    }\n    toString() {\n        return Iu.default(this.serialize(), Pu, 2);\n    }\n}\nAu.EthereumRpcError = Ru;\nfunction Pu(e, t) {\n    if (\"[Circular]\" !== t) return t;\n}\nAu.EthereumProviderError = class extends Ru {\n    constructor(e, t, n){\n        if (!function(e) {\n            return Number.isInteger(e) && e >= 1e3 && e <= 4999;\n        }(e)) throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n        super(e, t, n);\n    }\n};\nvar Lu = {}, Ou = {};\nObject.defineProperty(Ou, \"__esModule\", {\n    value: !0\n}), Ou.errorValues = Ou.errorCodes = void 0, Ou.errorCodes = {\n    rpc: {\n        invalidInput: -32e3,\n        resourceNotFound: -32001,\n        resourceUnavailable: -32002,\n        transactionRejected: -32003,\n        methodNotSupported: -32004,\n        limitExceeded: -32005,\n        parse: -32700,\n        invalidRequest: -32600,\n        methodNotFound: -32601,\n        invalidParams: -32602,\n        internal: -32603\n    },\n    provider: {\n        userRejectedRequest: 4001,\n        unauthorized: 4100,\n        unsupportedMethod: 4200,\n        disconnected: 4900,\n        chainDisconnected: 4901\n    }\n}, Ou.errorValues = {\n    \"-32700\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.\"\n    },\n    \"-32600\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"The JSON sent is not a valid Request object.\"\n    },\n    \"-32601\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"The method does not exist / is not available.\"\n    },\n    \"-32602\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Invalid method parameter(s).\"\n    },\n    \"-32603\": {\n        standard: \"JSON RPC 2.0\",\n        message: \"Internal JSON-RPC error.\"\n    },\n    \"-32000\": {\n        standard: \"EIP-1474\",\n        message: \"Invalid input.\"\n    },\n    \"-32001\": {\n        standard: \"EIP-1474\",\n        message: \"Resource not found.\"\n    },\n    \"-32002\": {\n        standard: \"EIP-1474\",\n        message: \"Resource unavailable.\"\n    },\n    \"-32003\": {\n        standard: \"EIP-1474\",\n        message: \"Transaction rejected.\"\n    },\n    \"-32004\": {\n        standard: \"EIP-1474\",\n        message: \"Method not supported.\"\n    },\n    \"-32005\": {\n        standard: \"EIP-1474\",\n        message: \"Request limit exceeded.\"\n    },\n    4001: {\n        standard: \"EIP-1193\",\n        message: \"User rejected the request.\"\n    },\n    4100: {\n        standard: \"EIP-1193\",\n        message: \"The requested account and/or method has not been authorized by the user.\"\n    },\n    4200: {\n        standard: \"EIP-1193\",\n        message: \"The requested method is not supported by this Ethereum provider.\"\n    },\n    4900: {\n        standard: \"EIP-1193\",\n        message: \"The provider is disconnected from all chains.\"\n    },\n    4901: {\n        standard: \"EIP-1193\",\n        message: \"The provider is disconnected from the specified chain.\"\n    }\n}, function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.serializeError = e.isValidCode = e.getMessageFromCode = e.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\n    const t = Ou, n = Au, r = t.errorCodes.rpc.internal, i = \"Unspecified error message. This is a bug, please report it.\", o = {\n        code: r,\n        message: s(r)\n    };\n    function s(n, r = i) {\n        if (Number.isInteger(n)) {\n            const r = n.toString();\n            if (d(t.errorValues, r)) return t.errorValues[r].message;\n            if (c(n)) return e.JSON_RPC_SERVER_ERROR_MESSAGE;\n        }\n        return r;\n    }\n    function a(e) {\n        if (!Number.isInteger(e)) return !1;\n        const n = e.toString();\n        return !!t.errorValues[n] || !!c(e);\n    }\n    function c(e) {\n        return e >= -32099 && e <= -32e3;\n    }\n    function l(e) {\n        return e && \"object\" == typeof e && !Array.isArray(e) ? Object.assign({}, e) : e;\n    }\n    function d(e, t) {\n        return Object.prototype.hasOwnProperty.call(e, t);\n    }\n    e.JSON_RPC_SERVER_ERROR_MESSAGE = \"Unspecified server error.\", e.getMessageFromCode = s, e.isValidCode = a, e.serializeError = function(e, { fallbackError: t = o, shouldIncludeStack: r = !1 } = {}) {\n        var i, c;\n        if (!t || !Number.isInteger(t.code) || \"string\" != typeof t.message) throw new Error(\"Must provide fallback error with integer number code and string message.\");\n        if (e instanceof n.EthereumRpcError) return e.serialize();\n        const u = {};\n        if (e && \"object\" == typeof e && !Array.isArray(e) && d(e, \"code\") && a(e.code)) {\n            const t = e;\n            u.code = t.code, t.message && \"string\" == typeof t.message ? (u.message = t.message, d(t, \"data\") && (u.data = t.data)) : (u.message = s(u.code), u.data = {\n                originalError: l(e)\n            });\n        } else {\n            u.code = t.code;\n            const n = null === (i = e) || void 0 === i ? void 0 : i.message;\n            u.message = n && \"string\" == typeof n ? n : t.message, u.data = {\n                originalError: l(e)\n            };\n        }\n        const h = null === (c = e) || void 0 === c ? void 0 : c.stack;\n        return r && e && h && \"string\" == typeof h && (u.stack = h), u;\n    };\n}(Lu);\nvar Tu = {};\nObject.defineProperty(Tu, \"__esModule\", {\n    value: !0\n}), Tu.ethErrors = void 0;\nconst Nu = Au, Du = Lu, $u = Ou;\nfunction Bu(e, t) {\n    const [n, r] = ju(t);\n    return new Nu.EthereumRpcError(e, n || Du.getMessageFromCode(e), r);\n}\nfunction Ku(e, t) {\n    const [n, r] = ju(t);\n    return new Nu.EthereumProviderError(e, n || Du.getMessageFromCode(e), r);\n}\nfunction ju(e) {\n    if (e) {\n        if (\"string\" == typeof e) return [\n            e\n        ];\n        if (\"object\" == typeof e && !Array.isArray(e)) {\n            const { message: t, data: n } = e;\n            if (t && \"string\" != typeof t) throw new Error(\"Must specify string message.\");\n            return [\n                t || void 0,\n                n\n            ];\n        }\n    }\n    return [];\n}\nTu.ethErrors = {\n    rpc: {\n        parse: (e)=>Bu($u.errorCodes.rpc.parse, e),\n        invalidRequest: (e)=>Bu($u.errorCodes.rpc.invalidRequest, e),\n        invalidParams: (e)=>Bu($u.errorCodes.rpc.invalidParams, e),\n        methodNotFound: (e)=>Bu($u.errorCodes.rpc.methodNotFound, e),\n        internal: (e)=>Bu($u.errorCodes.rpc.internal, e),\n        server: (e)=>{\n            if (!e || \"object\" != typeof e || Array.isArray(e)) throw new Error(\"Ethereum RPC Server errors must provide single object argument.\");\n            const { code: t } = e;\n            if (!Number.isInteger(t) || t > -32005 || t < -32099) throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n            return Bu(t, e);\n        },\n        invalidInput: (e)=>Bu($u.errorCodes.rpc.invalidInput, e),\n        resourceNotFound: (e)=>Bu($u.errorCodes.rpc.resourceNotFound, e),\n        resourceUnavailable: (e)=>Bu($u.errorCodes.rpc.resourceUnavailable, e),\n        transactionRejected: (e)=>Bu($u.errorCodes.rpc.transactionRejected, e),\n        methodNotSupported: (e)=>Bu($u.errorCodes.rpc.methodNotSupported, e),\n        limitExceeded: (e)=>Bu($u.errorCodes.rpc.limitExceeded, e)\n    },\n    provider: {\n        userRejectedRequest: (e)=>Ku($u.errorCodes.provider.userRejectedRequest, e),\n        unauthorized: (e)=>Ku($u.errorCodes.provider.unauthorized, e),\n        unsupportedMethod: (e)=>Ku($u.errorCodes.provider.unsupportedMethod, e),\n        disconnected: (e)=>Ku($u.errorCodes.provider.disconnected, e),\n        chainDisconnected: (e)=>Ku($u.errorCodes.provider.chainDisconnected, e),\n        custom: (e)=>{\n            if (!e || \"object\" != typeof e || Array.isArray(e)) throw new Error(\"Ethereum Provider custom errors must provide single object argument.\");\n            const { code: t, message: n, data: r } = e;\n            if (!n || \"string\" != typeof n) throw new Error('\"message\" must be a nonempty string');\n            return new Nu.EthereumProviderError(t, n, r);\n        }\n    }\n}, function(e) {\n    Object.defineProperty(e, \"__esModule\", {\n        value: !0\n    }), e.getMessageFromCode = e.serializeError = e.EthereumProviderError = e.EthereumRpcError = e.ethErrors = e.errorCodes = void 0;\n    const t = Au;\n    Object.defineProperty(e, \"EthereumRpcError\", {\n        enumerable: !0,\n        get: function() {\n            return t.EthereumRpcError;\n        }\n    }), Object.defineProperty(e, \"EthereumProviderError\", {\n        enumerable: !0,\n        get: function() {\n            return t.EthereumProviderError;\n        }\n    });\n    const n = Lu;\n    Object.defineProperty(e, \"serializeError\", {\n        enumerable: !0,\n        get: function() {\n            return n.serializeError;\n        }\n    }), Object.defineProperty(e, \"getMessageFromCode\", {\n        enumerable: !0,\n        get: function() {\n            return n.getMessageFromCode;\n        }\n    });\n    const r = Tu;\n    Object.defineProperty(e, \"ethErrors\", {\n        enumerable: !0,\n        get: function() {\n            return r.ethErrors;\n        }\n    });\n    const i = Ou;\n    Object.defineProperty(e, \"errorCodes\", {\n        enumerable: !0,\n        get: function() {\n            return i.errorCodes;\n        }\n    });\n}(Mu);\nvar Uu = {\n    exports: {}\n};\nUu.exports = function(e) {\n    var t = {};\n    function n(r) {\n        if (t[r]) return t[r].exports;\n        var i = t[r] = {\n            i: r,\n            l: !1,\n            exports: {}\n        };\n        return e[r].call(i.exports, i, i.exports, n), i.l = !0, i.exports;\n    }\n    return n.m = e, n.c = t, n.d = function(e, t, r) {\n        n.o(e, t) || Object.defineProperty(e, t, {\n            enumerable: !0,\n            get: r\n        });\n    }, n.r = function(e) {\n        \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n            value: \"Module\"\n        }), Object.defineProperty(e, \"__esModule\", {\n            value: !0\n        });\n    }, n.t = function(e, t) {\n        if (1 & t && (e = n(e)), 8 & t) return e;\n        if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n        var r = Object.create(null);\n        if (n.r(r), Object.defineProperty(r, \"default\", {\n            enumerable: !0,\n            value: e\n        }), 2 & t && \"string\" != typeof e) for(var i in e)n.d(r, i, (function(t) {\n            return e[t];\n        }).bind(null, i));\n        return r;\n    }, n.n = function(e) {\n        var t = e && e.__esModule ? function() {\n            return e.default;\n        } : function() {\n            return e;\n        };\n        return n.d(t, \"a\", t), t;\n    }, n.o = function(e, t) {\n        return Object.prototype.hasOwnProperty.call(e, t);\n    }, n.p = \"\", n(n.s = 90);\n}({\n    17: function(e, t, n) {\n        t.__esModule = !0, t.default = void 0;\n        var r = n(18), i = function() {\n            function e() {}\n            return e.getFirstMatch = function(e, t) {\n                var n = t.match(e);\n                return n && n.length > 0 && n[1] || \"\";\n            }, e.getSecondMatch = function(e, t) {\n                var n = t.match(e);\n                return n && n.length > 1 && n[2] || \"\";\n            }, e.matchAndReturnConst = function(e, t, n) {\n                if (e.test(t)) return n;\n            }, e.getWindowsVersionName = function(e) {\n                switch(e){\n                    case \"NT\":\n                        return \"NT\";\n                    case \"XP\":\n                    case \"NT 5.1\":\n                        return \"XP\";\n                    case \"NT 5.0\":\n                        return \"2000\";\n                    case \"NT 5.2\":\n                        return \"2003\";\n                    case \"NT 6.0\":\n                        return \"Vista\";\n                    case \"NT 6.1\":\n                        return \"7\";\n                    case \"NT 6.2\":\n                        return \"8\";\n                    case \"NT 6.3\":\n                        return \"8.1\";\n                    case \"NT 10.0\":\n                        return \"10\";\n                    default:\n                        return;\n                }\n            }, e.getMacOSVersionName = function(e) {\n                var t = e.split(\".\").splice(0, 2).map(function(e) {\n                    return parseInt(e, 10) || 0;\n                });\n                if (t.push(0), 10 === t[0]) switch(t[1]){\n                    case 5:\n                        return \"Leopard\";\n                    case 6:\n                        return \"Snow Leopard\";\n                    case 7:\n                        return \"Lion\";\n                    case 8:\n                        return \"Mountain Lion\";\n                    case 9:\n                        return \"Mavericks\";\n                    case 10:\n                        return \"Yosemite\";\n                    case 11:\n                        return \"El Capitan\";\n                    case 12:\n                        return \"Sierra\";\n                    case 13:\n                        return \"High Sierra\";\n                    case 14:\n                        return \"Mojave\";\n                    case 15:\n                        return \"Catalina\";\n                    default:\n                        return;\n                }\n            }, e.getAndroidVersionName = function(e) {\n                var t = e.split(\".\").splice(0, 2).map(function(e) {\n                    return parseInt(e, 10) || 0;\n                });\n                if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? \"Cupcake\" : 1 === t[0] && t[1] >= 6 ? \"Donut\" : 2 === t[0] && t[1] < 2 ? \"Eclair\" : 2 === t[0] && 2 === t[1] ? \"Froyo\" : 2 === t[0] && t[1] > 2 ? \"Gingerbread\" : 3 === t[0] ? \"Honeycomb\" : 4 === t[0] && t[1] < 1 ? \"Ice Cream Sandwich\" : 4 === t[0] && t[1] < 4 ? \"Jelly Bean\" : 4 === t[0] && t[1] >= 4 ? \"KitKat\" : 5 === t[0] ? \"Lollipop\" : 6 === t[0] ? \"Marshmallow\" : 7 === t[0] ? \"Nougat\" : 8 === t[0] ? \"Oreo\" : 9 === t[0] ? \"Pie\" : void 0;\n            }, e.getVersionPrecision = function(e) {\n                return e.split(\".\").length;\n            }, e.compareVersions = function(t, n, r) {\n                void 0 === r && (r = !1);\n                var i = e.getVersionPrecision(t), o = e.getVersionPrecision(n), s = Math.max(i, o), a = 0, c = e.map([\n                    t,\n                    n\n                ], function(t) {\n                    var n = s - e.getVersionPrecision(t), r = t + new Array(n + 1).join(\".0\");\n                    return e.map(r.split(\".\"), function(e) {\n                        return new Array(20 - e.length).join(\"0\") + e;\n                    }).reverse();\n                });\n                for(r && (a = s - Math.min(i, o)), s -= 1; s >= a;){\n                    if (c[0][s] > c[1][s]) return 1;\n                    if (c[0][s] === c[1][s]) {\n                        if (s === a) return 0;\n                        s -= 1;\n                    } else if (c[0][s] < c[1][s]) return -1;\n                }\n            }, e.map = function(e, t) {\n                var n, r = [];\n                if (Array.prototype.map) return Array.prototype.map.call(e, t);\n                for(n = 0; n < e.length; n += 1)r.push(t(e[n]));\n                return r;\n            }, e.find = function(e, t) {\n                var n, r;\n                if (Array.prototype.find) return Array.prototype.find.call(e, t);\n                for(n = 0, r = e.length; n < r; n += 1){\n                    var i = e[n];\n                    if (t(i, n)) return i;\n                }\n            }, e.assign = function(e) {\n                for(var t, n, r = e, i = arguments.length, o = new Array(i > 1 ? i - 1 : 0), s = 1; s < i; s++)o[s - 1] = arguments[s];\n                if (Object.assign) return Object.assign.apply(Object, [\n                    e\n                ].concat(o));\n                var a = function() {\n                    var e = o[t];\n                    \"object\" == typeof e && null !== e && Object.keys(e).forEach(function(t) {\n                        r[t] = e[t];\n                    });\n                };\n                for(t = 0, n = o.length; t < n; t += 1)a();\n                return e;\n            }, e.getBrowserAlias = function(e) {\n                return r.BROWSER_ALIASES_MAP[e];\n            }, e.getBrowserTypeByAlias = function(e) {\n                return r.BROWSER_MAP[e] || \"\";\n            }, e;\n        }();\n        t.default = i, e.exports = t.default;\n    },\n    18: function(e, t, n) {\n        t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0, t.BROWSER_ALIASES_MAP = {\n            \"Amazon Silk\": \"amazon_silk\",\n            \"Android Browser\": \"android\",\n            Bada: \"bada\",\n            BlackBerry: \"blackberry\",\n            Chrome: \"chrome\",\n            Chromium: \"chromium\",\n            Electron: \"electron\",\n            Epiphany: \"epiphany\",\n            Firefox: \"firefox\",\n            Focus: \"focus\",\n            Generic: \"generic\",\n            \"Google Search\": \"google_search\",\n            Googlebot: \"googlebot\",\n            \"Internet Explorer\": \"ie\",\n            \"K-Meleon\": \"k_meleon\",\n            Maxthon: \"maxthon\",\n            \"Microsoft Edge\": \"edge\",\n            \"MZ Browser\": \"mz\",\n            \"NAVER Whale Browser\": \"naver\",\n            Opera: \"opera\",\n            \"Opera Coast\": \"opera_coast\",\n            PhantomJS: \"phantomjs\",\n            Puffin: \"puffin\",\n            QupZilla: \"qupzilla\",\n            QQ: \"qq\",\n            QQLite: \"qqlite\",\n            Safari: \"safari\",\n            Sailfish: \"sailfish\",\n            \"Samsung Internet for Android\": \"samsung_internet\",\n            SeaMonkey: \"seamonkey\",\n            Sleipnir: \"sleipnir\",\n            Swing: \"swing\",\n            Tizen: \"tizen\",\n            \"UC Browser\": \"uc\",\n            Vivaldi: \"vivaldi\",\n            \"WebOS Browser\": \"webos\",\n            WeChat: \"wechat\",\n            \"Yandex Browser\": \"yandex\",\n            Roku: \"roku\"\n        }, t.BROWSER_MAP = {\n            amazon_silk: \"Amazon Silk\",\n            android: \"Android Browser\",\n            bada: \"Bada\",\n            blackberry: \"BlackBerry\",\n            chrome: \"Chrome\",\n            chromium: \"Chromium\",\n            electron: \"Electron\",\n            epiphany: \"Epiphany\",\n            firefox: \"Firefox\",\n            focus: \"Focus\",\n            generic: \"Generic\",\n            googlebot: \"Googlebot\",\n            google_search: \"Google Search\",\n            ie: \"Internet Explorer\",\n            k_meleon: \"K-Meleon\",\n            maxthon: \"Maxthon\",\n            edge: \"Microsoft Edge\",\n            mz: \"MZ Browser\",\n            naver: \"NAVER Whale Browser\",\n            opera: \"Opera\",\n            opera_coast: \"Opera Coast\",\n            phantomjs: \"PhantomJS\",\n            puffin: \"Puffin\",\n            qupzilla: \"QupZilla\",\n            qq: \"QQ Browser\",\n            qqlite: \"QQ Browser Lite\",\n            safari: \"Safari\",\n            sailfish: \"Sailfish\",\n            samsung_internet: \"Samsung Internet for Android\",\n            seamonkey: \"SeaMonkey\",\n            sleipnir: \"Sleipnir\",\n            swing: \"Swing\",\n            tizen: \"Tizen\",\n            uc: \"UC Browser\",\n            vivaldi: \"Vivaldi\",\n            webos: \"WebOS Browser\",\n            wechat: \"WeChat\",\n            yandex: \"Yandex Browser\"\n        }, t.PLATFORMS_MAP = {\n            tablet: \"tablet\",\n            mobile: \"mobile\",\n            desktop: \"desktop\",\n            tv: \"tv\"\n        }, t.OS_MAP = {\n            WindowsPhone: \"Windows Phone\",\n            Windows: \"Windows\",\n            MacOS: \"macOS\",\n            iOS: \"iOS\",\n            Android: \"Android\",\n            WebOS: \"WebOS\",\n            BlackBerry: \"BlackBerry\",\n            Bada: \"Bada\",\n            Tizen: \"Tizen\",\n            Linux: \"Linux\",\n            ChromeOS: \"Chrome OS\",\n            PlayStation4: \"PlayStation 4\",\n            Roku: \"Roku\"\n        }, t.ENGINE_MAP = {\n            EdgeHTML: \"EdgeHTML\",\n            Blink: \"Blink\",\n            Trident: \"Trident\",\n            Presto: \"Presto\",\n            Gecko: \"Gecko\",\n            WebKit: \"WebKit\"\n        };\n    },\n    90: function(e, t, n) {\n        t.__esModule = !0, t.default = void 0;\n        var r, i = (r = n(91)) && r.__esModule ? r : {\n            default: r\n        }, o = n(18);\n        function s(e, t) {\n            for(var n = 0; n < t.length; n++){\n                var r = t[n];\n                r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);\n            }\n        }\n        var a = function() {\n            function e() {}\n            var t, n, r;\n            return e.getParser = function(e, t) {\n                if (void 0 === t && (t = !1), \"string\" != typeof e) throw new Error(\"UserAgent should be a string\");\n                return new i.default(e, t);\n            }, e.parse = function(e) {\n                return new i.default(e).getResult();\n            }, t = e, r = [\n                {\n                    key: \"BROWSER_MAP\",\n                    get: function() {\n                        return o.BROWSER_MAP;\n                    }\n                },\n                {\n                    key: \"ENGINE_MAP\",\n                    get: function() {\n                        return o.ENGINE_MAP;\n                    }\n                },\n                {\n                    key: \"OS_MAP\",\n                    get: function() {\n                        return o.OS_MAP;\n                    }\n                },\n                {\n                    key: \"PLATFORMS_MAP\",\n                    get: function() {\n                        return o.PLATFORMS_MAP;\n                    }\n                }\n            ], (n = null) && s(t.prototype, n), r && s(t, r), e;\n        }();\n        t.default = a, e.exports = t.default;\n    },\n    91: function(e, t, n) {\n        t.__esModule = !0, t.default = void 0;\n        var r = c(n(92)), i = c(n(93)), o = c(n(94)), s = c(n(95)), a = c(n(17));\n        function c(e) {\n            return e && e.__esModule ? e : {\n                default: e\n            };\n        }\n        var l = function() {\n            function e(e, t) {\n                if (void 0 === t && (t = !1), null == e || \"\" === e) throw new Error(\"UserAgent parameter can't be empty\");\n                this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();\n            }\n            var t = e.prototype;\n            return t.getUA = function() {\n                return this._ua;\n            }, t.test = function(e) {\n                return e.test(this._ua);\n            }, t.parseBrowser = function() {\n                var e = this;\n                this.parsedResult.browser = {};\n                var t = a.default.find(r.default, function(t) {\n                    if (\"function\" == typeof t.test) return t.test(e);\n                    if (t.test instanceof Array) return t.test.some(function(t) {\n                        return e.test(t);\n                    });\n                    throw new Error(\"Browser's test function is not valid\");\n                });\n                return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser;\n            }, t.getBrowser = function() {\n                return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();\n            }, t.getBrowserName = function(e) {\n                return e ? String(this.getBrowser().name).toLowerCase() || \"\" : this.getBrowser().name || \"\";\n            }, t.getBrowserVersion = function() {\n                return this.getBrowser().version;\n            }, t.getOS = function() {\n                return this.parsedResult.os ? this.parsedResult.os : this.parseOS();\n            }, t.parseOS = function() {\n                var e = this;\n                this.parsedResult.os = {};\n                var t = a.default.find(i.default, function(t) {\n                    if (\"function\" == typeof t.test) return t.test(e);\n                    if (t.test instanceof Array) return t.test.some(function(t) {\n                        return e.test(t);\n                    });\n                    throw new Error(\"Browser's test function is not valid\");\n                });\n                return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os;\n            }, t.getOSName = function(e) {\n                var t = this.getOS().name;\n                return e ? String(t).toLowerCase() || \"\" : t || \"\";\n            }, t.getOSVersion = function() {\n                return this.getOS().version;\n            }, t.getPlatform = function() {\n                return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();\n            }, t.getPlatformType = function(e) {\n                void 0 === e && (e = !1);\n                var t = this.getPlatform().type;\n                return e ? String(t).toLowerCase() || \"\" : t || \"\";\n            }, t.parsePlatform = function() {\n                var e = this;\n                this.parsedResult.platform = {};\n                var t = a.default.find(o.default, function(t) {\n                    if (\"function\" == typeof t.test) return t.test(e);\n                    if (t.test instanceof Array) return t.test.some(function(t) {\n                        return e.test(t);\n                    });\n                    throw new Error(\"Browser's test function is not valid\");\n                });\n                return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform;\n            }, t.getEngine = function() {\n                return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();\n            }, t.getEngineName = function(e) {\n                return e ? String(this.getEngine().name).toLowerCase() || \"\" : this.getEngine().name || \"\";\n            }, t.parseEngine = function() {\n                var e = this;\n                this.parsedResult.engine = {};\n                var t = a.default.find(s.default, function(t) {\n                    if (\"function\" == typeof t.test) return t.test(e);\n                    if (t.test instanceof Array) return t.test.some(function(t) {\n                        return e.test(t);\n                    });\n                    throw new Error(\"Browser's test function is not valid\");\n                });\n                return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine;\n            }, t.parse = function() {\n                return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;\n            }, t.getResult = function() {\n                return a.default.assign({}, this.parsedResult);\n            }, t.satisfies = function(e) {\n                var t = this, n = {}, r = 0, i = {}, o = 0;\n                if (Object.keys(e).forEach(function(t) {\n                    var s = e[t];\n                    \"string\" == typeof s ? (i[t] = s, o += 1) : \"object\" == typeof s && (n[t] = s, r += 1);\n                }), r > 0) {\n                    var s = Object.keys(n), c = a.default.find(s, function(e) {\n                        return t.isOS(e);\n                    });\n                    if (c) {\n                        var l = this.satisfies(n[c]);\n                        if (void 0 !== l) return l;\n                    }\n                    var d = a.default.find(s, function(e) {\n                        return t.isPlatform(e);\n                    });\n                    if (d) {\n                        var u = this.satisfies(n[d]);\n                        if (void 0 !== u) return u;\n                    }\n                }\n                if (o > 0) {\n                    var h = Object.keys(i), f = a.default.find(h, function(e) {\n                        return t.isBrowser(e, !0);\n                    });\n                    if (void 0 !== f) return this.compareVersion(i[f]);\n                }\n            }, t.isBrowser = function(e, t) {\n                void 0 === t && (t = !1);\n                var n = this.getBrowserName().toLowerCase(), r = e.toLowerCase(), i = a.default.getBrowserTypeByAlias(r);\n                return t && i && (r = i.toLowerCase()), r === n;\n            }, t.compareVersion = function(e) {\n                var t = [\n                    0\n                ], n = e, r = !1, i = this.getBrowserVersion();\n                if (\"string\" == typeof i) return \">\" === e[0] || \"<\" === e[0] ? (n = e.substr(1), \"=\" === e[1] ? (r = !0, n = e.substr(2)) : t = [], \">\" === e[0] ? t.push(1) : t.push(-1)) : \"=\" === e[0] ? n = e.substr(1) : \"~\" === e[0] && (r = !0, n = e.substr(1)), t.indexOf(a.default.compareVersions(i, n, r)) > -1;\n            }, t.isOS = function(e) {\n                return this.getOSName(!0) === String(e).toLowerCase();\n            }, t.isPlatform = function(e) {\n                return this.getPlatformType(!0) === String(e).toLowerCase();\n            }, t.isEngine = function(e) {\n                return this.getEngineName(!0) === String(e).toLowerCase();\n            }, t.is = function(e, t) {\n                return void 0 === t && (t = !1), this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);\n            }, t.some = function(e) {\n                var t = this;\n                return void 0 === e && (e = []), e.some(function(e) {\n                    return t.is(e);\n                });\n            }, e;\n        }();\n        t.default = l, e.exports = t.default;\n    },\n    92: function(e, t, n) {\n        t.__esModule = !0, t.default = void 0;\n        var r, i = (r = n(17)) && r.__esModule ? r : {\n            default: r\n        }, o = /version\\/(\\d+(\\.?_?\\d+)+)/i, s = [\n            {\n                test: [\n                    /googlebot/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Googlebot\"\n                    }, n = i.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /opera/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Opera\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /opr\\/|opios/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Opera\"\n                    }, n = i.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /SamsungBrowser/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Samsung Internet for Android\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /Whale/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"NAVER Whale Browser\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /MZBrowser/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"MZ Browser\"\n                    }, n = i.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /focus/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Focus\"\n                    }, n = i.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /swing/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Swing\"\n                    }, n = i.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /coast/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Opera Coast\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /opt\\/\\d+(?:.?_?\\d+)+/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Opera Touch\"\n                    }, n = i.default.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /yabrowser/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Yandex Browser\"\n                    }, n = i.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /ucbrowser/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"UC Browser\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /Maxthon|mxios/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Maxthon\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /epiphany/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Epiphany\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /puffin/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Puffin\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /sleipnir/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Sleipnir\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /k-meleon/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"K-Meleon\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /micromessenger/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"WeChat\"\n                    }, n = i.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /qqbrowser/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: /qqbrowserlite/i.test(e) ? \"QQ Browser Lite\" : \"QQ Browser\"\n                    }, n = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /msie|trident/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Internet Explorer\"\n                    }, n = i.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /\\sedg\\//i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Microsoft Edge\"\n                    }, n = i.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /edg([ea]|ios)/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Microsoft Edge\"\n                    }, n = i.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /vivaldi/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Vivaldi\"\n                    }, n = i.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /seamonkey/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"SeaMonkey\"\n                    }, n = i.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /sailfish/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Sailfish\"\n                    }, n = i.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /silk/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Amazon Silk\"\n                    }, n = i.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /phantom/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"PhantomJS\"\n                    }, n = i.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /slimerjs/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"SlimerJS\"\n                    }, n = i.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /blackberry|\\bbb\\d+/i,\n                    /rim\\stablet/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"BlackBerry\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /(web|hpw)[o0]s/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"WebOS Browser\"\n                    }, n = i.default.getFirstMatch(o, e) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /bada/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Bada\"\n                    }, n = i.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /tizen/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Tizen\"\n                    }, n = i.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /qupzilla/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"QupZilla\"\n                    }, n = i.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /firefox|iceweasel|fxios/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Firefox\"\n                    }, n = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /electron/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Electron\"\n                    }, n = i.default.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /MiuiBrowser/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Miui\"\n                    }, n = i.default.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /chromium/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Chromium\"\n                    }, n = i.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i, e) || i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /chrome|crios|crmo/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Chrome\"\n                    }, n = i.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /GSA/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Google Search\"\n                    }, n = i.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: function(e) {\n                    var t = !e.test(/like android/i), n = e.test(/android/i);\n                    return t && n;\n                },\n                describe: function(e) {\n                    var t = {\n                        name: \"Android Browser\"\n                    }, n = i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /playstation 4/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"PlayStation 4\"\n                    }, n = i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /safari|applewebkit/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: \"Safari\"\n                    }, n = i.default.getFirstMatch(o, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /.*/i\n                ],\n                describe: function(e) {\n                    var t = -1 !== e.search(\"\\\\(\") ? /^(.*)\\/(.*)[ \\t]\\((.*)/ : /^(.*)\\/(.*) /;\n                    return {\n                        name: i.default.getFirstMatch(t, e),\n                        version: i.default.getSecondMatch(t, e)\n                    };\n                }\n            }\n        ];\n        t.default = s, e.exports = t.default;\n    },\n    93: function(e, t, n) {\n        t.__esModule = !0, t.default = void 0;\n        var r, i = (r = n(17)) && r.__esModule ? r : {\n            default: r\n        }, o = n(18), s = [\n            {\n                test: [\n                    /Roku\\/DVP/\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i, e);\n                    return {\n                        name: o.OS_MAP.Roku,\n                        version: t\n                    };\n                }\n            },\n            {\n                test: [\n                    /windows phone/i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i, e);\n                    return {\n                        name: o.OS_MAP.WindowsPhone,\n                        version: t\n                    };\n                }\n            },\n            {\n                test: [\n                    /windows /i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i, e), n = i.default.getWindowsVersionName(t);\n                    return {\n                        name: o.OS_MAP.Windows,\n                        version: t,\n                        versionName: n\n                    };\n                }\n            },\n            {\n                test: [\n                    /Macintosh(.*?) FxiOS(.*?)\\//\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: o.OS_MAP.iOS\n                    }, n = i.default.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /macintosh/i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i, e).replace(/[_\\s]/g, \".\"), n = i.default.getMacOSVersionName(t), r = {\n                        name: o.OS_MAP.MacOS,\n                        version: t\n                    };\n                    return n && (r.versionName = n), r;\n                }\n            },\n            {\n                test: [\n                    /(ipod|iphone|ipad)/i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i, e).replace(/[_\\s]/g, \".\");\n                    return {\n                        name: o.OS_MAP.iOS,\n                        version: t\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    var t = !e.test(/like android/i), n = e.test(/android/i);\n                    return t && n;\n                },\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i, e), n = i.default.getAndroidVersionName(t), r = {\n                        name: o.OS_MAP.Android,\n                        version: t\n                    };\n                    return n && (r.versionName = n), r;\n                }\n            },\n            {\n                test: [\n                    /(web|hpw)[o0]s/i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i, e), n = {\n                        name: o.OS_MAP.WebOS\n                    };\n                    return t && t.length && (n.version = t), n;\n                }\n            },\n            {\n                test: [\n                    /blackberry|\\bbb\\d+/i,\n                    /rim\\stablet/i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i, e) || i.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i, e) || i.default.getFirstMatch(/\\bbb(\\d+)/i, e);\n                    return {\n                        name: o.OS_MAP.BlackBerry,\n                        version: t\n                    };\n                }\n            },\n            {\n                test: [\n                    /bada/i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i, e);\n                    return {\n                        name: o.OS_MAP.Bada,\n                        version: t\n                    };\n                }\n            },\n            {\n                test: [\n                    /tizen/i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i, e);\n                    return {\n                        name: o.OS_MAP.Tizen,\n                        version: t\n                    };\n                }\n            },\n            {\n                test: [\n                    /linux/i\n                ],\n                describe: function() {\n                    return {\n                        name: o.OS_MAP.Linux\n                    };\n                }\n            },\n            {\n                test: [\n                    /CrOS/\n                ],\n                describe: function() {\n                    return {\n                        name: o.OS_MAP.ChromeOS\n                    };\n                }\n            },\n            {\n                test: [\n                    /PlayStation 4/\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i, e);\n                    return {\n                        name: o.OS_MAP.PlayStation4,\n                        version: t\n                    };\n                }\n            }\n        ];\n        t.default = s, e.exports = t.default;\n    },\n    94: function(e, t, n) {\n        t.__esModule = !0, t.default = void 0;\n        var r, i = (r = n(17)) && r.__esModule ? r : {\n            default: r\n        }, o = n(18), s = [\n            {\n                test: [\n                    /googlebot/i\n                ],\n                describe: function() {\n                    return {\n                        type: \"bot\",\n                        vendor: \"Google\"\n                    };\n                }\n            },\n            {\n                test: [\n                    /huawei/i\n                ],\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/(can-l01)/i, e) && \"Nova\", n = {\n                        type: o.PLATFORMS_MAP.mobile,\n                        vendor: \"Huawei\"\n                    };\n                    return t && (n.model = t), n;\n                }\n            },\n            {\n                test: [\n                    /nexus\\s*(?:7|8|9|10).*/i\n                ],\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tablet,\n                        vendor: \"Nexus\"\n                    };\n                }\n            },\n            {\n                test: [\n                    /ipad/i\n                ],\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tablet,\n                        vendor: \"Apple\",\n                        model: \"iPad\"\n                    };\n                }\n            },\n            {\n                test: [\n                    /Macintosh(.*?) FxiOS(.*?)\\//\n                ],\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tablet,\n                        vendor: \"Apple\",\n                        model: \"iPad\"\n                    };\n                }\n            },\n            {\n                test: [\n                    /kftt build/i\n                ],\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tablet,\n                        vendor: \"Amazon\",\n                        model: \"Kindle Fire HD 7\"\n                    };\n                }\n            },\n            {\n                test: [\n                    /silk/i\n                ],\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tablet,\n                        vendor: \"Amazon\"\n                    };\n                }\n            },\n            {\n                test: [\n                    /tablet(?! pc)/i\n                ],\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tablet\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    var t = e.test(/ipod|iphone/i), n = e.test(/like (ipod|iphone)/i);\n                    return t && !n;\n                },\n                describe: function(e) {\n                    var t = i.default.getFirstMatch(/(ipod|iphone)/i, e);\n                    return {\n                        type: o.PLATFORMS_MAP.mobile,\n                        vendor: \"Apple\",\n                        model: t\n                    };\n                }\n            },\n            {\n                test: [\n                    /nexus\\s*[0-6].*/i,\n                    /galaxy nexus/i\n                ],\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.mobile,\n                        vendor: \"Nexus\"\n                    };\n                }\n            },\n            {\n                test: [\n                    /[^-]mobi/i\n                ],\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.mobile\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"blackberry\" === e.getBrowserName(!0);\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.mobile,\n                        vendor: \"BlackBerry\"\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"bada\" === e.getBrowserName(!0);\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.mobile\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"windows phone\" === e.getBrowserName();\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.mobile,\n                        vendor: \"Microsoft\"\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    var t = Number(String(e.getOSVersion()).split(\".\")[0]);\n                    return \"android\" === e.getOSName(!0) && t >= 3;\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tablet\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"android\" === e.getOSName(!0);\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.mobile\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"macos\" === e.getOSName(!0);\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.desktop,\n                        vendor: \"Apple\"\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"windows\" === e.getOSName(!0);\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.desktop\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"linux\" === e.getOSName(!0);\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.desktop\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"playstation 4\" === e.getOSName(!0);\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tv\n                    };\n                }\n            },\n            {\n                test: function(e) {\n                    return \"roku\" === e.getOSName(!0);\n                },\n                describe: function() {\n                    return {\n                        type: o.PLATFORMS_MAP.tv\n                    };\n                }\n            }\n        ];\n        t.default = s, e.exports = t.default;\n    },\n    95: function(e, t, n) {\n        t.__esModule = !0, t.default = void 0;\n        var r, i = (r = n(17)) && r.__esModule ? r : {\n            default: r\n        }, o = n(18), s = [\n            {\n                test: function(e) {\n                    return \"microsoft edge\" === e.getBrowserName(!0);\n                },\n                describe: function(e) {\n                    if (/\\sedg\\//i.test(e)) return {\n                        name: o.ENGINE_MAP.Blink\n                    };\n                    var t = i.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return {\n                        name: o.ENGINE_MAP.EdgeHTML,\n                        version: t\n                    };\n                }\n            },\n            {\n                test: [\n                    /trident/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: o.ENGINE_MAP.Trident\n                    }, n = i.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: function(e) {\n                    return e.test(/presto/i);\n                },\n                describe: function(e) {\n                    var t = {\n                        name: o.ENGINE_MAP.Presto\n                    }, n = i.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: function(e) {\n                    var t = e.test(/gecko/i), n = e.test(/like gecko/i);\n                    return t && !n;\n                },\n                describe: function(e) {\n                    var t = {\n                        name: o.ENGINE_MAP.Gecko\n                    }, n = i.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            },\n            {\n                test: [\n                    /(apple)?webkit\\/537\\.36/i\n                ],\n                describe: function() {\n                    return {\n                        name: o.ENGINE_MAP.Blink\n                    };\n                }\n            },\n            {\n                test: [\n                    /(apple)?webkit/i\n                ],\n                describe: function(e) {\n                    var t = {\n                        name: o.ENGINE_MAP.WebKit\n                    }, n = i.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i, e);\n                    return n && (t.version = n), t;\n                }\n            }\n        ];\n        t.default = s, e.exports = t.default;\n    }\n});\nvar Hu = de(Uu.exports);\nconst Fu = {\n    Initialized: \"initialized\",\n    DisplayURI: \"display_uri\",\n    ProviderUpdate: \"provider_update\",\n    ConnectWithResponse: \"connectWithResponse\",\n    ConnectionStatus: \"connection_status\",\n    ServiceStatus: \"service_status\"\n};\nclass zu {\n    constructor({ shouldSetOnWindow: e, connectionStream: t, shouldSendMetadata: n = !1, shouldShimWeb3: r, sdkInstance: i }){\n        const o = new Wu({\n            connectionStream: t,\n            shouldSendMetadata: n,\n            shouldSetOnWindow: e,\n            shouldShimWeb3: r,\n            autoRequestAccounts: !1\n        }), s = new Proxy(o, {\n            deleteProperty: ()=>!0\n        });\n        if (this.provider = s, this.sdkInstance = i, e && \"undefined\" != \"undefined\") try {\n            a = o, window.ethereum = a, window.dispatchEvent(new Event(\"ethereum#initialized\"));\n        } catch (e) {\n            xu(\"[Ethereum] Unable to set global provider - window.ethereum may be read-only\", e);\n        }\n        var a;\n        if (r && \"undefined\" != \"undefined\") {}\n        this.provider.on(\"display_uri\", (e)=>{\n            this.sdkInstance.emit(Fu.DisplayURI, e);\n        }), this.provider.on(\"_initialized\", ()=>{\n            const e = {\n                chainId: this.provider.getChainId(),\n                isConnected: this.provider.isConnected(),\n                isMetaMask: this.provider.isMetaMask,\n                selectedAddress: this.provider.getSelectedAddress(),\n                networkVersion: this.provider.getNetworkVersion()\n            };\n            this.sdkInstance.emit(Fu.Initialized, e), xu(\"[Ethereum: constructor()] provider initialized\", e);\n        });\n    }\n    static init(e) {\n        var t;\n        return xu(\"[Ethereum: init()] Initializing Ethereum service\"), this.instance = new zu(e), null === (t = this.instance) || void 0 === t ? void 0 : t.provider;\n    }\n    static destroy() {}\n    static getInstance() {\n        var e;\n        if (!(null === (e = this.instance) || void 0 === e ? void 0 : e.provider)) throw new Error(\"Ethereum instance not intiialized - call Ethereum.factory first.\");\n        return this.instance;\n    }\n    static getProvider() {\n        var e;\n        if (!(null === (e = this.instance) || void 0 === e ? void 0 : e.provider)) throw new Error(\"Ethereum instance not intiialized - call Ethereum.factory first.\");\n        return this.instance.provider;\n    }\n}\nclass qu {\n    constructor({ useDeepLink: e, preferredOpenLink: t, debug: n = !1 }){\n        this.state = {\n            platformType: void 0,\n            useDeeplink: !1,\n            preferredOpenLink: void 0,\n            debug: !1\n        }, this.state.platformType = this.getPlatformType(), this.state.useDeeplink = e, this.state.preferredOpenLink = t, this.state.debug = n;\n    }\n    openDeeplink(e, t, n) {\n        return function(e, t, n, r) {\n            const { state: i } = e;\n            xu(`[PlatfformManager: openDeeplink()] universalLink --\\x3e ${t}`), xu(`[PlatfformManager: openDeeplink()] deepLink --\\x3e ${n}`);\n            try {\n                if (i.preferredOpenLink) return void i.preferredOpenLink(i.useDeeplink ? n : t, r);\n                if (xu(`[PlatfformManager: openDeeplink()] open link now useDeepLink=${i.useDeeplink} link=${i.useDeeplink ? n : t}`), i.useDeeplink)  false && (0);\n                else if (\"undefined\" != typeof document) {\n                    const e = document.createElement(\"a\");\n                    e.href = t, e.target = \"_self\", e.rel = \"noreferrer noopener\", e.click();\n                }\n            } catch (e) {\n                console.log(\"[PlatfformManager: openDeeplink()] can't open link\", e);\n            }\n        }(this, e, t, n);\n    }\n    isReactNative() {\n        var e;\n        return this.isNotBrowser() && \"undefined\" != \"undefined\" && (0) && 0;\n    }\n    isMetaMaskInstalled() {\n        return function() {\n            const e = zu.getProvider() || (null === window || void 0 === window ? void 0 : window.ethereum);\n            return xu(`[PlatfformManager: isMetaMaskInstalled()] isMetaMask=${null == e ? void 0 : e.isMetaMask} isConnected=${null == e ? void 0 : e.isConnected()}`), (null == e ? void 0 : e.isMetaMask) && (null == e ? void 0 : e.isConnected());\n        }();\n    }\n    isDesktopWeb() {\n        return this.isBrowser() && !this.isMobileWeb();\n    }\n    isMobile() {\n        var e, t;\n        const n = Hu.parse(window.navigator.userAgent);\n        return \"mobile\" === (null === (e = null == n ? void 0 : n.platform) || void 0 === e ? void 0 : e.type) || \"tablet\" === (null === (t = null == n ? void 0 : n.platform) || void 0 === t ? void 0 : t.type);\n    }\n    isSecure() {\n        return this.isReactNative() || this.isMobileWeb();\n    }\n    isMetaMaskMobileWebView() {\n        return  false && 0;\n    }\n    isMobileWeb() {\n        return this.state.platformType === Bo.MobileWeb;\n    }\n    static isNotBrowser() {\n        var e;\n        return  true || 0;\n    }\n    isNotBrowser() {\n        return qu.isNotBrowser();\n    }\n    static isBrowser() {\n        return !this.isNotBrowser();\n    }\n    isBrowser() {\n        return qu.isBrowser();\n    }\n    isNodeJS() {\n        return this.isNotBrowser() && !this.isReactNative();\n    }\n    isUseDeepLink() {\n        return this.state.useDeeplink;\n    }\n    getPlatformType() {\n        return function(e) {\n            const { state: t } = e;\n            return t.platformType ? t.platformType : e.isReactNative() ? Bo.ReactNative : e.isNotBrowser() ? Bo.NonBrowser : e.isMetaMaskMobileWebView() ? Bo.MetaMaskMobileWebview : e.isMobile() ? Bo.MobileWeb : Bo.DesktopWeb;\n        }(this);\n    }\n}\nconst Vu = (e)=>a(void 0, void 0, void 0, function*() {\n        if (qu.isBrowser()) {\n            const { StorageManagerWeb: t } = yield Promise.resolve().then(function() {\n                return nf;\n            });\n            return new t(e);\n        }\n        const t = {\n            persistChannelConfig: ()=>a(void 0, void 0, void 0, function*() {}),\n            getPersistedChannelConfig: ()=>a(void 0, void 0, void 0, function*() {}),\n            persistAccounts: ()=>a(void 0, void 0, void 0, function*() {}),\n            getCachedAccounts: ()=>a(void 0, void 0, void 0, function*() {\n                    return [];\n                }),\n            persistChainId: ()=>a(void 0, void 0, void 0, function*() {}),\n            getCachedChainId: ()=>a(void 0, void 0, void 0, function*() {}),\n            terminate: ()=>a(void 0, void 0, void 0, function*() {})\n        };\n        return Promise.resolve(t);\n    });\nclass Wu extends ku {\n    constructor({ connectionStream: e, shouldSendMetadata: t, autoRequestAccounts: n = !1 }){\n        super(e, {\n            logger: console,\n            maxEventListeners: 100,\n            shouldSendMetadata: t\n        }), this.state = {\n            accounts: null,\n            autoRequestAccounts: !1,\n            providerStateRequested: !1,\n            chainId: \"\",\n            networkVersion: \"\"\n        }, xu(`[SDKProvider: constructor()] autoRequestAccounts=${n}`), this.state.autoRequestAccounts = n;\n    }\n    forceInitializeState() {\n        return a(this, void 0, void 0, function*() {\n            return xu(`[SDKProvider: forceInitializeState()] autoRequestAccounts=${this.state.autoRequestAccounts}`), this._initializeStateAsync();\n        });\n    }\n    _setConnected() {\n        xu(\"[SDKProvider: _setConnected()] Setting connected state\"), this._state.isConnected = !0;\n    }\n    getState() {\n        return this._state;\n    }\n    getSDKProviderState() {\n        return this.state;\n    }\n    getSelectedAddress() {\n        var e;\n        const { accounts: t } = this._state;\n        return t && 0 !== t.length ? (null === (e = t[0]) || void 0 === e ? void 0 : e.toLowerCase()) || \"\" : (xu(\"[SDKProvider: getSelectedAddress] No accounts found\"), null);\n    }\n    getChainId() {\n        return this.state.chainId;\n    }\n    getNetworkVersion() {\n        return this.state.networkVersion;\n    }\n    setSDKProviderState(e) {\n        this.state = Object.assign(Object.assign({}, this.state), e);\n    }\n    handleAccountsChanged(e, t) {\n        return this._handleAccountsChanged(e, t);\n    }\n    handleDisconnect({ terminate: e = !1 }) {\n        !function({ terminate: e = !1, instance: t }) {\n            const { state: n } = t;\n            xu(`[SDKProvider: handleDisconnect()] cleaning up provider state terminate=${e}`, t), e && (t._state.accounts = null, t._state.isUnlocked = !1, t._state.isPermanentlyDisconnected = !0, t._state.initialized = !1), t._handleAccountsChanged([]), t._state.isConnected = !1, t.emit(\"disconnect\", Mu.ethErrors.provider.disconnected()), n.providerStateRequested = !1;\n        }({\n            terminate: e,\n            instance: this\n        });\n    }\n    _initializeStateAsync() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                var t, n;\n                return a(this, void 0, void 0, function*() {\n                    void 0 === e.state && (e.state = {\n                        accounts: null,\n                        autoRequestAccounts: !1,\n                        providerStateRequested: !1,\n                        chainId: \"\"\n                    });\n                    const { state: r } = e;\n                    let i;\n                    if (r.providerStateRequested) xu(\"[SDKProvider: initializeStateAsync()] initialization already in progress\");\n                    else {\n                        let o;\n                        r.providerStateRequested = !0;\n                        let s = null, a = !1, c = !1;\n                        const l = yield Vu({\n                            enabled: !0\n                        });\n                        if (l) {\n                            const e = yield l.getPersistedChannelConfig({});\n                            a = null !== (t = null == e ? void 0 : e.relayPersistence) && void 0 !== t && t, o = yield l.getCachedChainId();\n                            const n = yield l.getCachedAccounts();\n                            n.length > 0 && (s = n[0]);\n                        }\n                        if (xu(`[SDKProvider: initializeStateAsync()] relayPersistence=${a}`, {\n                            relayPersistence: a,\n                            cachedChainId: o,\n                            cachedSelectedAddress: s\n                        }), a) if (o && s) i = {\n                            accounts: [\n                                s\n                            ],\n                            chainId: o,\n                            isUnlocked: !1\n                        }, c = !0;\n                        else try {\n                            i = yield e.request({\n                                method: \"metamask_getProviderState\"\n                            });\n                        } catch (t) {\n                            return e._log.error(\"MetaMask: Failed to get initial state. Please report this bug.\", t), void (r.providerStateRequested = !1);\n                        }\n                        if (0 === (null === (n = null == i ? void 0 : i.accounts) || void 0 === n ? void 0 : n.length)) if (e.getSelectedAddress()) i.accounts = [\n                            e.getSelectedAddress()\n                        ];\n                        else {\n                            xu(\"[SDKProvider: initializeStateAsync()] Fetch accounts remotely.\");\n                            const t = yield e.request({\n                                method: \"eth_requestAccounts\",\n                                params: []\n                            });\n                            i.accounts = t;\n                        }\n                        e._initializeState(i), r.providerStateRequested = !1, c && (e._state.isConnected = !0, e.emit(\"connect\", {\n                            chainId: null == i ? void 0 : i.chainId\n                        }));\n                    }\n                });\n            }(this);\n        });\n    }\n    _initializeState(e) {\n        return xu(\"[SDKProvider: _initializeState()]\", e), function(e, t, n) {\n            return xu(\"[SDKProvider: initializeState()] set state._initialized to false\"), e._state.initialized = !1, t(n);\n        }(this, super._initializeState.bind(this), e);\n    }\n    _handleChainChanged({ chainId: e, networkVersion: t } = {}) {\n        this.state.chainId = e, this.state.networkVersion = t, function({ instance: e, chainId: t, networkVersion: n, superHandleChainChanged: r }) {\n            xu(`[SDKProvider: handleChainChanged()] chainId=${t} networkVersion=${n}`);\n            let i = n;\n            n || (xu(\"[SDKProvider: handleChainChanged()] forced network version to prevent provider error\"), i = \"1\"), e._state.isConnected = !0, e.emit(\"connect\", {\n                chainId: t\n            }), r({\n                chainId: t,\n                networkVersion: i\n            });\n        }({\n            instance: this,\n            chainId: e,\n            networkVersion: t,\n            superHandleChainChanged: super._handleChainChanged.bind(this)\n        });\n    }\n}\nvar Gu, Zu = {\n    name: \"@metamask/sdk\",\n    version: \"0.32.0\",\n    description: \"\",\n    homepage: \"https://github.com/MetaMask/metamask-sdk#readme\",\n    bugs: {\n        url: \"https://github.com/MetaMask/metamask-sdk/issues\"\n    },\n    repository: {\n        type: \"git\",\n        url: \"https://github.com/MetaMask/metamask-sdk\",\n        directory: \"packages/sdk\"\n    },\n    main: \"dist/node/cjs/metamask-sdk.js\",\n    module: \"dist/browser/es/metamask-sdk.js\",\n    browser: \"dist/browser/es/metamask-sdk.js\",\n    unpkg: \"dist/browser/umd/metamask-sdk.js\",\n    \"react-native\": \"dist/react-native/es/metamask-sdk.js\",\n    types: \"dist/types/src/index.d.ts\",\n    sideEffects: !1,\n    files: [\n        \"/dist\"\n    ],\n    scripts: {\n        \"build:types\": \"tsc --project tsconfig.build.json --emitDeclarationOnly --outDir dist/types\",\n        build: \"yarn build:types && rollup -c --bundleConfigAsCjs\",\n        \"build:clean\": \"yarn clean && yarn build\",\n        \"build:post-tsc\": \"echo 'N/A'\",\n        \"build:pre-tsc\": \"echo 'N/A'\",\n        typecheck: \"tsc --noEmit\",\n        clean: \"rimraf ./dist\",\n        size: \"node bundle-size && size-limit\",\n        lint: \"yarn lint:eslint && yarn lint:misc --check\",\n        \"lint:changelog\": \"../../scripts/validate-changelog.sh @metamask/sdk\",\n        \"lint:eslint\": \"eslint . --cache --ext js,ts\",\n        \"lint:fix\": \"yarn lint:eslint --fix && yarn lint:misc --write\",\n        \"lint:misc\": \"prettier '**/*.json' '**/*.md' '!CHANGELOG.md' --ignore-path ../../.gitignore\",\n        prepack: \"../../scripts/prepack.sh\",\n        \"publish:preview\": \"yarn npm publish --tag preview\",\n        reset: \"yarn clean && rimraf ./node_modules/\",\n        test: 'jest --testPathIgnorePatterns \"/e2e/\"',\n        \"test:coverage\": 'jest --coverage --testPathIgnorePatterns \"/e2e/\"',\n        \"test:e2e\": 'jest --testPathPattern \"/e2e/\"',\n        \"test:ci\": 'jest --coverage --passWithNoTests --setupFilesAfterEnv ./jest-preload.js --testPathIgnorePatterns \"/e2e/\"',\n        \"test:dev\": 'jest -c ./jest.config.ts --detectOpenHandles  --testPathIgnorePatterns \"/e2e/\"',\n        watch: \"rollup -c -w\",\n        dev: 'concurrently \"tsc --watch\" \"rollup -c -w --bundleConfigAsCjs\"',\n        \"build:dev\": \"yarn build:types && NODE_ENV=dev rollup -c --bundleConfigAsCjs\"\n    },\n    dependencies: {\n        \"@babel/runtime\": \"^7.26.0\",\n        \"@metamask/onboarding\": \"^1.0.1\",\n        \"@metamask/providers\": \"16.1.0\",\n        \"@metamask/sdk-communication-layer\": \"workspace:*\",\n        \"@metamask/sdk-install-modal-web\": \"workspace:*\",\n        \"@paulmillr/qr\": \"^0.2.1\",\n        bowser: \"^2.9.0\",\n        \"cross-fetch\": \"^4.0.0\",\n        debug: \"^4.3.4\",\n        eciesjs: \"^0.4.11\",\n        \"eth-rpc-errors\": \"^4.0.3\",\n        eventemitter2: \"^6.4.9\",\n        \"obj-multiplex\": \"^1.0.0\",\n        pump: \"^3.0.0\",\n        \"readable-stream\": \"^3.6.2\",\n        \"socket.io-client\": \"^4.5.1\",\n        tslib: \"^2.6.0\",\n        util: \"^0.12.4\",\n        uuid: \"^8.3.2\"\n    },\n    devDependencies: {\n        \"@jest/globals\": \"^29.3.1\",\n        \"@lavamoat/allow-scripts\": \"^2.3.1\",\n        \"@metamask/auto-changelog\": \"3.1.0\",\n        \"@metamask/eslint-config\": \"^6.0.0\",\n        \"@metamask/eslint-config-nodejs\": \"^6.0.0\",\n        \"@metamask/eslint-config-typescript\": \"^6.0.0\",\n        \"@react-native-async-storage/async-storage\": \"^1.19.6\",\n        \"@rollup/plugin-alias\": \"^5.1.1\",\n        \"@rollup/plugin-commonjs\": \"^25.0.7\",\n        \"@rollup/plugin-json\": \"^6.0.0\",\n        \"@rollup/plugin-node-resolve\": \"^15.0.2\",\n        \"@rollup/plugin-replace\": \"^6.0.1\",\n        \"@rollup/plugin-terser\": \"^0.4.1\",\n        \"@size-limit/preset-big-lib\": \"^11.0.2\",\n        \"@types/dom-screen-wake-lock\": \"^1.0.2\",\n        \"@types/node\": \"^20.1.3\",\n        \"@types/pump\": \"^1.1.1\",\n        \"@types/qrcode-terminal\": \"^0.12.0\",\n        \"@types/uuid\": \"^10.0.0\",\n        \"@typescript-eslint/eslint-plugin\": \"^4.26.0\",\n        \"@typescript-eslint/parser\": \"^4.26.0\",\n        \"browserify-zlib\": \"^0.2.0\",\n        buffer: \"^6.0.3\",\n        concurrently: \"^9.1.2\",\n        \"crypto-browserify\": \"^3.12.0\",\n        eslint: \"^7.30.0\",\n        \"eslint-config-prettier\": \"^8.3.0\",\n        \"eslint-plugin-import\": \"^2.23.4\",\n        \"eslint-plugin-jest\": \"^24.4.0\",\n        \"eslint-plugin-jsdoc\": \"^36.1.0\",\n        \"eslint-plugin-node\": \"^11.1.0\",\n        \"eslint-plugin-prettier\": \"^3.4.0\",\n        \"https-browserify\": \"^1.0.0\",\n        jest: \"^29.3.1\",\n        \"jest-environment-jsdom\": \"^29.3.1\",\n        prettier: \"^2.3.0\",\n        process: \"^0.11.10\",\n        rimraf: \"^4.4.0\",\n        rollup: \"^4.26.0\",\n        \"rollup-plugin-analyzer\": \"^4.0.0\",\n        \"rollup-plugin-jscc\": \"^2.0.0\",\n        \"rollup-plugin-natives\": \"^0.7.5\",\n        \"rollup-plugin-node-builtins\": \"^2.1.2\",\n        \"rollup-plugin-polyfill-node\": \"^0.13.0\",\n        \"rollup-plugin-sizes\": \"^1.0.6\",\n        \"rollup-plugin-typescript2\": \"^0.31.2\",\n        \"rollup-plugin-visualizer\": \"^5.12.0\",\n        \"size-limit\": \"^11.0.2\",\n        \"stream-browserify\": \"^3.0.0\",\n        \"stream-http\": \"^3.2.0\",\n        \"ts-jest\": \"^29.0.3\",\n        \"ts-node\": \"^10.9.1\",\n        typescript: \"^4.3.2\",\n        url: \"^0.11.0\",\n        webpack: \"^5.0.0\"\n    },\n    publishConfig: {\n        access: \"public\",\n        registry: \"https://registry.npmjs.org/\"\n    },\n    lavamoat: {\n        allowScripts: {\n            \"eciesjs>secp256k1\": !1,\n            \"socket.io-client>engine.io-client>ws>bufferutil\": !1,\n            \"socket.io-client>engine.io-client>ws>utf-8-validate\": !1,\n            \"@metamask/sdk-communication-layer>bufferutil\": !1,\n            \"@metamask/sdk-communication-layer>eciesjs>secp256k1\": !1,\n            \"@metamask/sdk-communication-layer>utf-8-validate\": !1\n        }\n    }\n};\n!function(e) {\n    e.INPAGE = \"metamask-inpage\", e.CONTENT_SCRIPT = \"metamask-contentscript\", e.PROVIDER = \"metamask-provider\";\n}(Gu || (Gu = {}));\nconst Yu = \"direct\", Ju = \"https://metamask.app.link/connect\", Xu = \"metamask://connect\", Qu = {\n    NAME: \"MetaMask\",\n    RDNS: [\n        \"io.metamask\",\n        \"io.metamask.flask\"\n    ]\n}, eh = /(?:^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$)|(?:^0{8}-0{4}-0{4}-0{4}-0{12}$)/u, th = {\n    METAMASK_GETPROVIDERSTATE: \"metamask_getProviderState\",\n    METAMASK_CONNECTSIGN: \"metamask_connectSign\",\n    METAMASK_CONNECTWITH: \"metamask_connectWith\",\n    METAMASK_OPEN: \"metamask_open\",\n    METAMASK_BATCH: \"metamask_batch\",\n    PERSONAL_SIGN: \"personal_sign\",\n    WALLET_REQUESTPERMISSIONS: \"wallet_requestPermissions\",\n    WALLET_REVOKEPERMISSIONS: \"wallet_revokePermissions\",\n    WALLET_GETPERMISSIONS: \"wallet_getPermissions\",\n    WALLET_WATCHASSET: \"wallet_watchAsset\",\n    WALLET_ADDETHEREUMCHAIN: \"wallet_addEthereumChain\",\n    WALLET_SWITCHETHETHEREUMCHAIN: \"wallet_switchEthereumChain\",\n    ETH_REQUESTACCOUNTS: \"eth_requestAccounts\",\n    ETH_ACCOUNTS: \"eth_accounts\",\n    ETH_CHAINID: \"eth_chainId\",\n    ETH_SENDTRANSACTION: \"eth_sendTransaction\",\n    ETH_SIGNTYPEDDATA: \"eth_signTypedData\",\n    ETH_SIGNTYPEDDATA_V3: \"eth_signTypedData_v3\",\n    ETH_SIGNTYPEDDATA_V4: \"eth_signTypedData_v4\",\n    ETH_SIGNTRANSACTION: \"eth_signTransaction\",\n    ETH_SIGN: \"eth_sign\",\n    PERSONAL_EC_RECOVER: \"personal_ecRecover\"\n}, nh = {\n    [th.ETH_REQUESTACCOUNTS]: !0,\n    [th.ETH_SENDTRANSACTION]: !0,\n    [th.ETH_SIGNTRANSACTION]: !0,\n    [th.ETH_SIGN]: !0,\n    [th.PERSONAL_SIGN]: !0,\n    [th.ETH_ACCOUNTS]: !1,\n    [th.ETH_CHAINID]: !1,\n    [th.PERSONAL_SIGN]: !0,\n    [th.ETH_SIGNTYPEDDATA]: !0,\n    [th.ETH_SIGNTYPEDDATA_V3]: !0,\n    [th.ETH_SIGNTYPEDDATA_V4]: !0,\n    [th.WALLET_REQUESTPERMISSIONS]: !0,\n    [th.WALLET_GETPERMISSIONS]: !0,\n    [th.WALLET_WATCHASSET]: !0,\n    [th.WALLET_ADDETHEREUMCHAIN]: !0,\n    [th.WALLET_SWITCHETHETHEREUMCHAIN]: !0,\n    [th.METAMASK_CONNECTSIGN]: !0,\n    [th.METAMASK_CONNECTWITH]: !0,\n    [th.PERSONAL_EC_RECOVER]: !0,\n    [th.METAMASK_BATCH]: !0,\n    [th.METAMASK_OPEN]: !0\n}, rh = Object.keys(nh).map((e)=>e.toLowerCase()), ih = [\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sign\"\n].map((e)=>e.toLowerCase()), oh = \".sdk-comm\", sh = \"providerType\", ah = \".MMSDK_cached_address\", ch = \".MMSDK_cached_chainId\", lh = {\n    CHAIN_CHANGED: \"chainChanged\",\n    ACCOUNTS_CHANGED: \"accountsChanged\",\n    DISCONNECT: \"disconnect\",\n    CONNECT: \"connect\",\n    CONNECTED: \"connected\"\n}, dh = 1e6;\nvar uh;\n!function(e) {\n    e.TERMINATE = \"terminate\", e.EXTENSION = \"extension\", e.INITIALIZED = \"initialized\";\n}(uh || (uh = {}));\nconst hh =  false && 0;\nfunction fh({ instance: e, msg: t }) {\n    return a(this, void 0, void 0, function*() {\n        if (e._initialized || (xu(\"[MetaMaskSDK: connectAndSign()] provider not ready -- wait for init()\"), yield e.init()), xu(`[MetaMaskSDK: connectAndSign()] activeProvider=${e.activeProvider}`), !e.activeProvider) throw new Error(\"SDK state invalid -- undefined provider\");\n        const n = /^0x([0-9A-Fa-f]{2})*$/u.test(t) ? t : function(e) {\n            let t;\n            if (void 0 !== S) t = S.from(e, \"utf8\").toString(\"hex\");\n            else if (\"undefined\" != typeof TextEncoder) {\n                const n = (new TextEncoder).encode(e);\n                t = Array.from(n).map((e)=>e.toString(16).padStart(2, \"0\")).join(\"\");\n            } else {\n                if (\"object\" != typeof c || !(\"Buffer\" in c)) throw new Error(\"Unable to convert string to hex: No available method.\");\n                t = c.Buffer.from(e, \"utf8\").toString(\"hex\");\n            }\n            return `0x${t}`;\n        }(t);\n        return e.activeProvider.request({\n            method: th.METAMASK_CONNECTWITH,\n            params: [\n                {\n                    method: th.PERSONAL_SIGN,\n                    params: [\n                        n\n                    ]\n                }\n            ]\n        });\n    });\n}\nfunction ph(e) {\n    var t, n;\n    return a(this, void 0, void 0, function*() {\n        xu(\"[MetaMaskSDK: connectWithExtensionProvider()] \", e), e.sdkProvider = e.activeProvider, e.activeProvider = window.extension, window.ethereum = window.extension;\n        try {\n            const e = yield null === (t = window.extension) || void 0 === t ? void 0 : t.request({\n                method: \"eth_requestAccounts\"\n            });\n            xu(`[MetaMaskSDK: connectWithExtensionProvider()] accounts=${e}`);\n        } catch (e) {\n            return void console.warn(\"[MetaMaskSDK: connectWithExtensionProvider()] can't request accounts error\", e);\n        }\n        localStorage.setItem(sh, \"extension\"), e.extensionActive = !0, e.emit(Fu.ProviderUpdate, uh.EXTENSION), e.options.enableAnalytics && (null === (n = e.analytics) || void 0 === n || n.send({\n            event: So.SDK_USE_EXTENSION\n        }));\n    });\n}\nfunction gh(e) {\n    let t;\n    if (void 0 !== S) t = S.from(e, \"utf8\").toString(\"base64\");\n    else if (\"function\" == typeof btoa) t = btoa(encodeURIComponent(e).replace(/%([0-9A-F]{2})/gu, (e, t)=>String.fromCharCode(parseInt(t, 16))));\n    else {\n        if (\"object\" != typeof c || !(\"Buffer\" in c)) throw new Error(\"Unable to base64 encode: No available method.\");\n        t = c.Buffer.from(e, \"utf8\").toString(\"base64\");\n    }\n    return t;\n}\nfunction mh(e, t, n, r) {\n    var i, o, s, c, l, d, u, h, f, p, g, m, y, v, b, w, E, C, _, k;\n    return a(this, void 0, void 0, function*() {\n        const n = null === (i = e.state.remote) || void 0 === i ? void 0 : i.isReady(), a = null === (o = e.state.remote) || void 0 === o ? void 0 : o.isConnected(), x = null === (s = e.state.remote) || void 0 === s ? void 0 : s.isPaused(), M = zu.getProvider(), A = null === (c = e.state.remote) || void 0 === c ? void 0 : c.getChannelId(), I = null === (l = e.state.remote) || void 0 === l ? void 0 : l.isAuthorized(), { deeplinkProtocol: R } = e.state, { method: P, data: L, triggeredInstaller: O } = ((e)=>{\n            var t, n, r, i;\n            let o;\n            S.isBuffer(e) ? (o = e.toJSON(), o._isBuffer = !0) : o = e;\n            const s = null === (t = null == o ? void 0 : o.data) || void 0 === t ? void 0 : t.method;\n            let a = !1;\n            return \"object\" == typeof (null === (n = null == o ? void 0 : o.data) || void 0 === n ? void 0 : n.params) && !0 === (null === (i = null === (r = null == o ? void 0 : o.data) || void 0 === r ? void 0 : r.params) || void 0 === i ? void 0 : i.__triggeredInstaller) && (a = !0, o.data.params = o.data.params.wrappedParams), {\n                method: s,\n                data: o,\n                triggeredInstaller: a\n            };\n        })(t);\n        if (xu(`[RCPMS: write()] method='${P}' isRemoteReady=${n} channelId=${A} isSocketConnected=${a} isRemotePaused=${x} providerConnected=${M.isConnected()}`, t), !A) return P !== th.METAMASK_GETPROVIDERSTATE && xu(`[RCPMS: write()] ${P} --\\x3e channelId is undefined`), r(new Error(\"disconnected\"));\n        xu(`[RCPMS: write()] remote.isPaused()=${null === (d = e.state.remote) || void 0 === d ? void 0 : d.isPaused()} authorized=${I} ready=${n} socketConnected=${a}`, t);\n        const T = null === (u = e.state.platformManager) || void 0 === u ? void 0 : u.isSecure(), N = null !== (f = null === (h = e.state.platformManager) || void 0 === h ? void 0 : h.isMobileWeb()) && void 0 !== f && f, D = null !== (g = null === (p = e.state.remote) || void 0 === p ? void 0 : p.hasDeeplinkProtocol()) && void 0 !== g && g && N && I;\n        try {\n            if (!O) {\n                const t = JSON.stringify(null == L ? void 0 : L.data);\n                if (t.length > dh) return r(new Error(`Message size ${t.length} exceeds maximum allowed size of 1000000 bytes`));\n                null === (m = e.state.remote) || void 0 === m || m.sendMessage(null == L ? void 0 : L.data).then(()=>{\n                    xu(`[RCPMS: _write()] ${P} sent successfully`);\n                }).catch((e)=>{\n                    xu(\"[RCPMS: _write()] error sending message\", e);\n                });\n            }\n            if (!T) return xu(`[RCPMS: _write()] unsecure platform for method ${P} -- return callback`), r();\n            if (O) return xu(\"[RCPMS: _write()] prevent deeplink -- installation completed separately.\"), r();\n            const t = null !== (b = null === (v = null === (y = e.state.remote) || void 0 === y ? void 0 : y.getKeyInfo()) || void 0 === v ? void 0 : v.ecies.public) && void 0 !== b ? b : \"\";\n            let n = encodeURI(`channelId=${A}&pubkey=${t}&comm=socket&t=d&v=2`);\n            if (D) {\n                const t = JSON.stringify(null == L ? void 0 : L.data), i = null === (w = e.state.remote) || void 0 === w ? void 0 : w.encrypt(t);\n                if (!i) return xu(\"[RCPMS: _write()] error encrypting message\"), r(new Error(\"RemoteCommunicationPostMessageStream - disconnected\"));\n                n += `&scheme=${R}&rpc=${gh(i)}`;\n            }\n            if (!(null === (E = e.state.platformManager) || void 0 === E ? void 0 : E.isMetaMaskInstalled())) return xu(\"[RCPMS: _write()] prevent deeplink until installation is completed.\"), r();\n            nh[P] ? (xu(`[RCPMS: _write()] redirect link for '${P}' socketConnected=${a} connect?${n}`), null === (C = e.state.platformManager) || void 0 === C || C.openDeeplink(`${Ju}?${n}`, `${Xu}?${n}`, \"_self\")) : (null === (_ = e.state.remote) || void 0 === _ ? void 0 : _.isPaused()) ? (xu(`[RCPMS: _write()] MM is PAUSED! deeplink with connect! targetMethod=${P}`), null === (k = e.state.platformManager) || void 0 === k || k.openDeeplink(`${Ju}?redirect=true&${n}`, `${Xu}?redirect=true&${n}`, \"_self\")) : xu(`[RCPMS: _write()] method ${P} doesn't need redirect.`);\n        } catch (e) {\n            return xu(\"[RCPMS: _write()] error sending message\", e), r(new Error(\"RemoteCommunicationPostMessageStream - disconnected\"));\n        }\n        return r();\n    });\n}\nclass yh extends nu.Duplex {\n    constructor({ name: e, remote: t, deeplinkProtocol: n, platformManager: r }){\n        super({\n            objectMode: !0\n        }), this.state = {\n            _name: null,\n            remote: null,\n            deeplinkProtocol: !1,\n            platformManager: null\n        }, this.state._name = e, this.state.remote = t, this.state.deeplinkProtocol = n, this.state.platformManager = r, this._onMessage = this._onMessage.bind(this), this.state.remote.on(bo.MESSAGE, this._onMessage);\n    }\n    _write(e, t, n) {\n        return a(this, void 0, void 0, function*() {\n            return mh(this, e, 0, n);\n        });\n    }\n    _read() {}\n    _onMessage(e) {\n        return function(e, t) {\n            try {\n                if (xu(\"[RCPMS: onMessage()] message\", t), !t || \"object\" != typeof t) return;\n                if (\"object\" != typeof (null == t ? void 0 : t.data)) return;\n                if (!(null == t ? void 0 : t.name)) return void xu(\"[RCPMS: onMessage()] ignore message without name\", t);\n                if ((null == t ? void 0 : t.name) !== Gu.PROVIDER) return void xu(`[RCPMS: onMessage()] ignore message with wrong name message=${t}`);\n                if (S.isBuffer(t)) {\n                    const n = S.from(t);\n                    e.push(n);\n                } else e.push(t);\n            } catch (e) {\n                xu(`[RCPMS: onMessage()] ignore message error err=${e}`);\n            }\n        }(this, e);\n    }\n    start() {}\n}\nlet vh = 1;\nconst bh = (e)=>new Promise((t)=>{\n        setTimeout(()=>{\n            t(!0);\n        }, e);\n    }), wh = ({ checkInstallationOnAllCalls: t = !1, communicationLayerPreference: n, injectProvider: r, shouldShimWeb3: i, platformManager: o, installer: s, sdk: c, remoteConnection: l, debug: d })=>a(void 0, void 0, void 0, function*() {\n        var u, h;\n        const f = (({ name: e, remoteConnection: t })=>{\n            if (!t || !(null == t ? void 0 : t.getConnector())) throw new Error(\"Missing remote connection parameter\");\n            return new yh({\n                name: e,\n                remote: null == t ? void 0 : t.getConnector(),\n                deeplinkProtocol: null == t ? void 0 : t.state.deeplinkProtocol,\n                platformManager: null == t ? void 0 : t.getPlatformManager()\n            });\n        })({\n            name: Gu.INPAGE,\n            target: Gu.CONTENT_SCRIPT,\n            platformManager: o,\n            communicationLayerPreference: n,\n            remoteConnection: l\n        }), p = o.getPlatformType(), g = c.options.dappMetadata, m = `Sdk/Javascript SdkVersion/${Zu.version} Platform/${p} dApp/${null !== (u = g.url) && void 0 !== u ? u : g.name} dAppTitle/${g.name}`;\n        let y = null, v = null;\n        const b = null === (h = c.options.storage) || void 0 === h ? void 0 : h.storageManager;\n        if (b) {\n            try {\n                const e = yield b.getCachedAccounts();\n                e.length > 0 && (y = e[0]);\n            } catch (e) {\n                console.error(`[initializeMobileProvider] failed to get cached addresses: ${e}`);\n            }\n            try {\n                const e = yield b.getCachedChainId();\n                e && (v = e);\n            } catch (e) {\n                console.error(`[initializeMobileProvider] failed to parse cached chainId: ${e}`);\n            }\n        }\n        xu(`[initializeMobileProvider] cachedAccountAddress: ${y}, cachedChainId: ${v}`);\n        const w = !(!r || p === Bo.NonBrowser || p === Bo.ReactNative), E = zu.init({\n            shouldSetOnWindow: w,\n            connectionStream: f,\n            shouldShimWeb3: i,\n            sdkInstance: c\n        });\n        let C = !1;\n        const S = (e)=>{\n            C = e;\n        }, _ = ()=>C, k = (n, r, i, d)=>a(void 0, void 0, void 0, function*() {\n                var u, h, f, p, g, w, E, k, x;\n                const M = zu.getProvider();\n                if (C) {\n                    M.emit(\"display_uri\", (null == l ? void 0 : l.state.qrcodeLink) || \"\"), null == l || l.showActiveModal();\n                    let e = _();\n                    for(; e;){\n                        const t = _(), n = null == l ? void 0 : l.isAuthorized();\n                        e = t && !n, xu(`[initializeMobileProvider: sendRequest()] waiting for initialization to complete - initializing: ${t} authorized: ${n}`), yield bh(1e3);\n                    }\n                    return xu(\"[initializeMobileProvider: sendRequest()] initial method completed -- prevent installation and call provider\"), i(...r);\n                }\n                const A = o.isMetaMaskInstalled(), I = null == l ? void 0 : l.isConnected();\n                let R = null, P = null, L = null;\n                if (R = null !== (u = M.getSelectedAddress()) && void 0 !== u ? u : y, L = M.getChainId() || v, R && b && R !== y && b.persistAccounts([\n                    R\n                ]).catch((e)=>{\n                    console.error(`[initializeMobileProvider] failed to persist account: ${e}`);\n                }), L && (v = L, b && b.persistChainId(L).catch((e)=>{\n                    console.error(`[initializeMobileProvider] failed to persist chainId: ${e}`);\n                })), xu(\"[initializeMobileProvider: sendRequest()]\", {\n                    selectedAddress: R,\n                    chainId: L\n                }), d && xu(`[initializeMobileProvider: sendRequest()] method=${n} ongoing=${C} selectedAddress=${R} isInstalled=${A} checkInstallationOnAllCalls=${t} socketConnected=${I}`), R && n.toLowerCase() === th.ETH_ACCOUNTS.toLowerCase()) return [\n                    R\n                ];\n                if (L && n.toLowerCase() === th.ETH_CHAINID.toLowerCase()) return L;\n                const O = [\n                    th.ETH_REQUESTACCOUNTS,\n                    th.WALLET_REQUESTPERMISSIONS,\n                    th.METAMASK_CONNECTSIGN,\n                    th.METAMASK_CONNECTWITH\n                ], T = !nh[n], N = null === (h = c.options.readonlyRPCMap) || void 0 === h ? void 0 : h[L];\n                if (N && T) try {\n                    const t = null === (f = null == r ? void 0 : r[0]) || void 0 === f ? void 0 : f.params, i = yield (({ rpcEndpoint: t, method: n, sdkInfo: r, params: i })=>a(void 0, void 0, void 0, function*() {\n                            const o = JSON.stringify({\n                                jsonrpc: \"2.0\",\n                                method: n,\n                                params: i,\n                                id: (vh += 1, vh)\n                            }), s = {\n                                Accept: \"application/json\",\n                                \"Content-Type\": \"application/json\"\n                            };\n                            let a;\n                            t.includes(\"infura\") && (s[\"Metamask-Sdk-Info\"] = r);\n                            try {\n                                a = yield cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(t, {\n                                    method: \"POST\",\n                                    headers: s,\n                                    body: o\n                                });\n                            } catch (e) {\n                                throw e instanceof Error ? new Error(`Failed to fetch from RPC: ${e.message}`) : new Error(`Failed to fetch from RPC: ${e}`);\n                            }\n                            if (!a.ok) throw new Error(`Server responded with a status of ${a.status}`);\n                            return (yield a.json()).result;\n                        }))({\n                        rpcEndpoint: N,\n                        sdkInfo: m,\n                        method: n,\n                        params: t || []\n                    });\n                    return d && xu(`initializeProvider::ReadOnlyRPCResponse ${i}`), i;\n                } catch (e) {\n                    console.warn(`[initializeMobileProvider: sendRequest()] method=${n} readOnlyRPCRequest failed:`, e);\n                }\n                if ((!A || A && !I) && n !== th.METAMASK_GETPROVIDERSTATE) {\n                    const e = (null === (p = null == r ? void 0 : r[0]) || void 0 === p ? void 0 : p.params) || [];\n                    if (-1 !== O.indexOf(n) || t) {\n                        S(!0);\n                        const t = n === th.METAMASK_CONNECTWITH, o = `${Date.now()}`;\n                        try {\n                            yield s.start({\n                                wait: !1,\n                                connectWith: t ? {\n                                    method: n,\n                                    id: o,\n                                    params: e\n                                } : void 0\n                            }), yield new Promise((e, t)=>{\n                                (null == l ? void 0 : l.isAuthorized()) && (xu(\"[initializeMobileProvider: sendRequest()] already authorized\"), e(!0)), null == l || l.getConnector().once(bo.AUTHORIZED, ()=>{\n                                    e(!0);\n                                }), c.once(bo.PROVIDER_UPDATE, (e)=>{\n                                    xu(`[initializeMobileProvider: sendRequest()] PROVIDER_UPDATE --- remote provider request interupted type=${e}`), e === uh.EXTENSION ? t(bo.PROVIDER_UPDATE) : t(new Error(\"Connection Terminated\"));\n                                });\n                            });\n                        } catch (t) {\n                            if (uh.EXTENSION === t) {\n                                if (xu(`[initializeMobileProvider: sendRequest()] extension provider detect: re-create ${n} on the active provider`), n.toLowerCase() === th.METAMASK_CONNECTSIGN.toLowerCase()) {\n                                    const t = yield null === (g = c.getProvider()) || void 0 === g ? void 0 : g.request({\n                                        method: th.ETH_REQUESTACCOUNTS,\n                                        params: []\n                                    });\n                                    if (!t.length) throw new Error(\"SDK state invalid -- undefined accounts\");\n                                    const n = yield null === (w = c.getProvider()) || void 0 === w ? void 0 : w.request({\n                                        method: th.PERSONAL_SIGN,\n                                        params: [\n                                            e[0],\n                                            t[0]\n                                        ]\n                                    });\n                                    return c.emit(Fu.ConnectWithResponse, n), n;\n                                }\n                                if (n.toLowerCase() === th.METAMASK_CONNECTWITH.toLowerCase()) {\n                                    const [t] = e, n = yield (({ method: e, sdk: t, params: n })=>a(void 0, void 0, void 0, function*() {\n                                            var r, i, o, s;\n                                            if (!t.isExtensionActive()) throw new Error(\"SDK state invalid -- extension is not active\");\n                                            xu(\"[MetaMaskProvider: extensionConnectWithOverwrite()] Overwriting request method\", e, n);\n                                            const a = yield null === (r = t.getProvider()) || void 0 === r ? void 0 : r.request({\n                                                method: th.ETH_REQUESTACCOUNTS,\n                                                params: []\n                                            });\n                                            if (!a.length) throw new Error(\"SDK state invalid -- undefined accounts\");\n                                            if ((null == e ? void 0 : e.toLowerCase()) === th.PERSONAL_SIGN.toLowerCase()) {\n                                                const r = {\n                                                    method: e,\n                                                    params: [\n                                                        n[0],\n                                                        a[0]\n                                                    ]\n                                                };\n                                                return yield null === (i = t.getProvider()) || void 0 === i ? void 0 : i.request(r);\n                                            }\n                                            if ((null == e ? void 0 : e.toLowerCase()) === th.ETH_SENDTRANSACTION.toLowerCase()) {\n                                                const r = {\n                                                    method: e,\n                                                    params: [\n                                                        Object.assign(Object.assign({}, n[0]), {\n                                                            from: a[0]\n                                                        })\n                                                    ]\n                                                };\n                                                return yield null === (o = t.getProvider()) || void 0 === o ? void 0 : o.request(r);\n                                            }\n                                            return ih.includes(e.toLowerCase()) ? (console.warn(`MetaMaskSDK connectWith method=${e} -- not handled by the extension -- call separately`), a) : yield null === (s = t.getProvider()) || void 0 === s ? void 0 : s.request({\n                                                method: e,\n                                                params: n\n                                            });\n                                        }))({\n                                        method: t.method,\n                                        sdk: c,\n                                        params: t.params\n                                    });\n                                    return c.emit(Fu.ConnectWithResponse, n), n;\n                                }\n                                return xu(`[initializeMobileProvider: sendRequest()] sending '${n}' on active provider`, e), yield null === (E = c.getProvider()) || void 0 === E ? void 0 : E.request({\n                                    method: n,\n                                    params: e\n                                });\n                            }\n                            if (t === bo.REJECTED) throw null == l || l.closeModal(), null === (k = c.getProvider()) || void 0 === k || k.handleDisconnect({\n                                terminate: !1\n                            }), Object.assign(new Error(\"User rejected connection\"), {\n                                code: 4001\n                            });\n                            throw xu(`[initializeMobileProvider: sendRequest()] failed to start installer: ${t}`), t;\n                        } finally{\n                            S(!1);\n                        }\n                        if (n === th.ETH_REQUESTACCOUNTS) return P = yield new Promise((e)=>{\n                            const t = setInterval(()=>{\n                                const { accounts: n } = M.getState();\n                                n && (clearInterval(t), e(n));\n                            }, 100);\n                        }), xu(`[initializeMobileProvider: sendRequest()] selectedAddress: ${R} --- SKIP rpc call`), P;\n                        if (n === th.METAMASK_CONNECTWITH) try {\n                            let e = 0;\n                            const t = 5, n = ({ resolve: n, reject: r })=>{\n                                e += 1;\n                                const i = null == l ? void 0 : l.getConnector().getRPCMethodTracker(), s = null == i ? void 0 : i[o];\n                                return xu(`TRACKER: update method ${o}`, s), (null == s ? void 0 : s.result) ? (xu(\"[initializeMobileProvider: sendRequest()] found result\", s.result), c.emit(Fu.ConnectWithResponse, s.result), void n(s.result)) : (null == s ? void 0 : s.error) ? (xu(\"[initializeMobileProvider: sendRequest()] found error\", s.error), void r(s.error)) : e >= t ? (xu(\"[initializeMobileProvider: sendRequest()] max message count reached without result\"), void r(new Error(\"Max message count reached without result\"))) : void xu(\"[initializeMobileProvider: sendRequest()] not found yet, need to wait for next update\");\n                            };\n                            let r, i;\n                            const s = yield new Promise((e, t)=>{\n                                const s = null == l ? void 0 : l.getConnector().getRPCMethodTracker();\n                                xu(`TRACKER: method ${o}`, s), (null == s ? void 0 : s[o].result) ? (xu(\"[initializeMobileProvider: sendRequest()] found result\", null == s ? void 0 : s[o].result), e(null == s ? void 0 : s[o].result)) : (null == s ? void 0 : s[o].error) && (xu(\"[initializeMobileProvider: sendRequest()] found error\", null == s ? void 0 : s[o].error), t(null == s ? void 0 : s[o].error)), i = ()=>n({\n                                        resolve: e,\n                                        reject: t\n                                    }), r = null == l ? void 0 : l.getConnector().on(bo.RPC_UPDATE, i);\n                            });\n                            return i && (null == r || r.off(bo.RPC_UPDATE, i)), xu(\"TRACKER: result\", s), s;\n                        } catch (e) {\n                            throw xu(\"[initializeMobileProvider: sendRequest()] error:\", e), e;\n                        }\n                        r[0] && \"object\" == typeof r[0] && (r[0].params = {\n                            __triggeredInstaller: !0,\n                            wrappedParams: r[0].params\n                        });\n                        return i(...r);\n                    }\n                    if (o.isSecure() && nh[n]) return i(...r);\n                    if (c.isExtensionActive()) return xu(`[initializeMobileProvider: sendRequest()] EXTENSION active - redirect request '${n}' to it`, r, e), yield null === (x = c.getProvider()) || void 0 === x ? void 0 : x.request({\n                        method: n,\n                        params: e\n                    });\n                    throw xu(`[initializeMobileProvider: sendRequest()] method=${n} --- skip --- not connected/installed`), new Error(\"MetaMask is not connected/installed, please call eth_requestAccounts to connect first.\");\n                }\n                try {\n                    const e = yield i(...r);\n                    if (xu(`[initializeMobileProvider: sendRequest()] method=${n} rpcResponse`, e), n === th.WALLET_REQUESTPERMISSIONS) {\n                        const t = e.reduce((e, t)=>{\n                            var n;\n                            if (\"eth_accounts\" === t.parentCapability) {\n                                const r = null === (n = t.caveats.find((e)=>\"restrictReturnedAccounts\" === e.type)) || void 0 === n ? void 0 : n.value;\n                                r && e.push(...r);\n                            }\n                            return e;\n                        }, []);\n                        xu(\"[initializeMobileProvider: sendRequest()] accountsToPersist:\", t), t.length > 0 && (M.handleAccountsChanged(t, !1), null == b || b.persistAccounts(t));\n                    }\n                    return e;\n                } catch (e) {\n                    throw console.error(\"[initializeMobileProvider: sendRequest()] error:\", e), e;\n                }\n            }), { request: x } = E;\n        E.request = (...e)=>a(void 0, void 0, void 0, function*() {\n                return k(null == e ? void 0 : e[0].method, e, x, d);\n            });\n        const { send: M } = E;\n        return E.send = (...e)=>a(void 0, void 0, void 0, function*() {\n                return k(null == e ? void 0 : e[0], e, M, d);\n            }), xu(\"[initializeMobileProvider: sendRequest()] metamaskStream.start()\"), f.start(), E;\n    });\nfunction Eh(e) {\n    var t, n, r, i;\n    return a(this, void 0, void 0, function*() {\n        const { options: o } = e, s = {\n            communicationLayerPreference: null !== (t = o.communicationLayerPreference) && void 0 !== t ? t : $o.SOCKET,\n            platformManager: e.platformManager,\n            sdk: e,\n            checkInstallationOnAllCalls: o.checkInstallationOnAllCalls,\n            injectProvider: null === (n = o.injectProvider) || void 0 === n || n,\n            shouldShimWeb3: null === (r = o.shouldShimWeb3) || void 0 === r || r,\n            extensionOnly: null === (i = o.extensionOnly) || void 0 === i || i,\n            installer: e.installer,\n            remoteConnection: e.remoteConnection,\n            debug: e.debug\n        }, a = yield wh(s);\n        e.activeProvider = a, function(e) {\n            var t, n, r, i;\n            null === (n = null === (t = e.remoteConnection) || void 0 === t ? void 0 : t.getConnector()) || void 0 === n || n.on(Fu.ConnectionStatus, (t)=>{\n                e.emit(Fu.ConnectionStatus, t);\n            }), null === (i = null === (r = e.remoteConnection) || void 0 === r ? void 0 : r.getConnector()) || void 0 === i || i.on(Fu.ServiceStatus, (t)=>{\n                e.emit(Fu.ServiceStatus, t);\n            });\n        }(e);\n    });\n}\nconst Ch = \"sdk\";\nclass Sh {\n    constructor({ serverUrl: e, enabled: t, originatorInfo: n }){\n        this.serverURL = ho, this.serverURL = e, this.originatorInfo = n, this.enabled = null == t || t;\n    }\n    send({ event: e, params: t }) {\n        if (!this.enabled) return;\n        const n = Object.assign(Object.assign({\n            id: Ch,\n            event: e,\n            sdkVersion: Zu.version\n        }, this.originatorInfo), {\n            params: t\n        });\n        xu(`[Analytics: send()] event: ${e}`, n), co(n, this.serverURL).catch((e)=>{\n            xu(`[Analytics: send()] error: ${e}`);\n        });\n    }\n}\nconst _h = ()=>{\n    if (\"undefined\" == typeof document) return;\n    let e;\n    const t = document.getElementsByTagName(\"link\");\n    for(let n = 0; n < t.length; n++)\"icon\" !== t[n].getAttribute(\"rel\") && \"shortcut icon\" !== t[n].getAttribute(\"rel\") || (e = t[n].getAttribute(\"href\"));\n    return e;\n}, kh = 163400;\nfunction xh(e) {\n    var t, n, r;\n    const { dappMetadata: i } = e, s = function({ url: e, name: t }) {\n        var n;\n        const r = e + t, i = gh(r);\n        if (!localStorage) return \"\";\n        let s = null !== (n = localStorage.getItem(i)) && void 0 !== n ? n : \"\";\n        if (!s) {\n            s = (0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();\n            try {\n                localStorage.setItem(i, s);\n            } catch (e) {\n                return \"\";\n            }\n        }\n        return s;\n    }({\n        url: null !== (t = null == i ? void 0 : i.url) && void 0 !== t ? t : \"no_url\",\n        name: null !== (n = null == i ? void 0 : i.name) && void 0 !== n ? n : \"no_name\"\n    }), a = null === (r = e.platformManager) || void 0 === r ? void 0 : r.getPlatformType(), c = a === Bo.DesktopWeb, l = a === Bo.MetaMaskMobileWebview;\n    let d = \"N/A\";\n    return c ? d = \"extension\" : l && (d = \"mobile\"), {\n        id: s,\n        from: d\n    };\n}\nconst Mh = ({ provider: e, sdkInstance: t })=>{\n    if (\"state\" in e) throw new Error(\"INVALID EXTENSION PROVIDER\");\n    return new Proxy(e, {\n        get: (n, r)=>\"request\" === r ? function(e) {\n                var r, i;\n                return a(this, void 0, void 0, function*() {\n                    xu(\"[wrapExtensionProvider()] Overwriting request method\", e);\n                    const { method: o, params: s } = e, c = rh.includes(o.toLowerCase()), { id: l, from: d } = xh(t);\n                    if (c && (null === (r = t.analytics) || void 0 === r || r.send({\n                        event: So.SDK_RPC_REQUEST,\n                        params: {\n                            method: o,\n                            from: d,\n                            id: l\n                        }\n                    })), o === th.METAMASK_BATCH && Array.isArray(s)) return (({ target: e, args: t, trackEvent: n, sdkInstance: r })=>a(void 0, void 0, void 0, function*() {\n                            var i, o;\n                            if (\"metamask_batch\" !== t.method) throw new Error(\"Invalid usage\");\n                            const s = [], a = null !== (i = null == t ? void 0 : t.params) && void 0 !== i ? i : [];\n                            for (const t of a){\n                                const n = yield null == e ? void 0 : e.request({\n                                    method: t.method,\n                                    params: t.params\n                                });\n                                s.push(n);\n                            }\n                            const { id: c, from: l } = xh(r);\n                            return n && (null === (o = r.analytics) || void 0 === o || o.send({\n                                event: So.SDK_RPC_REQUEST_DONE,\n                                params: {\n                                    method: t.method,\n                                    from: l,\n                                    id: c\n                                }\n                            })), s;\n                        }))({\n                        target: n,\n                        args: e,\n                        trackEvent: c,\n                        sdkInstance: t\n                    });\n                    if (o.toLowerCase() === th.METAMASK_CONNECTSIGN.toLowerCase() && Array.isArray(s)) return (({ target: e, params: t })=>a(void 0, void 0, void 0, function*() {\n                            const n = yield e.request({\n                                method: th.ETH_REQUESTACCOUNTS,\n                                params: []\n                            });\n                            if (!n.length) throw new Error(\"SDK state invalid -- undefined accounts\");\n                            return yield e.request({\n                                method: th.PERSONAL_SIGN,\n                                params: [\n                                    t[0],\n                                    n[0]\n                                ]\n                            });\n                        }))({\n                        target: n,\n                        params: s\n                    });\n                    if (o.toLowerCase() === th.METAMASK_CONNECTWITH.toLowerCase() && Array.isArray(s)) return (({ target: e, params: t })=>a(void 0, void 0, void 0, function*() {\n                            const [n] = t, r = n.method, i = n.params, o = yield e.request({\n                                method: th.ETH_REQUESTACCOUNTS,\n                                params: []\n                            });\n                            if (!o.length) throw new Error(\"SDK state invalid -- undefined accounts\");\n                            return (null == r ? void 0 : r.toLowerCase()) === th.PERSONAL_SIGN.toLowerCase() ? yield e.request({\n                                method: r,\n                                params: [\n                                    i[0],\n                                    o[0]\n                                ]\n                            }) : (null == r ? void 0 : r.toLowerCase()) === th.ETH_SENDTRANSACTION.toLowerCase() ? yield e.request({\n                                method: r,\n                                params: [\n                                    Object.assign(Object.assign({}, i[0]), {\n                                        from: o[0]\n                                    })\n                                ]\n                            }) : ih.includes(r.toLowerCase()) ? (console.warn(`MetaMaskSDK connectWith method=${r} -- not handled by the extension -- call separately`), o) : yield e.request({\n                                method: r,\n                                params: i\n                            });\n                        }))({\n                        target: n,\n                        params: s\n                    });\n                    let u;\n                    try {\n                        return u = yield n.request(e), u;\n                    } finally{\n                        c && (null === (i = t.analytics) || void 0 === i || i.send({\n                            event: So.SDK_RPC_REQUEST_DONE,\n                            params: {\n                                method: o,\n                                from: d,\n                                id: l\n                            }\n                        }));\n                    }\n                });\n            } : \"getChainId\" === r ? function() {\n                return e.chainId;\n            } : \"getNetworkVersion\" === r ? function() {\n                return e.networkVersion;\n            } : \"getSelectedAddress\" === r ? function() {\n                return e.selectedAddress;\n            } : \"isConnected\" === r ? function() {\n                return e._state.isConnected;\n            } : n[r]\n    });\n};\nvar Ah;\nfunction Ih({ mustBeMetaMask: e, sdkInstance: t }) {\n    return a(this, void 0, void 0, function*() {\n        if (true) throw new Error(\"window not available\");\n        try {\n            const e = yield new Promise((e, t)=>{\n                const n = setTimeout(()=>{\n                    t(new Error(\"eip6963RequestProvider timed out\"));\n                }, 500);\n                window.addEventListener(Ah.Announce, (t)=>{\n                    const r = t, { detail: { info: i, provider: o } = {} } = r, { name: s, rdns: a, uuid: c } = null != i ? i : {};\n                    eh.test(c) && s.startsWith(Qu.NAME) && Qu.RDNS.includes(a) && (clearTimeout(n), e(o));\n                }), window.dispatchEvent(new Event(Ah.Request));\n            });\n            return Mh({\n                provider: e,\n                sdkInstance: t\n            });\n        } catch (n) {\n            if (!e && window.ethereum) return Mh({\n                provider: window.ethereum,\n                sdkInstance: t\n            });\n            throw new Error(\"Provider not found\");\n        }\n    });\n}\n!function(e) {\n    e.Announce = \"eip6963:announceProvider\", e.Request = \"eip6963:requestProvider\";\n}(Ah || (Ah = {}));\nconst Rh = (e)=>a(void 0, void 0, void 0, function*() {\n        const { options: t } = e, { infuraAPIKey: n } = t;\n        if (!n) return;\n        const r = {\n            \"0x1\": `https://mainnet.infura.io/v3/${n}`,\n            \"0x5\": `https://goerli.infura.io/v3/${n}`,\n            \"0xaa36a7\": `https://sepolia.infura.io/v3/${n}`,\n            \"0xe708\": `https://linea-mainnet.infura.io/v3/${n}`,\n            \"0xe704\": `https://linea-goerli.infura.io/v3/${n}`,\n            \"0x89\": `https://polygon-mainnet.infura.io/v3/${n}`,\n            \"0x13881\": `https://polygon-mumbai.infura.io/v3/${n}`,\n            \"0x45\": `https://optimism-mainnet.infura.io/v3/${n}`,\n            \"0x1a4\": `https://optimism-goerli.infura.io/v3/${n}`,\n            \"0xa4b1\": `https://arbitrum-mainnet.infura.io/v3/${n}`,\n            \"0x66eed\": `https://arbitrum-goerli.infura.io/v3/${n}`,\n            \"0x2a15c308d\": `https://palm-mainnet.infura.io/v3/${n}`,\n            \"0x2a15c3083\": `https://palm-testnet.infura.io/v3/${n}`,\n            \"0xa86a\": `https://avalanche-mainnet.infura.io/v3/${n}`,\n            \"0xa869\": `https://avalanche-fuji.infura.io/v3/${n}`,\n            \"0x4e454152\": `https://aurora-mainnet.infura.io/v3/${n}`,\n            \"0x4e454153\": `https://aurora-testnet.infura.io/v3/${n}`,\n            \"0x534e5f4d41494e\": `https://starknet-mainnet.infura.io/v3/${n}`,\n            \"0x534e5f474f45524c49\": `https://starknet-goerli.infura.io/v3/${n}`,\n            \"0x534e5f474f45524c4932\": `https://starknet-goerli2.infura.io/v3/${n}`,\n            \"0xa4ec\": `https://celo-mainnet.infura.io/v3/${n}`,\n            \"0xaef3\": `https://celo-alfajores.infura.io/v3/${n}`\n        };\n        e.options.readonlyRPCMap ? e.options.readonlyRPCMap = Object.assign(Object.assign({}, e.options.readonlyRPCMap), r) : e.options.readonlyRPCMap = r;\n    });\nconst Ph = (e)=>a(void 0, void 0, void 0, function*() {\n        const { options: t } = e, { readonlyRPCMap: n } = t;\n        if (n) try {\n            xu(\"[MetaMaskSDK: setupReadOnlyRPCProviders()] Setting up Readonly RPC Providers\", n), e.setReadOnlyRPCCalls(!0);\n        } catch (e) {\n            throw new Error(\"Invalid Infura Settings\");\n        }\n    });\nfunction Lh(e, t, n, r) {\n    return new (n || (n = Promise))(function(t, i) {\n        function o(e) {\n            try {\n                a(r.next(e));\n            } catch (e) {\n                i(e);\n            }\n        }\n        function s(e) {\n            try {\n                a(r.throw(e));\n            } catch (e) {\n                i(e);\n            }\n        }\n        function a(e) {\n            var r;\n            e.done ? t(e.value) : (r = e.value, r instanceof n ? r : new n(function(e) {\n                e(r);\n            })).then(o, s);\n        }\n        a((r = r.apply(e, [])).next());\n    });\n}\nfunction Oh(e, t) {\n    var n, r, i, o, s = {\n        label: 0,\n        sent: function() {\n            if (1 & i[0]) throw i[1];\n            return i[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return o = {\n        next: a(0),\n        throw: a(1),\n        return: a(2)\n    }, \"function\" == typeof Symbol && (o[Symbol.iterator] = function() {\n        return this;\n    }), o;\n    function a(o) {\n        return function(a) {\n            return function(o) {\n                if (n) throw new TypeError(\"Generator is already executing.\");\n                for(; s;)try {\n                    if (n = 1, r && (i = 2 & o[0] ? r.return : o[0] ? r.throw || ((i = r.return) && i.call(r), 0) : r.next) && !(i = i.call(r, o[1])).done) return i;\n                    switch(r = 0, i && (o = [\n                        2 & o[0],\n                        i.value\n                    ]), o[0]){\n                        case 0:\n                        case 1:\n                            i = o;\n                            break;\n                        case 4:\n                            return s.label++, {\n                                value: o[1],\n                                done: !1\n                            };\n                        case 5:\n                            s.label++, r = o[1], o = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            o = s.ops.pop(), s.trys.pop();\n                            continue;\n                        default:\n                            if (!(i = s.trys, (i = i.length > 0 && i[i.length - 1]) || 6 !== o[0] && 2 !== o[0])) {\n                                s = 0;\n                                continue;\n                            }\n                            if (3 === o[0] && (!i || o[1] > i[0] && o[1] < i[3])) {\n                                s.label = o[1];\n                                break;\n                            }\n                            if (6 === o[0] && s.label < i[1]) {\n                                s.label = i[1], i = o;\n                                break;\n                            }\n                            if (i && s.label < i[2]) {\n                                s.label = i[2], s.ops.push(o);\n                                break;\n                            }\n                            i[2] && s.ops.pop(), s.trys.pop();\n                            continue;\n                    }\n                    o = t.call(e, s);\n                } catch (e) {\n                    o = [\n                        6,\n                        e\n                    ], r = 0;\n                } finally{\n                    n = i = 0;\n                }\n                if (5 & o[0]) throw o[1];\n                return {\n                    value: o[0] ? o[1] : void 0,\n                    done: !0\n                };\n            }([\n                o,\n                a\n            ]);\n        };\n    }\n}\nvar Th = \"INSTALLED\", Nh = \"NOT_INSTALLED\", Dh = \"REGISTERED\", $h = \"REGISTERING\", Bh = \"RELOADING\", Kh = {\n    CHROME: \"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\",\n    FIREFOX: \"https://addons.mozilla.org/firefox/addon/ether-metamask/\",\n    DEFAULT: \"https://metamask.io\"\n}, jh = \"REGISTRATION_IN_PROGRESS\", Uh = \"FORWARDER_ID\", Hh = function() {\n    function e(t) {\n        var n = void 0 === t ? {} : t, r = n.forwarderOrigin, i = void 0 === r ? \"https://fwd.metamask.io\" : r, o = n.forwarderMode, s = void 0 === o ? e.FORWARDER_MODE.INJECT : o;\n        this.forwarderOrigin = i, this.forwarderMode = s, this.state = e.isMetaMaskInstalled() ? Th : Nh;\n        var a = e._detectBrowser();\n        this.downloadUrl = a ? Kh[a] : Kh.DEFAULT, this._onMessage = this._onMessage.bind(this), this._onMessageFromForwarder = this._onMessageFromForwarder.bind(this), this._openForwarder = this._openForwarder.bind(this), this._openDownloadPage = this._openDownloadPage.bind(this), this.startOnboarding = this.startOnboarding.bind(this), this.stopOnboarding = this.stopOnboarding.bind(this), window.addEventListener(\"message\", this._onMessage), s === e.FORWARDER_MODE.INJECT && \"true\" === sessionStorage.getItem(jh) && e._injectForwarder(this.forwarderOrigin);\n    }\n    return e.prototype._onMessage = function(e) {\n        if (e.origin === this.forwarderOrigin) return \"metamask:reload\" === e.data.type ? this._onMessageFromForwarder(e) : void console.debug(\"Unknown message from '\" + e.origin + \"' with data \" + JSON.stringify(e.data));\n    }, e.prototype._onMessageUnknownStateError = function(e) {\n        throw new Error(\"Unknown state: '\" + e + \"'\");\n    }, e.prototype._onMessageFromForwarder = function(t) {\n        return Lh(this, 0, void 0, function() {\n            return Oh(this, function(n) {\n                switch(n.label){\n                    case 0:\n                        switch(this.state){\n                            case Bh:\n                                return [\n                                    3,\n                                    1\n                                ];\n                            case Nh:\n                                return [\n                                    3,\n                                    2\n                                ];\n                            case Th:\n                                return [\n                                    3,\n                                    3\n                                ];\n                            case $h:\n                                return [\n                                    3,\n                                    5\n                                ];\n                            case Dh:\n                                return [\n                                    3,\n                                    6\n                                ];\n                        }\n                        return [\n                            3,\n                            7\n                        ];\n                    case 1:\n                        return console.debug(\"Ignoring message while reloading\"), [\n                            3,\n                            8\n                        ];\n                    case 2:\n                        return console.debug(\"Reloading now to register with MetaMask\"), this.state = Bh, location.reload(), [\n                            3,\n                            8\n                        ];\n                    case 3:\n                        return console.debug(\"Registering with MetaMask\"), this.state = $h, [\n                            4,\n                            e._register()\n                        ];\n                    case 4:\n                        return n.sent(), this.state = Dh, t.source.postMessage({\n                            type: \"metamask:registrationCompleted\"\n                        }, t.origin), this.stopOnboarding(), [\n                            3,\n                            8\n                        ];\n                    case 5:\n                        return console.debug(\"Already registering - ignoring reload message\"), [\n                            3,\n                            8\n                        ];\n                    case 6:\n                        return console.debug(\"Already registered - ignoring reload message\"), [\n                            3,\n                            8\n                        ];\n                    case 7:\n                        this._onMessageUnknownStateError(this.state), n.label = 8;\n                    case 8:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.startOnboarding = function() {\n        sessionStorage.setItem(jh, \"true\"), this._openDownloadPage(), this._openForwarder();\n    }, e.prototype.stopOnboarding = function() {\n        \"true\" === sessionStorage.getItem(jh) && (this.forwarderMode === e.FORWARDER_MODE.INJECT && (console.debug(\"Removing forwarder\"), e._removeForwarder()), sessionStorage.setItem(jh, \"false\"));\n    }, e.prototype._openForwarder = function() {\n        this.forwarderMode === e.FORWARDER_MODE.OPEN_TAB ? window.open(this.forwarderOrigin, \"_blank\") : e._injectForwarder(this.forwarderOrigin);\n    }, e.prototype._openDownloadPage = function() {\n        window.open(this.downloadUrl, \"_blank\");\n    }, e.isMetaMaskInstalled = function() {\n        return Boolean(window.ethereum && window.ethereum.isMetaMask);\n    }, e._register = function() {\n        return window.ethereum.request({\n            method: \"wallet_registerOnboarding\"\n        });\n    }, e._injectForwarder = function(e) {\n        var t = document.body, n = document.createElement(\"iframe\");\n        n.setAttribute(\"height\", \"0\"), n.setAttribute(\"width\", \"0\"), n.setAttribute(\"style\", \"display: none;\"), n.setAttribute(\"src\", e), n.setAttribute(\"id\", Uh), t.insertBefore(n, t.children[0]);\n    }, e._removeForwarder = function() {\n        var e;\n        null === (e = document.getElementById(Uh)) || void 0 === e || e.remove();\n    }, e._detectBrowser = function() {\n        var e = Hu.parse(window.navigator.userAgent);\n        return \"Firefox\" === e.browser.name ? \"FIREFOX\" : [\n            \"Chrome\",\n            \"Chromium\"\n        ].includes(e.browser.name || \"\") ? \"CHROME\" : null;\n    }, e.FORWARDER_MODE = {\n        INJECT: \"INJECT\",\n        OPEN_TAB: \"OPEN_TAB\"\n    }, e;\n}();\nfunction Fh(e, { wait: t = !1 }) {\n    return a(this, void 0, void 0, function*() {\n        return xu(`[MetamaskInstaller: startInstaller()] wait=${t}`), t && (yield bh(1e3)), yield e.checkInstallation();\n    });\n}\nclass zh {\n    constructor({ remote: e, preferDesktop: t, platformManager: n, debug: r = !1 }){\n        this.state = {\n            isInstalling: !1,\n            hasInstalled: !1,\n            resendRequest: null,\n            preferDesktop: !1,\n            platformManager: null,\n            remote: null,\n            debug: !1,\n            connectWith: void 0\n        }, this.state.remote = e, this.state.preferDesktop = t, this.state.platformManager = n, this.state.debug = r;\n    }\n    startDesktopOnboarding() {\n        return function() {\n            return a(this, void 0, void 0, function*() {\n                xu(\"[MetamaskInstaller: startDesktopOnboarding() starting desktop onboarding\"), window.ethereum && (window.ethereum = void 0), (new Hh).startOnboarding();\n            });\n        }();\n    }\n    redirectToProperInstall() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                var t, n;\n                return a(this, void 0, void 0, function*() {\n                    const { state: r } = e, i = null === (t = r.platformManager) || void 0 === t ? void 0 : t.getPlatformType();\n                    if (xu(`[MetamaskInstaller: redirectToProperInstall()] platform=${i}`), i === Bo.MetaMaskMobileWebview) return !1;\n                    r.isInstalling = !0;\n                    try {\n                        yield null === (n = r.remote) || void 0 === n ? void 0 : n.startConnection({\n                            connectWith: r.connectWith\n                        }), r.isInstalling = !1, r.hasInstalled = !0;\n                    } catch (e) {\n                        throw r.isInstalling = !1, e;\n                    }\n                    return !0;\n                });\n            }(this);\n        });\n    }\n    checkInstallation() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                var t;\n                return a(this, void 0, void 0, function*() {\n                    const { state: n } = e, r = null === (t = n.platformManager) || void 0 === t ? void 0 : t.isMetaMaskInstalled();\n                    return xu(`[MetamaskInstaller: checkInstallation()] isInstalled=${r}`), !!r || (yield e.redirectToProperInstall());\n                });\n            }(this);\n        });\n    }\n    start({ wait: e = !1, connectWith: t }) {\n        return a(this, void 0, void 0, function*() {\n            this.state.connectWith = t, xu(`[MetaMaskInstaller: start()] wait=${e}`, t), yield Fh(this, {\n                wait: e\n            });\n        });\n    }\n}\nclass qh {\n    constructor({ debug: e, sdkVersion: t }){\n        this.containers = {\n            install: void 0,\n            pending: void 0,\n            select: void 0\n        }, this.defined = {\n            install: !1,\n            pending: !1,\n            select: !1\n        }, this.debug = null != e && e, this.sdkVersion = t;\n    }\n    loadComponent(e) {\n        return a(this, void 0, void 0, function*() {\n            if (!this.defined[e]) {\n                this.defined[e] = !0;\n                try {\n                    const e = yield Promise.resolve().then(function() {\n                        return Rp;\n                    });\n                    console.log(\"loader\", e), e.defineCustomElements();\n                } catch (t) {\n                    console.error(`Failed to load ${e} modal:`, t);\n                }\n            }\n        });\n    }\n    renderInstallModal(e) {\n        var t;\n        return a(this, void 0, void 0, function*() {\n            this.debug && console.debug(\"ModalLoader: renderInstallModal\", e), this.containers.install = e.parentElement, yield this.loadComponent(\"install\");\n            const n = document.createElement(\"mm-install-modal\");\n            n.link = e.link, n.preferDesktop = e.preferDesktop, n.sdkVersion = null !== (t = e.sdkVersion) && void 0 !== t ? t : this.sdkVersion, n.addEventListener(\"close\", ({ detail: { shouldTerminate: t } })=>e.onClose(t)), n.addEventListener(\"startDesktopOnboarding\", e.metaMaskInstaller.startDesktopOnboarding), n.addEventListener(\"trackAnalytics\", (t)=>{\n                var n;\n                return null === (n = e.onAnalyticsEvent) || void 0 === n ? void 0 : n.call(e, t.detail);\n            }), e.parentElement.appendChild(n);\n        });\n    }\n    renderSelectModal(e) {\n        var t;\n        return a(this, void 0, void 0, function*() {\n            this.containers.select = e.parentElement, yield this.loadComponent(\"select\");\n            const n = document.createElement(\"mm-select-modal\");\n            n.link = e.link, n.sdkVersion = null !== (t = e.sdkVersion) && void 0 !== t ? t : this.sdkVersion, n.preferDesktop = e.preferDesktop, n.addEventListener(\"close\", ({ detail: { shouldTerminate: t } })=>e.onClose(t)), n.addEventListener(\"connectWithExtension\", e.connectWithExtension), e.parentElement.appendChild(n), setTimeout(()=>this.updateQRCode(e.link), 100);\n        });\n    }\n    renderPendingModal(e) {\n        var t;\n        return a(this, void 0, void 0, function*() {\n            this.containers.pending = e.parentElement, yield this.loadComponent(\"pending\");\n            const n = document.createElement(\"mm-pending-modal\");\n            n.sdkVersion = null !== (t = e.sdkVersion) && void 0 !== t ? t : this.sdkVersion, n.displayOTP = e.displayOTP, n.addEventListener(\"close\", e.onClose), n.addEventListener(\"updateOTPValue\", ({ detail: { otpValue: t } })=>e.updateOTPValue(t)), e.onDisconnect && n.addEventListener(\"disconnect\", e.onDisconnect), e.parentElement.appendChild(n);\n        });\n    }\n    updateOTPValue(e) {\n        const t = ()=>{\n            var t;\n            const n = null === (t = this.containers.pending) || void 0 === t ? void 0 : t.querySelector(\"mm-pending-modal\");\n            return !!n && (n.otpCode = e, !0);\n        };\n        setTimeout(()=>{\n            t();\n        }, 800);\n    }\n    updateQRCode(e) {\n        var t, n;\n        const r = null === (t = this.containers.install) || void 0 === t ? void 0 : t.querySelector(\"mm-install-modal\");\n        if (r) r.link = e;\n        else {\n            const t = null === (n = this.containers.select) || void 0 === n ? void 0 : n.querySelector(\"mm-select-modal\");\n            t && (t.link = e);\n        }\n    }\n    unmount() {\n        Object.entries(this.containers).forEach(([e, t])=>{\n            var n;\n            null === (n = null == t ? void 0 : t.parentNode) || void 0 === n || n.removeChild(t), this.containers[e] = void 0;\n        });\n    }\n}\nconst Vh = ({ link: e, debug: t, installer: n, terminate: r, connectWithExtension: i, preferDesktop: o, onAnalyticsEvent: s })=>{\n    let a = null, c = null;\n    xu(\"[UI: InstallModal-web: sdkWebInstallModal()] ################## Installing Modal #################\"), xu(`[UI: InstallModal-web: sdkWebInstallModal()] link=${e}`), xu(`[UI: InstallModal-web: sdkWebInstallModal()] npx uri-scheme open \"${e}\" --ios`), xu(`[UI: InstallModal-web: sdkWebInstallModal()] npx uri-scheme open \"${e}\" --android`), xu(`[UI: InstallModal-web: sdkWebInstallModal()] adb shell am start -a android.intent.action.VIEW -d \"${e}\"`);\n    const l = (e)=>{\n        var t;\n        xu(\"[UI: InstallModal-web: sdkWebInstallModal()] installModal-web unmounting install modal -- shouldTerminate:\", e, c), (null == c ? void 0 : c.parentNode) && (null === (t = c.parentNode) || void 0 === t || t.removeChild(c)), c = null, a = null, !0 === e && (null == r || r());\n    };\n    return {\n        mount: (r)=>{\n            if (xu(\"[UI: InstallModal-web: sdkWebInstallModal()] installModal-web mounting install modal\", c), c) return c.style.display = \"block\", void (null == a || a.updateQRCode(r));\n            a = new qh({\n                debug: t,\n                sdkVersion: Zu.version\n            }), c = document.createElement(\"div\"), document.body.appendChild(c), window.extension ? a.renderSelectModal({\n                parentElement: c,\n                connectWithExtension: ()=>{\n                    l(), null == i || i();\n                },\n                onClose: l,\n                link: e,\n                preferDesktop: null != o && o\n            }).catch((e)=>{\n                console.error(e);\n            }) : a.renderInstallModal({\n                parentElement: c,\n                preferDesktop: null != o && o,\n                link: e,\n                metaMaskInstaller: n,\n                onClose: l,\n                onAnalyticsEvent: s\n            }).catch((e)=>{\n                console.error(\"[UI: InstallModal-web: sdkWebInstallModal()]\", e);\n            });\n        },\n        unmount: l\n    };\n}, Wh = ({ onDisconnect: e, debug: t })=>{\n    let n = null, r = null;\n    const i = ()=>{\n        xu(\"[UI: pendingModal-web: sdkWebPendingModal()] pendingModal-web unmount\", n), (null == n ? void 0 : n.parentNode) && n.parentNode.removeChild(n), n = null, r = null;\n    }, o = (e)=>{\n        xu(\"[UI: pendingModal-web: sdkWebPendingModal()] pendingModal-web updateOTPValue\", e), r && r.updateOTPValue(e);\n    }, s = ({ displayOTP: s } = {\n        displayOTP: !0\n    })=>{\n        xu(\"[UI: pendingModal-web: sdkWebPendingModal()] pendingModal-web mount\", n), n ? n.style.display = \"block\" : (r = new qh({\n            debug: t,\n            sdkVersion: Zu.version\n        }), n = document.createElement(\"div\"), document.body.appendChild(n), r.renderPendingModal({\n            parentElement: n,\n            onClose: i,\n            onDisconnect: e,\n            updateOTPValue: o,\n            displayOTP: s\n        }).catch((e)=>{\n            console.error(\"[UI: pendingModal-web: sdkWebPendingModal()]\", e);\n        }));\n    };\n    return s(), {\n        mount: s,\n        unmount: i,\n        updateOTPValue: o\n    };\n};\nfunction Gh(e, t) {\n    var n, r, i, o;\n    e.connector || (xu(\"[RemoteConnection: initializeConnector()] initialize connector\"), e.connector = new Xo({\n        platformType: t.platformManager.getPlatformType(),\n        communicationLayerPreference: t.communicationLayerPreference,\n        transports: t.transports,\n        dappMetadata: Object.assign(Object.assign({}, t.dappMetadata), {\n            source: t._source\n        }),\n        analytics: t.enableAnalytics,\n        communicationServerUrl: t.communicationServerUrl,\n        sdkVersion: Zu.version,\n        context: \"dapp\",\n        ecies: t.ecies,\n        storage: t.storage,\n        logging: t.logging\n    }), t.timer && (xu(\"[RemoteConnection: initializeConnector()] reset background timer\", t.timer), null === (r = null === (n = t.timer) || void 0 === n ? void 0 : n.stopBackgroundTimer) || void 0 === r || r.call(n), null === (o = null === (i = t.timer) || void 0 === i ? void 0 : i.runBackgroundTimer) || void 0 === o || o.call(i, ()=>!1, 1e4)));\n}\nfunction Zh(e) {\n    e.listeners.forEach(({ event: t, handler: n })=>{\n        var r;\n        null === (r = e.connector) || void 0 === r || r.off(t, n);\n    }), e.listeners = [];\n}\nfunction Yh(e, t, n) {\n    return a(this, void 0, void 0, function*() {\n        return new Promise((r, i)=>{\n            if (!e.connector) return void i(new Error(\"No connector available\"));\n            xu(\"[RemoteConnection: connectWithModalInstaller()]\", {\n                state: e,\n                options: t,\n                linkParams: n\n            });\n            const o = `${e.useDeeplink ? Xu : Ju}?${n}`;\n            !function(e, t, n) {\n                var r, i, o, s;\n                e.installModal = null === (i = (r = t.modals).install) || void 0 === i ? void 0 : i.call(r, {\n                    link: n,\n                    preferDesktop: e.preferDesktop,\n                    installer: t.getMetaMaskInstaller(),\n                    terminate: ()=>{\n                        xu(\"[RemoteConnection: showInstallModal() => terminate()] terminate connection\"), t.sdk.terminate().catch((e)=>{\n                            console.warn(\"[MMSDK] failed to terminate connection\", e);\n                        });\n                    },\n                    debug: e.developerMode,\n                    connectWithExtension: ()=>{\n                        var e;\n                        return null === (e = t.connectWithExtensionProvider) || void 0 === e || e.call(t), !1;\n                    },\n                    onAnalyticsEvent: ({ event: n, params: r })=>{\n                        var i, o, s;\n                        const a = Object.assign(Object.assign({}, r), {\n                            sdkVersion: t.sdk.getVersion(),\n                            dappId: null === (i = t.dappMetadata) || void 0 === i ? void 0 : i.name,\n                            source: t._source,\n                            url: null === (o = t.dappMetadata) || void 0 === o ? void 0 : o.url\n                        });\n                        null === (s = e.analytics) || void 0 === s || s.send({\n                            event: n,\n                            params: a\n                        });\n                    }\n                }), null === (s = null === (o = e.installModal) || void 0 === o ? void 0 : o.mount) || void 0 === s || s.call(o, n);\n            }(e, t, o), t.sdk.once(bo.PROVIDER_UPDATE, (e)=>a(this, void 0, void 0, function*() {\n                    if (xu(\"[RemoteConnection: connectWithModalInstaller()] once provider_update -- resolving startConnection promise\"), e !== uh.TERMINATE) i(e);\n                    else {\n                        i({\n                            code: 4001,\n                            message: \"User rejected the request.\"\n                        });\n                    }\n                })), e.connector.once(bo.AUTHORIZED, ()=>{\n                r();\n            }), e.connector.once(bo.REJECTED, ()=>{\n                i(bo.REJECTED);\n            }), e.connector.once(bo.CLIENTS_READY, ()=>a(this, void 0, void 0, function*() {\n                    xu(\"[RemoteConnection: connectWithModalInstaller()] once clients_ready -- resolving startConnection promise\"), r();\n                }));\n        });\n    });\n}\nfunction Jh(e, t) {\n    function n(t, n) {\n        var r;\n        null === (r = e.connector) || void 0 === r || r.on(t, n), e.listeners.push({\n            event: t,\n            handler: n\n        });\n    }\n    e.connector && (Zh(e), n(bo.WALLET_INIT, ({ accounts: e, chainId: t })=>a(this, void 0, void 0, function*() {\n            xu(`[RemoteConnection: setupListeners() => EventType.WALLET_INIT] 'wallet_init' accounts=${e} chainId=${t}`);\n            const n = zu.getProvider();\n            n._setConnected();\n            const r = {\n                accounts: e,\n                chainId: t,\n                isUnlocked: !1\n            };\n            n._initializeState(r), n.emit(\"chainChanged\", t), n.emit(\"accountsChanged\", e);\n        })), n(bo.AUTHORIZED, ()=>a(this, void 0, void 0, function*() {\n            var t, n, r, i;\n            try {\n                xu(\"[RemoteConnection: setupListeners() => EventType.AUTHORIZED] 'authorized' closing modals\", e.pendingModal, e.installModal);\n                const o = zu.getProvider();\n                o._setConnected(), null === (n = null === (t = e.pendingModal) || void 0 === t ? void 0 : t.unmount) || void 0 === n || n.call(t), null === (i = null === (r = e.installModal) || void 0 === r ? void 0 : r.unmount) || void 0 === i || i.call(r, !1), e.otpAnswer = void 0, e.authorized = !0, xu(\"[RemoteConnection: setupListeners() => EventType.AUTHORIZED] 'authorized' provider.state\", o.getState()), yield o.forceInitializeState();\n            } catch (e) {}\n        })), n(bo.TERMINATE, ()=>{\n        var t, n, r, i, o;\n        null === (n = null === (t = e.pendingModal) || void 0 === t ? void 0 : t.unmount) || void 0 === n || n.call(t), null === (i = null === (r = e.installModal) || void 0 === r ? void 0 : r.unmount) || void 0 === i || i.call(r, !0), e.pendingModal = void 0, e.installModal = void 0, e.otpAnswer = void 0, null === (o = e.connector) || void 0 === o || o.disconnect({\n            terminate: !0\n        }), e.authorized = !1;\n        zu.getProvider().handleDisconnect({\n            terminate: !0\n        }), Zh(e), xu(\"[RemoteConnection: setupListeners()] All listeners cleaned up\");\n    }));\n}\nfunction Xh(e, t, { initialCheck: n, connectWith: r } = {}) {\n    var i, o, s, c, l, d, u, h, f, p, g, m, y, v, b, w, E, C, S;\n    return a(this, void 0, void 0, function*() {\n        try {\n            if (Gh(e, t), !e.connector) throw new Error(\"no connector defined\");\n            Jh(e);\n            const _ = zu.getProvider();\n            e.authorized = !1, _.emit(\"connecting\");\n            const k = yield null === (i = e.connector) || void 0 === i ? void 0 : i.originatorSessionConnect();\n            xu(`[RemoteConnection: startConnection()] after originatorSessionConnect initialCheck=${n}`, k);\n            let x = null !== (o = null == k ? void 0 : k.channelId) && void 0 !== o ? o : \"\", M = null !== (c = null === (s = e.connector.getKeyInfo()) || void 0 === s ? void 0 : s.ecies.public) && void 0 !== c ? c : \"\", A = null !== (d = null === (l = e.connector.getKeyInfo()) || void 0 === l ? void 0 : l.ecies.private) && void 0 !== d ? d : \"\";\n            if (n && !k) return Promise.resolve();\n            if (!k && !n) {\n                const t = yield e.connector.generateChannelIdConnect();\n                x = null !== (u = t.channelId) && void 0 !== u ? u : \"\", M = null !== (h = t.pubKey) && void 0 !== h ? h : \"\", A = null !== (f = t.privKey) && void 0 !== f ? f : \"\";\n                const n = Date.now();\n                null === (p = e.connector.state.storageManager) || void 0 === p || p.persistChannelConfig({\n                    channelId: x,\n                    localKey: A,\n                    lastActive: n,\n                    validUntil: n + po\n                });\n            }\n            if (n && (null == k ? void 0 : k.channelId)) return (null === (g = e.connector) || void 0 === g ? void 0 : g.isConnected()) || (xu(`[RemoteConnection: startConnection()] reconnecting to channel initialCheck=${n}`, k), yield null === (m = e.connector) || void 0 === m ? void 0 : m.connectToChannel({\n                channelId: x\n            })), Promise.resolve();\n            k && !(null === (y = e.connector) || void 0 === y ? void 0 : y.isConnected()) && (xu(\"[RemoteConnection: startConnection()] reconnecting to channel\", k), yield null === (v = e.connector) || void 0 === v ? void 0 : v.connectToChannel({\n                channelId: x\n            }));\n            const I = (null === (b = e.platformManager) || void 0 === b ? void 0 : b.isSecure()) ? \"\" : \"&t=q\", R = Zu.version, { iconUrl: P, name: L, url: O, scheme: T } = t.dappMetadata || {}, N = null === (w = e.platformManager) || void 0 === w ? void 0 : w.getPlatformType();\n            let D = \"N/A\";\n             false ? 0 : void 0 !== L ? D = L : void 0 !== O && (D = O);\n            const $ = {\n                url: null != O ? O : \"\",\n                title: null != L ? L : \"\",\n                icon: P,\n                scheme: null != T ? T : \"\",\n                apiVersion: R,\n                dappId: D || O || \"N/A\",\n                platform: null != N ? N : \"\",\n                source: null !== (E = t._source) && void 0 !== E ? E : \"\"\n            }, B = gh(JSON.stringify($));\n            let K = `channelId=${x}&v=2&comm=${null !== (C = e.communicationLayerPreference) && void 0 !== C ? C : \"\"}&pubkey=${M}${I}&originatorInfo=${B}`;\n            if (r) {\n                K += `&rpc=${gh(JSON.stringify(r))}`;\n                const t = e.connector.getRPCMethodTracker();\n                t && (t[`${r.id}`] = Object.assign(Object.assign({}, r), {\n                    id: `${r.id}`,\n                    timestamp: Date.now()\n                }));\n            }\n            const j = encodeURI(K), U = `${e.useDeeplink ? Xu : Ju}?${K}`;\n            return e.qrcodeLink = U, e.developerMode && xu(`[RemoteConnection: startConnection()] qrcodeLink=${j}`), _.emit(\"display_uri\", U), (null === (S = e.platformManager) || void 0 === S ? void 0 : S.isSecure()) ? (yield function(e, t) {\n                var n, r;\n                return a(this, void 0, void 0, function*() {\n                    const i = `${Ju}?${t}`, o = `${Xu}?${t}`;\n                    null === (r = null === (n = e.platformManager) || void 0 === n ? void 0 : n.openDeeplink) || void 0 === r || r.call(n, i, o, \"_self\");\n                });\n            }(e, j), new Promise((t, n)=>{\n                var r, i, o;\n                (null === (r = e.connector) || void 0 === r ? void 0 : r.isAuthorized()) ? t() : (null === (i = e.connector) || void 0 === i || i.once(bo.AUTHORIZED, ()=>{\n                    t();\n                }), null === (o = e.connector) || void 0 === o || o.once(bo.REJECTED, ()=>{\n                    n(bo.REJECTED);\n                }));\n            })) : Yh(e, t, j);\n        } catch (e) {\n            throw console.error(\"[startConnection] error\", e), e;\n        }\n    });\n}\nclass Qh {\n    constructor(e){\n        var t, n, r;\n        this.state = {\n            connector: void 0,\n            qrcodeLink: void 0,\n            analytics: void 0,\n            developerMode: !1,\n            authorized: !1,\n            reconnection: !1,\n            preferDesktop: !1,\n            deeplinkProtocol: !1,\n            listeners: [],\n            communicationLayerPreference: void 0,\n            platformManager: void 0,\n            pendingModal: void 0,\n            installModal: void 0,\n            otpAnswer: void 0\n        }, this.options = e;\n        const i = !0 === (null === (t = e.logging) || void 0 === t ? void 0 : t.developerMode) || !0 === (null === (n = e.logging) || void 0 === n ? void 0 : n.sdk);\n        this.state.developerMode = i, this.state.analytics = e.analytics, this.state.preferDesktop = null !== (r = e.preferDesktop) && void 0 !== r && r, this.state.useDeeplink = e.sdk.options.useDeeplink, this.state.communicationLayerPreference = e.communicationLayerPreference, this.state.platformManager = e.platformManager, e.modals.install || (e.modals.install = Vh), e.modals.otp || (e.modals.otp = Wh);\n    }\n    startConnection(e) {\n        return a(this, void 0, void 0, function*() {\n            return Xh(this.state, this.options, e);\n        });\n    }\n    initRemoteCommunication({ sdkInstance: e }) {\n        var t, n, r;\n        return a(this, void 0, void 0, function*() {\n            const i = yield null === (n = null === (t = e.options.storage) || void 0 === t ? void 0 : t.storageManager) || void 0 === n ? void 0 : n.getPersistedChannelConfig();\n            if (!this.options.ecies) {\n                const e = {\n                    privateKey: null == i ? void 0 : i.localKey\n                };\n                this.options.ecies = e;\n            }\n            Gh(this.state, this.options), yield null === (r = this.getConnector()) || void 0 === r ? void 0 : r.initFromDappStorage(), Jh(this.state, this.options);\n        });\n    }\n    showActiveModal() {\n        return function(e) {\n            var t, n, r, i;\n            e.authorized ? xu(\"[RemoteConnection: showActiveModal()] already authorized\") : e.pendingModal ? null === (n = (t = e.pendingModal).mount) || void 0 === n || n.call(t) : e.installModal && (null === (i = (r = e.installModal).mount) || void 0 === i || i.call(r, e.qrcodeLink || \"\"));\n        }(this.state);\n    }\n    closeModal() {\n        var e, t, n, r;\n        null === (t = null === (e = this.state.pendingModal) || void 0 === e ? void 0 : e.unmount) || void 0 === t || t.call(e), null === (r = null === (n = this.state.installModal) || void 0 === n ? void 0 : n.unmount) || void 0 === r || r.call(n, !1);\n    }\n    getUniversalLink() {\n        if (!this.state.qrcodeLink) throw new Error(\"connection not started. run startConnection() first.\");\n        return this.state.qrcodeLink;\n    }\n    getChannelConfig() {\n        var e;\n        return null === (e = this.state.connector) || void 0 === e ? void 0 : e.getChannelConfig();\n    }\n    getKeyInfo() {\n        var e;\n        return null === (e = this.state.connector) || void 0 === e ? void 0 : e.getKeyInfo();\n    }\n    getConnector() {\n        if (!this.state.connector) throw new Error(\"invalid remote connector\");\n        return this.state.connector;\n    }\n    getPlatformManager() {\n        if (!this.state.platformManager) throw new Error(\"PlatformManager not available\");\n        return this.state.platformManager;\n    }\n    isConnected() {\n        var e;\n        return (null === (e = this.state.connector) || void 0 === e ? void 0 : e.isReady()) || !1;\n    }\n    isAuthorized() {\n        var e;\n        return (null === (e = this.state.connector) || void 0 === e ? void 0 : e.isAuthorized()) || !1;\n    }\n    isPaused() {\n        var e;\n        return null === (e = this.state.connector) || void 0 === e ? void 0 : e.isPaused();\n    }\n    disconnect(e) {\n        var t, n, r;\n        xu(\"[RemoteConnection: disconnect()]\", e), (null == e ? void 0 : e.terminate) && (zu.getProvider().handleDisconnect({\n            terminate: !0\n        }), null === (n = null === (t = this.state.pendingModal) || void 0 === t ? void 0 : t.unmount) || void 0 === n || n.call(t), this.state.otpAnswer = void 0), null === (r = this.state.connector) || void 0 === r || r.disconnect(e), function(e) {\n            xu(\"[RemoteConnection: cleanupConnector()] cleaning up connector\"), e.connector && (Zh(e), e.connector.disconnect({\n                terminate: !0\n            }).catch((e)=>{\n                xu(\"[RemoteConnection: cleanupConnector()] error disconnecting connector\", e);\n            }));\n        }(this.state);\n    }\n}\nfunction ef(e) {\n    var n, r, i, o, s, c, l, d, u, h, f;\n    return a(this, void 0, void 0, function*() {\n        const { options: p } = e;\n        if (p.logging = null !== (n = p.logging) && void 0 !== n ? n : {}, p.communicationLayerPreference = null !== (r = p.communicationLayerPreference) && void 0 !== r ? r : $o.SOCKET, void 0 !== p.enableDebug && (debug__WEBPACK_IMPORTED_MODULE_1___default().enable(\"MM_SDK\"), console.warn(\"enableDebug is removed. Please use enableAnalytics instead.\")), p.enableAnalytics = null === (i = p.enableAnalytics) || void 0 === i || i, p.injectProvider = null === (o = p.injectProvider) || void 0 === o || o, p.shouldShimWeb3 = null === (s = p.shouldShimWeb3) || void 0 === s || s, p.extensionOnly = null === (c = p.extensionOnly) || void 0 === c || c, p.useDeeplink = null === (l = p.useDeeplink) || void 0 === l || l, p.storage = null !== (d = p.storage) && void 0 !== d ? d : {\n            enabled: !0\n        }, p.headless) {\n            debug__WEBPACK_IMPORTED_MODULE_1___default()(\"[MetaMaskSDK: performSDKInitialization()] headless mode enabled\");\n            const e = ()=>{}, n = {\n                install: ()=>({\n                        mount: e,\n                        unmount: e\n                    })\n            }, r = {\n                installer: e\n            };\n            p.modals = n, p.ui = r;\n        }\n        const g = !0 === (null === (u = p.logging) || void 0 === u ? void 0 : u.developerMode);\n        e.debug = (null === (h = p.logging) || void 0 === h ? void 0 : h.sdk) || g, xu(\"[MetaMaskSDK: performSDKInitialization()] options\", e.options);\n        const m = Object.assign({}, p.logging);\n        g && (m.sdk = !0, m.eciesLayer = !0, m.keyExchangeLayer = !0, m.remoteLayer = !0, m.serviceLayer = !0, m.plaintext = !0), yield function(e) {\n            var t;\n            return a(this, void 0, void 0, function*() {\n                const { options: n } = e;\n                e.platformManager = new qu({\n                    useDeepLink: null !== (t = n.useDeeplink) && void 0 !== t && t,\n                    preferredOpenLink: n.openDeeplink,\n                    debug: e.debug\n                });\n            });\n        }(e), yield function(e) {\n            var t, n, r, i, o, s, c, l, d;\n            return a(this, void 0, void 0, function*() {\n                const { options: a } = e, u = null === (t = e.platformManager) || void 0 === t ? void 0 : t.getPlatformType();\n                e.analytics = new Sh({\n                    serverUrl: null !== (n = a.communicationServerUrl) && void 0 !== n ? n : ho,\n                    enabled: a.enableAnalytics,\n                    originatorInfo: {\n                        url: null !== (r = a.dappMetadata.url) && void 0 !== r ? r : \"\",\n                        title: null !== (i = a.dappMetadata.name) && void 0 !== i ? i : \"\",\n                        dappId:  true ? null !== (l = null !== (s = null === (o = a.dappMetadata) || void 0 === o ? void 0 : o.name) && void 0 !== s ? s : null === (c = a.dappMetadata) || void 0 === c ? void 0 : c.url) && void 0 !== l ? l : \"N/A\" : 0,\n                        platform: null != u ? u : \"\",\n                        source: null !== (d = a._source) && void 0 !== d ? d : \"\"\n                    }\n                });\n            });\n        }(e), yield function(e) {\n            var t;\n            return a(this, void 0, void 0, function*() {\n                const { options: n } = e;\n                !0 !== (null === (t = n.storage) || void 0 === t ? void 0 : t.enabled) || n.storage.storageManager || (n.storage.storageManager = yield Vu(n.storage));\n            });\n        }(e), yield function(e) {\n            return a(this, void 0, void 0, function*() {\n                const { options: t } = e, n = /^(http|https):\\/\\/[^\\s]*$/;\n                if (t.dappMetadata) {\n                    t.dappMetadata.iconUrl && !n.test(t.dappMetadata.iconUrl) && (console.warn(\"Invalid dappMetadata.iconUrl: URL must start with http:// or https://\"), t.dappMetadata.iconUrl = void 0), t.dappMetadata.base64Icon && t.dappMetadata.base64Icon.length > kh && (console.warn(\"Invalid dappMetadata.base64Icon: Base64-encoded icon string length must be less than 163400 characters\"), t.dappMetadata.base64Icon = void 0), t.dappMetadata.url && !n.test(t.dappMetadata.url) && console.warn(\"Invalid dappMetadata.url: URL must start with http:// or https://\");\n                    const e = _h();\n                    if (e && !t.dappMetadata.iconUrl && !t.dappMetadata.base64Icon) {\n                        const n = `${window.location.protocol}//${window.location.host}${e}`;\n                        t.dappMetadata.iconUrl = n;\n                    }\n                }\n                e.dappMetadata = t.dappMetadata;\n            });\n        }(e), yield Rh(e), yield Ph(e);\n        const { metamaskBrowserExtension: y, preferExtension: v, shouldReturn: b } = yield function(e) {\n            var t, n, r, i;\n            return a(this, void 0, void 0, function*() {\n                const { options: o } = e;\n                let s, c = !1, l = !1;\n                if (false) {} else (null === (n = e.platformManager) || void 0 === n ? void 0 : n.isMetaMaskMobileWebView()) && (null === (r = e.analytics) || void 0 === r || r.send({\n                    event: So.SDK_USE_INAPP_BROWSER\n                }), e.activeProvider = Mh({\n                    provider: window.ethereum,\n                    sdkInstance: e\n                }), e._initialized = !0, l = !0);\n                return s && o.extensionOnly && (xu(\"[MetaMaskSDK: setupExtensionPreferences()] EXTENSION ONLY --- prevent sdk initialization\"), null === (i = e.analytics) || void 0 === i || i.send({\n                    event: So.SDK_USE_EXTENSION\n                }), e.activeProvider = s, e.extensionActive = !0, e.extension = s, e._initialized = !0, l = !0), {\n                    preferExtension: c,\n                    shouldReturn: l,\n                    metamaskBrowserExtension: s\n                };\n            });\n        }(e);\n        if (b) xu(\"[MetaMaskSDK: performSDKInitialization()] shouldReturn=true --- prevent sdk initialization\");\n        else {\n            yield function(e, t) {\n                var n, r, i, o, s;\n                return a(this, void 0, void 0, function*() {\n                    const { options: a } = e, c = Object.assign({}, a.logging);\n                    e.remoteConnection = new Qh({\n                        preferDesktop: null !== (n = a.preferDesktop) && void 0 !== n && n,\n                        communicationLayerPreference: null !== (r = a.communicationLayerPreference) && void 0 !== r ? r : $o.SOCKET,\n                        analytics: e.analytics,\n                        dappMetadata: a.dappMetadata,\n                        _source: a._source,\n                        enableAnalytics: null === (i = a.enableAnalytics) || void 0 === i || i,\n                        timer: a.timer,\n                        sdk: e,\n                        platformManager: e.platformManager,\n                        transports: a.transports,\n                        communicationServerUrl: a.communicationServerUrl,\n                        storage: null !== (o = a.storage) && void 0 !== o ? o : {\n                            enabled: !0\n                        },\n                        getMetaMaskInstaller: ()=>{\n                            if (!e.installer) throw new Error(\"Invalid SDK status -- installer not initialized\");\n                            return e.installer;\n                        },\n                        logging: c,\n                        connectWithExtensionProvider: void 0 === t ? void 0 : ()=>ph(e),\n                        modals: Object.assign(Object.assign({}, a.modals), {\n                            onPendingModalDisconnect: e.terminate.bind(e)\n                        })\n                    }), yield e.remoteConnection.initRemoteCommunication({\n                        sdkInstance: e\n                    }), e.installer = new zh({\n                        remote: e.remoteConnection,\n                        preferDesktop: null !== (s = a.preferDesktop) && void 0 !== s && s,\n                        platformManager: e.platformManager,\n                        debug: e.debug\n                    });\n                });\n            }(e, y), yield Eh(e), yield function(e, t) {\n                var n, r;\n                return a(this, void 0, void 0, function*() {\n                    const { options: i } = e;\n                    t ? (xu(\"[MetaMaskSDK: handleAutoAndExtensionConnections()] preferExtension is detected -- connect with it.\"), null === (n = e.analytics) || void 0 === n || n.send({\n                        event: So.SDK_EXTENSION_UTILIZED\n                    }), ph(e).catch((e)=>{\n                        console.warn(\"Can't connect with MetaMask extension...\", e), localStorage.removeItem(sh);\n                    })) : i.checkInstallationImmediately && ((null === (r = e.platformManager) || void 0 === r ? void 0 : r.isDesktopWeb()) ? (xu(\"[MetaMaskSDK: handleAutoAndExtensionConnections()] checkInstallationImmediately\"), e.connect().catch((e)=>{\n                        xu(`[MetaMaskSDK: handleAutoAndExtensionConnections()] checkInstallationImmediately --- IGNORED --- error on autoconnect _err=${e}`);\n                    })) : console.warn(\"[handleAutoAndExtensionConnections()] checkInstallationImmediately --- IGNORED --- only for web desktop\")), e._initialized = !0;\n                });\n            }(e, v);\n            try {\n                yield null === (f = e.remoteConnection) || void 0 === f ? void 0 : f.startConnection({\n                    initialCheck: !0\n                });\n            } catch (e) {\n                console.error(\"[MetaMaskSDK: setupRemoteConnectionAndInstaller()] Error while checking installation\", e);\n            }\n            e.emit(Fu.ProviderUpdate, uh.INITIALIZED);\n        }\n    });\n}\nclass tf extends (eventemitter2__WEBPACK_IMPORTED_MODULE_2___default()) {\n    constructor(e = {\n        storage: {\n            enabled: !0\n        },\n        injectProvider: !0,\n        forceInjectProvider: !1,\n        enableAnalytics: !0,\n        shouldShimWeb3: !0,\n        useDeeplink: !0,\n        extensionOnly: !0,\n        headless: !1,\n        dappMetadata: {\n            name: \"\",\n            url: \"\",\n            iconUrl: \"\"\n        },\n        _source: Yu,\n        i18nOptions: {\n            enabled: !1\n        }\n    }){\n        var n, r, i;\n        super(), this.extensionActive = !1, this._initialized = !1, this.sdkInitPromise = void 0, this.debug = !1, this.readonlyRPCCalls = !1, this.availableLanguages = [\n            \"en\"\n        ], debug__WEBPACK_IMPORTED_MODULE_1___default().disable();\n        const o = !0 === (null === (n = e.logging) || void 0 === n ? void 0 : n.developerMode);\n        if (((null === (r = e.logging) || void 0 === r ? void 0 : r.sdk) || o) && debug__WEBPACK_IMPORTED_MODULE_1___default().enable(\"MM_SDK\"), xu(\"[MetaMaskSDK: constructor()]: begin.\"), this.setMaxListeners(50), !(null === (i = e.dappMetadata) || void 0 === i ? void 0 : i.url)) {\n            if (true) throw new Error(\"You must provide dAppMetadata url\");\n            e.dappMetadata = Object.assign(Object.assign({}, e.dappMetadata), {\n                url: `${window.location.protocol}//${window.location.host}`\n            });\n        }\n        this.options = e, this.options._source || (e._source = Yu), this.init().then(()=>{\n            xu(\"[MetaMaskSDK: constructor()]: initialized successfully.\"),  false && (0);\n        }).catch((e)=>{\n            console.error(\"[MetaMaskSDK: constructor()] error during initialization\", e);\n        });\n    }\n    init() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                var t;\n                return a(this, void 0, void 0, function*() {\n                    if (false) {}\n                    if (e._initialized) return xu(\"[MetaMaskSDK: initializeMetaMaskSDK()] already initialized\"), e.sdkInitPromise;\n                    if (e.sdkInitPromise) return xu(\"[MetaMaskSDK: initializeMetaMaskSDK()] already initializing\"), e.sdkInitPromise;\n                    try {\n                        e.sdkInitPromise = ef(e), yield e.sdkInitPromise;\n                    } catch (e) {\n                        throw console.error(e), e;\n                    }\n                    return e.sdkInitPromise;\n                });\n            }(this);\n        });\n    }\n    isExtensionActive() {\n        return this.extensionActive;\n    }\n    checkExtensionAvailability() {\n        var e;\n        return  false && 0;\n    }\n    connect() {\n        return a(this, void 0, void 0, function*() {\n            return function(e) {\n                return a(this, void 0, void 0, function*() {\n                    if (e._initialized || (xu(\"[MetaMaskSDK: connect()] provider not ready -- wait for init()\"), yield e.init()), xu(`[MetaMaskSDK: connect()] isExtensionActive=${e.isExtensionActive()} activeProvider`, e.activeProvider), !e.activeProvider) throw new Error(\"SDK state invalid -- undefined provider\");\n                    const t = e.activeProvider.getSelectedAddress();\n                    return t ? [\n                        t\n                    ] : e.activeProvider.request({\n                        method: th.ETH_REQUESTACCOUNTS,\n                        params: []\n                    });\n                });\n            }(this);\n        });\n    }\n    connectAndSign({ msg: e }) {\n        return a(this, void 0, void 0, function*() {\n            return fh({\n                instance: this,\n                msg: e\n            });\n        });\n    }\n    connectWith(e) {\n        return a(this, void 0, void 0, function*() {\n            return function({ instance: e, rpc: t }) {\n                return a(this, void 0, void 0, function*() {\n                    if (e._initialized || (xu(\"[MetaMaskSDK: connectWith()] provider not ready -- wait for init()\"), yield e.init()), xu(`[MetaMaskSDK: connectWith()] method: ${t.method} rpc=${t}`), !e.activeProvider) throw new Error(\"SDK state invalid -- undefined provider\");\n                    return e.activeProvider.request({\n                        method: th.METAMASK_CONNECTWITH,\n                        params: [\n                            t\n                        ]\n                    });\n                });\n            }({\n                instance: this,\n                rpc: e\n            });\n        });\n    }\n    resume() {\n        return function(e) {\n            var t, n, r;\n            return a(this, void 0, void 0, function*() {\n                if (!(null === (n = null === (t = e.remoteConnection) || void 0 === t ? void 0 : t.getConnector()) || void 0 === n ? void 0 : n.isReady())) return xu(\"[MetaMaskSDK: resume()] channel is not ready -- starting connection\"), void (null === (r = e.remoteConnection) || void 0 === r || r.startConnection());\n                xu(\"[MetaMaskSDK: resume()] channel is ready\");\n            });\n        }(this);\n    }\n    disconnect() {\n        return console.warn(\"MetaMaskSDK.disconnect() is deprecated, use terminate()\"), this.terminate();\n    }\n    isAuthorized() {\n        var e;\n        null === (e = this.remoteConnection) || void 0 === e || e.isAuthorized();\n    }\n    terminate() {\n        return function(e) {\n            var t, n, r;\n            return a(this, void 0, void 0, function*() {\n                if (!(null === (t = e.platformManager) || void 0 === t ? void 0 : t.isMetaMaskMobileWebView())) {\n                    if (hh && (window.localStorage.removeItem(sh), window.localStorage.removeItem(ch), window.localStorage.removeItem(ah)), e.extensionActive) {\n                        try {\n                            yield null === (n = e.activeProvider) || void 0 === n ? void 0 : n.request({\n                                method: th.WALLET_REVOKEPERMISSIONS,\n                                params: [\n                                    {\n                                        eth_accounts: {}\n                                    }\n                                ]\n                            });\n                        } catch (e) {\n                            xu(\"[MetaMaskSDK: terminate()] error revoking permissions\", e);\n                        }\n                        return e.options.extensionOnly ? (e.emit(Fu.ProviderUpdate, uh.TERMINATE), void xu(\"[MetaMaskSDK: terminate()] extensionOnly --- prevent switching providers\")) : (e.activeProvider = e.sdkProvider, window.ethereum = e.activeProvider, e.extensionActive = !1, void e.emit(Fu.ProviderUpdate, uh.TERMINATE));\n                    }\n                    e.emit(Fu.ProviderUpdate, uh.TERMINATE), xu(`[MetaMaskSDK: terminate()] remoteConnection=${e.remoteConnection}`), null === (r = e.remoteConnection) || void 0 === r || r.disconnect({\n                        terminate: !0,\n                        sendMessage: !0\n                    });\n                }\n            });\n        }(this);\n    }\n    isInitialized() {\n        return this._initialized;\n    }\n    setReadOnlyRPCCalls(e) {\n        this.readonlyRPCCalls = e;\n    }\n    hasReadOnlyRPCCalls() {\n        return this.readonlyRPCCalls;\n    }\n    getProvider() {\n        if (this.activeProvider) return this.activeProvider;\n        console.warn(\"MetaMaskSDK: No active provider found\");\n    }\n    getMobileProvider() {\n        if (!this.sdkProvider) throw new Error(\"SDK state invalid -- undefined mobile provider\");\n        return this.sdkProvider;\n    }\n    getUniversalLink() {\n        var e;\n        const t = null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getUniversalLink();\n        if (!t) throw new Error(\"No Universal Link available, please call eth_requestAccounts first.\");\n        return t;\n    }\n    getChannelId() {\n        var e, t;\n        return null === (t = null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getChannelConfig()) || void 0 === t ? void 0 : t.channelId;\n    }\n    getRPCHistory() {\n        var e, t;\n        return null === (t = null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getConnector()) || void 0 === t ? void 0 : t.getRPCMethodTracker();\n    }\n    getVersion() {\n        return Zu.version;\n    }\n    getWalletStatus() {\n        var e, t;\n        return null === (t = null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getConnector()) || void 0 === t ? void 0 : t.getConnectionStatus();\n    }\n    _getChannelConfig() {\n        var e;\n        return null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getChannelConfig();\n    }\n    _ping() {\n        var e, t;\n        null === (t = null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getConnector()) || void 0 === t || t.ping();\n    }\n    _keyCheck() {\n        var e, t;\n        null === (t = null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getConnector()) || void 0 === t || t.keyCheck();\n    }\n    _getServiceStatus() {\n        var e, t;\n        return null === (t = null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getConnector()) || void 0 === t ? void 0 : t.getServiceStatus();\n    }\n    _getRemoteConnection() {\n        return this.remoteConnection;\n    }\n    _getDappMetadata() {\n        return this.dappMetadata;\n    }\n    _getKeyInfo() {\n        var e;\n        return null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getKeyInfo();\n    }\n    _resetKeys() {\n        var e, t;\n        null === (t = null === (e = this.remoteConnection) || void 0 === e ? void 0 : e.getConnector()) || void 0 === t || t.resetKeys();\n    }\n    _getConnection() {\n        return this.remoteConnection;\n    }\n    emit(e, t) {\n        return super.emit(e, t);\n    }\n    on(e, t) {\n        return super.on(e, t);\n    }\n}\nvar nf = Object.freeze({\n    __proto__: null,\n    StorageManagerWeb: class {\n        constructor({ enabled: e } = {\n            enabled: !1\n        }){\n            this.enabled = !1, this.enabled = e;\n        }\n        persistChannelConfig(e) {\n            return a(this, void 0, void 0, function*() {\n                const t = JSON.stringify(e);\n                xu(`[StorageManagerWeb: persistChannelConfig()] enabled=${this.enabled}`, e), localStorage.setItem(oh, t);\n            });\n        }\n        getPersistedChannelConfig() {\n            return a(this, void 0, void 0, function*() {\n                let e;\n                try {\n                    if (xu(`[StorageManagerWeb: getPersistedChannelConfig()] enabled=${this.enabled}`), e = localStorage.getItem(oh), xu(\"[StorageManagerWeb: getPersistedChannelConfig()]\", e), !e) return;\n                    const t = JSON.parse(e);\n                    return xu(\"[StorageManagerWeb: getPersistedChannelConfig()] channelConfig\", t), t;\n                } catch (e) {\n                    return void console.error(\"[StorageManagerWeb: getPersistedChannelConfig()] Can't find existing channel config\", e);\n                }\n            });\n        }\n        persistAccounts(e) {\n            return a(this, void 0, void 0, function*() {\n                xu(`[StorageManagerWeb: persistAccounts()] enabled=${this.enabled}`, e);\n                const t = JSON.stringify(e);\n                localStorage.setItem(ah, t);\n            });\n        }\n        getCachedAccounts() {\n            return a(this, void 0, void 0, function*() {\n                try {\n                    const e = localStorage.getItem(ah);\n                    return e ? JSON.parse(e) : [];\n                } catch (e) {\n                    throw console.error(\"[StorageManagerWeb: getCachedAccounts()] Error reading cached accounts\", e), e;\n                }\n            });\n        }\n        persistChainId(e) {\n            return a(this, void 0, void 0, function*() {\n                xu(`[StorageManagerWeb: persistChainId()] enabled=${this.enabled}`, e), localStorage.setItem(ch, e);\n            });\n        }\n        getCachedChainId() {\n            return a(this, void 0, void 0, function*() {\n                try {\n                    const e = localStorage.getItem(ch);\n                    return null != e ? e : void 0;\n                } catch (e) {\n                    throw console.error(\"[StorageManagerWeb: getCachedChainId()] Error reading cached chainId\", e), e;\n                }\n            });\n        }\n        terminate() {\n            return a(this, void 0, void 0, function*() {\n                xu(`[StorageManagerWeb: terminate()] enabled=${this.enabled}`), localStorage.removeItem(oh);\n            });\n        }\n    }\n});\nconst rf = \"hydrated\", of = !1, sf = !1, af = !0;\nvar cf = Object.defineProperty, lf = new WeakMap, df = (e)=>lf.get(e), uf = (e, t)=>lf.set(t.$lazyInstance$ = e, t), hf = (e, t)=>t in e, ff = (e, t)=>(0, console.error)(e, t), pf = new Map, gf = new Map, mf = \"slot-fb{display:contents}slot-fb[hidden]{display:none}\", yf =  false ? 0 : {}, vf = yf.document || {\n    head: {}\n}, bf = {\n    $flags$: 0,\n    $resourcesUrl$: \"\",\n    jmp: (e)=>e(),\n    raf: (e)=>requestAnimationFrame(e),\n    ael: (e, t, n, r)=>e.addEventListener(t, n, r),\n    rel: (e, t, n, r)=>e.removeEventListener(t, n, r),\n    ce: (e, t)=>new CustomEvent(e, t)\n}, wf = (()=>{\n    try {\n        return new CSSStyleSheet, \"function\" == typeof (new CSSStyleSheet).replaceSync;\n    } catch (e) {}\n    return !1;\n})(), Ef = !1, Cf = [], Sf = [], _f = (e, t)=>(t)=>{\n        e.push(t), Ef || (Ef = !0, 4 & bf.$flags$ ? Mf(xf) : bf.raf(xf));\n    }, kf = (e)=>{\n    for(let t = 0; t < e.length; t++)try {\n        e[t](performance.now());\n    } catch (e) {\n        ff(e);\n    }\n    e.length = 0;\n}, xf = ()=>{\n    kf(Cf), kf(Sf), (Ef = Cf.length > 0) && bf.raf(xf);\n}, Mf = (e)=>((e)=>Promise.resolve(e))().then(e), Af = _f(Sf), If = {}, Rf = (e)=>\"object\" === (e = typeof e) || \"function\" === e;\nfunction Pf(e) {\n    var t, n, r;\n    return null != (r = null == (n = null == (t = e.head) ? void 0 : t.querySelector('meta[name=\"csp-nonce\"]')) ? void 0 : n.getAttribute(\"content\")) ? r : void 0;\n}\n((e, t)=>{\n    for(var n in t)cf(e, n, {\n        get: t[n],\n        enumerable: !0\n    });\n})({}, {\n    err: ()=>Of,\n    map: ()=>Tf,\n    ok: ()=>Lf,\n    unwrap: ()=>$f,\n    unwrapErr: ()=>Bf\n});\nvar Lf = (e)=>({\n        isOk: !0,\n        isErr: !1,\n        value: e\n    }), Of = (e)=>({\n        isOk: !1,\n        isErr: !0,\n        value: e\n    });\nfunction Tf(e, t) {\n    if (e.isOk) {\n        const n = t(e.value);\n        return n instanceof Promise ? n.then((e)=>Lf(e)) : Lf(n);\n    }\n    if (e.isErr) {\n        const t = e.value;\n        return Of(t);\n    }\n    throw \"should never get here\";\n}\nvar Nf, Df, $f = (e)=>{\n    if (e.isOk) return e.value;\n    throw e.value;\n}, Bf = (e)=>{\n    if (e.isErr) return e.value;\n    throw e.value;\n}, Kf = (e, t, ...n)=>{\n    let r = null, i = !1, o = !1;\n    const s = [], a = (t)=>{\n        for(let n = 0; n < t.length; n++)r = t[n], Array.isArray(r) ? a(r) : null != r && \"boolean\" != typeof r && ((i = \"function\" != typeof e && !Rf(r)) && (r = String(r)), i && o ? s[s.length - 1].$text$ += r : s.push(i ? jf(null, r) : r), o = i);\n    };\n    if (a(n), t) {\n        const e = t.className || t.class;\n        e && (t.class = \"object\" != typeof e ? e : Object.keys(e).filter((t)=>e[t]).join(\" \"));\n    }\n    if (\"function\" == typeof e) return e(null === t ? {} : t, s, Hf);\n    const c = jf(e, null);\n    return c.$attrs$ = t, s.length > 0 && (c.$children$ = s), c;\n}, jf = (e, t)=>{\n    const n = {\n        $flags$: 0,\n        $tag$: e,\n        $text$: t,\n        $elm$: null,\n        $children$: null,\n        $attrs$: null\n    };\n    return n;\n}, Uf = {}, Hf = {\n    forEach: (e, t)=>e.map(Ff).forEach(t),\n    map: (e, t)=>e.map(Ff).map(t).map(zf)\n}, Ff = (e)=>({\n        vattrs: e.$attrs$,\n        vchildren: e.$children$,\n        vkey: e.$key$,\n        vname: e.$name$,\n        vtag: e.$tag$,\n        vtext: e.$text$\n    }), zf = (e)=>{\n    if (\"function\" == typeof e.vtag) {\n        const t = {\n            ...e.vattrs\n        };\n        return e.vkey && (t.key = e.vkey), e.vname && (t.name = e.vname), Kf(e.vtag, t, ...e.vchildren || []);\n    }\n    const t = jf(e.vtag, e.vtext);\n    return t.$attrs$ = e.vattrs, t.$children$ = e.vchildren, t.$key$ = e.vkey, t.$name$ = e.vname, t;\n}, qf = (e)=>df(e).$hostElement$, Vf = (e, t, n)=>{\n    const r = qf(e);\n    return {\n        emit: (e)=>Wf(r, t, {\n                bubbles: !!(4 & n),\n                composed: !!(2 & n),\n                cancelable: !!(1 & n),\n                detail: e\n            })\n    };\n}, Wf = (e, t, n)=>{\n    const r = bf.ce(t, n);\n    return e.dispatchEvent(r), r;\n}, Gf = new WeakMap, Zf = (e)=>{\n    const t = e.$cmpMeta$, n = e.$hostElement$, r = t.$flags$, i = (t.$tagName$, ()=>{}), o = ((e, t, n)=>{\n        var r;\n        const i = Yf(t), o = gf.get(i);\n        if (e = 11 === e.nodeType ? e : vf, o) if (\"string\" == typeof o) {\n            e = e.head || e;\n            let n, s = Gf.get(e);\n            if (s || Gf.set(e, s = new Set), !s.has(i)) {\n                {\n                    n = vf.createElement(\"style\"), n.innerHTML = o;\n                    const i = null != (r = bf.$nonce$) ? r : Pf(vf);\n                    if (null != i && n.setAttribute(\"nonce\", i), !(1 & t.$flags$)) if (\"HEAD\" === e.nodeName) {\n                        const t = e.querySelectorAll(\"link[rel=preconnect]\"), r = t.length > 0 ? t[t.length - 1].nextSibling : e.querySelector(\"style\");\n                        e.insertBefore(n, r);\n                    } else if (\"host\" in e) if (wf) {\n                        const t = new CSSStyleSheet;\n                        t.replaceSync(o), e.adoptedStyleSheets = [\n                            t,\n                            ...e.adoptedStyleSheets\n                        ];\n                    } else {\n                        const t = e.querySelector(\"style\");\n                        t ? t.innerHTML = o + t.innerHTML : e.prepend(n);\n                    }\n                    else e.append(n);\n                    1 & t.$flags$ && \"HEAD\" !== e.nodeName && e.insertBefore(n, null);\n                }\n                4 & t.$flags$ && (n.innerHTML += mf), s && s.add(i);\n            }\n        } else e.adoptedStyleSheets.includes(o) || (e.adoptedStyleSheets = [\n            ...e.adoptedStyleSheets,\n            o\n        ]);\n        return i;\n    })(n.shadowRoot ? n.shadowRoot : n.getRootNode(), t);\n    10 & r && 2 & r && (n[\"s-sc\"] = o, n.classList.add(o + \"-h\")), i();\n}, Yf = (e, t)=>\"sc-\" + e.$tagName$, Jf = (e, t, n, r, i, o)=>{\n    if (n !== r) {\n        let s = hf(e, t), a = t.toLowerCase();\n        if (\"class\" === t) {\n            const t = e.classList, i = Qf(n), o = Qf(r);\n            t.remove(...i.filter((e)=>e && !o.includes(e))), t.add(...o.filter((e)=>e && !i.includes(e)));\n        } else if (\"style\" === t) {\n            for(const t in n)r && null != r[t] || (t.includes(\"-\") ? e.style.removeProperty(t) : e.style[t] = \"\");\n            for(const t in r)n && r[t] === n[t] || (t.includes(\"-\") ? e.style.setProperty(t, r[t]) : e.style[t] = r[t]);\n        } else if (s || \"o\" !== t[0] || \"n\" !== t[1]) {\n            const a = Rf(r);\n            if ((s || a && null !== r) && !i) try {\n                if (e.tagName.includes(\"-\")) e[t] = r;\n                else {\n                    const i = null == r ? \"\" : r;\n                    \"list\" === t ? s = !1 : null != n && e[t] == i || (\"function\" == typeof e.__lookupSetter__(t) ? e[t] = i : e.setAttribute(t, i));\n                }\n            } catch (e) {}\n            null == r || !1 === r ? !1 === r && \"\" !== e.getAttribute(t) || e.removeAttribute(t) : (!s || 4 & o || i) && !a && (r = !0 === r ? \"\" : r, e.setAttribute(t, r));\n        } else if (t = \"-\" === t[2] ? t.slice(3) : hf(yf, a) ? a.slice(2) : a[2] + t.slice(3), n || r) {\n            const i = t.endsWith(ep);\n            t = t.replace(tp, \"\"), n && bf.rel(e, t, n, i), r && bf.ael(e, t, r, i);\n        }\n    }\n}, Xf = /\\s/, Qf = (e)=>e ? e.split(Xf) : [], ep = \"Capture\", tp = new RegExp(ep + \"$\"), np = (e, t, n)=>{\n    const r = 11 === t.$elm$.nodeType && t.$elm$.host ? t.$elm$.host : t.$elm$, i = e && e.$attrs$ || If, o = t.$attrs$ || If;\n    for (const e of rp(Object.keys(i)))e in o || Jf(r, e, i[e], void 0, n, t.$flags$);\n    for (const e of rp(Object.keys(o)))Jf(r, e, i[e], o[e], n, t.$flags$);\n};\nfunction rp(e) {\n    return e.includes(\"ref\") ? [\n        ...e.filter((e)=>\"ref\" !== e),\n        \"ref\"\n    ] : e;\n}\nvar ip = !1, op = !1, sp = (e, t, n, r)=>{\n    const i = t.$children$[n];\n    let o, s, a = 0;\n    if (null !== i.$text$) o = i.$elm$ = vf.createTextNode(i.$text$);\n    else {\n        op || (op = \"svg\" === i.$tag$), o = i.$elm$ = vf.createElementNS(op ? \"http://www.w3.org/2000/svg\" : \"http://www.w3.org/1999/xhtml\", !ip && sf && 2 & i.$flags$ ? \"slot-fb\" : i.$tag$), op && \"foreignObject\" === i.$tag$ && (op = !1), np(null, i, op);\n        if (!!o.getRootNode().querySelector(\"body\") && of && ((e)=>null != e)(Nf) && o[\"s-si\"] !== Nf && o.classList.add(o[\"s-si\"] = Nf), i.$children$) for(a = 0; a < i.$children$.length; ++a)s = sp(e, i, a), s && o.appendChild(s);\n        \"svg\" === i.$tag$ ? op = !1 : \"foreignObject\" === o.tagName && (op = !0);\n    }\n    return o[\"s-hn\"] = Df, o;\n}, ap = (e, t, n, r, i, o)=>{\n    let s, a = e;\n    for(a.shadowRoot && a.tagName === Df && (a = a.shadowRoot); i <= o; ++i)r[i] && (s = sp(null, n, i), s && (r[i].$elm$ = s, up(a, s, t)));\n}, cp = (e, t, n)=>{\n    for(let r = t; r <= n; ++r){\n        const t = e[r];\n        if (t) {\n            const e = t.$elm$;\n            e && e.remove();\n        }\n    }\n}, lp = (e, t, n = !1)=>e.$tag$ === t.$tag$, dp = (e, t, n = !1)=>{\n    const r = t.$elm$ = e.$elm$, i = e.$children$, o = t.$children$, s = t.$tag$, a = t.$text$;\n    null === a ? (np(e, t, op = \"svg\" === s || \"foreignObject\" !== s && op), null !== i && null !== o ? ((e, t, n, r, i = !1)=>{\n        let o, s = 0, a = 0, c = t.length - 1, l = t[0], d = t[c], u = r.length - 1, h = r[0], f = r[u];\n        for(; s <= c && a <= u;)null == l ? l = t[++s] : null == d ? d = t[--c] : null == h ? h = r[++a] : null == f ? f = r[--u] : lp(l, h, i) ? (dp(l, h, i), l = t[++s], h = r[++a]) : lp(d, f, i) ? (dp(d, f, i), d = t[--c], f = r[--u]) : lp(l, f, i) ? (dp(l, f, i), up(e, l.$elm$, d.$elm$.nextSibling), l = t[++s], f = r[--u]) : lp(d, h, i) ? (dp(d, h, i), up(e, d.$elm$, l.$elm$), d = t[--c], h = r[++a]) : (o = sp(t && t[a], n, a), h = r[++a], o && up(l.$elm$.parentNode, o, l.$elm$));\n        s > c ? ap(e, null == r[u + 1] ? null : r[u + 1].$elm$, n, r, a, u) : a > u && cp(t, s, c);\n    })(r, i, t, o, n) : null !== o ? (null !== e.$text$ && (r.textContent = \"\"), ap(r, null, t, o, 0, o.length - 1)) : !n && af && null !== i && cp(i, 0, i.length - 1), op && \"svg\" === s && (op = !1)) : e.$text$ !== a && (r.data = a);\n}, up = (e, t, n)=>null == e ? void 0 : e.insertBefore(t, n), hp = (e, t, n = !1)=>{\n    const r = e.$hostElement$, i = e.$cmpMeta$, o = e.$vnode$ || jf(null, null), s = (a = t) && a.$tag$ === Uf ? t : Kf(null, null, t);\n    var a;\n    if (Df = r.tagName, n && s.$attrs$) for (const e of Object.keys(s.$attrs$))r.hasAttribute(e) && ![\n        \"key\",\n        \"ref\",\n        \"style\",\n        \"class\"\n    ].includes(e) && (s.$attrs$[e] = r[e]);\n    s.$tag$ = null, s.$flags$ |= 4, e.$vnode$ = s, s.$elm$ = o.$elm$ = r.shadowRoot || r, Nf = r[\"s-sc\"], ip = 0 != (1 & i.$flags$), dp(o, s, n);\n}, fp = (e, t)=>{\n    t && !e.$onRenderResolve$ && t[\"s-p\"] && t[\"s-p\"].push(new Promise((t)=>e.$onRenderResolve$ = t));\n}, pp = (e, t)=>{\n    if (e.$flags$ |= 16, 4 & e.$flags$) return void (e.$flags$ |= 512);\n    fp(e, e.$ancestorComponent$);\n    return Af(()=>gp(e, t));\n}, gp = (e, t)=>{\n    const n = e.$hostElement$, r = (e.$cmpMeta$.$tagName$, ()=>{}), i = e.$lazyInstance$;\n    if (!i) throw new Error(`Can't render component <${n.tagName.toLowerCase()} /> with invalid Stencil runtime! Make sure this imported component is compiled with a \\`externalRuntime: true\\` flag. For more information, please refer to https://stenciljs.com/docs/custom-elements#externalruntime`);\n    return r(), mp(undefined, ()=>vp(e, i, t));\n}, mp = (e, t)=>yp(e) ? e.then(t).catch((e)=>{\n        console.error(e), t();\n    }) : t(), yp = (e)=>e instanceof Promise || e && e.then && \"function\" == typeof e.then, vp = async (e, t, n)=>{\n    var r;\n    const i = e.$hostElement$, o = (e.$cmpMeta$.$tagName$, ()=>{}), s = i[\"s-rc\"];\n    n && Zf(e);\n    const a = (e.$cmpMeta$.$tagName$, ()=>{});\n    bp(e, t, i, n), s && (s.map((e)=>e()), i[\"s-rc\"] = void 0), a(), o();\n    {\n        const t = null != (r = i[\"s-p\"]) ? r : [], n = ()=>wp(e);\n        0 === t.length ? n() : (Promise.all(t).then(n), e.$flags$ |= 4, t.length = 0);\n    }\n}, bp = (e, t, n, r)=>{\n    try {\n        t = t.render(), e.$flags$ &= -17, e.$flags$ |= 2, hp(e, t, r);\n    } catch (t) {\n        ff(t, e.$hostElement$);\n    }\n    return null;\n}, wp = (e)=>{\n    e.$cmpMeta$.$tagName$;\n    const t = e.$hostElement$, n = ()=>{}, r = e.$lazyInstance$, i = e.$ancestorComponent$;\n    64 & e.$flags$ ? n() : (e.$flags$ |= 64, Sp(t), Cp(r, \"componentDidLoad\"), n(), e.$onReadyResolve$(t), i || Ep()), e.$onRenderResolve$ && (e.$onRenderResolve$(), e.$onRenderResolve$ = void 0), 512 & e.$flags$ && Mf(()=>pp(e, !1)), e.$flags$ &= -517;\n}, Ep = (e)=>{\n    Sp(vf.documentElement), Mf(()=>Wf(yf, \"appload\", {\n            detail: {\n                namespace: \"sdk-install-modal-web\"\n            }\n        }));\n}, Cp = (e, t, n)=>{\n    if (e && e[t]) try {\n        return e[t](n);\n    } catch (e) {\n        ff(e);\n    }\n}, Sp = (e)=>{\n    var t;\n    return e.classList.add(null != (t = rf) ? t : \"hydrated\");\n}, _p = (e, t, n, r)=>{\n    const i = df(e);\n    if (!i) throw new Error(`Couldn't find host element for \"${r.$tagName$}\" as it is unknown to this Stencil runtime. This usually happens when integrating a 3rd party Stencil component with another Stencil component or application. Please reach out to the maintainers of the 3rd party Stencil component or report this on the Stencil Discord server (https://chat.stenciljs.com) or comment on this similar [GitHub issue](https://github.com/ionic-team/stencil/issues/5457).`);\n    const o = i.$hostElement$, s = i.$instanceValues$.get(t), a = i.$flags$, c = i.$lazyInstance$;\n    var l, d;\n    l = n, d = r.$members$[t][0], n = null == l || Rf(l) ? l : 4 & d ? \"false\" !== l && (\"\" === l || !!l) : 1 & d ? String(l) : l;\n    const u = Number.isNaN(s) && Number.isNaN(n);\n    if ((!(8 & a) || void 0 === s) && n !== s && !u && (i.$instanceValues$.set(t, n), c)) {\n        if (r.$watchers$ && 128 & a) {\n            const e = r.$watchers$[t];\n            e && e.map((e)=>{\n                try {\n                    c[e](n, s, t);\n                } catch (e) {\n                    ff(e, o);\n                }\n            });\n        }\n        2 == (18 & a) && pp(i, !1);\n    }\n}, kp = (e, t, n)=>{\n    var r, i;\n    const o = e.prototype;\n    if (t.$members$ || t.$watchers$ || e.watchers) {\n        e.watchers && !t.$watchers$ && (t.$watchers$ = e.watchers);\n        const s = Object.entries(null != (r = t.$members$) ? r : {});\n        if (s.map(([e, [r]])=>{\n            (31 & r || 2 & n && 32 & r) && Object.defineProperty(o, e, {\n                get () {\n                    return t = e, df(this).$instanceValues$.get(t);\n                    var t;\n                },\n                set (n) {\n                    _p(this, e, n, t);\n                },\n                configurable: !0,\n                enumerable: !0\n            });\n        }), 1 & n) {\n            const n = new Map;\n            o.attributeChangedCallback = function(e, r, i) {\n                bf.jmp(()=>{\n                    var s;\n                    const a = n.get(e);\n                    if (this.hasOwnProperty(a)) i = this[a], delete this[a];\n                    else {\n                        if (o.hasOwnProperty(a) && \"number\" == typeof this[a] && this[a] == i) return;\n                        if (null == a) {\n                            const n = df(this), o = null == n ? void 0 : n.$flags$;\n                            if (o && !(8 & o) && 128 & o && i !== r) {\n                                const o = n.$lazyInstance$, a = null == (s = t.$watchers$) ? void 0 : s[e];\n                                null == a || a.forEach((t)=>{\n                                    null != o[t] && o[t].call(o, i, r, e);\n                                });\n                            }\n                            return;\n                        }\n                    }\n                    this[a] = (null !== i || \"boolean\" != typeof this[a]) && i;\n                });\n            }, e.observedAttributes = Array.from(new Set([\n                ...Object.keys(null != (i = t.$watchers$) ? i : {}),\n                ...s.filter(([e, t])=>15 & t[0]).map(([e, t])=>{\n                    const r = t[1] || e;\n                    return n.set(r, e), r;\n                })\n            ]));\n        }\n    }\n    return e;\n}, xp = async (e, t, n, r)=>{\n    let i;\n    if (0 == (32 & t.$flags$)) {\n        t.$flags$ |= 32;\n        if (n.$lazyBundleId$) {\n            const e = ((e, t, n)=>{\n                const r = e.$tagName$.replace(/-/g, \"_\"), i = e.$lazyBundleId$;\n                if (!i) return;\n                const o = pf.get(i);\n                if (o) return o[r];\n                {\n                    const e = (e)=>(pf.set(i, e), e[r]);\n                    if (\"mm-install-modal_3\" === i) return Promise.resolve().then(function() {\n                        return gg;\n                    }).then(e, ff);\n                }\n                return import(/* webpackIgnore: true */ /* @vite-ignore */ /* webpackInclude: /\\.entry\\.js$/ */ /* webpackExclude: /\\.system\\.entry\\.js$/ */ /* webpackMode: \"lazy\" */ `./${i}.entry.js`).then((e)=>(pf.set(i, e), e[r]), ff);\n            })(n);\n            if (e && \"then\" in e) {\n                const t = ()=>{};\n                i = await e, t();\n            } else i = e;\n            if (!i) throw new Error(`Constructor for \"${n.$tagName$}#${t.$modeName$}\" was not found`);\n            i.isProxied || (n.$watchers$ = i.watchers, kp(i, n, 2), i.isProxied = !0);\n            const r = (n.$tagName$, ()=>{});\n            t.$flags$ |= 8;\n            try {\n                new i(t);\n            } catch (e) {\n                ff(e);\n            }\n            t.$flags$ &= -9, t.$flags$ |= 128, r(), Mp(t.$lazyInstance$);\n        } else {\n            i = e.constructor;\n            const n = e.localName;\n            customElements.whenDefined(n).then(()=>t.$flags$ |= 128);\n        }\n        if (i && i.style) {\n            let e;\n            \"string\" == typeof i.style && (e = i.style);\n            const t = Yf(n);\n            if (!gf.has(t)) {\n                const r = (n.$tagName$, ()=>{});\n                ((e, t, n)=>{\n                    let r = gf.get(e);\n                    wf && n ? (r = r || new CSSStyleSheet, \"string\" == typeof r ? r = t : r.replaceSync(t)) : r = t, gf.set(e, r);\n                })(t, e, !!(1 & n.$flags$)), r();\n            }\n        }\n    }\n    const o = t.$ancestorComponent$, s = ()=>pp(t, !0);\n    o && o[\"s-rc\"] ? o[\"s-rc\"].push(s) : s();\n}, Mp = (e)=>{\n    Cp(e, \"connectedCallback\");\n}, Ap = (e)=>{\n    Cp(e, \"disconnectedCallback\");\n}, Ip = (e, t = {})=>{\n    var n;\n    const r = ()=>{}, i = [], o = t.exclude || [], s = yf.customElements, a = vf.head, c = a.querySelector(\"meta[charset]\"), l = vf.createElement(\"style\"), d = [];\n    let u, h = !0;\n    Object.assign(bf, t), bf.$resourcesUrl$ = new URL(t.resourcesUrl || \"./\", vf.baseURI).href;\n    let f = !1;\n    if (e.map((e)=>{\n        e[1].map((t)=>{\n            var n;\n            const r = {\n                $flags$: t[0],\n                $tagName$: t[1],\n                $members$: t[2],\n                $listeners$: t[3]\n            };\n            4 & r.$flags$ && (f = !0), r.$members$ = t[2], r.$watchers$ = null != (n = t[4]) ? n : {};\n            const a = r.$tagName$, c = class extends HTMLElement {\n                constructor(e){\n                    if (super(e), this.hasRegisteredEventListeners = !1, ((e, t)=>{\n                        const n = {\n                            $flags$: 0,\n                            $hostElement$: e,\n                            $cmpMeta$: t,\n                            $instanceValues$: new Map\n                        };\n                        n.$onReadyPromise$ = new Promise((e)=>n.$onReadyResolve$ = e), e[\"s-p\"] = [], e[\"s-rc\"] = [], lf.set(e, n);\n                    })(e = this, r), 1 & r.$flags$) if (e.shadowRoot) {\n                        if (\"open\" !== e.shadowRoot.mode) throw new Error(`Unable to re-use existing shadow root for ${r.$tagName$}! Mode is set to ${e.shadowRoot.mode} but Stencil only supports open shadow roots.`);\n                    } else e.attachShadow({\n                        mode: \"open\"\n                    });\n                }\n                connectedCallback() {\n                    df(this), this.hasRegisteredEventListeners || (this.hasRegisteredEventListeners = !0), u && (clearTimeout(u), u = null), h ? d.push(this) : bf.jmp(()=>((e)=>{\n                            if (0 == (1 & bf.$flags$)) {\n                                const t = df(e), n = t.$cmpMeta$, r = (n.$tagName$, ()=>{});\n                                if (1 & t.$flags$) (null == t ? void 0 : t.$lazyInstance$) ? Mp(t.$lazyInstance$) : (null == t ? void 0 : t.$onReadyPromise$) && t.$onReadyPromise$.then(()=>Mp(t.$lazyInstance$));\n                                else {\n                                    t.$flags$ |= 1;\n                                    {\n                                        let n = e;\n                                        for(; n = n.parentNode || n.host;)if (n[\"s-p\"]) {\n                                            fp(t, t.$ancestorComponent$ = n);\n                                            break;\n                                        }\n                                    }\n                                    n.$members$ && Object.entries(n.$members$).map(([t, [n]])=>{\n                                        if (31 & n && e.hasOwnProperty(t)) {\n                                            const n = e[t];\n                                            delete e[t], e[t] = n;\n                                        }\n                                    }), xp(e, t, n);\n                                }\n                                r();\n                            }\n                        })(this));\n                }\n                disconnectedCallback() {\n                    bf.jmp(()=>(async (e)=>{\n                            if (0 == (1 & bf.$flags$)) {\n                                const t = df(e);\n                                (null == t ? void 0 : t.$lazyInstance$) ? Ap(t.$lazyInstance$) : (null == t ? void 0 : t.$onReadyPromise$) && t.$onReadyPromise$.then(()=>Ap(t.$lazyInstance$));\n                            }\n                        })(this));\n                }\n                componentOnReady() {\n                    return df(this).$onReadyPromise$;\n                }\n            };\n            r.$lazyBundleId$ = e[0], o.includes(a) || s.get(a) || (i.push(a), s.define(a, kp(c, r, 1)));\n        });\n    }), i.length > 0 && (f && (l.textContent += mf), l.textContent += i.sort() + \"{visibility:hidden}.hydrated{visibility:inherit}\", l.innerHTML.length)) {\n        l.setAttribute(\"data-styles\", \"\");\n        const e = null != (n = bf.$nonce$) ? n : Pf(vf);\n        null != e && l.setAttribute(\"nonce\", e), a.insertBefore(l, c ? c.nextSibling : a.firstChild);\n    }\n    h = !1, d.length ? d.map((e)=>e.connectedCallback()) : bf.jmp(()=>u = setTimeout(Ep, 30)), r();\n};\n!function() {\n    if (false) { var e; }\n}();\nvar Rp = Object.freeze({\n    __proto__: null,\n    defineCustomElements: async (e, t)=>{\n        if (false) {}\n    },\n    setNonce: (e)=>bf.$nonce$ = e\n});\nconst Pp = {\n    fontFamily: \"Roboto, sans-serif\"\n}, Lp = ({ className: e }, t)=>Kf(\"div\", {\n        style: Pp,\n        class: e\n    }, t), Op = ({ Icon: e, text: t })=>Kf(\"div\", {\n        class: \"flexContainer\",\n        style: {\n            padding: \"6\",\n            flexDirection: \"row\"\n        }\n    }, Kf(\"div\", {\n        class: \"flexItem1\"\n    }, Kf(e, null)), Kf(\"div\", {\n        class: \"flexItem11\"\n    }, Kf(\"span\", {\n        style: {\n            lineHeight: \"2\",\n            color: \"black\"\n        }\n    }, t))), Tp = ()=>Kf(\"svg\", {\n        width: \"20\",\n        height: \"18\",\n        viewBox: \"0 0 20 18\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, Kf(\"path\", {\n        d: \"M20.0002 7.9702V10.0302C20.0002 10.5802 19.5602 11.0302 19.0002 11.0502H17.0402C15.9602 11.0502 14.9702 10.2602 14.8802 9.1802C14.8202 8.5502 15.0602 7.9602 15.4802 7.5502C15.8502 7.1702 16.3602 6.9502 16.9202 6.9502H19.0002C19.5602 6.9702 20.0002 7.4202 20.0002 7.9702Z\",\n        fill: \"#037DD6\"\n    }), Kf(\"path\", {\n        d: \"M18.47 12.55H17.04C15.14 12.55 13.54 11.12 13.38 9.3C13.29 8.26 13.67 7.22 14.43 6.48C15.07 5.82 15.96 5.45 16.92 5.45H18.47C18.76 5.45 19 5.21 18.97 4.92C18.75 2.49 17.14 0.83 14.75 0.55C14.51 0.51 14.26 0.5 14 0.5H5C4.72 0.5 4.45 0.52 4.19 0.56C1.64 0.88 0 2.78 0 5.5V12.5C0 15.26 2.24 17.5 5 17.5H14C16.8 17.5 18.73 15.75 18.97 13.08C19 12.79 18.76 12.55 18.47 12.55ZM11 6.75H5C4.59 6.75 4.25 6.41 4.25 6C4.25 5.59 4.59 5.25 5 5.25H11C11.41 5.25 11.75 5.59 11.75 6C11.75 6.41 11.41 6.75 11 6.75Z\",\n        fill: \"#037DD6\"\n    })), Np = ()=>Kf(\"svg\", {\n        width: \"20\",\n        height: \"18\",\n        viewBox: \"0 0 20 18\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, Kf(\"path\", {\n        d: \"M14.44 0.0999756C12.63 0.0999756 11.01 0.979976 10 2.32998C8.99 0.979976 7.37 0.0999756 5.56 0.0999756C2.49 0.0999756 0 2.59998 0 5.68998C0 6.87998 0.19 7.97998 0.52 8.99998C2.1 14 6.97 16.99 9.38 17.81C9.72 17.93 10.28 17.93 10.62 17.81C13.03 16.99 17.9 14 19.48 8.99998C19.81 7.97998 20 6.87998 20 5.68998C20 2.59998 17.51 0.0999756 14.44 0.0999756Z\",\n        fill: \"#037DD6\"\n    })), Dp = ()=>Kf(\"svg\", {\n        width: \"20\",\n        height: \"20\",\n        viewBox: \"0 0 20 20\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, Kf(\"path\", {\n        d: \"M16.28 7.53V6.28C16.28 3.58 15.63 0 10 0C4.37 0 3.72 3.58 3.72 6.28V7.53C0.92 7.88 0 9.3 0 12.79V14.65C0 18.75 1.25 20 5.35 20H14.65C18.75 20 20 18.75 20 14.65V12.79C20 9.3 19.08 7.88 16.28 7.53ZM10 16.74C8.33 16.74 6.98 15.38 6.98 13.72C6.98 12.05 8.34 10.7 10 10.7C11.66 10.7 13.02 12.06 13.02 13.72C13.02 15.39 11.67 16.74 10 16.74ZM5.35 7.44C5.27 7.44 5.2 7.44 5.12 7.44V6.28C5.12 3.35 5.95 1.4 10 1.4C14.05 1.4 14.88 3.35 14.88 6.28V7.45C14.8 7.45 14.73 7.45 14.65 7.45H5.35V7.44Z\",\n        fill: \"#037DD6\"\n    })), $p = ()=>Kf(\"svg\", {\n        width: \"20\",\n        height: \"20\",\n        viewBox: \"0 0 24 24\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, Kf(\"path\", {\n        d: \"M16.4405 8.8999C20.0405 9.2099 21.5105 11.0599 21.5105 15.1099V15.2399C21.5105 19.7099 19.7205 21.4999 15.2505 21.4999H8.74047C4.27047 21.4999 2.48047 19.7099 2.48047 15.2399V15.1099C2.48047 11.0899 3.93047 9.2399 7.47047 8.9099\",\n        stroke: \"white\",\n        \"stroke-width\": \"1.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M12 2V14.88\",\n        stroke: \"white\",\n        \"stroke-width\": \"1.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M15.3504 12.6499L12.0004 15.9999L8.65039 12.6499\",\n        stroke: \"white\",\n        \"stroke-width\": \"1.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }));\nfunction Bp({ version: e }) {\n    return Kf(\"div\", {\n        style: {\n            textAlign: \"center\",\n            color: \"#BBC0C5\",\n            fontSize: \"12\"\n        }\n    }, \"SDK Version \", e ? `v${e}` : \"unknown\");\n}\nconst Kp = ()=>Kf(\"svg\", {\n        width: \"14\",\n        height: \"14\",\n        viewBox: \"0 0 16 16\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, Kf(\"rect\", {\n        width: \"16\",\n        height: \"16\",\n        fill: \"white\"\n    }), Kf(\"path\", {\n        \"fill-rule\": \"evenodd\",\n        \"clip-rule\": \"evenodd\",\n        d: \"M2.40554 2.40554C2.94627 1.86482 3.82296 1.86482 4.36369 2.40554L8 6.04186L11.6363 2.40554C12.177 1.86482 13.0537 1.86482 13.5945 2.40554C14.1352 2.94627 14.1352 3.82296 13.5945 4.36369L9.95814 8L13.5945 11.6363C14.1352 12.177 14.1352 13.0537 13.5945 13.5945C13.0537 14.1352 12.177 14.1352 11.6363 13.5945L8 9.95814L4.36369 13.5945C3.82296 14.1352 2.94627 14.1352 2.40554 13.5945C1.86482 13.0537 1.86482 12.177 2.40554 11.6363L6.04186 8L2.40554 4.36369C1.86482 3.82296 1.86482 2.94627 2.40554 2.40554Z\",\n        fill: \"#BBC0C5\"\n    })), jp = ()=>Kf(\"svg\", {\n        width: \"273\",\n        height: \"51\",\n        viewBox: \"0 0 273 51\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, Kf(\"path\", {\n        d: \"M240.882 25.9263C239.472 24.997 237.916 24.3361 236.443 23.5101C235.489 22.9731 234.473 22.4982 233.643 21.8167C232.233 20.6602 232.524 18.3885 233.996 17.3973C236.112 15.993 239.617 16.7777 239.99 19.6483C239.99 19.7102 240.052 19.7515 240.114 19.7515H243.308C243.391 19.7515 243.454 19.6896 243.433 19.607C243.267 17.6244 242.5 15.9723 241.089 14.9191C239.741 13.9072 238.206 13.3702 236.568 13.3702C228.127 13.3702 227.359 22.271 231.901 25.0796C232.42 25.41 236.879 27.6404 238.455 28.611C240.032 29.5816 240.529 31.3576 239.845 32.7619C239.223 34.0423 237.605 34.9303 235.987 34.8271C234.224 34.7238 232.855 33.7738 232.378 32.2869C232.295 32.0185 232.254 31.5022 232.254 31.275C232.254 31.2131 232.192 31.1511 232.129 31.1511H228.666C228.604 31.1511 228.541 31.2131 228.541 31.275C228.541 33.7738 229.164 35.1575 230.864 36.4172C232.461 37.615 234.203 38.1106 236.008 38.1106C240.737 38.1106 243.184 35.4466 243.682 32.6793C244.117 29.974 243.308 27.5371 240.882 25.9263Z\",\n        fill: \"#24292E\"\n    }), Kf(\"path\", {\n        d: \"M90.4943 13.8246H88.9595H87.2795C87.2173 13.8246 87.1758 13.8659 87.1551 13.9072L84.3137 23.2416C84.2722 23.3655 84.1063 23.3655 84.0648 23.2416L81.2234 13.9072C81.2026 13.8452 81.1612 13.8246 81.0989 13.8246H79.419H77.8842H75.8102C75.748 13.8246 75.6857 13.8865 75.6857 13.9485V37.7802C75.6857 37.8422 75.748 37.9041 75.8102 37.9041H79.2738C79.336 37.9041 79.3982 37.8422 79.3982 37.7802V19.6689C79.3982 19.5244 79.6056 19.5037 79.6471 19.6276L82.5093 29.024L82.7167 29.6849C82.7374 29.7468 82.7789 29.7675 82.8411 29.7675H85.4959C85.5581 29.7675 85.5996 29.7262 85.6203 29.6849L85.8277 29.024L88.6899 19.6276C88.7313 19.4831 88.9387 19.5244 88.9387 19.6689V37.7802C88.9387 37.8422 89.001 37.9041 89.0632 37.9041H92.5268C92.589 37.9041 92.6513 37.8422 92.6513 37.7802V13.9485C92.6513 13.8865 92.589 13.8246 92.5268 13.8246H90.4943Z\",\n        fill: \"#24292E\"\n    }), Kf(\"path\", {\n        d: \"M187.849 13.8246C187.787 13.8246 187.745 13.8659 187.725 13.9072L184.883 23.2416C184.842 23.3655 184.676 23.3655 184.634 23.2416L181.793 13.9072C181.772 13.8452 181.731 13.8246 181.668 13.8246H176.4C176.338 13.8246 176.276 13.8865 176.276 13.9485V37.7802C176.276 37.8422 176.338 37.9041 176.4 37.9041H179.864C179.926 37.9041 179.988 37.8422 179.988 37.7802V19.6689C179.988 19.5244 180.196 19.5037 180.237 19.6276L183.099 29.024L183.307 29.6849C183.328 29.7468 183.369 29.7675 183.431 29.7675H186.086C186.148 29.7675 186.19 29.7262 186.211 29.6849L186.418 29.024L189.28 19.6276C189.322 19.4831 189.529 19.5244 189.529 19.6689V37.7802C189.529 37.8422 189.591 37.9041 189.653 37.9041H193.117C193.179 37.9041 193.241 37.8422 193.241 37.7802V13.9485C193.241 13.8865 193.179 13.8246 193.117 13.8246H187.849Z\",\n        fill: \"#24292E\"\n    }), Kf(\"path\", {\n        d: \"M143.174 13.8246H136.724H133.261H126.81C126.748 13.8246 126.686 13.8865 126.686 13.9485V16.9223C126.686 16.9843 126.748 17.0462 126.81 17.0462H133.136V37.7802C133.136 37.8422 133.198 37.9041 133.261 37.9041H136.724C136.786 37.9041 136.849 37.8422 136.849 37.7802V17.0462H143.174C143.237 17.0462 143.299 16.9843 143.299 16.9223V13.9485C143.299 13.8865 143.257 13.8246 143.174 13.8246Z\",\n        fill: \"#24292E\"\n    }), Kf(\"path\", {\n        d: \"M163.604 37.9041H166.756C166.839 37.9041 166.901 37.8215 166.881 37.7389L160.368 13.8245C160.347 13.7626 160.306 13.7419 160.244 13.7419H159.041H156.925H155.722C155.66 13.7419 155.619 13.7832 155.598 13.8245L149.085 37.7389C149.065 37.8215 149.127 37.9041 149.21 37.9041H152.362C152.425 37.9041 152.466 37.8628 152.487 37.8215L154.374 30.862C154.395 30.8 154.436 30.7794 154.499 30.7794H161.467C161.53 30.7794 161.571 30.8207 161.592 30.862L163.479 37.8215C163.5 37.8628 163.562 37.9041 163.604 37.9041ZM155.328 27.3719L157.859 18.0581C157.9 17.9342 158.066 17.9342 158.107 18.0581L160.638 27.3719C160.659 27.4545 160.596 27.5371 160.513 27.5371H155.453C155.37 27.5371 155.308 27.4545 155.328 27.3719Z\",\n        fill: \"#24292E\"\n    }), Kf(\"path\", {\n        d: \"M217.362 37.9041H220.515C220.598 37.9041 220.66 37.8215 220.639 37.7389L214.127 13.8245C214.106 13.7626 214.065 13.7419 214.002 13.7419H212.8H210.684H209.481C209.419 13.7419 209.377 13.7832 209.357 13.8245L202.844 37.7389C202.823 37.8215 202.886 37.9041 202.969 37.9041H206.121C206.183 37.9041 206.225 37.8628 206.246 37.8215L208.133 30.862C208.154 30.8 208.195 30.7794 208.257 30.7794H215.226C215.288 30.7794 215.33 30.8207 215.351 30.862L217.238 37.8215C217.259 37.8628 217.3 37.9041 217.362 37.9041ZM209.087 27.3719L211.617 18.0581C211.659 17.9342 211.825 17.9342 211.866 18.0581L214.397 27.3719C214.417 27.4545 214.355 27.5371 214.272 27.5371H209.211C209.129 27.5371 209.066 27.4545 209.087 27.3719Z\",\n        fill: \"#24292E\"\n    }), Kf(\"path\", {\n        d: \"M106.713 34.3727V26.9795C106.713 26.9176 106.775 26.8556 106.837 26.8556H116.067C116.129 26.8556 116.191 26.7936 116.191 26.7317V23.7579C116.191 23.6959 116.129 23.634 116.067 23.634H106.837C106.775 23.634 106.713 23.572 106.713 23.5101V17.1907C106.713 17.1288 106.775 17.0668 106.837 17.0668H117.332C117.394 17.0668 117.457 17.0049 117.457 16.9429V13.9691C117.457 13.9072 117.394 13.8452 117.332 13.8452H106.713H103.125C103.063 13.8452 103.001 13.9072 103.001 13.9691V17.0668V23.6546V26.8763V34.5173V37.7802C103.001 37.8422 103.063 37.9041 103.125 37.9041H106.713H117.768C117.83 37.9041 117.892 37.8422 117.892 37.7802V34.6412C117.892 34.5792 117.83 34.5173 117.768 34.5173H106.817C106.755 34.4966 106.713 34.4553 106.713 34.3727Z\",\n        fill: \"#24292E\"\n    }), Kf(\"path\", {\n        d: \"M272.532 37.6976L260.544 25.3687C260.502 25.3274 260.502 25.2448 260.544 25.2035L271.329 14.0517C271.412 13.9691 271.349 13.8452 271.246 13.8452H266.828C266.787 13.8452 266.766 13.8659 266.745 13.8865L257.599 23.3449C257.516 23.4275 257.391 23.3655 257.391 23.2623V13.9691C257.391 13.9072 257.329 13.8452 257.267 13.8452H253.803C253.741 13.8452 253.679 13.9072 253.679 13.9691V37.8009C253.679 37.8628 253.741 37.9248 253.803 37.9248H257.267C257.329 37.9248 257.391 37.8628 257.391 37.8009V27.3099C257.391 27.2067 257.536 27.1447 257.599 27.2273L267.969 37.8835C267.989 37.9041 268.031 37.9248 268.052 37.9248H272.469C272.552 37.9041 272.615 37.7596 272.532 37.6976Z\",\n        fill: \"#24292E\"\n    }), Kf(\"path\", {\n        d: \"M52.021 1L31.0526 16.4886L34.9517 7.36063L52.021 1Z\",\n        fill: \"#E17726\",\n        stroke: \"#E17726\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M3.65491 1L24.4366 16.6331L20.7241 7.36063L3.65491 1Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M44.4716 36.9127L38.8925 45.4211L50.8389 48.7047L54.261 37.0986L44.4716 36.9127Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M1.43555 37.0986L4.83695 48.7047L16.7626 45.4211L11.2042 36.9127L1.43555 37.0986Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M16.1197 22.5395L12.8013 27.5371L24.6232 28.074L24.2292 15.3734L16.1197 22.5395Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M39.5561 22.5394L31.3222 15.2288L31.0526 28.0739L42.8746 27.537L39.5561 22.5394Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M16.7626 45.4212L23.918 41.9724L17.7582 37.1813L16.7626 45.4212Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M31.7578 41.9724L38.8925 45.4212L37.9177 37.1813L31.7578 41.9724Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M38.8923 45.4212L31.7577 41.9724L32.3384 46.5983L32.2762 48.5602L38.8923 45.4212Z\",\n        fill: \"#D5BFB2\",\n        stroke: \"#D5BFB2\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M16.7625 45.4212L23.3994 48.5602L23.3579 46.5983L23.9179 41.9724L16.7625 45.4212Z\",\n        fill: \"#D5BFB2\",\n        stroke: \"#D5BFB2\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M23.5239 34.1249L17.5922 32.3902L21.7818 30.4696L23.5239 34.1249Z\",\n        fill: \"#233447\",\n        stroke: \"#233447\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M32.1517 34.1249L33.8939 30.4696L38.1042 32.3902L32.1517 34.1249Z\",\n        fill: \"#233447\",\n        stroke: \"#233447\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M16.7626 45.4212L17.7996 36.9128L11.2042 37.0987L16.7626 45.4212Z\",\n        fill: \"#CC6228\",\n        stroke: \"#CC6228\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M37.8761 36.9128L38.8924 45.4212L44.4715 37.0987L37.8761 36.9128Z\",\n        fill: \"#CC6228\",\n        stroke: \"#CC6228\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M42.8745 27.5371L31.0526 28.074L32.1518 34.1249L33.894 30.4696L38.1042 32.3902L42.8745 27.5371Z\",\n        fill: \"#CC6228\",\n        stroke: \"#CC6228\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M17.5922 32.3902L21.7817 30.4696L23.5239 34.1249L24.6232 28.074L12.8012 27.5371L17.5922 32.3902Z\",\n        fill: \"#CC6228\",\n        stroke: \"#CC6228\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M12.8013 27.5371L17.7582 37.1813L17.5923 32.3902L12.8013 27.5371Z\",\n        fill: \"#E27525\",\n        stroke: \"#E27525\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M38.1044 32.3902L37.9177 37.1813L42.8746 27.5371L38.1044 32.3902Z\",\n        fill: \"#E27525\",\n        stroke: \"#E27525\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M24.6232 28.0741L23.524 34.125L24.9136 41.2703L25.2247 31.8533L24.6232 28.0741Z\",\n        fill: \"#E27525\",\n        stroke: \"#E27525\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M31.0526 28.0741L30.4719 31.8327L30.7623 41.2703L32.1519 34.125L31.0526 28.0741Z\",\n        fill: \"#E27525\",\n        stroke: \"#E27525\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M32.1519 34.1249L30.7623 41.2702L31.7578 41.9724L37.9177 37.1813L38.1043 32.3901L32.1519 34.1249Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M17.5922 32.3901L17.7581 37.1813L23.918 41.9724L24.9135 41.2702L23.5239 34.1249L17.5922 32.3901Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M32.2763 48.5602L32.3385 46.5983L31.7993 46.1439H23.8765L23.358 46.5983L23.3995 48.5602L16.7626 45.4211L19.0855 47.3211L23.7935 50.5633H31.8615L36.5903 47.3211L38.8924 45.4211L32.2763 48.5602Z\",\n        fill: \"#C0AC9D\",\n        stroke: \"#C0AC9D\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M31.7578 41.9724L30.7622 41.2703H24.9135L23.918 41.9724L23.358 46.5983L23.8765 46.144H31.7993L32.3385 46.5983L31.7578 41.9724Z\",\n        fill: \"#24292E\",\n        stroke: \"#24292E\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M52.9128 17.5005L54.6757 8.95079L52.021 1L31.7578 15.9723L39.5561 22.5394L50.5692 25.7404L52.9958 22.9111L51.938 22.147L53.618 20.6188L52.3321 19.6276L54.0121 18.3472L52.9128 17.5005Z\",\n        fill: \"#763E1A\",\n        stroke: \"#763E1A\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M1 8.95079L2.78366 17.5005L1.64295 18.3472L3.34365 19.6276L2.05775 20.6188L3.73771 22.147L2.67996 22.9111L5.10657 25.7404L16.1196 22.5394L23.918 15.9723L3.65475 1L1 8.95079Z\",\n        fill: \"#763E1A\",\n        stroke: \"#763E1A\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M50.5692 25.7404L39.5561 22.5394L42.8746 27.5371L37.9177 37.1813L44.4716 37.0987H54.261L50.5692 25.7404Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M16.1196 22.5394L5.10651 25.7404L1.43549 37.0987H11.2041L17.7581 37.1813L12.8011 27.5371L16.1196 22.5394Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M31.0526 28.0741L31.7578 15.9724L34.9518 7.36072H20.7239L23.9179 15.9724L24.6231 28.0741L24.8927 31.8739L24.9135 41.2703H30.7622L30.783 31.8739L31.0526 28.0741Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.5\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }));\nfunction Up(e, t) {\n    return e.toString(2).padStart(t, \"0\");\n}\nfunction Hp(e, t) {\n    const n = e % t;\n    return n >= 0 ? n : t + n;\n}\nfunction Fp(e, t) {\n    return new Array(e).fill(t);\n}\nfunction zp(...e) {\n    let t = 0;\n    for (const n of e)t = Math.max(t, n.length);\n    const n = [];\n    for(let r = 0; r < t; r++)for (const t of e)r >= t.length || n.push(t[r]);\n    return new Uint8Array(n);\n}\nfunction qp(e, t, n) {\n    if (n < 0 || n + t.length > e.length) return !1;\n    for(let r = 0; r < t.length; r++)if (t[r] !== e[n + r]) return !1;\n    return !0;\n}\nfunction Vp(e) {\n    return {\n        has: (t)=>e.includes(t),\n        decode: (t)=>{\n            if (!Array.isArray(t) || t.length && \"string\" != typeof t[0]) throw new Error(\"alphabet.decode input should be array of strings\");\n            return t.map((t)=>{\n                if (\"string\" != typeof t) throw new Error(`alphabet.decode: not string element=${t}`);\n                const n = e.indexOf(t);\n                if (-1 === n) throw new Error(`Unknown letter: \"${t}\". Allowed: ${e}`);\n                return n;\n            });\n        },\n        encode: (t)=>{\n            if (!Array.isArray(t) || t.length && \"number\" != typeof t[0]) throw new Error(\"alphabet.encode input should be an array of numbers\");\n            return t.map((t)=>{\n                if (function(e) {\n                    if (!Number.isSafeInteger(e)) throw new Error(`Wrong integer: ${e}`);\n                }(t), t < 0 || t >= e.length) throw new Error(`Digit index outside alphabet: ${t} (alphabet: ${e.length})`);\n                return e[t];\n            });\n        }\n    };\n}\nclass Wp {\n    static size(e, t) {\n        if (\"number\" == typeof e && (e = {\n            height: e,\n            width: e\n        }), !Number.isSafeInteger(e.height) && e.height !== 1 / 0) throw new Error(`Bitmap: wrong height=${e.height} (${typeof e.height})`);\n        if (!Number.isSafeInteger(e.width) && e.width !== 1 / 0) throw new Error(`Bitmap: wrong width=${e.width} (${typeof e.width})`);\n        return void 0 !== t && (e = {\n            width: Math.min(e.width, t.width),\n            height: Math.min(e.height, t.height)\n        }), e;\n    }\n    static fromString(e) {\n        const t = (e = e.replace(/^\\n+/g, \"\").replace(/\\n+$/g, \"\")).split(\"\\n\"), n = t.length, r = new Array(n);\n        let i;\n        for (const e of t){\n            const t = e.split(\"\").map((e)=>{\n                if (\"X\" === e) return !0;\n                if (\" \" === e) return !1;\n                if (\"?\" !== e) throw new Error(`Bitmap.fromString: unknown symbol=${e}`);\n            });\n            if (i && t.length !== i) throw new Error(`Bitmap.fromString different row sizes: width=${i} cur=${t.length}`);\n            i = t.length, r.push(t);\n        }\n        return i || (i = 0), new Wp({\n            height: n,\n            width: i\n        }, r);\n    }\n    constructor(e, t){\n        const { height: n, width: r } = Wp.size(e);\n        this.data = t || Array.from({\n            length: n\n        }, ()=>Fp(r, void 0)), this.height = n, this.width = r;\n    }\n    point(e) {\n        return this.data[e.y][e.x];\n    }\n    isInside(e) {\n        return 0 <= e.x && e.x < this.width && 0 <= e.y && e.y < this.height;\n    }\n    size(e) {\n        if (!e) return {\n            height: this.height,\n            width: this.width\n        };\n        const { x: t, y: n } = this.xy(e);\n        return {\n            height: this.height - n,\n            width: this.width - t\n        };\n    }\n    xy(e) {\n        if (\"number\" == typeof e && (e = {\n            x: e,\n            y: e\n        }), !Number.isSafeInteger(e.x)) throw new Error(`Bitmap: wrong x=${e.x}`);\n        if (!Number.isSafeInteger(e.y)) throw new Error(`Bitmap: wrong y=${e.y}`);\n        return e.x = Hp(e.x, this.width), e.y = Hp(e.y, this.height), e;\n    }\n    rect(e, t, n) {\n        const { x: r, y: i } = this.xy(e), { height: o, width: s } = Wp.size(t, this.size({\n            x: r,\n            y: i\n        }));\n        for(let e = 0; e < o; e++)for(let t = 0; t < s; t++)this.data[i + e][r + t] = \"function\" == typeof n ? n({\n            x: t,\n            y: e\n        }, this.data[i + e][r + t]) : n;\n        return this;\n    }\n    rectRead(e, t, n) {\n        return this.rect(e, t, (e, t)=>(n(e, t), t));\n    }\n    hLine(e, t, n) {\n        return this.rect(e, {\n            width: t,\n            height: 1\n        }, n);\n    }\n    vLine(e, t, n) {\n        return this.rect(e, {\n            width: 1,\n            height: t\n        }, n);\n    }\n    border(e = 2, t) {\n        const n = this.height + 2 * e, r = this.width + 2 * e, i = Fp(e, t), o = Array.from({\n            length: e\n        }, ()=>Fp(r, t));\n        return new Wp({\n            height: n,\n            width: r\n        }, [\n            ...o,\n            ...this.data.map((e)=>[\n                    ...i,\n                    ...e,\n                    ...i\n                ]),\n            ...o\n        ]);\n    }\n    embed(e, t) {\n        return this.rect(e, t.size(), ({ x: e, y: n })=>t.data[n][e]);\n    }\n    rectSlice(e, t = this.size()) {\n        const n = new Wp(Wp.size(t, this.size(this.xy(e))));\n        return this.rect(e, t, ({ x: e, y: t }, r)=>n.data[t][e] = r), n;\n    }\n    inverse() {\n        const { height: e, width: t } = this;\n        return new Wp({\n            height: t,\n            width: e\n        }).rect({\n            x: 0,\n            y: 0\n        }, 1 / 0, ({ x: e, y: t })=>this.data[e][t]);\n    }\n    scale(e) {\n        if (!Number.isSafeInteger(e) || e > 1024) throw new Error(`Wrong scale factor: ${e}`);\n        const { height: t, width: n } = this;\n        return new Wp({\n            height: e * t,\n            width: e * n\n        }).rect({\n            x: 0,\n            y: 0\n        }, 1 / 0, ({ x: t, y: n })=>this.data[Math.floor(n / e)][Math.floor(t / e)]);\n    }\n    clone() {\n        return new Wp(this.size()).rect({\n            x: 0,\n            y: 0\n        }, this.size(), ({ x: e, y: t })=>this.data[t][e]);\n    }\n    assertDrawn() {\n        this.rectRead(0, 1 / 0, (e, t)=>{\n            if (\"boolean\" != typeof t) throw new Error(\"Invalid color type=\" + typeof t);\n        });\n    }\n    toString() {\n        return this.data.map((e)=>e.map((e)=>void 0 === e ? \"?\" : e ? \"X\" : \" \").join(\"\")).join(\"\\n\");\n    }\n    toASCII() {\n        const { height: e, width: t, data: n } = this;\n        let r = \"\";\n        for(let i = 0; i < e; i += 2){\n            for(let o = 0; o < t; o++){\n                const t = n[i][o], s = i + 1 >= e || n[i + 1][o];\n                t || s ? !t && s ? r += \"▀\" : t && !s ? r += \"▄\" : t && s && (r += \" \") : r += \"█\";\n            }\n            r += \"\\n\";\n        }\n        return r;\n    }\n    toTerm() {\n        const e = \"\\x1b[0m\", t = `\u001b[1;47m  ${e}`, n = `\u001b[40m  ${e}`;\n        return this.data.map((e)=>e.map((e)=>e ? n : t).join(\"\")).join(\"\\n\");\n    }\n    toSVG() {\n        let e = `<svg xmlns:svg=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 ${this.width} ${this.height}\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">`;\n        return this.rectRead(0, 1 / 0, ({ x: t, y: n }, r)=>{\n            r && (e += `<rect x=\"${t}\" y=\"${n}\" width=\"1\" height=\"1\" />`);\n        }), e += \"</svg>\", e;\n    }\n    toGIF() {\n        const e = (e)=>[\n                255 & e,\n                e >>> 8 & 255\n            ], t = [\n            ...e(this.width),\n            ...e(this.height)\n        ], n = [];\n        this.rectRead(0, 1 / 0, (e, t)=>n.push(+(!0 === t)));\n        const r = 126, i = [\n            71,\n            73,\n            70,\n            56,\n            55,\n            97,\n            ...t,\n            246,\n            0,\n            0,\n            255,\n            255,\n            255,\n            ...Fp(381, 0),\n            44,\n            0,\n            0,\n            0,\n            0,\n            ...t,\n            0,\n            7\n        ], o = Math.floor(n.length / r);\n        for(let e = 0; e < o; e++)i.push(127, 128, ...n.slice(r * e, r * (e + 1)).map((e)=>+e));\n        return i.push(n.length % r + 1, 128, ...n.slice(o * r).map((e)=>+e)), i.push(1, 129, 0, 59), new Uint8Array(i);\n    }\n    toImage(e = !1) {\n        const { height: t, width: n } = this.size(), r = new Uint8Array(t * n * (e ? 3 : 4));\n        let i = 0;\n        for(let o = 0; o < t; o++)for(let t = 0; t < n; t++){\n            const n = this.data[o][t] ? 0 : 255;\n            r[i++] = n, r[i++] = n, r[i++] = n, e || (r[i++] = 255);\n        }\n        return {\n            height: t,\n            width: n,\n            data: r\n        };\n    }\n}\nconst Gp = [\n    \"low\",\n    \"medium\",\n    \"quartile\",\n    \"high\"\n], Zp = [\n    \"numeric\",\n    \"alphanumeric\",\n    \"byte\",\n    \"kanji\",\n    \"eci\"\n], Yp = [\n    26,\n    44,\n    70,\n    100,\n    134,\n    172,\n    196,\n    242,\n    292,\n    346,\n    404,\n    466,\n    532,\n    581,\n    655,\n    733,\n    815,\n    901,\n    991,\n    1085,\n    1156,\n    1258,\n    1364,\n    1474,\n    1588,\n    1706,\n    1828,\n    1921,\n    2051,\n    2185,\n    2323,\n    2465,\n    2611,\n    2761,\n    2876,\n    3034,\n    3196,\n    3362,\n    3532,\n    3706\n], Jp = {\n    low: [\n        7,\n        10,\n        15,\n        20,\n        26,\n        18,\n        20,\n        24,\n        30,\n        18,\n        20,\n        24,\n        26,\n        30,\n        22,\n        24,\n        28,\n        30,\n        28,\n        28,\n        28,\n        28,\n        30,\n        30,\n        26,\n        28,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ],\n    medium: [\n        10,\n        16,\n        26,\n        18,\n        24,\n        16,\n        18,\n        22,\n        22,\n        26,\n        30,\n        22,\n        22,\n        24,\n        24,\n        28,\n        28,\n        26,\n        26,\n        26,\n        26,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28,\n        28\n    ],\n    quartile: [\n        13,\n        22,\n        18,\n        26,\n        18,\n        24,\n        18,\n        22,\n        20,\n        24,\n        28,\n        26,\n        24,\n        20,\n        30,\n        24,\n        28,\n        28,\n        26,\n        30,\n        28,\n        30,\n        30,\n        30,\n        30,\n        28,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ],\n    high: [\n        17,\n        28,\n        22,\n        16,\n        22,\n        28,\n        26,\n        26,\n        24,\n        28,\n        24,\n        28,\n        22,\n        24,\n        24,\n        30,\n        28,\n        28,\n        26,\n        28,\n        30,\n        24,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30,\n        30\n    ]\n}, Xp = {\n    low: [\n        1,\n        1,\n        1,\n        1,\n        1,\n        2,\n        2,\n        2,\n        2,\n        4,\n        4,\n        4,\n        4,\n        4,\n        6,\n        6,\n        6,\n        6,\n        7,\n        8,\n        8,\n        9,\n        9,\n        10,\n        12,\n        12,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19,\n        19,\n        20,\n        21,\n        22,\n        24,\n        25\n    ],\n    medium: [\n        1,\n        1,\n        1,\n        2,\n        2,\n        4,\n        4,\n        4,\n        5,\n        5,\n        5,\n        8,\n        9,\n        9,\n        10,\n        10,\n        11,\n        13,\n        14,\n        16,\n        17,\n        17,\n        18,\n        20,\n        21,\n        23,\n        25,\n        26,\n        28,\n        29,\n        31,\n        33,\n        35,\n        37,\n        38,\n        40,\n        43,\n        45,\n        47,\n        49\n    ],\n    quartile: [\n        1,\n        1,\n        2,\n        2,\n        4,\n        4,\n        6,\n        6,\n        8,\n        8,\n        8,\n        10,\n        12,\n        16,\n        12,\n        17,\n        16,\n        18,\n        21,\n        20,\n        23,\n        23,\n        25,\n        27,\n        29,\n        34,\n        34,\n        35,\n        38,\n        40,\n        43,\n        45,\n        48,\n        51,\n        53,\n        56,\n        59,\n        62,\n        65,\n        68\n    ],\n    high: [\n        1,\n        1,\n        2,\n        4,\n        4,\n        4,\n        5,\n        6,\n        8,\n        8,\n        11,\n        11,\n        16,\n        16,\n        18,\n        16,\n        19,\n        21,\n        25,\n        25,\n        25,\n        34,\n        30,\n        32,\n        35,\n        37,\n        40,\n        42,\n        45,\n        48,\n        51,\n        54,\n        57,\n        60,\n        63,\n        66,\n        70,\n        74,\n        77,\n        81\n    ]\n}, Qp = {\n    size: {\n        encode: (e)=>21 + 4 * (e - 1),\n        decode: (e)=>(e - 17) / 4\n    },\n    sizeType: (e)=>Math.floor((e + 7) / 17),\n    alignmentPatterns (e) {\n        if (1 === e) return [];\n        const t = Qp.size.encode(e) - 6 - 1, n = t - 6, r = Math.ceil(n / 28);\n        let i = Math.floor(n / r);\n        i % 2 ? i += 1 : n % r * 2 >= r && (i += 2);\n        const o = [\n            6\n        ];\n        for(let e = 1; e < r; e++)o.push(t - (r - e) * i);\n        return o.push(t), o;\n    },\n    ECCode: {\n        low: 1,\n        medium: 0,\n        quartile: 3,\n        high: 2\n    },\n    formatMask: 21522,\n    formatBits (e, t) {\n        const n = Qp.ECCode[e] << 3 | t;\n        let r = n;\n        for(let e = 0; e < 10; e++)r = r << 1 ^ 1335 * (r >> 9);\n        return (n << 10 | r) ^ Qp.formatMask;\n    },\n    versionBits (e) {\n        let t = e;\n        for(let e = 0; e < 12; e++)t = t << 1 ^ 7973 * (t >> 11);\n        return e << 12 | t;\n    },\n    alphabet: {\n        numeric: Vp(\"0123456789\"),\n        alphanumerc: Vp(\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\")\n    },\n    lengthBits: (e, t)=>({\n            numeric: [\n                10,\n                12,\n                14\n            ],\n            alphanumeric: [\n                9,\n                11,\n                13\n            ],\n            byte: [\n                8,\n                16,\n                16\n            ],\n            kanji: [\n                8,\n                10,\n                12\n            ],\n            eci: [\n                0,\n                0,\n                0\n            ]\n        })[t][Qp.sizeType(e)],\n    modeBits: {\n        numeric: \"0001\",\n        alphanumeric: \"0010\",\n        byte: \"0100\",\n        kanji: \"1000\",\n        eci: \"0111\"\n    },\n    capacity (e, t) {\n        const n = Yp[e - 1], r = Jp[t][e - 1], i = Xp[t][e - 1], o = Math.floor(n / i) - r, s = i - n % i;\n        return {\n            words: r,\n            numBlocks: i,\n            shortBlocks: s,\n            blockLen: o,\n            capacity: 8 * (n - r * i),\n            total: (r + o) * i + i - s\n        };\n    }\n}, eg = [\n    (e, t)=>(e + t) % 2 == 0,\n    (e, t)=>t % 2 == 0,\n    (e, t)=>e % 3 == 0,\n    (e, t)=>(e + t) % 3 == 0,\n    (e, t)=>(Math.floor(t / 2) + Math.floor(e / 3)) % 2 == 0,\n    (e, t)=>e * t % 2 + e * t % 3 == 0,\n    (e, t)=>(e * t % 2 + e * t % 3) % 2 == 0,\n    (e, t)=>((e + t) % 2 + e * t % 3) % 2 == 0\n], tg = {\n    tables: ((e)=>{\n        const t = Fp(256, 0), n = Fp(256, 0);\n        for(let e = 0, r = 1; e < 256; e++)t[e] = r, n[r] = e, r <<= 1, 256 & r && (r ^= 285);\n        return {\n            exp: t,\n            log: n\n        };\n    })(),\n    exp: (e)=>tg.tables.exp[e],\n    log (e) {\n        if (0 === e) throw new Error(`GF.log: wrong arg=${e}`);\n        return tg.tables.log[e] % 255;\n    },\n    mul: (e, t)=>0 === e || 0 === t ? 0 : tg.tables.exp[(tg.tables.log[e] + tg.tables.log[t]) % 255],\n    add: (e, t)=>e ^ t,\n    pow: (e, t)=>tg.tables.exp[tg.tables.log[e] * t % 255],\n    inv (e) {\n        if (0 === e) throw new Error(`GF.inverse: wrong arg=${e}`);\n        return tg.tables.exp[255 - tg.tables.log[e]];\n    },\n    polynomial (e) {\n        if (0 == e.length) throw new Error(\"GF.polymomial: wrong length\");\n        if (0 !== e[0]) return e;\n        let t = 0;\n        for(; t < e.length - 1 && 0 == e[t]; t++);\n        return e.slice(t);\n    },\n    monomial (e, t) {\n        if (e < 0) throw new Error(`GF.monomial: wrong degree=${e}`);\n        if (0 == t) return [\n            0\n        ];\n        let n = Fp(e + 1, 0);\n        return n[0] = t, tg.polynomial(n);\n    },\n    degree: (e)=>e.length - 1,\n    coefficient: (e, t)=>e[tg.degree(e) - t],\n    mulPoly (e, t) {\n        if (0 === e[0] || 0 === t[0]) return [\n            0\n        ];\n        const n = Fp(e.length + t.length - 1, 0);\n        for(let r = 0; r < e.length; r++)for(let i = 0; i < t.length; i++)n[r + i] = tg.add(n[r + i], tg.mul(e[r], t[i]));\n        return tg.polynomial(n);\n    },\n    mulPolyScalar (e, t) {\n        if (0 == t) return [\n            0\n        ];\n        if (1 == t) return e;\n        const n = Fp(e.length, 0);\n        for(let r = 0; r < e.length; r++)n[r] = tg.mul(e[r], t);\n        return tg.polynomial(n);\n    },\n    mulPolyMonomial (e, t, n) {\n        if (t < 0) throw new Error(\"GF.mulPolyMonomial: wrong degree\");\n        if (0 == n) return [\n            0\n        ];\n        const r = Fp(e.length + t, 0);\n        for(let t = 0; t < e.length; t++)r[t] = tg.mul(e[t], n);\n        return tg.polynomial(r);\n    },\n    addPoly (e, t) {\n        if (0 === e[0]) return t;\n        if (0 === t[0]) return e;\n        let n = e, r = t;\n        n.length > r.length && ([n, r] = [\n            r,\n            n\n        ]);\n        let i = Fp(r.length, 0), o = r.length - n.length, s = r.slice(0, o);\n        for(let e = 0; e < s.length; e++)i[e] = s[e];\n        for(let e = o; e < r.length; e++)i[e] = tg.add(n[e - o], r[e]);\n        return tg.polynomial(i);\n    },\n    remainderPoly (e, t) {\n        const n = Array.from(e);\n        for(let r = 0; r < e.length - t.length + 1; r++){\n            const e = n[r];\n            if (0 !== e) for(let i = 1; i < t.length; i++)0 !== t[i] && (n[r + i] = tg.add(n[r + i], tg.mul(t[i], e)));\n        }\n        return n.slice(e.length - t.length + 1, n.length);\n    },\n    divisorPoly (e) {\n        let t = [\n            1\n        ];\n        for(let n = 0; n < e; n++)t = tg.mulPoly(t, [\n            1,\n            tg.pow(2, n)\n        ]);\n        return t;\n    },\n    evalPoly (e, t) {\n        if (0 == t) return tg.coefficient(e, 0);\n        let n = e[0];\n        for(let r = 1; r < e.length; r++)n = tg.add(tg.mul(t, n), e[r]);\n        return n;\n    },\n    euclidian (e, t, n) {\n        tg.degree(e) < tg.degree(t) && ([e, t] = [\n            t,\n            e\n        ]);\n        let r = e, i = t, o = [\n            0\n        ], s = [\n            1\n        ];\n        for(; 2 * tg.degree(i) >= n;){\n            let e = r, t = o;\n            if (r = i, o = s, 0 === r[0]) throw new Error(\"rLast[0] === 0\");\n            i = e;\n            let n = [\n                0\n            ];\n            const a = tg.inv(r[0]);\n            for(; tg.degree(i) >= tg.degree(r) && 0 !== i[0];){\n                const e = tg.degree(i) - tg.degree(r), t = tg.mul(i[0], a);\n                n = tg.addPoly(n, tg.monomial(e, t)), i = tg.addPoly(i, tg.mulPolyMonomial(r, e, t));\n            }\n            if (n = tg.mulPoly(n, o), s = tg.addPoly(n, t), tg.degree(i) >= tg.degree(r)) throw new Error(`Division failed r: ${i}, rLast: ${r}`);\n        }\n        const a = tg.coefficient(s, 0);\n        if (0 == a) throw new Error(\"sigmaTilde(0) was zero\");\n        const c = tg.inv(a);\n        return [\n            tg.mulPolyScalar(s, c),\n            tg.mulPolyScalar(i, c)\n        ];\n    }\n};\nfunction ng(e, t) {\n    const { words: n, shortBlocks: r, numBlocks: i, blockLen: o, total: s } = Qp.capacity(e, t), a = (c = n, {\n        encode (e) {\n            const t = tg.divisorPoly(c), n = Array.from(e);\n            return n.push(...t.slice(0, -1).fill(0)), Uint8Array.from(tg.remainderPoly(n, t));\n        },\n        decode (e) {\n            const t = e.slice(), n = tg.polynomial(Array.from(e));\n            let r = Fp(c, 0), i = !1;\n            for(let e = 0; e < c; e++){\n                const t = tg.evalPoly(n, tg.exp(e));\n                r[r.length - 1 - e] = t, 0 !== t && (i = !0);\n            }\n            if (!i) return t;\n            r = tg.polynomial(r);\n            const o = tg.monomial(c, 1), [s, a] = tg.euclidian(o, r, c), l = Fp(tg.degree(s), 0);\n            let d = 0;\n            for(let e = 1; e < 256 && d < l.length; e++)0 === tg.evalPoly(s, e) && (l[d++] = tg.inv(e));\n            if (d !== l.length) throw new Error(\"RS.decode: wrong errors number\");\n            for(let e = 0; e < l.length; e++){\n                const n = t.length - 1 - tg.log(l[e]);\n                if (n < 0) throw new Error(\"RS.decode: wrong error location\");\n                const r = tg.inv(l[e]);\n                let i = 1;\n                for(let t = 0; t < l.length; t++)e !== t && (i = tg.mul(i, tg.add(1, tg.mul(l[t], r))));\n                t[n] = tg.add(t[n], tg.mul(tg.evalPoly(a, r), tg.inv(i)));\n            }\n            return t;\n        }\n    });\n    var c;\n    return {\n        encode (e) {\n            const t = [], n = [];\n            for(let s = 0; s < i; s++){\n                const i = o + (s < r ? 0 : 1);\n                t.push(e.subarray(0, i)), n.push(a.encode(e.subarray(0, i))), e = e.subarray(i);\n            }\n            const s = zp(...t), c = zp(...n), l = new Uint8Array(s.length + c.length);\n            return l.set(s), l.set(c, s.length), l;\n        },\n        decode (e) {\n            if (e.length !== s) throw new Error(`interleave.decode: len(data)=${e.length}, total=${s}`);\n            const t = [];\n            for(let e = 0; e < i; e++){\n                const i = e < r;\n                t.push(new Uint8Array(n + o + (i ? 0 : 1)));\n            }\n            let c = 0;\n            for(let n = 0; n < o; n++)for(let r = 0; r < i; r++)t[r][n] = e[c++];\n            for(let n = r; n < i; n++)t[n][o] = e[c++];\n            for(let s = o; s < o + n; s++)for(let n = 0; n < i; n++){\n                const i = n < r;\n                t[n][s + (i ? 0 : 1)] = e[c++];\n            }\n            const l = [];\n            for (const e of t)l.push(...Array.from(a.decode(e)).slice(0, -n));\n            return Uint8Array.from(l);\n        }\n    };\n}\nfunction rg(e, t, n, r) {\n    let i = \"\", o = n.length;\n    if (\"numeric\" === r) {\n        const e = Qp.alphabet.numeric.decode(n.split(\"\")), t = e.length;\n        for(let n = 0; n < t - 2; n += 3)i += Up(100 * e[n] + 10 * e[n + 1] + e[n + 2], 10);\n        t % 3 == 1 ? i += Up(e[t - 1], 4) : t % 3 == 2 && (i += Up(10 * e[t - 2] + e[t - 1], 7));\n    } else if (\"alphanumeric\" === r) {\n        const e = Qp.alphabet.alphanumerc.decode(n.split(\"\")), t = e.length;\n        for(let n = 0; n < t - 1; n += 2)i += Up(45 * e[n] + e[n + 1], 11);\n        t % 2 == 1 && (i += Up(e[t - 1], 6));\n    } else {\n        if (\"byte\" !== r) throw new Error(\"encode: unsupported type\");\n        {\n            const e = function(e) {\n                if (\"string\" != typeof e) throw new Error(\"utf8ToBytes expected string, got \" + typeof e);\n                return new Uint8Array((new TextEncoder).encode(e));\n            }(n);\n            o = e.length, i = Array.from(e).map((e)=>Up(e, 8)).join(\"\");\n        }\n    }\n    const { capacity: s } = Qp.capacity(e, t), a = Up(o, Qp.lengthBits(e, r));\n    let c = Qp.modeBits[r] + a + i;\n    if (c.length > s) throw new Error(\"Capacity overflow\");\n    c += \"0\".repeat(Math.min(4, Math.max(0, s - c.length))), c.length % 8 && (c += \"0\".repeat(8 - c.length % 8));\n    const l = \"1110110000010001\";\n    for(let e = 0; c.length !== s; e++)c += l[e % 16];\n    const d = Uint8Array.from(c.match(/(.{8})/g).map((e)=>Number(`0b${e}`)));\n    return ng(e, t).encode(d);\n}\nfunction ig(e, t, n, r, i = !1) {\n    const o = function(e, t, n, r = !1) {\n        const i = Qp.size.encode(e);\n        let o = new Wp(i + 2);\n        const s = new Wp(3).rect(0, 3, !0).border(1, !1).border(1, !0).border(1, !1);\n        o = o.embed(0, s).embed({\n            x: -s.width,\n            y: 0\n        }, s).embed({\n            x: 0,\n            y: -s.height\n        }, s), o = o.rectSlice(1, i);\n        const a = new Wp(1).rect(0, 1, !0).border(1, !1).border(1, !0), c = Qp.alignmentPatterns(e);\n        for (const e of c)for (const t of c)void 0 === o.data[e][t] && o.embed({\n            x: t - 2,\n            y: e - 2\n        }, a);\n        o = o.hLine({\n            x: 0,\n            y: 6\n        }, 1 / 0, ({ x: e }, t)=>void 0 === t ? e % 2 == 0 : t).vLine({\n            x: 6,\n            y: 0\n        }, 1 / 0, ({ y: e }, t)=>void 0 === t ? e % 2 == 0 : t);\n        {\n            const e = Qp.formatBits(t, n), s = (t)=>!r && 1 == (e >> t & 1);\n            for(let e = 0; e < 6; e++)o.data[e][8] = s(e);\n            for(let e = 6; e < 8; e++)o.data[e + 1][8] = s(e);\n            for(let e = 8; e < 15; e++)o.data[i - 15 + e][8] = s(e);\n            for(let e = 0; e < 8; e++)o.data[8][i - e - 1] = s(e);\n            for(let e = 8; e < 9; e++)o.data[8][15 - e - 1 + 1] = s(e);\n            for(let e = 9; e < 15; e++)o.data[8][15 - e - 1] = s(e);\n            o.data[i - 8][8] = !r;\n        }\n        if (e >= 7) {\n            const t = Qp.versionBits(e);\n            for(let e = 0; e < 18; e += 1){\n                const n = !r && 1 == (t >> e & 1), s = Math.floor(e / 3), a = e % 3 + i - 8 - 3;\n                o.data[s][a] = n, o.data[a][s] = n;\n            }\n        }\n        return o;\n    }(e, t, r, i);\n    let s = 0;\n    const a = 8 * n.length;\n    if (function(e, t, n) {\n        const r = e.height, i = eg[t];\n        let o = -1, s = r - 1;\n        for(let t = r - 1; t > 0; t -= 2){\n            for(6 == t && (t = 5);; s += o){\n                for(let r = 0; r < 2; r += 1){\n                    const o = t - r;\n                    void 0 === e.data[s][o] && n(o, s, i(o, s));\n                }\n                if (s + o < 0 || s + o >= r) break;\n            }\n            o = -o;\n        }\n    }(o, r, (e, t, r)=>{\n        let i = !1;\n        s < a && (i = 0 != (n[s >>> 3] >> (7 - s & 7) & 1), s++), o.data[t][e] = i !== r;\n    }), s !== a) throw new Error(\"QR: bytes left after draw\");\n    return o;\n}\nfunction og(e) {\n    const t = e.inverse(), n = (e)=>{\n        let t = 0;\n        for(let n, r = 0, i = 1; r < e.length; r++)n === e[r] && (i++, r !== e.length - 1) || (i >= 5 && (t += i - 5 + 3), n = e[r], i = 1);\n        return t;\n    };\n    let r = 0;\n    e.data.forEach((e)=>r += n(e)), t.data.forEach((e)=>r += n(e));\n    let i = 0, o = e.data;\n    const s = e.width - 1, a = e.height - 1;\n    for(let e = 0; e < s; e++)for(let t = 0; t < a; t++){\n        const n = e + 1, r = t + 1;\n        o[e][t] === o[n][t] && o[n][t] === o[e][r] && o[n][t] === o[n][r] && (i += 3);\n    }\n    const c = (e)=>{\n        const t = [\n            !0,\n            !1,\n            !0,\n            !0,\n            !0,\n            !1,\n            !0\n        ], n = [\n            !1,\n            !1,\n            !1,\n            !1\n        ], r = [\n            ...t,\n            ...n\n        ], i = [\n            ...n,\n            ...t\n        ];\n        let o = 0;\n        for(let t = 0; t < e.length; t++)qp(e, r, t) && (o += 40), qp(e, i, t) && (o += 40);\n        return o;\n    };\n    let l = 0;\n    for (const t of e.data)l += c(t);\n    for (const e of t.data)l += c(e);\n    let d = 0;\n    e.rectRead(0, 1 / 0, (e, t)=>d += t ? 1 : 0);\n    const u = d / (e.height * e.width) * 100, h = 10 * Math.floor(Math.abs(u - 50) / 5);\n    return r + i + l + h;\n}\nfunction sg(e, t = \"raw\", n = {}) {\n    const r = void 0 !== n.ecc ? n.ecc : \"medium\";\n    !function(e) {\n        if (!Gp.includes(e)) throw new Error(`Invalid error correction mode=${e}. Expected: ${Gp}`);\n    }(r);\n    const i = void 0 !== n.encoding ? n.encoding : function(e) {\n        let t = \"numeric\";\n        for (let n of e)if (!Qp.alphabet.numeric.has(n) && (t = \"alphanumeric\", !Qp.alphabet.alphanumerc.has(n))) return \"byte\";\n        return t;\n    }(e);\n    !function(e) {\n        if (!Zp.includes(e)) throw new Error(`Encoding: invalid mode=${e}. Expected: ${Zp}`);\n        if (\"kanji\" === e || \"eci\" === e) throw new Error(`Encoding: ${e} is not supported (yet?).`);\n    }(i), void 0 !== n.mask && function(e) {\n        if (![\n            0,\n            1,\n            2,\n            3,\n            4,\n            5,\n            6,\n            7\n        ].includes(e) || !eg[e]) throw new Error(`Invalid mask=${e}. Expected number [0..7]`);\n    }(n.mask);\n    let o, s = n.version, a = new Error(\"Unknown error\");\n    if (void 0 !== s) !function(e) {\n        if (!Number.isSafeInteger(e) || e < 1 || e > 40) throw new Error(`Invalid version=${e}. Expected number [1..40]`);\n    }(s), o = rg(s, r, e, i);\n    else for(let t = 1; t <= 40; t++)try {\n        o = rg(t, r, e, i), s = t;\n        break;\n    } catch (e) {\n        a = e;\n    }\n    if (!s || !o) throw a;\n    let c = function(e, t, n, r) {\n        if (void 0 === r) {\n            const i = function() {\n                let e, t = 1 / 0;\n                return {\n                    add (n, r) {\n                        n >= t || (e = r, t = n);\n                    },\n                    get: ()=>e,\n                    score: ()=>t\n                };\n            }();\n            for(let r = 0; r < eg.length; r++)i.add(og(ig(e, t, n, r, !0)), r);\n            r = i.get();\n        }\n        if (void 0 === r) throw new Error(\"Cannot find mask\");\n        return ig(e, t, n, r);\n    }(s, r, o, n.mask);\n    c.assertDrawn();\n    const l = void 0 === n.border ? 2 : n.border;\n    if (!Number.isSafeInteger(l)) throw new Error(\"Wrong border type=\" + typeof l);\n    if (c = c.border(l, !1), void 0 !== n.scale && (c = c.scale(n.scale)), \"raw\" === t) return c.data;\n    if (\"ascii\" === t) return c.toASCII();\n    if (\"svg\" === t) return c.toSVG();\n    if (\"gif\" === t) return c.toGIF();\n    if (\"term\" === t) return c.toTerm();\n    throw new Error(`Unknown output: ${t}`);\n}\nconst ag = {\n    DESKTOP: \"Desktop\",\n    MOBILE: \"Mobile\",\n    META_MASK_MOBILE_APP: \"MetaMask mobile app\",\n    SCAN_TO_CONNECT: \"Scan to connect and sign with\",\n    CONNECT_WITH_EXTENSION: \"Connect With MetaMask Extension\",\n    INSTALL_MODAL: {\n        TRUSTED_BY_USERS: \"Trusted by over 30 million users to buy, store, send and swap crypto securely\",\n        LEADING_CRYPTO_WALLET: \"The leading crypto wallet & gateway to blockchain apps built on Ethereum Mainnet, Polygon, Optimism, and many other networks\",\n        CONTROL_DIGITAL_INTERACTIONS: \"Puts you in control of your digital interactions by making power of cryptography more accessible\",\n        INSTALL_META_MASK_EXTENSION: \"Install MetaMask Extension\"\n    },\n    PENDING_MODAL: {\n        OPEN_META_MASK_SELECT_CODE: \"Please open the MetaMask wallet app and select the code on the screen OR disconnect\",\n        OPEN_META_MASK_CONTINUE: \"Open the MetaMask app to continue with your session.\",\n        NUMBER_AFTER_OPEN_NOTICE: \"If a number doesn't appear after opening MetaMask, please click disconnect and re-scan the QRCode.\",\n        DISCONNECT: \"Disconnect\"\n    },\n    SELECT_MODAL: {\n        CRYPTO_TAKE_CONTROL_TEXT: \"Take control of your crypto and explore the blockchain with the wallet trusted by over 30 million people worldwide\"\n    },\n    META_MASK_MODAL: {\n        ADDRESS_COPIED: \"Address copied to clipboard!\",\n        DISCONNECT: \"Disconnect\",\n        ACTIVE_NETWORK: \"Active Network\"\n    }\n};\nclass cg {\n    constructor(e){\n        var t;\n        this.translations = ag, this.supportedLocales = [\n            \"es\",\n            \"fr\",\n            \"he\",\n            \"it\",\n            \"pt\",\n            \"tr\"\n        ], this.baseUrl = null !== (t = null == e ? void 0 : e.baseUrl) && void 0 !== t ? t : \"https://raw.githubusercontent.com/MetaMask/metamask-sdk/refs/heads/gh-pages/locales\";\n    }\n    getBrowserLanguage() {\n        if ((navigator.languages || [\n            navigator.language\n        ]).some((e)=>e.toLowerCase().startsWith(\"en\"))) return \"en\";\n        const e = navigator.language.toLowerCase().split(\"-\")[0];\n        return this.supportedLocales.includes(e) ? e : \"en\";\n    }\n    async init(e) {\n        const t = this.getBrowserLanguage() || e.fallbackLng;\n        await this.loadTranslations(t);\n    }\n    async loadTranslations(e) {\n        const t = e.split(\"-\")[0];\n        if (\"en\" !== t && this.supportedLocales.includes(t)) try {\n            const e = `${this.baseUrl}/${t}.json`, n = await fetch(e);\n            if (!n.ok) throw new Error(`HTTP error! status: ${n.status}`);\n            this.translations = await n.json();\n        } catch (e) {\n            console.warn(`❌ Failed to load ${t} translations, falling back to English:`, e), this.translations = ag;\n        }\n        else this.translations = ag;\n    }\n    t(e) {\n        return this.getNestedTranslation(e, this.translations) || e;\n    }\n    getNestedTranslation(e, t) {\n        const n = e.split(\".\");\n        let r = t;\n        for (const e of n){\n            if (\"object\" != typeof r) return \"\";\n            r = r[e];\n        }\n        return \"string\" == typeof r ? r : \"\";\n    }\n}\nvar lg;\n!function(e) {\n    e.SDK_MODAL_VIEWED = \"sdk_modal_viewed\", e.SDK_MODAL_BUTTON_CLICKED = \"sdk_modal_button_clicked\", e.SDK_MODAL_TOGGLE_CHANGED = \"sdk_modal_toggle_changed\";\n}(lg || (lg = {}));\nconst dg = class {\n    constructor(e){\n        uf(this, e), this.close = Vf(this, \"close\", 7), this.startDesktopOnboarding = Vf(this, \"startDesktopOnboarding\", 7), this.trackAnalytics = Vf(this, \"trackAnalytics\", 7), this.link = void 0, this.sdkVersion = void 0, this.preferDesktop = void 0, this.tab = 1, this.isDefaultTab = !0, this.translationsLoaded = !1, this.onClose = this.onClose.bind(this), this.onStartDesktopOnboardingHandler = this.onStartDesktopOnboardingHandler.bind(this), this.setTab = this.setTab.bind(this), this.render = this.render.bind(this), this.setTab(this.preferDesktop ? 1 : 2), this.i18nInstance = new cg;\n    }\n    componentDidLoad() {\n        this.trackAnalytics.emit({\n            event: lg.SDK_MODAL_VIEWED,\n            params: {\n                extensionInstalled: !1,\n                tab: 1 === this.tab ? \"desktop\" : \"mobile\"\n            }\n        });\n    }\n    async connectedCallback() {\n        await this.i18nInstance.init({\n            fallbackLng: \"en\"\n        }), this.translationsLoaded = !0;\n    }\n    updatePreferDesktop(e) {\n        e ? this.setTab(1) : this.setTab(2);\n    }\n    onClose(e = !1) {\n        this.close.emit({\n            shouldTerminate: e\n        });\n    }\n    onStartDesktopOnboardingHandler() {\n        this.trackAnalytics.emit({\n            event: lg.SDK_MODAL_BUTTON_CLICKED,\n            params: {\n                button_type: \"install_extension\",\n                tab: \"desktop\"\n            }\n        }), this.startDesktopOnboarding.emit();\n    }\n    setTab(e, t = !1) {\n        t && this.trackAnalytics.emit({\n            event: lg.SDK_MODAL_TOGGLE_CHANGED,\n            params: {\n                toggle: 1 === this.tab ? \"desktop_to_mobile\" : \"mobile_to_desktop\"\n            }\n        }), this.tab = e, this.isDefaultTab = !1;\n    }\n    render() {\n        if (!this.translationsLoaded) return null;\n        const e = (e)=>this.i18nInstance.t(e), t = this.isDefaultTab ? this.preferDesktop ? 1 : 2 : this.tab, n = sg(this.link, \"svg\", {\n            ecc: \"medium\",\n            scale: 2\n        });\n        return Kf(Lp, {\n            className: \"install-model\"\n        }, Kf(\"div\", {\n            class: \"backdrop\",\n            onClick: ()=>this.onClose(!0)\n        }), Kf(\"div\", {\n            class: \"modal\"\n        }, Kf(\"div\", {\n            class: \"closeButtonContainer\"\n        }, Kf(\"div\", {\n            class: \"right\"\n        }, Kf(\"span\", {\n            class: \"closeButton\",\n            onClick: ()=>this.onClose(!0)\n        }, Kf(Kp, null)))), Kf(\"div\", {\n            class: \"logoContainer\"\n        }, Kf(jp, null)), Kf(\"div\", null, Kf(\"div\", {\n            class: \"tabcontainer\"\n        }, Kf(\"div\", {\n            class: \"flexContainer\"\n        }, Kf(\"div\", {\n            onClick: ()=>this.setTab(1, !0),\n            class: \"tab flexItem \" + (1 === t ? \"tabactive\" : \"\")\n        }, e(\"DESKTOP\")), Kf(\"div\", {\n            onClick: ()=>this.setTab(2, !0),\n            class: \"tab flexItem \" + (2 === t ? \"tabactive\" : \"\")\n        }, e(\"MOBILE\")))), Kf(\"div\", {\n            style: {\n                display: 1 === t ? \"none\" : \"block\"\n            }\n        }, Kf(\"div\", {\n            class: \"flexContainer\"\n        }, Kf(\"div\", {\n            class: \"flexItem\",\n            style: {\n                textAlign: \"center\",\n                marginTop: \"4\"\n            }\n        }, n && Kf(\"div\", {\n            id: \"sdk-mm-qrcode\",\n            class: \"center\",\n            innerHTML: n\n        }), Kf(\"div\", {\n            class: \"connectMobileText\"\n        }, e(\"SCAN_TO_CONNECT\"), \" \", Kf(\"br\", null), Kf(\"span\", {\n            class: \"blue\"\n        }, Kf(\"b\", null, e(\"META_MASK_MOBILE_APP\"))))))), Kf(\"div\", {\n            style: {\n                display: 2 === t ? \"none\" : \"block\"\n            }\n        }, Kf(\"div\", {\n            class: \"item\"\n        }, Kf(Op, {\n            Icon: Np,\n            text: e(\"INSTALL_MODAL.TRUSTED_BY_USERS\")\n        })), Kf(\"div\", {\n            class: \"item\"\n        }, Kf(Op, {\n            Icon: Tp,\n            text: e(\"INSTALL_MODAL.LEADING_CRYPTO_WALLET\")\n        })), Kf(\"div\", {\n            class: \"item\"\n        }, Kf(Op, {\n            Icon: Dp,\n            text: e(\"INSTALL_MODAL.CONTROL_DIGITAL_INTERACTIONS\")\n        })), Kf(\"button\", {\n            class: \"button\",\n            onClick: ()=>this.onStartDesktopOnboardingHandler()\n        }, Kf($p, null), Kf(\"span\", {\n            class: \"installExtensionText\"\n        }, e(\"INSTALL_MODAL.INSTALL_META_MASK_EXTENSION\"))))), Kf(Bp, {\n            version: this.sdkVersion\n        })));\n    }\n    get el() {\n        return qf(this);\n    }\n    static get watchers() {\n        return {\n            preferDesktop: [\n                \"updatePreferDesktop\"\n            ]\n        };\n    }\n};\ndg.style = \".flexContainer {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    flex-direction: row;\\n}\\n\\n.flexItem {\\n    flex: 1;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.flexItem11 {\\n    flex: 11;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.flexItem1 {\\n    flex: 1;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.tab {\\n    padding: 8px;\\n    cursor: pointer;\\n    background-color: #F2F4F6;\\n    font-size: 12px;\\n    text-align: center;\\n    color: #24292E;\\n}\\n\\n.tabcontainer {\\n    padding: 4px;\\n    background-color: #F2F4F6;\\n    border-radius: 8px;\\n    margin-bottom: 30px;\\n    margin-top: 30px;\\n}\\n\\n.tabactive {\\n    background-color: white;\\n    -webkit-transition: background-color 300ms linear;\\n    -ms-transition: background-color 300ms linear;\\n    transition: background-color 300ms linear;\\n    border-radius: 8px;\\n}\\n\\n.item {\\n    font-size: 12px;\\n    margin-bottom: 16px;\\n    border-radius: 8px;\\n    padding: 10px;\\n    border: 2px #F2F4F6 solid;\\n    color: #24292E;\\n}\\n\\n.extensionLabel {\\n    font-style: normal;\\n    font-weight: bold;\\n    font-size: 14px;\\n    text-align: cetner;\\n    color: #24272A;\\n}\\n\\n.notice {\\n    font-size: 12px;\\n    margin-left: 10px;\\n    margin-right: 10px;\\n    color: grey;\\n}\\n\\n.button {\\n    margin-top: 41.5px;\\n    margin-bottom: 20px;\\n    width: 100%;\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: center;\\n    align-items: center;\\n    padding: 12px 20px;\\n    background: #037DD6;\\n    border-radius: 32px;\\n    color: white;\\n    border: 0;\\n    font-size: 14px;\\n    cursor: pointer;\\n}\\n\\n.backdrop {\\n    visibility: visible;\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    width: 100%;\\n    z-index: 99998;\\n    background: rgba(0, 0, 0, 0.87);\\n    opacity: 0.3;\\n}\\n\\n.modal {\\n    visibility: visible;\\n    position: fixed;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n    z-index: 99999;\\n    background: white;\\n    padding: 20px;\\n    border-radius: 8px;\\n    top: 50%;\\n    max-width: 100%;\\n    width: 460px;\\n    min-width: 300px;\\n    box-shadow: rgba(0, 0, 0, 0.2) 0px 11px 15px -7px, rgba(0, 0, 0, 0.14) 0px 24px 38px 3px, rgba(0, 0, 0, 0.12) 0px 9px 46px 8px;\\n    -webkit-font-smoothing: antialiased;\\n}\\n\\n.closeButton {\\n    color: #BBC0C5;\\n    cursor: pointer;\\n}\\n\\n.logoContainer {\\n    margin-left: 24px;\\n    margin-right: 24px;\\n    margin-top: 24px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\\n\\n.connectMobileText {\\n    font-size: 14px;\\n    color: black;\\n    margin-top: 28px;\\n    margin-bottom: 28px;\\n    line-height: 2;\\n}\\n\\n.blue {\\n    color: #037DD6;\\n    font-weight: 700;\\n}\\n\\n.installExtensionText {\\n    margin-left: 10px;\\n}\\n\\n.center {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.right {\\n    display: flex;\\n    align-items: center;\\n    justify-content: right;\\n}\\n\\n#sdk-mm-qrcode {\\n    svg {\\n        width: 50%;\\n    }\\n}\";\nconst ug = class {\n    constructor(e){\n        uf(this, e), this.close = Vf(this, \"close\", 7), this.disconnect = Vf(this, \"disconnect\", 7), this.updateOTPValue = Vf(this, \"updateOTPValue\", 7), this.displayOTP = void 0, this.sdkVersion = void 0, this.otpCode = void 0, this.translationsLoaded = !1, this.i18nInstance = new cg;\n    }\n    async connectedCallback() {\n        await this.i18nInstance.init({\n            fallbackLng: \"en\"\n        }), this.translationsLoaded = !0;\n    }\n    onClose() {\n        this.close.emit();\n    }\n    onDisconnect() {\n        this.disconnect.emit();\n    }\n    onUpdateOTPValueHandler(e) {\n        this.updateOTPValue.emit({\n            otpValue: e\n        });\n    }\n    disconnectedCallback() {\n        this.onClose();\n    }\n    render() {\n        var e;\n        if (!this.translationsLoaded) return null;\n        const t = null === (e = this.displayOTP) || void 0 === e || e, n = this.sdkVersion, r = (e)=>this.i18nInstance.t(e);\n        return Kf(Lp, {\n            className: \"pending-modal\"\n        }, Kf(\"div\", {\n            class: \"backdrop\",\n            onClick: ()=>this.onClose()\n        }), Kf(\"div\", {\n            class: \"modal\"\n        }, Kf(\"div\", {\n            class: \"closeButtonContainer\"\n        }, Kf(\"div\", {\n            class: \"right\"\n        }, Kf(\"span\", {\n            class: \"closeButton\",\n            onClick: ()=>this.onClose()\n        }, Kf(Kp, null)))), Kf(\"div\", {\n            class: \"logoContainer\"\n        }, Kf(jp, null)), Kf(\"div\", null, Kf(\"div\", {\n            class: \"flexContainer\",\n            style: {\n                flexDirection: \"column\",\n                color: \"black\"\n            }\n        }, Kf(\"div\", {\n            class: \"flexItem\",\n            style: {\n                textAlign: \"center\",\n                marginTop: \"30px\",\n                marginBottom: \"30px\",\n                fontSize: \"16px\"\n            }\n        }, r(t ? \"PENDING_MODAL.OPEN_META_MASK_SELECT_CODE\" : \"PENDING_MODAL.OPEN_META_MASK_CONTINUE\")), Kf(\"div\", {\n            id: \"sdk-mm-otp-value\",\n            style: {\n                padding: \"10px\",\n                fontSize: \"32px\",\n                display: this.otpCode ? \"block\" : \"none\"\n            }\n        }, this.otpCode), t && Kf(\"div\", {\n            class: \"notice\"\n        }, \"* \", r(\"PENDING_MODAL.NUMBER_AFTER_OPEN_NOTICE\"))), Kf(\"div\", {\n            style: {\n                marginTop: \"20px\"\n            }\n        }, Kf(\"button\", {\n            class: \"button blue\",\n            style: {\n                marginTop: \"5px\",\n                color: \"#0376C9\",\n                borderColor: \"#0376C9\",\n                borderWidth: \"1px\",\n                borderStyle: \"solid\",\n                backgroundColor: \"white\"\n            },\n            onClick: ()=>this.onDisconnect()\n        }, r(\"PENDING_MODAL.DISCONNECT\")))), Kf(Bp, {\n            version: n\n        })));\n    }\n    get el() {\n        return qf(this);\n    }\n};\nug.style = \".flexContainer {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    flex-direction: row;\\n}\\n\\n.flexItem {\\n    flex: 1;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.flexItem11 {\\n    flex: 11;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.flexItem1 {\\n    flex: 1;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.tab {\\n    padding: 8px;\\n    cursor: pointer;\\n    background-color: #F2F4F6;\\n    font-size: 12px;\\n    text-align: center;\\n    color: #24292E;\\n}\\n\\n.tabcontainer {\\n    padding: 4px;\\n    background-color: #F2F4F6;\\n    border-radius: 8px;\\n    margin-bottom: 30px;\\n    margin-top: 30px;\\n}\\n\\n.tabactive {\\n    background-color: white;\\n    -webkit-transition: background-color 300ms linear;\\n    -ms-transition: background-color 300ms linear;\\n    transition: background-color 300ms linear;\\n    border-radius: 8px;\\n}\\n\\n.item {\\n    font-size: 12px;\\n    margin-bottom: 16px;\\n    border-radius: 8px;\\n    padding: 10px;\\n    border: 2px #F2F4F6 solid;\\n    color: #24292E;\\n}\\n\\n.extensionLabel {\\n    font-style: normal;\\n    font-weight: bold;\\n    font-size: 14px;\\n    text-align: cetner;\\n    color: #24272A;\\n}\\n\\n.notice {\\n    font-size: 12px;\\n    margin-left: 10px;\\n    margin-right: 10px;\\n    color: grey;\\n}\\n\\n.button {\\n    margin-top: 41.5px;\\n    margin-bottom: 20px;\\n    width: 100%;\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: center;\\n    align-items: center;\\n    padding: 12px 20px;\\n    background: #037DD6;\\n    border-radius: 32px;\\n    color: white;\\n    border: 0;\\n    font-size: 14px;\\n    cursor: pointer;\\n}\\n\\n.backdrop {\\n    visibility: visible;\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    width: 100%;\\n    z-index: 99998;\\n    background: rgba(0, 0, 0, 0.87);\\n    opacity: 0.3;\\n}\\n\\n.modal {\\n    visibility: visible;\\n    position: fixed;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n    z-index: 99999;\\n    background: white;\\n    padding: 20px;\\n    border-radius: 8px;\\n    top: 50%;\\n    max-width: 100%;\\n    width: 460px;\\n    min-width: 300px;\\n    box-shadow: rgba(0, 0, 0, 0.2) 0px 11px 15px -7px, rgba(0, 0, 0, 0.14) 0px 24px 38px 3px, rgba(0, 0, 0, 0.12) 0px 9px 46px 8px;\\n    -webkit-font-smoothing: antialiased;\\n}\\n\\n.closeButton {\\n    color: #BBC0C5;\\n    cursor: pointer;\\n}\\n\\n.logoContainer {\\n    margin-left: 24px;\\n    margin-right: 24px;\\n    margin-top: 24px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\\n\\n.connectMobileText {\\n    font-size: 14px;\\n    color: black;\\n    margin-top: 28px;\\n    margin-bottom: 28px;\\n    line-height: 2;\\n}\\n\\n.blue {\\n    color: #037DD6;\\n    font-weight: 700;\\n}\\n\\n.installExtensionText {\\n    margin-left: 10px;\\n}\\n\\n.center {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.right {\\n    display: flex;\\n    align-items: center;\\n    justify-content: right;\\n}\\n\\n#sdk-mm-qrcode {\\n    svg {\\n        width: 50%;\\n    }\\n}\";\nconst hg = ()=>Kf(\"svg\", {\n        width: \"21\",\n        height: \"15\",\n        viewBox: \"0 0 21 15\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, Kf(\"path\", {\n        d: \"M14.1364 14.9851C13.5909 14.9851 13.2273 14.5851 13.2273 13.9851C13.2273 13.3851 13.5909 12.9851 14.1364 12.9851C16.6818 12.9851 18.6818 10.7851 18.6818 7.98508C18.6818 5.18508 16.6818 2.98508 14.1364 2.98508C11.5909 2.98508 9.59091 5.18508 9.59091 7.98508C9.59091 8.58508 9.22727 8.98508 8.68182 8.98508C8.13636 8.98508 7.77273 8.58508 7.77273 7.98508C7.77273 4.08508 10.5909 0.985077 14.1364 0.985077C17.6818 0.985077 20.5 4.08508 20.5 7.98508C20.5 11.8851 17.6818 14.9851 14.1364 14.9851ZM6.68182 14.7851C3.22727 14.7851 0.5 11.6851 0.5 7.98508C0.5 4.28508 3.22727 1.18508 6.68182 1.18508C7.22727 1.18508 7.59091 1.58508 7.59091 2.18508C7.59091 2.78508 7.22727 3.18508 6.68182 3.18508C4.22727 3.18508 2.31818 5.38508 2.31818 7.98508C2.31818 10.5851 4.22727 12.7851 6.68182 12.7851C9.13636 12.7851 11.0455 10.6851 11.0455 7.98508C11.0455 7.38508 11.4091 6.98508 11.9545 6.98508C12.5 6.98508 12.8636 7.38508 12.8636 7.98508C12.7727 11.6851 10.0455 14.7851 6.68182 14.7851Z\",\n        fill: \"white\"\n    })), fg = ()=>Kf(\"svg\", {\n        width: \"400\",\n        height: \"300\",\n        viewBox: \"0 0 467 300\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, Kf(\"path\", {\n        d: \"M312.387 280.629C312.549 280.583 312.247 280.735 312.387 280.629L339.678 260.425C340.088 260.118 340.132 259.156 340.07 258.647C340.008 258.138 339.573 258.257 339.106 258.084L311.712 247.455C311.292 247.301 311.308 247.402 310.939 247.673C310.569 247.944 310.356 248.21 310.356 248.672L310.459 279.504C310.461 280.025 311.163 280.619 311.614 280.847C311.913 280.996 312.072 280.718 312.387 280.629ZM336.204 259.736L312.979 276.292L313.439 251.139L336.204 259.736Z\",\n        fill: \"url(#paint0_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M324.639 260.342C324.358 259.547 323.485 258.91 322.707 259.215C319.6 260.432 318.17 262.313 317.287 264.066C316.482 265.665 316.197 267.482 314.188 268.269C312.178 269.055 310.763 268.663 309.162 268.007C307.406 267.287 305.504 266.182 302.397 267.399C299.289 268.616 297.859 270.497 296.976 272.25C296.171 273.849 295.697 274.886 293.685 275.673C291.675 276.459 290.261 276.067 288.659 275.411C286.903 274.691 284.999 273.587 281.894 274.803C278.789 276.019 277.549 278.681 276.666 280.434C275.861 282.034 275.386 283.07 273.374 283.857C272.596 284.161 271.931 285.055 272.211 285.849C272.492 286.644 273.365 287.281 274.143 286.977C277.25 285.76 278.68 283.879 279.563 282.125C280.368 280.526 280.65 278.71 282.662 277.923C284.672 277.136 286.087 277.528 287.688 278.184C289.444 278.904 291.348 280.009 294.453 278.793C297.561 277.576 298.991 275.695 299.874 273.941C300.679 272.342 301.153 271.306 303.165 270.519C305.175 269.732 306.589 270.124 308.191 270.78C309.947 271.5 311.849 272.605 314.956 271.388C318.063 270.172 319.301 267.511 320.184 265.757C320.989 264.158 321.466 263.121 323.476 262.335C324.254 262.032 324.919 261.137 324.639 260.342Z\",\n        fill: \"url(#paint1_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M389.034 111.124C388.968 112.406 387.342 113.113 386.324 113.549C384.297 114.419 382.089 114.493 379.942 114.5C376.607 114.509 373.215 114.163 369.89 113.976C366.712 113.798 363.156 113.311 360.03 114.232C357.705 114.919 355.667 116.762 353.452 117.739C351.129 118.765 348.957 119.198 346.489 119.687C335.569 121.85 323.587 120.825 312.656 119.977C311.92 119.92 312.539 118.997 313.237 118.981C313.207 118.815 313.001 118.394 313.045 118.201C313.086 118.029 312.781 117.586 312.853 117.421C312.67 117.198 313.316 117.427 313.626 117.204C315.912 115.557 318.721 114.79 321.363 115.041C324.677 115.355 327.293 116.04 330.641 115.781C334.392 115.491 338.125 114.787 341.857 114.312C345.142 113.892 349.09 113.941 352.106 112.28C352.916 111.834 353.137 111.262 353.269 110.287C353.331 109.828 353.672 108.969 353.658 108.511C353.629 107.529 354.191 107.886 355.013 107.298C356.857 105.981 358.274 105.516 360.428 105.784C362.841 106.083 365.264 107.273 367.578 107.953C370.761 108.888 374.328 108.646 377.631 108.477C380.517 108.329 383.141 107.901 385.944 108.653C387.013 108.941 389.104 109.745 389.034 111.124Z\",\n        fill: \"url(#paint2_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M278.118 85.4414C280.313 83.8186 283.302 83.9 285.853 83.2728C290.501 82.127 295.644 78.4476 300.549 79.1524C301.299 79.2595 300.904 81.0355 300.159 80.9295C300.131 80.9256 300.187 80.9333 300.159 80.9295C300.089 81.0185 299.516 81.1051 299.385 81.1463C294.999 82.515 292.895 87.5083 289.126 89.8598C287.799 90.688 286.771 90.8351 285.258 90.9441C283.515 91.0691 280.964 90.5775 279.269 90.1219C277.15 89.5532 275.965 87.034 278.118 85.4414Z\",\n        fill: \"url(#paint3_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M122.567 166.093C113.597 172.832 104.535 179.836 99.517 190.092C98.5342 192.099 97.519 195.019 97.9533 197.204C98.9699 202.316 105.76 203.049 110.691 201.96C113.468 201.347 116.325 199.231 115.921 196.319C115.576 193.81 113.158 192.986 112.072 190.73C110.779 188.04 112.35 184.97 114.218 182.62C128.134 165.099 150.074 157.394 171.093 151.607C175.385 150.425 180.897 147.69 180.581 143.099C180.372 140.072 177.118 137.683 174.221 137.383C171.324 137.082 168.481 138.773 165.715 139.776C158.416 142.419 151.17 143.799 143.489 143.526C136.865 143.29 130.976 143.316 129.562 150.781C128.138 158.276 129.53 160.863 122.567 166.093Z\",\n        fill: \"url(#paint4_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M79.1056 153.531C60.3932 164.378 43.7478 178.354 32.8214 197.415C30.3313 201.76 27.9216 206.554 27.1821 211.512C26.4448 216.47 27.7591 222.525 30.8133 226.337C34.908 231.446 41.6938 232.915 48.1811 233.125C50.7248 233.208 53.0035 233.066 55.3316 231.947C57.6602 230.83 59.7548 228.359 59.5978 225.742C59.3303 221.315 54.5491 219.665 50.9271 217.34C42.6566 212.037 40.4958 199.493 44.2381 190.032C47.9803 180.57 55.8228 173.173 63.2316 166.338C67.229 162.651 71.5194 158.372 76.777 157.522C79.9167 157.015 83.4706 157.589 86.6295 157.252C93.9004 156.479 99.64 151.404 105.588 146.912C115.048 139.765 126.045 134.283 137.501 132.093C141.913 131.248 146.293 130.493 149.682 127.831C151.37 126.507 150.803 123.567 148.726 123.93C138.542 125.713 128.652 131.135 119.142 134.758C105.627 139.914 91.7133 146.223 79.1056 153.531Z\",\n        fill: \"url(#paint5_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M96.3677 117.321C96.0315 116.64 95.2914 116.612 94.6293 116.975C91.9858 118.417 91.5452 120.509 90.9466 122.178C90.4004 123.702 89.3647 124.67 87.6542 125.604C85.9437 126.538 85.0983 126.316 83.5956 125.91C81.9481 125.465 79.8603 125.424 77.2168 126.866C74.5734 128.309 74.1348 130.401 73.5341 132.07C72.9879 133.593 71.9522 134.562 70.2417 135.496C68.5313 136.43 67.6859 136.208 66.1832 135.801C64.5357 135.357 62.2569 134.538 59.6128 135.978C56.9694 137.42 56.5308 139.512 55.9301 141.181C55.3839 142.705 54.5398 144.454 52.8293 145.388C52.1667 145.748 52.1006 146.485 52.439 147.165C52.7752 147.845 53.5153 147.874 54.1773 147.511C56.8208 146.069 57.2594 143.977 57.86 142.307C58.4062 140.784 59.4419 139.815 61.1524 138.881C62.8629 137.948 63.7083 138.17 65.211 138.576C66.8585 139.021 68.9458 139.059 71.5898 137.619C74.2333 136.177 74.6718 134.085 75.2725 132.416C75.8187 130.892 76.8544 129.924 78.5649 128.99C80.2754 128.056 81.1207 128.278 82.6235 128.684C84.2709 129.129 86.5503 129.95 89.1938 128.507C91.8373 127.065 92.2779 124.973 92.8765 123.304C93.4227 121.78 94.2663 120.03 95.9773 119.098C96.6378 118.738 96.7039 118.001 96.3677 117.321Z\",\n        fill: \"#FBC49D\"\n    }), Kf(\"path\", {\n        d: \"M391.827 164.699C392.04 164.639 392.39 164.573 392.6 164.481C393.87 163.921 395.363 162.429 395.893 161.051C396.421 159.673 396.237 158.321 395.712 156.931C394.629 154.061 391.777 152.62 389.155 153.775C386.531 154.931 384.962 158.455 386.042 161.325C387.038 163.963 389.369 165.392 391.827 164.699ZM394.166 157.367C394.529 158.332 394.52 159.751 394.156 160.706C393.792 161.662 393.1 162.534 392.218 162.921C390.398 163.723 388.338 162.878 387.589 160.889C387.226 159.925 387.234 158.506 387.599 157.55C387.963 156.594 388.654 155.723 389.536 155.336C391.356 154.534 393.416 155.376 394.166 157.367Z\",\n        fill: \"#86E29B\"\n    }), Kf(\"path\", {\n        d: \"M62.7198 108.691C64.4912 108.191 66.6152 106.609 67.5596 104.824C68.4273 103.187 68.465 101.455 67.9609 99.7066C67.4547 97.9586 66.0792 96.5141 64.4963 95.6786C62.9135 94.843 61.2077 94.8578 59.4756 95.4255C57.7435 95.9933 56.2768 97.4364 55.409 99.074C53.6185 102.456 55.2032 106.494 58.4723 108.22C60.0142 109.035 61.1315 109.138 62.7198 108.691ZM60.6304 96.7682C61.819 96.4332 63.0232 96.8871 64.1048 97.4571C65.2463 98.0603 66.0495 98.8796 66.4145 100.142C66.7791 101.403 66.4488 103.299 65.8224 104.48C64.5299 106.919 61.2212 107.686 58.8638 106.441C56.5063 105.197 55.8538 101.858 57.1462 99.4185C57.7726 98.2375 58.6059 97.3957 59.8573 96.9862C59.9214 96.9635 60.5631 96.7872 60.6304 96.7682Z\",\n        fill: \"#FFB0EB\"\n    }), Kf(\"path\", {\n        d: \"M77.0217 242.979C75.9542 243.28 75.1664 242.151 74.9029 241.074C74.6394 239.996 75 239.378 76.0676 239.077C77.1351 238.776 78.5053 238.907 78.7688 239.984C79.0323 241.061 78.0893 242.678 77.0217 242.979Z\",\n        fill: \"url(#paint6_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M380.506 184.577C379.439 184.878 378.651 183.749 378.387 182.672C378.124 181.594 378.484 180.976 379.552 180.675C380.619 180.374 381.99 180.505 382.253 181.582C382.517 182.659 381.574 184.276 380.506 184.577Z\",\n        fill: \"url(#paint7_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M348.82 246.969C347.752 247.27 346.382 247.14 346.119 246.063C345.855 244.985 346.798 243.369 347.866 243.068C348.933 242.767 349.721 243.896 349.985 244.973C350.248 246.05 349.888 246.669 348.82 246.969Z\",\n        fill: \"url(#paint8_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M140.419 282.412C139.351 282.713 138.754 282.365 138.491 281.288C138.227 280.21 138.397 278.812 139.464 278.511C140.532 278.21 142.093 279.121 142.357 280.198C142.62 281.275 141.486 282.111 140.419 282.412Z\",\n        fill: \"url(#paint9_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M121.462 101.679C120.395 101.979 119.798 101.631 119.534 100.554C119.271 99.4764 119.44 98.0779 120.508 97.777C121.575 97.4761 123.136 98.3868 123.4 99.4642C123.663 100.542 122.53 101.378 121.462 101.679Z\",\n        fill: \"url(#paint10_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M370.749 159.005C369.682 159.306 368.311 159.175 368.048 158.098C367.784 157.021 368.727 155.404 369.795 155.103C370.863 154.802 371.65 155.931 371.914 157.008C372.177 158.086 371.817 158.704 370.749 159.005Z\",\n        fill: \"url(#paint11_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M384.211 245.345C383.143 245.646 381.773 245.515 381.51 244.438C381.246 243.361 382.189 241.744 383.257 241.443C384.324 241.142 385.112 242.271 385.376 243.348C385.639 244.426 385.278 245.044 384.211 245.345Z\",\n        fill: \"url(#paint12_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M364.771 41.3873C363.063 41.8687 361.337 40.8616 360.915 39.1378C360.493 37.414 361.536 35.6263 363.244 35.1449C364.953 34.6634 366.679 35.6706 367.101 37.3944C367.522 39.1182 366.479 40.9059 364.771 41.3873Z\",\n        fill: \"url(#paint13_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M404.311 77.905C404.602 77.8231 404.875 77.9236 405.084 77.6871C405.437 77.2908 404.814 76.6385 404.703 76.1265L401.277 58.7418C401.149 58.163 400.687 57.5371 400.123 57.3991C399.558 57.2611 398.969 57.3812 398.576 57.835L385.784 73.1179C385.395 73.564 385.199 74.3453 385.393 74.8964C385.585 75.4481 385.978 76.1646 386.548 76.2391L403.538 78.123C403.744 78.1479 404.114 77.9607 404.311 77.905ZM398.948 62.7348L401.811 74.4394L389.841 72.8085L398.948 62.7348Z\",\n        fill: \"#FFB0EB\"\n    }), Kf(\"path\", {\n        d: \"M97.5393 295.311C97.7108 295.263 97.4284 295.461 97.5393 295.311L108.785 280.464C108.975 280.211 108.718 279.972 108.594 279.684C108.47 279.396 108.124 279.917 107.821 279.902L88.5106 278.672C88.2101 278.659 87.895 278.62 87.7374 278.89C87.5798 279.159 87.7755 279.402 87.9283 279.67L96.5753 294.749C96.7102 294.99 97.2696 295.297 97.5393 295.311C97.6283 295.319 97.4556 295.335 97.5393 295.311ZM106.465 281.118L96.9667 292.97L90.6295 280.577L106.465 281.118Z\",\n        fill: \"#86E29B\"\n    }), Kf(\"path\", {\n        d: \"M393.699 108.848C389.518 104.446 414.629 114.366 413.945 120.659C413.259 126.952 401.355 129.102 403.894 123.491C406.042 118.747 400.376 115.876 393.699 108.848Z\",\n        fill: \"#FBC49D\"\n    }), Kf(\"path\", {\n        d: \"M139.414 115.959C139.434 115.953 139.392 115.965 139.414 115.959C141.963 115.2 143.436 111.976 142.717 109.189C142.37 107.839 141.526 107.199 140.408 106.504C139.289 105.808 138.171 105.449 136.933 105.815C135.698 106.182 134.85 107.033 134.222 108.247C133.595 109.461 133.282 111.234 133.63 112.585C133.978 113.935 134.821 114.574 135.94 115.27C137.04 115.952 138.199 116.301 139.414 115.959ZM137.315 107.375C138.222 107.12 139.005 106.994 139.825 107.502C140.661 108.02 140.912 108.618 141.171 109.625C141.708 111.704 140.935 113.834 139.032 114.398C138.11 114.675 137.356 114.791 136.522 114.272C135.686 113.753 135.436 113.155 135.176 112.149C134.917 111.142 134.718 109.714 135.186 108.81C135.654 107.905 136.394 107.649 137.315 107.375C137.329 107.371 137.299 107.38 137.315 107.375Z\",\n        fill: \"#75C4FD\"\n    }), Kf(\"path\", {\n        d: \"M308.981 78.7519C310.052 78.4043 311.158 78.7096 312.265 78.6613C313.655 78.6006 314.936 78.517 316.323 78.3531C319.497 77.9795 322.798 77.4906 325.984 77.3012C329.309 77.1025 332.514 76.8551 335.836 77.0295C338.809 77.1842 342.163 77.3405 345.105 77.7558C352.129 78.7468 359.331 79.0578 366.347 80.1158C372.252 81.008 377.93 82.1319 383.722 83.5644C385.925 84.0054 388.267 85.0754 389.126 85.3792C389.421 85.4833 389.37 85.8347 389.317 86.1595C389.306 86.2271 389.353 86.1146 389.317 86.1595C388.269 87.414 386.564 86.8124 385.259 86.4677C384.406 86.241 381.488 85.9494 381.011 85.9957C380.14 86.0815 379.277 86.014 379.656 87.2114C380.122 88.6824 382.391 89.7375 383.704 90.2419C385.883 91.0803 388.771 91.2561 390.845 92.4015C392.968 92.821 395.425 93.5002 397.022 93.9986C402.83 95.8103 407.806 98.8678 413.033 102.002C415.503 103.482 417.829 104.764 419.973 106.72C421.647 108.248 423.771 109.882 424.595 112.091C425.113 113.482 424.451 115.471 422.848 115.085C420.353 114.488 419.638 111.665 418.227 109.714C415.003 105.251 410.067 102.067 405.118 100.06C402.64 99.0556 399.803 98.729 397.204 98.1176C394.411 97.4613 391.597 97.0442 388.707 97.1736C385.646 97.3097 382.846 97.5534 379.819 98.0078C377.027 98.4264 374.252 98.4441 371.514 97.8441C368.766 97.2421 366.276 96.7553 363.6 95.9021C361.662 95.2848 359.013 94.5583 357.232 93.5247C355.699 92.6339 355.631 91.2381 357.241 90.186C359.87 88.4656 362.778 89.8021 365.546 90.3497C365.561 90.3527 365.532 90.3468 365.546 90.3497C367.858 90.804 369.649 90.098 371.923 89.3884C372.489 89.2128 373.255 89.0482 373.47 88.953C374.383 88.5432 375.895 87.8227 375.407 86.7394C374.868 85.5457 372.659 84.8846 371.55 84.4891C369.74 83.8428 368.053 82.9215 366.147 82.6743C365.654 82.6095 365.109 83.1606 364.6 83.1097C363.36 83.1121 361.769 83.348 360.543 83.418C357.43 83.5916 354.583 83.6228 351.464 83.4719C348.714 83.3377 346.432 82.8542 343.741 82.3102C340.773 81.7101 337.52 81.5879 334.471 81.5839C331.393 81.5811 328.6 81.7214 325.583 82.4181C322.758 83.0702 319.757 83.6198 316.887 84.0326C314.698 84.3481 312.467 84.6054 310.319 84.2137C309.079 83.9871 306.994 83.3394 306.461 81.9635C305.846 80.3659 307.736 79.1556 308.981 78.7519Z\",\n        fill: \"url(#paint14_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M242.269 242.95C242.295 242.947 242.244 242.955 242.269 242.95C244.934 242.606 247.53 241.858 250.2 241.574C253.133 241.264 256.006 240.56 258.906 239.982C263.26 239.117 268.026 238.52 272.254 237.097C274.429 236.365 276.067 235.298 278.251 234.592C280.361 233.909 283.058 233.12 285.216 232.652C289.317 231.764 293.049 231.66 297.016 230.198C301.109 228.69 305.088 226.673 308.819 224.409C312.645 222.086 316.282 219.769 320.622 218.62C322.381 218.154 323.919 218.219 325.65 218.886C327.016 219.413 327.739 220.337 327.196 221.79C326.557 223.504 324.659 224.7 323.131 225.423C320.854 226.5 319.53 227.184 317.134 227.927C314.619 228.707 311.888 229.24 309.395 230.083C308.226 230.947 307.17 232.522 306.105 233.501C303.996 235.441 301.666 237.03 298.945 237.996C292.934 240.129 286.354 238.602 280.183 239.056C279.661 239.095 279.162 239.442 278.635 239.487C275.592 240.135 272.2 240.63 269.156 241.294C264.546 242.299 260.456 243.409 255.808 244.179C251.971 244.814 243.815 245.854 243.815 245.854L242.074 245.505C240.575 245.281 240.751 243.152 242.269 242.95Z\",\n        fill: \"url(#paint15_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M432.985 171.626C438.212 165.465 445.109 153.64 442.906 144.649C442.162 137.999 433.671 132.912 424.963 135.518C420.16 136.957 416.435 142.146 419.724 144.498C420.656 145.164 422.187 145.591 423.391 145.969C434.204 149.375 434.925 162.538 425.069 169.683C421.087 172.569 416.347 174.292 411.914 176.719C400.151 183.162 399.887 196.847 387.7 202.712C382.326 205.298 375.761 206.838 370.297 209.275C359.98 213.88 352.555 221.733 342.241 226.341C337.225 228.584 330.266 231.632 323.483 234.12C321.475 234.855 321.999 237.058 324.056 236.46C324.098 236.449 324.017 236.474 324.056 236.46C329.079 234.971 334.437 233.161 339.331 231.33C352.278 226.48 365.28 220.971 377.43 214.775C401.78 202.367 416.881 190.609 432.985 171.626Z\",\n        fill: \"url(#paint16_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M343.644 241.104C348.002 234.144 357.126 232.455 364.343 231.134C368.176 230.431 372.406 229.878 376.137 228.662C380.691 227.175 384.558 224.095 388.327 221.077C389.452 220.177 391.204 218.466 392.393 217.436C393.185 216.748 393.644 216.026 394.33 215.225C396 213.275 399.599 209.812 401.687 208.16C403.263 206.914 407.779 204.758 408.259 207.986C408.611 210.359 406.379 213.087 404.961 214.747C402.224 217.953 398.998 221.079 395.475 223.243C391.749 225.531 387.701 227.439 383.674 229.051C381.672 229.853 379.519 230.073 377.486 230.785C376.001 231.307 374.486 232.236 373.037 232.866C371.034 233.738 368.99 234.28 367.041 235.38C364.436 236.849 361.782 238.783 359.108 240.105C356.331 241.477 353.823 242.691 350.791 243.27C348.6 243.687 345.501 243.641 343.836 241.884C343.526 241.554 343.389 241.51 343.644 241.104Z\",\n        fill: \"url(#paint17_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M190.163 273.219C222.905 268.849 232.64 262.943 213.962 259.057C195.285 255.172 187.5 262.08 188.434 266.2C189.366 270.32 180.381 271.326 169.286 272.39C158.193 273.454 157.141 276.354 190.163 273.219Z\",\n        fill: \"url(#paint18_linear_1356_14057)\"\n    }), Kf(\"path\", {\n        d: \"M295.952 95.4242L241.395 135.226L251.54 111.77L295.952 95.4242Z\",\n        fill: \"#E17726\",\n        stroke: \"#E17726\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M170.111 95.4242L224.181 135.598L214.522 111.77L170.111 95.4242Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M276.309 187.712L261.793 209.576L292.876 218.014L301.78 188.189L276.309 187.712Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M164.336 188.189L173.186 218.014L204.215 209.576L189.753 187.712L164.336 188.189Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M202.542 150.776L193.908 163.618L224.667 164.998L223.642 132.36L202.542 150.776Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M263.52 150.775L242.097 131.989L241.395 164.998L272.154 163.618L263.52 150.775Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M204.215 209.576L222.832 200.714L206.805 188.402L204.215 209.576Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M243.23 200.714L261.793 209.576L259.257 188.402L243.23 200.714Z\",\n        fill: \"#E27625\",\n        stroke: \"#E27625\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M261.793 209.576L243.23 200.714L244.741 212.601L244.579 217.643L261.793 209.576Z\",\n        fill: \"#D5BFB2\",\n        stroke: \"#D5BFB2\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M204.215 209.576L221.483 217.643L221.375 212.601L222.832 200.714L204.215 209.576Z\",\n        fill: \"#D5BFB2\",\n        stroke: \"#D5BFB2\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M221.807 180.547L206.373 176.09L217.274 171.154L221.807 180.547Z\",\n        fill: \"#233447\",\n        stroke: \"#233447\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M244.255 180.547L248.788 171.154L259.742 176.09L244.255 180.547Z\",\n        fill: \"#233447\",\n        stroke: \"#233447\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M204.215 209.576L206.913 187.712L189.753 188.189L204.215 209.576Z\",\n        fill: \"#CC6228\",\n        stroke: \"#CC6228\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M259.149 187.712L261.793 209.576L276.309 188.189L259.149 187.712Z\",\n        fill: \"#CC6228\",\n        stroke: \"#CC6228\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M272.154 163.618L241.395 164.998L244.255 180.547L248.788 171.154L259.742 176.09L272.154 163.618Z\",\n        fill: \"#CC6228\",\n        stroke: \"#CC6228\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M206.373 176.09L217.274 171.154L221.807 180.547L224.667 164.998L193.908 163.618L206.373 176.09Z\",\n        fill: \"#CC6228\",\n        stroke: \"#CC6228\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M193.908 163.618L206.805 188.402L206.373 176.09L193.908 163.618Z\",\n        fill: \"#E27525\",\n        stroke: \"#E27525\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M259.743 176.09L259.257 188.402L272.154 163.618L259.743 176.09Z\",\n        fill: \"#E27525\",\n        stroke: \"#E27525\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M224.667 164.998L221.807 180.548L225.422 198.909L226.232 174.71L224.667 164.998Z\",\n        fill: \"#E27525\",\n        stroke: \"#E27525\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M241.395 164.998L239.884 174.657L240.64 198.909L244.255 180.548L241.395 164.998Z\",\n        fill: \"#E27525\",\n        stroke: \"#E27525\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M244.255 180.547L240.64 198.909L243.23 200.714L259.257 188.402L259.743 176.09L244.255 180.547Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M206.373 176.09L206.805 188.402L222.832 200.714L225.422 198.909L221.807 180.547L206.373 176.09Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M244.579 217.643L244.741 212.601L243.338 211.434H222.724L221.375 212.601L221.483 217.643L204.215 209.576L210.259 214.459L222.508 222.791H243.5L255.803 214.459L261.793 209.576L244.579 217.643Z\",\n        fill: \"#C0AC9D\",\n        stroke: \"#C0AC9D\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M243.23 200.714L240.64 198.909H225.422L222.832 200.714L221.375 212.601L222.724 211.434H243.338L244.741 212.601L243.23 200.714Z\",\n        fill: \"#161616\",\n        stroke: \"#161616\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M298.272 137.827L302.859 115.856L295.952 95.4242L243.23 133.899L263.52 150.775L292.174 159.001L298.488 151.731L295.736 149.767L300.107 145.84L296.761 143.293L301.132 140.002L298.272 137.827Z\",\n        fill: \"#763E1A\",\n        stroke: \"#763E1A\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M163.203 115.856L167.844 137.827L164.876 140.002L169.301 143.293L165.955 145.84L170.326 149.767L167.574 151.731L173.888 159.001L202.542 150.775L222.832 133.899L170.11 95.4242L163.203 115.856Z\",\n        fill: \"#763E1A\",\n        stroke: \"#763E1A\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M292.175 159.001L263.52 150.775L272.154 163.618L259.257 188.402L276.309 188.189H301.78L292.175 159.001Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M202.542 150.775L173.888 159.001L164.336 188.189H189.753L206.805 188.402L193.908 163.618L202.542 150.775Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"path\", {\n        d: \"M241.395 164.998L243.23 133.9L251.54 111.77H214.522L222.832 133.9L224.667 164.998L225.368 174.763L225.422 198.909H240.64L240.694 174.763L241.395 164.998Z\",\n        fill: \"#F5841F\",\n        stroke: \"#F5841F\",\n        \"stroke-width\": \"0.94513\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\"\n    }), Kf(\"defs\", null, Kf(\"linearGradient\", {\n        id: \"paint0_linear_1356_14057\",\n        x1: \"335.991\",\n        y1: \"250.487\",\n        x2: \"303.873\",\n        y2: \"266.801\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#FFE466\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#FFAFEA\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint1_linear_1356_14057\",\n        x1: \"276.993\",\n        y1: \"303.722\",\n        x2: \"205.254\",\n        y2: \"401.574\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"0.0929\",\n        \"stop-color\": \"#81C2F6\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#F0B8BD\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint2_linear_1356_14057\",\n        x1: \"271.074\",\n        y1: \"119.924\",\n        x2: \"553.077\",\n        y2: \"104.53\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#FFE466\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#FFAFEA\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint3_linear_1356_14057\",\n        x1: \"264.209\",\n        y1: \"91.0943\",\n        x2: \"357.834\",\n        y2: \"72.8792\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#FFE466\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#FFAFEA\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint4_linear_1356_14057\",\n        x1: \"212.46\",\n        y1: \"121.997\",\n        x2: \"92.6119\",\n        y2: \"183.406\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#FFE466\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#FFAFEA\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint5_linear_1356_14057\",\n        x1: \"23.0498\",\n        y1: \"204.411\",\n        x2: \"161.86\",\n        y2: \"163.003\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"0.0929\",\n        \"stop-color\": \"#81C2F6\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#F0B8BD\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint6_linear_1356_14057\",\n        x1: \"78.8647\",\n        y1: \"240.375\",\n        x2: \"74.9655\",\n        y2: \"241.328\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#75C3FC\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint7_linear_1356_14057\",\n        x1: \"382.349\",\n        y1: \"181.971\",\n        x2: \"378.45\",\n        y2: \"182.925\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#75C3FC\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint8_linear_1356_14057\",\n        x1: \"349.889\",\n        y1: \"244.583\",\n        x2: \"345.99\",\n        y2: \"245.537\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#75C3FC\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint9_linear_1356_14057\",\n        x1: \"142.262\",\n        y1: \"279.808\",\n        x2: \"138.362\",\n        y2: \"280.762\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#75C3FC\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint10_linear_1356_14057\",\n        x1: \"123.305\",\n        y1: \"99.0746\",\n        x2: \"119.406\",\n        y2: \"100.028\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#75C3FC\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint11_linear_1356_14057\",\n        x1: \"371.818\",\n        y1: \"156.617\",\n        x2: \"367.919\",\n        y2: \"157.571\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#75C3FC\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint12_linear_1356_14057\",\n        x1: \"385.281\",\n        y1: \"242.958\",\n        x2: \"381.382\",\n        y2: \"243.911\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#75C3FC\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint13_linear_1356_14057\",\n        x1: \"367.125\",\n        y1: \"37.5052\",\n        x2: \"360.843\",\n        y2: \"38.8076\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#75C3FC\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint14_linear_1356_14057\",\n        x1: \"300.182\",\n        y1: \"91.321\",\n        x2: \"479.464\",\n        y2: \"104.041\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#FFE466\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#FFAFEA\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint15_linear_1356_14057\",\n        x1: \"363.434\",\n        y1: \"201.232\",\n        x2: \"102.977\",\n        y2: \"302.269\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#FFE466\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#FFAFEA\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint16_linear_1356_14057\",\n        x1: \"447.962\",\n        y1: \"165.159\",\n        x2: \"313.049\",\n        y2: \"197.95\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"0.0929\",\n        \"stop-color\": \"#81C2F6\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#F0B8BD\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint17_linear_1356_14057\",\n        x1: \"410.211\",\n        y1: \"215.859\",\n        x2: \"341.378\",\n        y2: \"232.788\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#75C3FC\"\n    }), Kf(\"stop\", {\n        offset: \"0.0929\",\n        \"stop-color\": \"#81C2F6\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#F0B8BD\"\n    })), Kf(\"linearGradient\", {\n        id: \"paint18_linear_1356_14057\",\n        x1: \"222.282\",\n        y1: \"258.986\",\n        x2: \"162.257\",\n        y2: \"273.774\",\n        gradientUnits: \"userSpaceOnUse\"\n    }, Kf(\"stop\", {\n        \"stop-color\": \"#FFE466\"\n    }), Kf(\"stop\", {\n        offset: \"1\",\n        \"stop-color\": \"#FFAFEA\"\n    })))), pg = class {\n    constructor(e){\n        uf(this, e), this.close = Vf(this, \"close\", 7), this.connectWithExtension = Vf(this, \"connectWithExtension\", 7), this.link = void 0, this.sdkVersion = void 0, this.preferDesktop = void 0, this.tab = 1, this.isDefaultTab = !0, this.translationsLoaded = !1, this.i18nInstance = new cg, this.setTab(this.preferDesktop ? 1 : 2);\n    }\n    async connectedCallback() {\n        await this.i18nInstance.init({\n            fallbackLng: \"en\"\n        }), this.translationsLoaded = !0;\n    }\n    onClose(e = !1) {\n        this.close.emit({\n            shouldTerminate: e\n        });\n    }\n    connectWithExtensionHandler() {\n        this.connectWithExtension.emit();\n    }\n    setTab(e) {\n        this.tab = e, this.isDefaultTab = !1;\n    }\n    disconnectedCallback() {\n        this.onClose();\n    }\n    updatePreferDesktop(e) {\n        e ? this.setTab(1) : this.setTab(2);\n    }\n    render() {\n        if (!this.translationsLoaded) return null;\n        const e = (e)=>this.i18nInstance.t(e), t = this.sdkVersion, n = this.isDefaultTab ? this.preferDesktop ? 1 : 2 : this.tab, r = sg(this.link, \"svg\", {\n            ecc: \"medium\",\n            scale: 2\n        });\n        return Kf(Lp, {\n            className: \"select-modal\"\n        }, Kf(\"div\", {\n            class: \"backdrop\",\n            onClick: ()=>this.onClose(!0)\n        }), Kf(\"div\", {\n            class: \"modal\"\n        }, Kf(\"div\", {\n            class: \"closeButtonContainer\"\n        }, Kf(\"div\", {\n            class: \"right\"\n        }, Kf(\"span\", {\n            class: \"closeButton\",\n            onClick: ()=>this.onClose(!0)\n        }, Kf(Kp, null)))), Kf(\"div\", {\n            class: \"logoContainer\"\n        }, Kf(jp, null)), Kf(\"div\", null, Kf(\"div\", {\n            class: \"tabcontainer\"\n        }, Kf(\"div\", {\n            class: \"flexContainer\"\n        }, Kf(\"div\", {\n            onClick: ()=>this.setTab(1),\n            class: \"tab flexItem \" + (1 === n ? \"tabactive\" : \"\")\n        }, e(\"DESKTOP\")), Kf(\"div\", {\n            onClick: ()=>this.setTab(2),\n            class: \"tab flexItem \" + (2 === n ? \"tabactive\" : \"\")\n        }, e(\"MOBILE\")))), Kf(\"div\", {\n            style: {\n                display: 1 === n ? \"none\" : \"block\"\n            }\n        }, Kf(\"div\", {\n            class: \"flexContainer\"\n        }, Kf(\"div\", {\n            class: \"flexItem\",\n            style: {\n                textAlign: \"center\",\n                marginTop: \"4\"\n            }\n        }, Kf(\"div\", {\n            class: \"center\",\n            id: \"sdk-mm-qrcode\",\n            innerHTML: r\n        }), Kf(\"div\", {\n            class: \"connectMobileText\"\n        }, e(\"SCAN_TO_CONNECT\"), Kf(\"br\", null), Kf(\"span\", {\n            class: \"blue\"\n        }, Kf(\"b\", null, e(\"META_MASK_MOBILE_APP\"))))))), Kf(\"div\", {\n            style: {\n                display: 2 === n ? \"none\" : \"block\"\n            }\n        }, Kf(\"div\", {\n            style: {\n                display: \"flex\",\n                justifyContent: \"center\",\n                height: \"300\",\n                marginTop: \"-20\"\n            }\n        }, Kf(fg, null)), Kf(\"div\", {\n            class: \"extensionLabel\"\n        }, e(\"SELECT_MODAL.CRYPTO_TAKE_CONTROL_TEXT\")), Kf(\"button\", {\n            class: \"button\",\n            onClick: ()=>this.connectWithExtensionHandler()\n        }, Kf(hg, null), Kf(\"span\", {\n            class: \"installExtensionText\"\n        }, e(\"CONNECT_WITH_EXTENSION\"))))), Kf(Bp, {\n            version: t\n        })));\n    }\n    get el() {\n        return qf(this);\n    }\n    static get watchers() {\n        return {\n            preferDesktop: [\n                \"updatePreferDesktop\"\n            ]\n        };\n    }\n};\npg.style = \".flexContainer {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    flex-direction: row;\\n}\\n\\n.flexItem {\\n    flex: 1;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.flexItem11 {\\n    flex: 11;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.flexItem1 {\\n    flex: 1;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.tab {\\n    padding: 8px;\\n    cursor: pointer;\\n    background-color: #F2F4F6;\\n    font-size: 12px;\\n    text-align: center;\\n    color: #24292E;\\n}\\n\\n.tabcontainer {\\n    padding: 4px;\\n    background-color: #F2F4F6;\\n    border-radius: 8px;\\n    margin-bottom: 30px;\\n    margin-top: 30px;\\n}\\n\\n.tabactive {\\n    background-color: white;\\n    -webkit-transition: background-color 300ms linear;\\n    -ms-transition: background-color 300ms linear;\\n    transition: background-color 300ms linear;\\n    border-radius: 8px;\\n}\\n\\n.item {\\n    font-size: 12px;\\n    margin-bottom: 16px;\\n    border-radius: 8px;\\n    padding: 10px;\\n    border: 2px #F2F4F6 solid;\\n    color: #24292E;\\n}\\n\\n.extensionLabel {\\n    font-style: normal;\\n    font-weight: bold;\\n    font-size: 14px;\\n    text-align: cetner;\\n    color: #24272A;\\n}\\n\\n.notice {\\n    font-size: 12px;\\n    margin-left: 10px;\\n    margin-right: 10px;\\n    color: grey;\\n}\\n\\n.button {\\n    margin-top: 41.5px;\\n    margin-bottom: 20px;\\n    width: 100%;\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: center;\\n    align-items: center;\\n    padding: 12px 20px;\\n    background: #037DD6;\\n    border-radius: 32px;\\n    color: white;\\n    border: 0;\\n    font-size: 14px;\\n    cursor: pointer;\\n}\\n\\n.backdrop {\\n    visibility: visible;\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    bottom: 0;\\n    width: 100%;\\n    z-index: 99998;\\n    background: rgba(0, 0, 0, 0.87);\\n    opacity: 0.3;\\n}\\n\\n.modal {\\n    visibility: visible;\\n    position: fixed;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n    z-index: 99999;\\n    background: white;\\n    padding: 20px;\\n    border-radius: 8px;\\n    top: 50%;\\n    max-width: 100%;\\n    width: 460px;\\n    min-width: 300px;\\n    box-shadow: rgba(0, 0, 0, 0.2) 0px 11px 15px -7px, rgba(0, 0, 0, 0.14) 0px 24px 38px 3px, rgba(0, 0, 0, 0.12) 0px 9px 46px 8px;\\n    -webkit-font-smoothing: antialiased;\\n}\\n\\n.closeButton {\\n    color: #BBC0C5;\\n    cursor: pointer;\\n}\\n\\n.logoContainer {\\n    margin-left: 24px;\\n    margin-right: 24px;\\n    margin-top: 24px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\\n\\n.connectMobileText {\\n    font-size: 14px;\\n    color: black;\\n    margin-top: 28px;\\n    margin-bottom: 28px;\\n    line-height: 2;\\n}\\n\\n.blue {\\n    color: #037DD6;\\n    font-weight: 700;\\n}\\n\\n.installExtensionText {\\n    margin-left: 10px;\\n}\\n\\n.center {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n}\\n\\n.right {\\n    display: flex;\\n    align-items: center;\\n    justify-content: right;\\n}\\n\\n#sdk-mm-qrcode {\\n    svg {\\n        width: 50%;\\n    }\\n}\";\nvar gg = Object.freeze({\n    __proto__: null,\n    mm_install_modal: dg,\n    mm_pending_modal: ug,\n    mm_select_modal: pg\n});\n //# sourceMappingURL=metamask-sdk.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@metamask/sdk/dist/browser/es/metamask-sdk.js\n");

/***/ })

};
;
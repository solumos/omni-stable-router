"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/which-typed-array";
exports.ids = ["vendor-chunks/which-typed-array"];
exports.modules = {

/***/ "(ssr)/./node_modules/which-typed-array/index.js":
/*!*************************************************!*\
  !*** ./node_modules/which-typed-array/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar forEach = __webpack_require__(/*! for-each */ \"(ssr)/./node_modules/for-each/index.js\");\nvar availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ \"(ssr)/./node_modules/available-typed-arrays/index.js\");\nvar callBind = __webpack_require__(/*! call-bind */ \"(ssr)/./node_modules/call-bind/index.js\");\nvar callBound = __webpack_require__(/*! call-bound */ \"(ssr)/./node_modules/call-bound/index.js\");\nvar gOPD = __webpack_require__(/*! gopd */ \"(ssr)/./node_modules/gopd/index.js\");\nvar getProto = __webpack_require__(/*! get-proto */ \"(ssr)/./node_modules/get-proto/index.js\");\nvar $toString = callBound(\"Object.prototype.toString\");\nvar hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ \"(ssr)/./node_modules/has-tostringtag/shams.js\")();\nvar g = typeof globalThis === \"undefined\" ? global : globalThis;\nvar typedArrays = availableTypedArrays();\nvar $slice = callBound(\"String.prototype.slice\");\n/** @type {<T = unknown>(array: readonly T[], value: unknown) => number} */ var $indexOf = callBound(\"Array.prototype.indexOf\", true) || function indexOf(array, value) {\n    for(var i = 0; i < array.length; i += 1){\n        if (array[i] === value) {\n            return i;\n        }\n    }\n    return -1;\n};\n/** @typedef {import('./types').Getter} Getter */ /** @type {import('./types').Cache} */ var cache = {\n    __proto__: null\n};\nif (hasToStringTag && gOPD && getProto) {\n    forEach(typedArrays, function(typedArray) {\n        var arr = new g[typedArray]();\n        if (Symbol.toStringTag in arr && getProto) {\n            var proto = getProto(arr);\n            // @ts-expect-error TS won't narrow inside a closure\n            var descriptor = gOPD(proto, Symbol.toStringTag);\n            if (!descriptor && proto) {\n                var superProto = getProto(proto);\n                // @ts-expect-error TS won't narrow inside a closure\n                descriptor = gOPD(superProto, Symbol.toStringTag);\n            }\n            // @ts-expect-error TODO: fix\n            cache[\"$\" + typedArray] = callBind(descriptor.get);\n        }\n    });\n} else {\n    forEach(typedArrays, function(typedArray) {\n        var arr = new g[typedArray]();\n        var fn = arr.slice || arr.set;\n        if (fn) {\n            cache[/** @type {`$${import('.').TypedArrayName}`} */ \"$\" + typedArray] = /** @type {import('./types').BoundSlice | import('./types').BoundSet} */ // @ts-expect-error TODO FIXME\n            callBind(fn);\n        }\n    });\n}\n/** @type {(value: object) => false | import('.').TypedArrayName} */ var tryTypedArrays = function tryAllTypedArrays(value) {\n    /** @type {ReturnType<typeof tryAllTypedArrays>} */ var found = false;\n    forEach(/** @type {Record<`\\$${import('.').TypedArrayName}`, Getter>} */ cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */ function(getter, typedArray) {\n        if (!found) {\n            try {\n                // @ts-expect-error a throw is fine here\n                if (\"$\" + getter(value) === typedArray) {\n                    found = /** @type {import('.').TypedArrayName} */ $slice(typedArray, 1);\n                }\n            } catch (e) {}\n        }\n    });\n    return found;\n};\n/** @type {(value: object) => false | import('.').TypedArrayName} */ var trySlices = function tryAllSlices(value) {\n    /** @type {ReturnType<typeof tryAllSlices>} */ var found = false;\n    forEach(/** @type {Record<`\\$${import('.').TypedArrayName}`, Getter>} */ cache, /** @type {(getter: Getter, name: `\\$${import('.').TypedArrayName}`) => void} */ function(getter, name) {\n        if (!found) {\n            try {\n                // @ts-expect-error a throw is fine here\n                getter(value);\n                found = /** @type {import('.').TypedArrayName} */ $slice(name, 1);\n            } catch (e) {}\n        }\n    });\n    return found;\n};\n/** @type {import('.')} */ module.exports = function whichTypedArray(value) {\n    if (!value || typeof value !== \"object\") {\n        return false;\n    }\n    if (!hasToStringTag) {\n        /** @type {string} */ var tag = $slice($toString(value), 8, -1);\n        if ($indexOf(typedArrays, tag) > -1) {\n            return tag;\n        }\n        if (tag !== \"Object\") {\n            return false;\n        }\n        // node < 0.6 hits here on real Typed Arrays\n        return trySlices(value);\n    }\n    if (!gOPD) {\n        return null;\n    } // unknown engine\n    return tryTypedArrays(value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvd2hpY2gtdHlwZWQtYXJyYXkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUN0QixJQUFJQyx1QkFBdUJELG1CQUFPQSxDQUFDO0FBQ25DLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBQ3ZCLElBQUlHLFlBQVlILG1CQUFPQSxDQUFDO0FBQ3hCLElBQUlJLE9BQU9KLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlLLFdBQVdMLG1CQUFPQSxDQUFDO0FBRXZCLElBQUlNLFlBQVlILFVBQVU7QUFDMUIsSUFBSUksaUJBQWlCUCxtQkFBT0EsQ0FBQztBQUU3QixJQUFJUSxJQUFJLE9BQU9DLGVBQWUsY0FBY0MsU0FBU0Q7QUFDckQsSUFBSUUsY0FBY1Y7QUFFbEIsSUFBSVcsU0FBU1QsVUFBVTtBQUV2Qix5RUFBeUUsR0FDekUsSUFBSVUsV0FBV1YsVUFBVSwyQkFBMkIsU0FBUyxTQUFTVyxRQUFRQyxLQUFLLEVBQUVDLEtBQUs7SUFDekYsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLE1BQU1HLE1BQU0sRUFBRUQsS0FBSyxFQUFHO1FBQ3pDLElBQUlGLEtBQUssQ0FBQ0UsRUFBRSxLQUFLRCxPQUFPO1lBQ3ZCLE9BQU9DO1FBQ1I7SUFDRDtJQUNBLE9BQU8sQ0FBQztBQUNUO0FBRUEsK0NBQStDLEdBQy9DLG9DQUFvQyxHQUNwQyxJQUFJRSxRQUFRO0lBQUVDLFdBQVc7QUFBSztBQUM5QixJQUFJYixrQkFBa0JILFFBQVFDLFVBQVU7SUFDdkNOLFFBQVFZLGFBQWEsU0FBVVUsVUFBVTtRQUN4QyxJQUFJQyxNQUFNLElBQUlkLENBQUMsQ0FBQ2EsV0FBVztRQUMzQixJQUFJRSxPQUFPQyxXQUFXLElBQUlGLE9BQU9qQixVQUFVO1lBQzFDLElBQUlvQixRQUFRcEIsU0FBU2lCO1lBQ3JCLG9EQUFvRDtZQUNwRCxJQUFJSSxhQUFhdEIsS0FBS3FCLE9BQU9GLE9BQU9DLFdBQVc7WUFDL0MsSUFBSSxDQUFDRSxjQUFjRCxPQUFPO2dCQUN6QixJQUFJRSxhQUFhdEIsU0FBU29CO2dCQUMxQixvREFBb0Q7Z0JBQ3BEQyxhQUFhdEIsS0FBS3VCLFlBQVlKLE9BQU9DLFdBQVc7WUFDakQ7WUFDQSw2QkFBNkI7WUFDN0JMLEtBQUssQ0FBQyxNQUFNRSxXQUFXLEdBQUduQixTQUFTd0IsV0FBV0UsR0FBRztRQUNsRDtJQUNEO0FBQ0QsT0FBTztJQUNON0IsUUFBUVksYUFBYSxTQUFVVSxVQUFVO1FBQ3hDLElBQUlDLE1BQU0sSUFBSWQsQ0FBQyxDQUFDYSxXQUFXO1FBQzNCLElBQUlRLEtBQUtQLElBQUlRLEtBQUssSUFBSVIsSUFBSVMsR0FBRztRQUM3QixJQUFJRixJQUFJO1lBQ1BWLEtBQUssQ0FDSiw2Q0FBNkMsR0FBSSxNQUFNRSxXQUN2RCxHQUFHLHNFQUFzRSxHQUN6RSw4QkFBOEI7WUFDOUJuQixTQUFTMkI7UUFFWDtJQUNEO0FBQ0Q7QUFFQSxrRUFBa0UsR0FDbEUsSUFBSUcsaUJBQWlCLFNBQVNDLGtCQUFrQmpCLEtBQUs7SUFDcEQsaURBQWlELEdBQUcsSUFBSWtCLFFBQVE7SUFDaEVuQyxRQUNDLDhEQUE4RCxHQUFJb0IsT0FDbEUsOEVBQThFLEdBQzlFLFNBQVVnQixNQUFNLEVBQUVkLFVBQVU7UUFDM0IsSUFBSSxDQUFDYSxPQUFPO1lBQ1gsSUFBSTtnQkFDSCx3Q0FBd0M7Z0JBQ3hDLElBQUksTUFBTUMsT0FBT25CLFdBQVdLLFlBQVk7b0JBQ3ZDYSxRQUFRLHVDQUF1QyxHQUFJdEIsT0FBT1MsWUFBWTtnQkFDdkU7WUFDRCxFQUFFLE9BQU9lLEdBQUcsQ0FBTztRQUNwQjtJQUNEO0lBRUQsT0FBT0Y7QUFDUjtBQUVBLGtFQUFrRSxHQUNsRSxJQUFJRyxZQUFZLFNBQVNDLGFBQWF0QixLQUFLO0lBQzFDLDRDQUE0QyxHQUFHLElBQUlrQixRQUFRO0lBQzNEbkMsUUFDQyw4REFBOEQsR0FBR29CLE9BQ2pFLDhFQUE4RSxHQUFHLFNBQVVnQixNQUFNLEVBQUVJLElBQUk7UUFDdEcsSUFBSSxDQUFDTCxPQUFPO1lBQ1gsSUFBSTtnQkFDSCx3Q0FBd0M7Z0JBQ3hDQyxPQUFPbkI7Z0JBQ1BrQixRQUFRLHVDQUF1QyxHQUFJdEIsT0FBTzJCLE1BQU07WUFDakUsRUFBRSxPQUFPSCxHQUFHLENBQU87UUFDcEI7SUFDRDtJQUVELE9BQU9GO0FBQ1I7QUFFQSx3QkFBd0IsR0FDeEJNLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxnQkFBZ0IxQixLQUFLO0lBQzlDLElBQUksQ0FBQ0EsU0FBUyxPQUFPQSxVQUFVLFVBQVU7UUFBRSxPQUFPO0lBQU87SUFDekQsSUFBSSxDQUFDVCxnQkFBZ0I7UUFDcEIsbUJBQW1CLEdBQ25CLElBQUlvQyxNQUFNL0IsT0FBT04sVUFBVVUsUUFBUSxHQUFHLENBQUM7UUFDdkMsSUFBSUgsU0FBU0YsYUFBYWdDLE9BQU8sQ0FBQyxHQUFHO1lBQ3BDLE9BQU9BO1FBQ1I7UUFDQSxJQUFJQSxRQUFRLFVBQVU7WUFDckIsT0FBTztRQUNSO1FBQ0EsNENBQTRDO1FBQzVDLE9BQU9OLFVBQVVyQjtJQUNsQjtJQUNBLElBQUksQ0FBQ1osTUFBTTtRQUFFLE9BQU87SUFBTSxFQUFFLGlCQUFpQjtJQUM3QyxPQUFPNEIsZUFBZWhCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvd2hpY2gtdHlwZWQtYXJyYXkvaW5kZXguanM/MjQ5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnZm9yLWVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYm91bmQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnZ2V0LXByb3RvJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG5cbnZhciBnID0gdHlwZW9mIGdsb2JhbFRoaXMgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogZ2xvYmFsVGhpcztcbnZhciB0eXBlZEFycmF5cyA9IGF2YWlsYWJsZVR5cGVkQXJyYXlzKCk7XG5cbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcblxuLyoqIEB0eXBlIHs8VCA9IHVua25vd24+KGFycmF5OiByZWFkb25seSBUW10sIHZhbHVlOiB1bmtub3duKSA9PiBudW1iZXJ9ICovXG52YXIgJGluZGV4T2YgPSBjYWxsQm91bmQoJ0FycmF5LnByb3RvdHlwZS5pbmRleE9mJywgdHJ1ZSkgfHwgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcblx0XHRcdHJldHVybiBpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gLTE7XG59O1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi90eXBlcycpLkdldHRlcn0gR2V0dGVyICovXG4vKiogQHR5cGUge2ltcG9ydCgnLi90eXBlcycpLkNhY2hlfSAqL1xudmFyIGNhY2hlID0geyBfX3Byb3RvX186IG51bGwgfTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnW3R5cGVkQXJyYXldKCk7XG5cdFx0aWYgKFN5bWJvbC50b1N0cmluZ1RhZyBpbiBhcnIgJiYgZ2V0UHJvdG8pIHtcblx0XHRcdHZhciBwcm90byA9IGdldFByb3RvKGFycik7XG5cdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRTIHdvbid0IG5hcnJvdyBpbnNpZGUgYSBjbG9zdXJlXG5cdFx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQocHJvdG8sIFN5bWJvbC50b1N0cmluZ1RhZyk7XG5cdFx0XHRpZiAoIWRlc2NyaXB0b3IgJiYgcHJvdG8pIHtcblx0XHRcdFx0dmFyIHN1cGVyUHJvdG8gPSBnZXRQcm90byhwcm90byk7XG5cdFx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgd29uJ3QgbmFycm93IGluc2lkZSBhIGNsb3N1cmVcblx0XHRcdFx0ZGVzY3JpcHRvciA9IGdPUEQoc3VwZXJQcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRcdH1cblx0XHRcdC8vIEB0cy1leHBlY3QtZXJyb3IgVE9ETzogZml4XG5cdFx0XHRjYWNoZVsnJCcgKyB0eXBlZEFycmF5XSA9IGNhbGxCaW5kKGRlc2NyaXB0b3IuZ2V0KTtcblx0XHR9XG5cdH0pO1xufSBlbHNlIHtcblx0Zm9yRWFjaCh0eXBlZEFycmF5cywgZnVuY3Rpb24gKHR5cGVkQXJyYXkpIHtcblx0XHR2YXIgYXJyID0gbmV3IGdbdHlwZWRBcnJheV0oKTtcblx0XHR2YXIgZm4gPSBhcnIuc2xpY2UgfHwgYXJyLnNldDtcblx0XHRpZiAoZm4pIHtcblx0XHRcdGNhY2hlW1xuXHRcdFx0XHQvKiogQHR5cGUge2AkJHtpbXBvcnQoJy4nKS5UeXBlZEFycmF5TmFtZX1gfSAqLyAoJyQnICsgdHlwZWRBcnJheSlcblx0XHRcdF0gPSAvKiogQHR5cGUge2ltcG9ydCgnLi90eXBlcycpLkJvdW5kU2xpY2UgfCBpbXBvcnQoJy4vdHlwZXMnKS5Cb3VuZFNldH0gKi8gKFxuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE8gRklYTUVcblx0XHRcdFx0Y2FsbEJpbmQoZm4pXG5cdFx0XHQpO1xuXHRcdH1cblx0fSk7XG59XG5cbi8qKiBAdHlwZSB7KHZhbHVlOiBvYmplY3QpID0+IGZhbHNlIHwgaW1wb3J0KCcuJykuVHlwZWRBcnJheU5hbWV9ICovXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHQvKiogQHR5cGUge1JldHVyblR5cGU8dHlwZW9mIHRyeUFsbFR5cGVkQXJyYXlzPn0gKi8gdmFyIGZvdW5kID0gZmFsc2U7XG5cdGZvckVhY2goXG5cdFx0LyoqIEB0eXBlIHtSZWNvcmQ8YFxcJCR7aW1wb3J0KCcuJykuVHlwZWRBcnJheU5hbWV9YCwgR2V0dGVyPn0gKi8gKGNhY2hlKSxcblx0XHQvKiogQHR5cGUgeyhnZXR0ZXI6IEdldHRlciwgbmFtZTogYFxcJCR7aW1wb3J0KCcuJykuVHlwZWRBcnJheU5hbWV9YCkgPT4gdm9pZH0gKi9cblx0XHRmdW5jdGlvbiAoZ2V0dGVyLCB0eXBlZEFycmF5KSB7XG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBhIHRocm93IGlzIGZpbmUgaGVyZVxuXHRcdFx0XHRcdGlmICgnJCcgKyBnZXR0ZXIodmFsdWUpID09PSB0eXBlZEFycmF5KSB7XG5cdFx0XHRcdFx0XHRmb3VuZCA9IC8qKiBAdHlwZSB7aW1wb3J0KCcuJykuVHlwZWRBcnJheU5hbWV9ICovICgkc2xpY2UodHlwZWRBcnJheSwgMSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkgeyAvKiovIH1cblx0XHRcdH1cblx0XHR9XG5cdCk7XG5cdHJldHVybiBmb3VuZDtcbn07XG5cbi8qKiBAdHlwZSB7KHZhbHVlOiBvYmplY3QpID0+IGZhbHNlIHwgaW1wb3J0KCcuJykuVHlwZWRBcnJheU5hbWV9ICovXG52YXIgdHJ5U2xpY2VzID0gZnVuY3Rpb24gdHJ5QWxsU2xpY2VzKHZhbHVlKSB7XG5cdC8qKiBAdHlwZSB7UmV0dXJuVHlwZTx0eXBlb2YgdHJ5QWxsU2xpY2VzPn0gKi8gdmFyIGZvdW5kID0gZmFsc2U7XG5cdGZvckVhY2goXG5cdFx0LyoqIEB0eXBlIHtSZWNvcmQ8YFxcJCR7aW1wb3J0KCcuJykuVHlwZWRBcnJheU5hbWV9YCwgR2V0dGVyPn0gKi8oY2FjaGUpLFxuXHRcdC8qKiBAdHlwZSB7KGdldHRlcjogR2V0dGVyLCBuYW1lOiBgXFwkJHtpbXBvcnQoJy4nKS5UeXBlZEFycmF5TmFtZX1gKSA9PiB2b2lkfSAqLyBmdW5jdGlvbiAoZ2V0dGVyLCBuYW1lKSB7XG5cdFx0XHRpZiAoIWZvdW5kKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gQHRzLWV4cGVjdC1lcnJvciBhIHRocm93IGlzIGZpbmUgaGVyZVxuXHRcdFx0XHRcdGdldHRlcih2YWx1ZSk7XG5cdFx0XHRcdFx0Zm91bmQgPSAvKiogQHR5cGUge2ltcG9ydCgnLicpLlR5cGVkQXJyYXlOYW1lfSAqLyAoJHNsaWNlKG5hbWUsIDEpKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkgeyAvKiovIH1cblx0XHRcdH1cblx0XHR9XG5cdCk7XG5cdHJldHVybiBmb3VuZDtcbn07XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdoaWNoVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHQvKiogQHR5cGUge3N0cmluZ30gKi9cblx0XHR2YXIgdGFnID0gJHNsaWNlKCR0b1N0cmluZyh2YWx1ZSksIDgsIC0xKTtcblx0XHRpZiAoJGluZGV4T2YodHlwZWRBcnJheXMsIHRhZykgPiAtMSkge1xuXHRcdFx0cmV0dXJuIHRhZztcblx0XHR9XG5cdFx0aWYgKHRhZyAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0Ly8gbm9kZSA8IDAuNiBoaXRzIGhlcmUgb24gcmVhbCBUeXBlZCBBcnJheXNcblx0XHRyZXR1cm4gdHJ5U2xpY2VzKHZhbHVlKTtcblx0fVxuXHRpZiAoIWdPUEQpIHsgcmV0dXJuIG51bGw7IH0gLy8gdW5rbm93biBlbmdpbmVcblx0cmV0dXJuIHRyeVR5cGVkQXJyYXlzKHZhbHVlKTtcbn07XG4iXSwibmFtZXMiOlsiZm9yRWFjaCIsInJlcXVpcmUiLCJhdmFpbGFibGVUeXBlZEFycmF5cyIsImNhbGxCaW5kIiwiY2FsbEJvdW5kIiwiZ09QRCIsImdldFByb3RvIiwiJHRvU3RyaW5nIiwiaGFzVG9TdHJpbmdUYWciLCJnIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsInR5cGVkQXJyYXlzIiwiJHNsaWNlIiwiJGluZGV4T2YiLCJpbmRleE9mIiwiYXJyYXkiLCJ2YWx1ZSIsImkiLCJsZW5ndGgiLCJjYWNoZSIsIl9fcHJvdG9fXyIsInR5cGVkQXJyYXkiLCJhcnIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInByb3RvIiwiZGVzY3JpcHRvciIsInN1cGVyUHJvdG8iLCJnZXQiLCJmbiIsInNsaWNlIiwic2V0IiwidHJ5VHlwZWRBcnJheXMiLCJ0cnlBbGxUeXBlZEFycmF5cyIsImZvdW5kIiwiZ2V0dGVyIiwiZSIsInRyeVNsaWNlcyIsInRyeUFsbFNsaWNlcyIsIm5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIiwid2hpY2hUeXBlZEFycmF5IiwidGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/which-typed-array/index.js\n");

/***/ })

};
;
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@walletconnect";
exports.ids = ["vendor-chunks/@walletconnect"];
exports.modules = {

/***/ "(ssr)/./node_modules/@walletconnect/core/dist/index.es.js":
/*!***********************************************************!*\
  !*** ./node_modules/@walletconnect/core/dist/index.es.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CORE_CONTEXT: () => (/* binding */ he),\n/* harmony export */   CORE_DEFAULT: () => (/* binding */ Et),\n/* harmony export */   CORE_PROTOCOL: () => (/* binding */ ze),\n/* harmony export */   CORE_STORAGE_OPTIONS: () => (/* binding */ It),\n/* harmony export */   CORE_STORAGE_PREFIX: () => (/* binding */ B),\n/* harmony export */   CORE_VERSION: () => (/* binding */ Le),\n/* harmony export */   CRYPTO_CLIENT_SEED: () => (/* binding */ ke),\n/* harmony export */   CRYPTO_CONTEXT: () => (/* binding */ Tt),\n/* harmony export */   CRYPTO_JWT_TTL: () => (/* binding */ Ct),\n/* harmony export */   Core: () => (/* binding */ Xo),\n/* harmony export */   Crypto: () => (/* binding */ vi),\n/* harmony export */   ECHO_CONTEXT: () => (/* binding */ Xt),\n/* harmony export */   ECHO_URL: () => (/* binding */ Zt),\n/* harmony export */   EVENTS_CLIENT_API_URL: () => (/* binding */ ii),\n/* harmony export */   EVENTS_STORAGE_CLEANUP_INTERVAL: () => (/* binding */ ti),\n/* harmony export */   EVENTS_STORAGE_CONTEXT: () => (/* binding */ ei),\n/* harmony export */   EVENTS_STORAGE_VERSION: () => (/* binding */ Qt),\n/* harmony export */   EVENT_CLIENT_AUTHENTICATE_ERRORS: () => (/* binding */ sr),\n/* harmony export */   EVENT_CLIENT_AUTHENTICATE_TRACES: () => (/* binding */ ir),\n/* harmony export */   EVENT_CLIENT_CONTEXT: () => (/* binding */ Qs),\n/* harmony export */   EVENT_CLIENT_PAIRING_ERRORS: () => (/* binding */ Y),\n/* harmony export */   EVENT_CLIENT_PAIRING_TRACES: () => (/* binding */ G),\n/* harmony export */   EVENT_CLIENT_SESSION_ERRORS: () => (/* binding */ tr),\n/* harmony export */   EVENT_CLIENT_SESSION_TRACES: () => (/* binding */ er),\n/* harmony export */   EXPIRER_CONTEXT: () => (/* binding */ qt),\n/* harmony export */   EXPIRER_DEFAULT_TTL: () => (/* binding */ Xs),\n/* harmony export */   EXPIRER_EVENTS: () => (/* binding */ M),\n/* harmony export */   EXPIRER_STORAGE_VERSION: () => (/* binding */ Gt),\n/* harmony export */   EchoClient: () => (/* binding */ Mi),\n/* harmony export */   EventClient: () => (/* binding */ Bi),\n/* harmony export */   Expirer: () => (/* binding */ ji),\n/* harmony export */   HISTORY_CONTEXT: () => (/* binding */ Bt),\n/* harmony export */   HISTORY_EVENTS: () => (/* binding */ F),\n/* harmony export */   HISTORY_STORAGE_VERSION: () => (/* binding */ Vt),\n/* harmony export */   JsonRpcHistory: () => (/* binding */ ki),\n/* harmony export */   KEYCHAIN_CONTEXT: () => (/* binding */ Pt),\n/* harmony export */   KEYCHAIN_STORAGE_VERSION: () => (/* binding */ St),\n/* harmony export */   KeyChain: () => (/* binding */ Di),\n/* harmony export */   MESSAGES_CONTEXT: () => (/* binding */ Ot),\n/* harmony export */   MESSAGES_STORAGE_VERSION: () => (/* binding */ Rt),\n/* harmony export */   MESSAGE_DIRECTION: () => (/* binding */ le),\n/* harmony export */   MessageTracker: () => (/* binding */ _i),\n/* harmony export */   PAIRING_CONTEXT: () => (/* binding */ Mt),\n/* harmony export */   PAIRING_DEFAULT_TTL: () => (/* binding */ Js),\n/* harmony export */   PAIRING_EVENTS: () => (/* binding */ re),\n/* harmony export */   PAIRING_RPC_OPTS: () => (/* binding */ se),\n/* harmony export */   PAIRING_STORAGE_VERSION: () => (/* binding */ Kt),\n/* harmony export */   PENDING_SUB_RESOLUTION_TIMEOUT: () => (/* binding */ Ys),\n/* harmony export */   PUBLISHER_CONTEXT: () => (/* binding */ At),\n/* harmony export */   PUBLISHER_DEFAULT_TTL: () => (/* binding */ je),\n/* harmony export */   Pairing: () => (/* binding */ Li),\n/* harmony export */   RELAYER_CONTEXT: () => (/* binding */ $t),\n/* harmony export */   RELAYER_DEFAULT_LOGGER: () => (/* binding */ Nt),\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: () => (/* binding */ xt),\n/* harmony export */   RELAYER_DEFAULT_RELAY_URL: () => (/* binding */ Ue),\n/* harmony export */   RELAYER_EVENTS: () => (/* binding */ C),\n/* harmony export */   RELAYER_PROVIDER_EVENTS: () => (/* binding */ L),\n/* harmony export */   RELAYER_RECONNECT_TIMEOUT: () => (/* binding */ Lt),\n/* harmony export */   RELAYER_SDK_VERSION: () => (/* binding */ _e),\n/* harmony export */   RELAYER_STORAGE_OPTIONS: () => (/* binding */ Gs),\n/* harmony export */   RELAYER_SUBSCRIBER_SUFFIX: () => (/* binding */ zt),\n/* harmony export */   RELAYER_TRANSPORT_CUTOFF: () => (/* binding */ Ws),\n/* harmony export */   Relayer: () => (/* binding */ Si),\n/* harmony export */   STORE_STORAGE_VERSION: () => (/* binding */ kt),\n/* harmony export */   SUBSCRIBER_CONTEXT: () => (/* binding */ Ut),\n/* harmony export */   SUBSCRIBER_DEFAULT_TTL: () => (/* binding */ Hs),\n/* harmony export */   SUBSCRIBER_EVENTS: () => (/* binding */ $),\n/* harmony export */   SUBSCRIBER_STORAGE_VERSION: () => (/* binding */ Ft),\n/* harmony export */   Store: () => (/* binding */ zi),\n/* harmony export */   Subscriber: () => (/* binding */ Ti),\n/* harmony export */   TRANSPORT_TYPES: () => (/* binding */ Q),\n/* harmony export */   TRUSTED_VERIFY_URLS: () => (/* binding */ Jt),\n/* harmony export */   VERIFY_CONTEXT: () => (/* binding */ Wt),\n/* harmony export */   VERIFY_SERVER: () => (/* binding */ ue),\n/* harmony export */   VERIFY_SERVER_V3: () => (/* binding */ Yt),\n/* harmony export */   Verify: () => (/* binding */ Ui),\n/* harmony export */   WALLETCONNECT_CLIENT_ID: () => (/* binding */ jt),\n/* harmony export */   WALLETCONNECT_LINK_MODE_APPS: () => (/* binding */ Fe),\n/* harmony export */   \"default\": () => (/* binding */ Te)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/heartbeat */ \"(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js\");\n/* harmony import */ var _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/keyvaluestorage */ \"(ssr)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @walletconnect/types */ \"(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @walletconnect/jsonrpc-ws-connection */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\");\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst ze = \"wc\", Le = 2, he = \"core\", B = `${ze}@2:${he}:`, Et = {\n    name: he,\n    logger: \"error\"\n}, It = {\n    database: \":memory:\"\n}, Tt = \"crypto\", ke = \"client_ed25519_seed\", Ct = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY, Pt = \"keychain\", St = \"0.3\", Ot = \"messages\", Rt = \"0.3\", je = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.SIX_HOURS, At = \"publisher\", xt = \"irn\", Nt = \"error\", Ue = \"wss://relay.walletconnect.org\", $t = \"relayer\", C = {\n    message: \"relayer_message\",\n    message_ack: \"relayer_message_ack\",\n    connect: \"relayer_connect\",\n    disconnect: \"relayer_disconnect\",\n    error: \"relayer_error\",\n    connection_stalled: \"relayer_connection_stalled\",\n    transport_closed: \"relayer_transport_closed\",\n    publish: \"relayer_publish\"\n}, zt = \"_subscription\", L = {\n    payload: \"payload\",\n    connect: \"connect\",\n    disconnect: \"disconnect\",\n    error: \"error\"\n}, Lt = .1, Gs = {\n    database: \":memory:\"\n}, _e = \"2.21.1\", Ws = 1e4, Q = {\n    link_mode: \"link_mode\",\n    relay: \"relay\"\n}, le = {\n    inbound: \"inbound\",\n    outbound: \"outbound\"\n}, kt = \"0.3\", jt = \"WALLETCONNECT_CLIENT_ID\", Fe = \"WALLETCONNECT_LINK_MODE_APPS\", $ = {\n    created: \"subscription_created\",\n    deleted: \"subscription_deleted\",\n    expired: \"subscription_expired\",\n    disabled: \"subscription_disabled\",\n    sync: \"subscription_sync\",\n    resubscribed: \"subscription_resubscribed\"\n}, Hs = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS, Ut = \"subscription\", Ft = \"0.3\", Ys = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS * 1e3, Mt = \"pairing\", Kt = \"0.3\", Js = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS, se = {\n    wc_pairingDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 1e3\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 1001\n        }\n    },\n    wc_pairingPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1002\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS,\n            prompt: !1,\n            tag: 1003\n        }\n    },\n    unregistered_method: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY,\n            prompt: !1,\n            tag: 0\n        }\n    }\n}, re = {\n    create: \"pairing_create\",\n    expire: \"pairing_expire\",\n    delete: \"pairing_delete\",\n    ping: \"pairing_ping\"\n}, F = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Bt = \"history\", Vt = \"0.3\", qt = \"expirer\", M = {\n    created: \"expirer_created\",\n    deleted: \"expirer_deleted\",\n    expired: \"expirer_expired\",\n    sync: \"expirer_sync\"\n}, Gt = \"0.3\", Xs = _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_DAY, Wt = \"verify-api\", Zs = \"https://verify.walletconnect.com\", Ht = \"https://verify.walletconnect.org\", ue = Ht, Yt = `${ue}/v3`, Jt = [\n    Zs,\n    Ht\n], Xt = \"echo\", Zt = \"https://echo.walletconnect.com\", Qs = \"event-client\", G = {\n    pairing_started: \"pairing_started\",\n    pairing_uri_validation_success: \"pairing_uri_validation_success\",\n    pairing_uri_not_expired: \"pairing_uri_not_expired\",\n    store_new_pairing: \"store_new_pairing\",\n    subscribing_pairing_topic: \"subscribing_pairing_topic\",\n    subscribe_pairing_topic_success: \"subscribe_pairing_topic_success\",\n    existing_pairing: \"existing_pairing\",\n    pairing_not_expired: \"pairing_not_expired\",\n    emit_inactive_pairing: \"emit_inactive_pairing\",\n    emit_session_proposal: \"emit_session_proposal\",\n    subscribing_to_pairing_topic: \"subscribing_to_pairing_topic\"\n}, Y = {\n    no_wss_connection: \"no_wss_connection\",\n    no_internet_connection: \"no_internet_connection\",\n    malformed_pairing_uri: \"malformed_pairing_uri\",\n    active_pairing_already_exists: \"active_pairing_already_exists\",\n    subscribe_pairing_topic_failure: \"subscribe_pairing_topic_failure\",\n    pairing_expired: \"pairing_expired\",\n    proposal_expired: \"proposal_expired\",\n    proposal_listener_not_found: \"proposal_listener_not_found\"\n}, er = {\n    session_approve_started: \"session_approve_started\",\n    proposal_not_expired: \"proposal_not_expired\",\n    session_namespaces_validation_success: \"session_namespaces_validation_success\",\n    create_session_topic: \"create_session_topic\",\n    subscribing_session_topic: \"subscribing_session_topic\",\n    subscribe_session_topic_success: \"subscribe_session_topic_success\",\n    publishing_session_approve: \"publishing_session_approve\",\n    session_approve_publish_success: \"session_approve_publish_success\",\n    store_session: \"store_session\",\n    publishing_session_settle: \"publishing_session_settle\",\n    session_settle_publish_success: \"session_settle_publish_success\"\n}, tr = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    proposal_expired: \"proposal_expired\",\n    subscribe_session_topic_failure: \"subscribe_session_topic_failure\",\n    session_approve_publish_failure: \"session_approve_publish_failure\",\n    session_settle_publish_failure: \"session_settle_publish_failure\",\n    session_approve_namespace_validation_failure: \"session_approve_namespace_validation_failure\",\n    proposal_not_found: \"proposal_not_found\"\n}, ir = {\n    authenticated_session_approve_started: \"authenticated_session_approve_started\",\n    authenticated_session_not_expired: \"authenticated_session_not_expired\",\n    chains_caip2_compliant: \"chains_caip2_compliant\",\n    chains_evm_compliant: \"chains_evm_compliant\",\n    create_authenticated_session_topic: \"create_authenticated_session_topic\",\n    cacaos_verified: \"cacaos_verified\",\n    store_authenticated_session: \"store_authenticated_session\",\n    subscribing_authenticated_session_topic: \"subscribing_authenticated_session_topic\",\n    subscribe_authenticated_session_topic_success: \"subscribe_authenticated_session_topic_success\",\n    publishing_authenticated_session_approve: \"publishing_authenticated_session_approve\",\n    authenticated_session_approve_publish_success: \"authenticated_session_approve_publish_success\"\n}, sr = {\n    no_internet_connection: \"no_internet_connection\",\n    no_wss_connection: \"no_wss_connection\",\n    missing_session_authenticate_request: \"missing_session_authenticate_request\",\n    session_authenticate_request_expired: \"session_authenticate_request_expired\",\n    chains_caip2_compliant_failure: \"chains_caip2_compliant_failure\",\n    chains_evm_compliant_failure: \"chains_evm_compliant_failure\",\n    invalid_cacao: \"invalid_cacao\",\n    subscribe_authenticated_session_topic_failure: \"subscribe_authenticated_session_topic_failure\",\n    authenticated_session_approve_publish_failure: \"authenticated_session_approve_publish_failure\",\n    authenticated_session_pending_request_not_found: \"authenticated_session_pending_request_not_found\"\n}, Qt = .1, ei = \"event-client\", ti = 86400, ii = \"https://pulse.walletconnect.org/batch\";\nfunction rr(r, e) {\n    if (r.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var t = new Uint8Array(256), i = 0; i < t.length; i++)t[i] = 255;\n    for(var s = 0; s < r.length; s++){\n        var n = r.charAt(s), o = n.charCodeAt(0);\n        if (t[o] !== 255) throw new TypeError(n + \" is ambiguous\");\n        t[o] = s;\n    }\n    var a = r.length, c = r.charAt(0), h = Math.log(a) / Math.log(256), l = Math.log(256) / Math.log(a);\n    function d(u) {\n        if (u instanceof Uint8Array || (ArrayBuffer.isView(u) ? u = new Uint8Array(u.buffer, u.byteOffset, u.byteLength) : Array.isArray(u) && (u = Uint8Array.from(u))), !(u instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (u.length === 0) return \"\";\n        for(var b = 0, x = 0, I = 0, D = u.length; I !== D && u[I] === 0;)I++, b++;\n        for(var j = (D - I) * l + 1 >>> 0, T = new Uint8Array(j); I !== D;){\n            for(var q = u[I], J = 0, K = j - 1; (q !== 0 || J < x) && K !== -1; K--, J++)q += 256 * T[K] >>> 0, T[K] = q % a >>> 0, q = q / a >>> 0;\n            if (q !== 0) throw new Error(\"Non-zero carry\");\n            x = J, I++;\n        }\n        for(var H = j - x; H !== j && T[H] === 0;)H++;\n        for(var me = c.repeat(b); H < j; ++H)me += r.charAt(T[H]);\n        return me;\n    }\n    function g(u) {\n        if (typeof u != \"string\") throw new TypeError(\"Expected String\");\n        if (u.length === 0) return new Uint8Array;\n        var b = 0;\n        if (u[b] !== \" \") {\n            for(var x = 0, I = 0; u[b] === c;)x++, b++;\n            for(var D = (u.length - b) * h + 1 >>> 0, j = new Uint8Array(D); u[b];){\n                var T = t[u.charCodeAt(b)];\n                if (T === 255) return;\n                for(var q = 0, J = D - 1; (T !== 0 || q < I) && J !== -1; J--, q++)T += a * j[J] >>> 0, j[J] = T % 256 >>> 0, T = T / 256 >>> 0;\n                if (T !== 0) throw new Error(\"Non-zero carry\");\n                I = q, b++;\n            }\n            if (u[b] !== \" \") {\n                for(var K = D - I; K !== D && j[K] === 0;)K++;\n                for(var H = new Uint8Array(x + (D - K)), me = x; K !== D;)H[me++] = j[K++];\n                return H;\n            }\n        }\n    }\n    function _(u) {\n        var b = g(u);\n        if (b) return b;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: d,\n        decodeUnsafe: g,\n        decode: _\n    };\n}\nvar nr = rr, or = nr;\nconst si = (r)=>{\n    if (r instanceof Uint8Array && r.constructor.name === \"Uint8Array\") return r;\n    if (r instanceof ArrayBuffer) return new Uint8Array(r);\n    if (ArrayBuffer.isView(r)) return new Uint8Array(r.buffer, r.byteOffset, r.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, ar = (r)=>new TextEncoder().encode(r), cr = (r)=>new TextDecoder().decode(r);\nclass hr {\n    constructor(e, t, i){\n        this.name = e, this.prefix = t, this.baseEncode = i;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass lr {\n    constructor(e, t, i){\n        if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return ri(this, e);\n    }\n}\nclass ur {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return ri(this, e);\n    }\n    decode(e) {\n        const t = e[0], i = this.decoders[t];\n        if (i) return i.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst ri = (r, e)=>new ur({\n        ...r.decoders || {\n            [r.prefix]: r\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass dr {\n    constructor(e, t, i, s){\n        this.name = e, this.prefix = t, this.baseEncode = i, this.baseDecode = s, this.encoder = new hr(e, t, i), this.decoder = new lr(e, t, s);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n}\nconst Ee = ({ name: r, prefix: e, encode: t, decode: i })=>new dr(r, e, t, i), de = ({ prefix: r, name: e, alphabet: t })=>{\n    const { encode: i, decode: s } = or(t, e);\n    return Ee({\n        prefix: r,\n        name: e,\n        encode: i,\n        decode: (n)=>si(s(n))\n    });\n}, gr = (r, e, t, i)=>{\n    const s = {};\n    for(let l = 0; l < e.length; ++l)s[e[l]] = l;\n    let n = r.length;\n    for(; r[n - 1] === \"=\";)--n;\n    const o = new Uint8Array(n * t / 8 | 0);\n    let a = 0, c = 0, h = 0;\n    for(let l = 0; l < n; ++l){\n        const d = s[r[l]];\n        if (d === void 0) throw new SyntaxError(`Non-${i} character`);\n        c = c << t | d, a += t, a >= 8 && (a -= 8, o[h++] = 255 & c >> a);\n    }\n    if (a >= t || 255 & c << 8 - a) throw new SyntaxError(\"Unexpected end of data\");\n    return o;\n}, pr = (r, e, t)=>{\n    const i = e[e.length - 1] === \"=\", s = (1 << t) - 1;\n    let n = \"\", o = 0, a = 0;\n    for(let c = 0; c < r.length; ++c)for(a = a << 8 | r[c], o += 8; o > t;)o -= t, n += e[s & a >> o];\n    if (o && (n += e[s & a << t - o]), i) for(; n.length * t & 7;)n += \"=\";\n    return n;\n}, P = ({ name: r, prefix: e, bitsPerChar: t, alphabet: i })=>Ee({\n        prefix: e,\n        name: r,\n        encode (s) {\n            return pr(s, i, t);\n        },\n        decode (s) {\n            return gr(s, i, t, r);\n        }\n    }), yr = Ee({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (r)=>cr(r),\n    decode: (r)=>ar(r)\n});\nvar br = Object.freeze({\n    __proto__: null,\n    identity: yr\n});\nconst mr = P({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar fr = Object.freeze({\n    __proto__: null,\n    base2: mr\n});\nconst Dr = P({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar vr = Object.freeze({\n    __proto__: null,\n    base8: Dr\n});\nconst wr = de({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar _r = Object.freeze({\n    __proto__: null,\n    base10: wr\n});\nconst Er = P({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Ir = P({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar Tr = Object.freeze({\n    __proto__: null,\n    base16: Er,\n    base16upper: Ir\n});\nconst Cr = P({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), Pr = P({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), Sr = P({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), Or = P({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), Rr = P({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), Ar = P({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), xr = P({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), Nr = P({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), $r = P({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar zr = Object.freeze({\n    __proto__: null,\n    base32: Cr,\n    base32upper: Pr,\n    base32pad: Sr,\n    base32padupper: Or,\n    base32hex: Rr,\n    base32hexupper: Ar,\n    base32hexpad: xr,\n    base32hexpadupper: Nr,\n    base32z: $r\n});\nconst Lr = de({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), kr = de({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar jr = Object.freeze({\n    __proto__: null,\n    base36: Lr,\n    base36upper: kr\n});\nconst Ur = de({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Fr = de({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar Mr = Object.freeze({\n    __proto__: null,\n    base58btc: Ur,\n    base58flickr: Fr\n});\nconst Kr = P({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), Br = P({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), Vr = P({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), qr = P({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Gr = Object.freeze({\n    __proto__: null,\n    base64: Kr,\n    base64pad: Br,\n    base64url: Vr,\n    base64urlpad: qr\n});\nconst ni = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), Wr = ni.reduce((r, e, t)=>(r[t] = e, r), []), Hr = ni.reduce((r, e, t)=>(r[e.codePointAt(0)] = t, r), []);\nfunction Yr(r) {\n    return r.reduce((e, t)=>(e += Wr[t], e), \"\");\n}\nfunction Jr(r) {\n    const e = [];\n    for (const t of r){\n        const i = Hr[t.codePointAt(0)];\n        if (i === void 0) throw new Error(`Non-base256emoji character: ${t}`);\n        e.push(i);\n    }\n    return new Uint8Array(e);\n}\nconst Xr = Ee({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: Yr,\n    decode: Jr\n});\nvar Zr = Object.freeze({\n    __proto__: null,\n    base256emoji: Xr\n}), Qr = ai, oi = 128, en = 127, tn = ~en, sn = Math.pow(2, 31);\nfunction ai(r, e, t) {\n    e = e || [], t = t || 0;\n    for(var i = t; r >= sn;)e[t++] = r & 255 | oi, r /= 128;\n    for(; r & tn;)e[t++] = r & 255 | oi, r >>>= 7;\n    return e[t] = r | 0, ai.bytes = t - i + 1, e;\n}\nvar rn = Me, nn = 128, ci = 127;\nfunction Me(r, i) {\n    var t = 0, i = i || 0, s = 0, n = i, o, a = r.length;\n    do {\n        if (n >= a) throw Me.bytes = 0, new RangeError(\"Could not decode varint\");\n        o = r[n++], t += s < 28 ? (o & ci) << s : (o & ci) * Math.pow(2, s), s += 7;\n    }while (o >= nn);\n    return Me.bytes = n - i, t;\n}\nvar on = Math.pow(2, 7), an = Math.pow(2, 14), cn = Math.pow(2, 21), hn = Math.pow(2, 28), ln = Math.pow(2, 35), un = Math.pow(2, 42), dn = Math.pow(2, 49), gn = Math.pow(2, 56), pn = Math.pow(2, 63), yn = function(r) {\n    return r < on ? 1 : r < an ? 2 : r < cn ? 3 : r < hn ? 4 : r < ln ? 5 : r < un ? 6 : r < dn ? 7 : r < gn ? 8 : r < pn ? 9 : 10;\n}, bn = {\n    encode: Qr,\n    decode: rn,\n    encodingLength: yn\n}, hi = bn;\nconst li = (r, e, t = 0)=>(hi.encode(r, e, t), e), ui = (r)=>hi.encodingLength(r), Ke = (r, e)=>{\n    const t = e.byteLength, i = ui(r), s = i + ui(t), n = new Uint8Array(s + t);\n    return li(r, n, 0), li(t, n, i), n.set(e, s), new mn(r, t, e, n);\n};\nclass mn {\n    constructor(e, t, i, s){\n        this.code = e, this.size = t, this.digest = i, this.bytes = s;\n    }\n}\nconst di = ({ name: r, code: e, encode: t })=>new fn(r, e, t);\nclass fn {\n    constructor(e, t, i){\n        this.name = e, this.code = t, this.encode = i;\n    }\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const t = this.encode(e);\n            return t instanceof Uint8Array ? Ke(this.code, t) : t.then((i)=>Ke(this.code, i));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n}\nconst gi = (r)=>async (e)=>new Uint8Array(await crypto.subtle.digest(r, e)), Dn = di({\n    name: \"sha2-256\",\n    code: 18,\n    encode: gi(\"SHA-256\")\n}), vn = di({\n    name: \"sha2-512\",\n    code: 19,\n    encode: gi(\"SHA-512\")\n});\nvar wn = Object.freeze({\n    __proto__: null,\n    sha256: Dn,\n    sha512: vn\n});\nconst pi = 0, _n = \"identity\", yi = si, En = (r)=>Ke(pi, yi(r)), In = {\n    code: pi,\n    name: _n,\n    encode: yi,\n    digest: En\n};\nvar Tn = Object.freeze({\n    __proto__: null,\n    identity: In\n});\nnew TextEncoder, new TextDecoder;\nconst bi = {\n    ...br,\n    ...fr,\n    ...vr,\n    ..._r,\n    ...Tr,\n    ...zr,\n    ...jr,\n    ...Mr,\n    ...Gr,\n    ...Zr\n};\n({\n    ...wn,\n    ...Tn\n});\nfunction Cn(r = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(r) : new Uint8Array(r);\n}\nfunction mi(r, e, t, i) {\n    return {\n        name: r,\n        prefix: e,\n        encoder: {\n            name: r,\n            prefix: e,\n            encode: t\n        },\n        decoder: {\n            decode: i\n        }\n    };\n}\nconst fi = mi(\"utf8\", \"u\", (r)=>\"u\" + new TextDecoder(\"utf8\").decode(r), (r)=>new TextEncoder().encode(r.substring(1))), Be = mi(\"ascii\", \"a\", (r)=>{\n    let e = \"a\";\n    for(let t = 0; t < r.length; t++)e += String.fromCharCode(r[t]);\n    return e;\n}, (r)=>{\n    r = r.substring(1);\n    const e = Cn(r.length);\n    for(let t = 0; t < r.length; t++)e[t] = r.charCodeAt(t);\n    return e;\n}), Pn = {\n    utf8: fi,\n    \"utf-8\": fi,\n    hex: bi.base16,\n    latin1: Be,\n    ascii: Be,\n    binary: Be,\n    ...bi\n};\nfunction Sn(r, e = \"utf8\") {\n    const t = Pn[e];\n    if (!t) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r, \"utf8\") : t.decoder.decode(`${t.prefix}${r}`);\n}\nvar On = Object.defineProperty, Rn = (r, e, t)=>e in r ? On(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, W = (r, e, t)=>Rn(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Di {\n    constructor(e, t){\n        this.core = e, this.logger = t, W(this, \"keychain\", new Map), W(this, \"name\", Pt), W(this, \"version\", St), W(this, \"initialized\", !1), W(this, \"storagePrefix\", B), W(this, \"init\", async ()=>{\n            if (!this.initialized) {\n                const i = await this.getKeyChain();\n                typeof i < \"u\" && (this.keychain = i), this.initialized = !0;\n            }\n        }), W(this, \"has\", (i)=>(this.isInitialized(), this.keychain.has(i))), W(this, \"set\", async (i, s)=>{\n            this.isInitialized(), this.keychain.set(i, s), await this.persist();\n        }), W(this, \"get\", (i)=>{\n            this.isInitialized();\n            const s = this.keychain.get(i);\n            if (typeof s > \"u\") {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${i}`);\n                throw new Error(n);\n            }\n            return s;\n        }), W(this, \"del\", async (i)=>{\n            this.isInitialized(), this.keychain.delete(i), await this.persist();\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    async setKeyChain(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.mapToObj)(e));\n    }\n    async getKeyChain() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setKeyChain(this.keychain);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar An = Object.defineProperty, xn = (r, e, t)=>e in r ? An(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, S = (r, e, t)=>xn(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass vi {\n    constructor(e, t, i){\n        this.core = e, this.logger = t, S(this, \"name\", Tt), S(this, \"keychain\"), S(this, \"randomSessionIdentifier\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)()), S(this, \"initialized\", !1), S(this, \"init\", async ()=>{\n            this.initialized || (await this.keychain.init(), this.initialized = !0);\n        }), S(this, \"hasKeys\", (s)=>(this.isInitialized(), this.keychain.has(s))), S(this, \"getClientId\", async ()=>{\n            this.isInitialized();\n            const s = await this.getClientSeed(), n = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.generateKeyPair(s);\n            return _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.encodeIss(n.publicKey);\n        }), S(this, \"generateKeyPair\", ()=>{\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateKeyPair)();\n            return this.setPrivateKey(s.publicKey, s.privateKey);\n        }), S(this, \"signJWT\", async (s)=>{\n            this.isInitialized();\n            const n = await this.getClientSeed(), o = _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.generateKeyPair(n), a = this.randomSessionIdentifier, c = Ct;\n            return await _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.signJWT(a, s, c, o);\n        }), S(this, \"generateSharedKey\", (s, n, o)=>{\n            this.isInitialized();\n            const a = this.getPrivateKey(s), c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deriveSymKey)(a, n);\n            return this.setSymKey(c, o);\n        }), S(this, \"setSymKey\", async (s, n)=>{\n            this.isInitialized();\n            const o = n || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashKey)(s);\n            return await this.keychain.set(o, s), o;\n        }), S(this, \"deleteKeyPair\", async (s)=>{\n            this.isInitialized(), await this.keychain.del(s);\n        }), S(this, \"deleteSymKey\", async (s)=>{\n            this.isInitialized(), await this.keychain.del(s);\n        }), S(this, \"encode\", async (s, n, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.validateEncoding)(o), c = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonStringify)(n);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTypeTwoEnvelope)(a)) return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.encodeTypeTwoEnvelope)(c, o?.encoding);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTypeOneEnvelope)(a)) {\n                const g = a.senderPublicKey, _ = a.receiverPublicKey;\n                s = await this.generateSharedKey(g, _);\n            }\n            const h = this.getSymKey(s), { type: l, senderPublicKey: d } = a;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.encrypt)({\n                type: l,\n                symKey: h,\n                message: c,\n                senderPublicKey: d,\n                encoding: o?.encoding\n            });\n        }), S(this, \"decode\", async (s, n, o)=>{\n            this.isInitialized();\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.validateDecoding)(n, o);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTypeTwoEnvelope)(a)) {\n                const c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.decodeTypeTwoEnvelope)(n, o?.encoding);\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonParse)(c);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTypeOneEnvelope)(a)) {\n                const c = a.receiverPublicKey, h = a.senderPublicKey;\n                s = await this.generateSharedKey(c, h);\n            }\n            try {\n                const c = this.getSymKey(s), h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.decrypt)({\n                    symKey: c,\n                    encoded: n,\n                    encoding: o?.encoding\n                });\n                return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_5__.safeJsonParse)(h);\n            } catch (c) {\n                this.logger.error(`Failed to decode message from topic: '${s}', clientId: '${await this.getClientId()}'`), this.logger.error(c);\n            }\n        }), S(this, \"getPayloadType\", (s, n = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.BASE64)=>{\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deserialize)({\n                encoded: s,\n                encoding: n\n            });\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.decodeTypeByte)(o.type);\n        }), S(this, \"getPayloadSenderPublicKey\", (s, n = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.BASE64)=>{\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.deserialize)({\n                encoded: s,\n                encoding: n\n            });\n            return o.senderPublicKey ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_7__.toString)(o.senderPublicKey, _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.BASE16) : void 0;\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.keychain = i || new Di(this.core, this.logger);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async setPrivateKey(e, t) {\n        return await this.keychain.set(e, t), e;\n    }\n    getPrivateKey(e) {\n        return this.keychain.get(e);\n    }\n    async getClientSeed() {\n        let e = \"\";\n        try {\n            e = this.keychain.get(ke);\n        } catch  {\n            e = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)(), await this.keychain.set(ke, e);\n        }\n        return Sn(e, \"base16\");\n    }\n    getSymKey(e) {\n        return this.keychain.get(e);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar Nn = Object.defineProperty, $n = Object.defineProperties, zn = Object.getOwnPropertyDescriptors, wi = Object.getOwnPropertySymbols, Ln = Object.prototype.hasOwnProperty, kn = Object.prototype.propertyIsEnumerable, Ve = (r, e, t)=>e in r ? Nn(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, jn = (r, e)=>{\n    for(var t in e || (e = {}))Ln.call(e, t) && Ve(r, t, e[t]);\n    if (wi) for (var t of wi(e))kn.call(e, t) && Ve(r, t, e[t]);\n    return r;\n}, Un = (r, e)=>$n(r, zn(e)), k = (r, e, t)=>Ve(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass _i extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IMessageTracker {\n    constructor(e, t){\n        super(e, t), this.logger = e, this.core = t, k(this, \"messages\", new Map), k(this, \"messagesWithoutClientAck\", new Map), k(this, \"name\", Ot), k(this, \"version\", Rt), k(this, \"initialized\", !1), k(this, \"storagePrefix\", B), k(this, \"init\", async ()=>{\n            if (!this.initialized) {\n                this.logger.trace(\"Initialized\");\n                try {\n                    const i = await this.getRelayerMessages();\n                    typeof i < \"u\" && (this.messages = i);\n                    const s = await this.getRelayerMessagesWithoutClientAck();\n                    typeof s < \"u\" && (this.messagesWithoutClientAck = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                        type: \"method\",\n                        method: \"restore\",\n                        size: this.messages.size\n                    });\n                } catch (i) {\n                    this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i);\n                } finally{\n                    this.initialized = !0;\n                }\n            }\n        }), k(this, \"set\", async (i, s, n)=>{\n            this.isInitialized();\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(s);\n            let a = this.messages.get(i);\n            if (typeof a > \"u\" && (a = {}), typeof a[o] < \"u\") return o;\n            if (a[o] = s, this.messages.set(i, a), n === le.inbound) {\n                const c = this.messagesWithoutClientAck.get(i) || {};\n                this.messagesWithoutClientAck.set(i, Un(jn({}, c), {\n                    [o]: s\n                }));\n            }\n            return await this.persist(), o;\n        }), k(this, \"get\", (i)=>{\n            this.isInitialized();\n            let s = this.messages.get(i);\n            return typeof s > \"u\" && (s = {}), s;\n        }), k(this, \"getWithoutAck\", (i)=>{\n            this.isInitialized();\n            const s = {};\n            for (const n of i){\n                const o = this.messagesWithoutClientAck.get(n) || {};\n                s[n] = Object.values(o);\n            }\n            return s;\n        }), k(this, \"has\", (i, s)=>{\n            this.isInitialized();\n            const n = this.get(i), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(s);\n            return typeof n[o] < \"u\";\n        }), k(this, \"ack\", async (i, s)=>{\n            this.isInitialized();\n            const n = this.messagesWithoutClientAck.get(i);\n            if (typeof n > \"u\") return;\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(s);\n            delete n[o], Object.keys(n).length === 0 ? this.messagesWithoutClientAck.delete(i) : this.messagesWithoutClientAck.set(i, n), await this.persist();\n        }), k(this, \"del\", async (i)=>{\n            this.isInitialized(), this.messages.delete(i), this.messagesWithoutClientAck.delete(i), await this.persist();\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e, this.name), this.core = t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get storageKeyWithoutClientAck() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name + \"_withoutClientAck\";\n    }\n    async setRelayerMessages(e) {\n        await this.core.storage.setItem(this.storageKey, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.mapToObj)(e));\n    }\n    async setRelayerMessagesWithoutClientAck(e) {\n        await this.core.storage.setItem(this.storageKeyWithoutClientAck, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.mapToObj)(e));\n    }\n    async getRelayerMessages() {\n        const e = await this.core.storage.getItem(this.storageKey);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.objToMap)(e) : void 0;\n    }\n    async getRelayerMessagesWithoutClientAck() {\n        const e = await this.core.storage.getItem(this.storageKeyWithoutClientAck);\n        return typeof e < \"u\" ? (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.objToMap)(e) : void 0;\n    }\n    async persist() {\n        await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar Fn = Object.defineProperty, Mn = Object.defineProperties, Kn = Object.getOwnPropertyDescriptors, Ei = Object.getOwnPropertySymbols, Bn = Object.prototype.hasOwnProperty, Vn = Object.prototype.propertyIsEnumerable, qe = (r, e, t)=>e in r ? Fn(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Ie = (r, e)=>{\n    for(var t in e || (e = {}))Bn.call(e, t) && qe(r, t, e[t]);\n    if (Ei) for (var t of Ei(e))Vn.call(e, t) && qe(r, t, e[t]);\n    return r;\n}, Ge = (r, e)=>Mn(r, Kn(e)), V = (r, e, t)=>qe(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass qn extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IPublisher {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, V(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), V(this, \"name\", At), V(this, \"queue\", new Map), V(this, \"publishTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_MINUTE)), V(this, \"initialPublishTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), V(this, \"needsTransportRestart\", !1), V(this, \"publish\", async (i, s, n)=>{\n            var o;\n            this.logger.debug(\"Publishing Payload\"), this.logger.trace({\n                type: \"method\",\n                method: \"publish\",\n                params: {\n                    topic: i,\n                    message: s,\n                    opts: n\n                }\n            });\n            const a = n?.ttl || je, c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(n), h = n?.prompt || !1, l = n?.tag || 0, d = n?.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString(), g = {\n                topic: i,\n                message: s,\n                opts: {\n                    ttl: a,\n                    relay: c,\n                    prompt: h,\n                    tag: l,\n                    id: d,\n                    attestation: n?.attestation,\n                    tvf: n?.tvf\n                }\n            }, _ = `Failed to publish payload, please try again. id:${d} tag:${l}`;\n            try {\n                const u = new Promise(async (b)=>{\n                    const x = ({ id: D })=>{\n                        g.opts.id === D && (this.removeRequestFromQueue(D), this.relayer.events.removeListener(C.publish, x), b(g));\n                    };\n                    this.relayer.events.on(C.publish, x);\n                    const I = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(new Promise((D, j)=>{\n                        this.rpcPublish({\n                            topic: i,\n                            message: s,\n                            ttl: a,\n                            prompt: h,\n                            tag: l,\n                            id: d,\n                            attestation: n?.attestation,\n                            tvf: n?.tvf\n                        }).then(D).catch((T)=>{\n                            this.logger.warn(T, T?.message), j(T);\n                        });\n                    }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d} tag:${l}`);\n                    try {\n                        await I, this.events.removeListener(C.publish, x);\n                    } catch (D) {\n                        this.queue.set(d, Ge(Ie({}, g), {\n                            attempt: 1\n                        })), this.logger.warn(D, D?.message);\n                    }\n                });\n                this.logger.trace({\n                    type: \"method\",\n                    method: \"publish\",\n                    params: {\n                        id: d,\n                        topic: i,\n                        message: s,\n                        opts: n\n                    }\n                }), await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(u, this.publishTimeout, _);\n            } catch (u) {\n                if (this.logger.debug(\"Failed to Publish Payload\"), this.logger.error(u), (o = n?.internal) != null && o.throwOnFailedPublish) throw u;\n            } finally{\n                this.queue.delete(d);\n            }\n        }), V(this, \"on\", (i, s)=>{\n            this.events.on(i, s);\n        }), V(this, \"once\", (i, s)=>{\n            this.events.once(i, s);\n        }), V(this, \"off\", (i, s)=>{\n            this.events.off(i, s);\n        }), V(this, \"removeListener\", (i, s)=>{\n            this.events.removeListener(i, s);\n        }), this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.registerEventListeners();\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async rpcPublish(e) {\n        var t, i, s, n;\n        const { topic: o, message: a, ttl: c = je, prompt: h, tag: l, id: d, attestation: g, tvf: _ } = e, u = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)().protocol).publish,\n            params: Ie({\n                topic: o,\n                message: a,\n                ttl: c,\n                prompt: h,\n                tag: l,\n                attestation: g\n            }, _),\n            id: d\n        };\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)((t = u.params) == null ? void 0 : t.prompt) && ((i = u.params) == null || delete i.prompt), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)((s = u.params) == null ? void 0 : s.tag) && ((n = u.params) == null || delete n.tag), this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"message\",\n            direction: \"outgoing\",\n            request: u\n        });\n        const b = await this.relayer.request(u);\n        return this.relayer.events.emit(C.publish, e), this.logger.debug(\"Successfully Published Payload\"), b;\n    }\n    removeRequestFromQueue(e) {\n        this.queue.delete(e);\n    }\n    checkQueue() {\n        this.queue.forEach(async (e, t)=>{\n            const i = e.attempt + 1;\n            this.queue.set(t, Ge(Ie({}, e), {\n                attempt: i\n            }));\n            const { topic: s, message: n, opts: o, attestation: a } = e;\n            this.logger.warn({}, `Publisher: queue->publishing: ${e.opts.id}, tag: ${e.opts.tag}, attempt: ${i}`), await this.rpcPublish(Ge(Ie({}, e), {\n                topic: s,\n                message: n,\n                ttl: o.ttl,\n                prompt: o.prompt,\n                tag: o.tag,\n                id: o.id,\n                attestation: a,\n                tvf: o.tvf\n            })), this.logger.warn({}, `Publisher: queue->published: ${e.opts.id}`);\n        });\n    }\n    registerEventListeners() {\n        this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>{\n            if (this.needsTransportRestart) {\n                this.needsTransportRestart = !1, this.relayer.events.emit(C.connection_stalled);\n                return;\n            }\n            this.checkQueue();\n        }), this.relayer.on(C.message_ack, (e)=>{\n            this.removeRequestFromQueue(e.id.toString());\n        });\n    }\n}\nvar Gn = Object.defineProperty, Wn = (r, e, t)=>e in r ? Gn(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, ne = (r, e, t)=>Wn(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Hn {\n    constructor(){\n        ne(this, \"map\", new Map), ne(this, \"set\", (e, t)=>{\n            const i = this.get(e);\n            this.exists(e, t) || this.map.set(e, [\n                ...i,\n                t\n            ]);\n        }), ne(this, \"get\", (e)=>this.map.get(e) || []), ne(this, \"exists\", (e, t)=>this.get(e).includes(t)), ne(this, \"delete\", (e, t)=>{\n            if (typeof t > \"u\") {\n                this.map.delete(e);\n                return;\n            }\n            if (!this.map.has(e)) return;\n            const i = this.get(e);\n            if (!this.exists(e, t)) return;\n            const s = i.filter((n)=>n !== t);\n            if (!s.length) {\n                this.map.delete(e);\n                return;\n            }\n            this.map.set(e, s);\n        }), ne(this, \"clear\", ()=>{\n            this.map.clear();\n        });\n    }\n    get topics() {\n        return Array.from(this.map.keys());\n    }\n}\nvar Yn = Object.defineProperty, Jn = Object.defineProperties, Xn = Object.getOwnPropertyDescriptors, Ii = Object.getOwnPropertySymbols, Zn = Object.prototype.hasOwnProperty, Qn = Object.prototype.propertyIsEnumerable, We = (r, e, t)=>e in r ? Yn(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, ge = (r, e)=>{\n    for(var t in e || (e = {}))Zn.call(e, t) && We(r, t, e[t]);\n    if (Ii) for (var t of Ii(e))Qn.call(e, t) && We(r, t, e[t]);\n    return r;\n}, He = (r, e)=>Jn(r, Xn(e)), f = (r, e, t)=>We(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ti extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.ISubscriber {\n    constructor(e, t){\n        super(e, t), this.relayer = e, this.logger = t, f(this, \"subscriptions\", new Map), f(this, \"topicMap\", new Hn), f(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), f(this, \"name\", Ut), f(this, \"version\", Ft), f(this, \"pending\", new Map), f(this, \"cached\", []), f(this, \"initialized\", !1), f(this, \"storagePrefix\", B), f(this, \"subscribeTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_MINUTE)), f(this, \"initialSubscribeTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), f(this, \"clientId\"), f(this, \"batchSubscribeTopicsLimit\", 500), f(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), this.registerEventListeners(), await this.restore()), this.initialized = !0;\n        }), f(this, \"subscribe\", async (i, s)=>{\n            this.isInitialized(), this.logger.debug(\"Subscribing Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"subscribe\",\n                params: {\n                    topic: i,\n                    opts: s\n                }\n            });\n            try {\n                const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(s), o = {\n                    topic: i,\n                    relay: n,\n                    transportType: s?.transportType\n                };\n                this.pending.set(i, o);\n                const a = await this.rpcSubscribe(i, n, s);\n                return typeof a == \"string\" && (this.onSubscribe(a, o), this.logger.debug(\"Successfully Subscribed Topic\"), this.logger.trace({\n                    type: \"method\",\n                    method: \"subscribe\",\n                    params: {\n                        topic: i,\n                        opts: s\n                    }\n                })), a;\n            } catch (n) {\n                throw this.logger.debug(\"Failed to Subscribe Topic\"), this.logger.error(n), n;\n            }\n        }), f(this, \"unsubscribe\", async (i, s)=>{\n            this.isInitialized(), typeof s?.id < \"u\" ? await this.unsubscribeById(i, s.id, s) : await this.unsubscribeByTopic(i, s);\n        }), f(this, \"isSubscribed\", (i)=>new Promise((s)=>{\n                s(this.topicMap.topics.includes(i));\n            })), f(this, \"isKnownTopic\", (i)=>new Promise((s)=>{\n                s(this.topicMap.topics.includes(i) || this.pending.has(i) || this.cached.some((n)=>n.topic === i));\n            })), f(this, \"on\", (i, s)=>{\n            this.events.on(i, s);\n        }), f(this, \"once\", (i, s)=>{\n            this.events.once(i, s);\n        }), f(this, \"off\", (i, s)=>{\n            this.events.off(i, s);\n        }), f(this, \"removeListener\", (i, s)=>{\n            this.events.removeListener(i, s);\n        }), f(this, \"start\", async ()=>{\n            await this.onConnect();\n        }), f(this, \"stop\", async ()=>{\n            await this.onDisconnect();\n        }), f(this, \"restart\", async ()=>{\n            await this.restore(), await this.onRestart();\n        }), f(this, \"checkPending\", async ()=>{\n            if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;\n            const i = [];\n            this.pending.forEach((s)=>{\n                i.push(s);\n            }), await this.batchSubscribe(i);\n        }), f(this, \"registerEventListeners\", ()=>{\n            this.relayer.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, async ()=>{\n                await this.checkPending();\n            }), this.events.on($.created, async (i)=>{\n                const s = $.created;\n                this.logger.info(`Emitting ${s}`), this.logger.debug({\n                    type: \"event\",\n                    event: s,\n                    data: i\n                }), await this.persist();\n            }), this.events.on($.deleted, async (i)=>{\n                const s = $.deleted;\n                this.logger.info(`Emitting ${s}`), this.logger.debug({\n                    type: \"event\",\n                    event: s,\n                    data: i\n                }), await this.persist();\n            });\n        }), this.relayer = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.clientId = \"\";\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.subscriptions.size;\n    }\n    get ids() {\n        return Array.from(this.subscriptions.keys());\n    }\n    get values() {\n        return Array.from(this.subscriptions.values());\n    }\n    get topics() {\n        return this.topicMap.topics;\n    }\n    get hasAnyTopics() {\n        return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;\n    }\n    hasSubscription(e, t) {\n        let i = !1;\n        try {\n            i = this.getSubscription(e).topic === t;\n        } catch  {}\n        return i;\n    }\n    reset() {\n        this.cached = [], this.initialized = !0;\n    }\n    onDisable() {\n        this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();\n    }\n    async unsubscribeByTopic(e, t) {\n        const i = this.topicMap.get(e);\n        await Promise.all(i.map(async (s)=>await this.unsubscribeById(e, s, t)));\n    }\n    async unsubscribeById(e, t, i) {\n        this.logger.debug(\"Unsubscribing Topic\"), this.logger.trace({\n            type: \"method\",\n            method: \"unsubscribe\",\n            params: {\n                topic: e,\n                id: t,\n                opts: i\n            }\n        });\n        try {\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolName)(i);\n            await this.restartToComplete({\n                topic: e,\n                id: t,\n                relay: s\n            }), await this.rpcUnsubscribe(e, t, s);\n            const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\", `${this.name}, ${e}`);\n            await this.onUnsubscribe(e, t, n), this.logger.debug(\"Successfully Unsubscribed Topic\"), this.logger.trace({\n                type: \"method\",\n                method: \"unsubscribe\",\n                params: {\n                    topic: e,\n                    id: t,\n                    opts: i\n                }\n            });\n        } catch (s) {\n            throw this.logger.debug(\"Failed to Unsubscribe Topic\"), this.logger.error(s), s;\n        }\n    }\n    async rpcSubscribe(e, t, i) {\n        var s;\n        (!i || i?.transportType === Q.relay) && await this.restartToComplete({\n            topic: e,\n            id: e,\n            relay: t\n        });\n        const n = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(t.protocol).subscribe,\n            params: {\n                topic: e\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: n\n        });\n        const o = (s = i?.internal) == null ? void 0 : s.throwOnFailedPublish;\n        try {\n            const a = await this.getSubscriptionId(e);\n            if (i?.transportType === Q.link_mode) return setTimeout(()=>{\n                (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n).catch((l)=>this.logger.warn(l));\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND)), a;\n            const c = new Promise(async (l)=>{\n                const d = (g)=>{\n                    g.topic === e && (this.events.removeListener($.created, d), l(g.id));\n                };\n                this.events.on($.created, d);\n                try {\n                    const g = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(new Promise((_, u)=>{\n                        this.relayer.request(n).catch((b)=>{\n                            this.logger.warn(b, b?.message), u(b);\n                        }).then(_);\n                    }), this.initialSubscribeTimeout, `Subscribing to ${e} failed, please try again`);\n                    this.events.removeListener($.created, d), l(g);\n                } catch  {}\n            }), h = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(c, this.subscribeTimeout, `Subscribing to ${e} failed, please try again`);\n            if (!h && o) throw new Error(`Subscribing to ${e} failed, please try again`);\n            return h ? a : null;\n        } catch (a) {\n            if (this.logger.debug(\"Outgoing Relay Subscribe Payload stalled\"), this.relayer.events.emit(C.connection_stalled), o) throw a;\n        }\n        return null;\n    }\n    async rpcBatchSubscribe(e) {\n        if (!e.length) return;\n        const t = e[0].relay, i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(t.protocol).batchSubscribe,\n            params: {\n                topics: e.map((s)=>s.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        });\n        try {\n            await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(new Promise((s)=>{\n                this.relayer.request(i).catch((n)=>this.logger.warn(n)).then(s);\n            }), this.subscribeTimeout, \"rpcBatchSubscribe failed, please try again\");\n        } catch  {\n            this.relayer.events.emit(C.connection_stalled);\n        }\n    }\n    async rpcBatchFetchMessages(e) {\n        if (!e.length) return;\n        const t = e[0].relay, i = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(t.protocol).batchFetchMessages,\n            params: {\n                topics: e.map((n)=>n.topic)\n            }\n        };\n        this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: i\n        });\n        let s;\n        try {\n            s = await await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(new Promise((n, o)=>{\n                this.relayer.request(i).catch((a)=>{\n                    this.logger.warn(a), o(a);\n                }).then(n);\n            }), this.subscribeTimeout, \"rpcBatchFetchMessages failed, please try again\");\n        } catch  {\n            this.relayer.events.emit(C.connection_stalled);\n        }\n        return s;\n    }\n    rpcUnsubscribe(e, t, i) {\n        const s = {\n            method: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getRelayProtocolApi)(i.protocol).unsubscribe,\n            params: {\n                topic: e,\n                id: t\n            }\n        };\n        return this.logger.debug(\"Outgoing Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"outgoing\",\n            request: s\n        }), this.relayer.request(s);\n    }\n    onSubscribe(e, t) {\n        this.setSubscription(e, He(ge({}, t), {\n            id: e\n        })), this.pending.delete(t.topic);\n    }\n    onBatchSubscribe(e) {\n        e.length && e.forEach((t)=>{\n            this.setSubscription(t.id, ge({}, t)), this.pending.delete(t.topic);\n        });\n    }\n    async onUnsubscribe(e, t, i) {\n        this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i), await this.relayer.messages.del(e);\n    }\n    async setRelayerSubscriptions(e) {\n        await this.relayer.core.storage.setItem(this.storageKey, e);\n    }\n    async getRelayerSubscriptions() {\n        return await this.relayer.core.storage.getItem(this.storageKey);\n    }\n    setSubscription(e, t) {\n        this.logger.debug(\"Setting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"setSubscription\",\n            id: e,\n            subscription: t\n        }), this.addSubscription(e, t);\n    }\n    addSubscription(e, t) {\n        this.subscriptions.set(e, ge({}, t)), this.topicMap.set(t.topic, e), this.events.emit($.created, t);\n    }\n    getSubscription(e) {\n        this.logger.debug(\"Getting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"getSubscription\",\n            id: e\n        });\n        const t = this.subscriptions.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(i);\n        }\n        return t;\n    }\n    deleteSubscription(e, t) {\n        this.logger.debug(\"Deleting subscription\"), this.logger.trace({\n            type: \"method\",\n            method: \"deleteSubscription\",\n            id: e,\n            reason: t\n        });\n        const i = this.getSubscription(e);\n        this.subscriptions.delete(e), this.topicMap.delete(i.topic, e), this.events.emit($.deleted, He(ge({}, i), {\n            reason: t\n        }));\n    }\n    async persist() {\n        await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);\n    }\n    async onRestart() {\n        if (this.cached.length) {\n            const e = [\n                ...this.cached\n            ], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);\n            for(let i = 0; i < t; i++){\n                const s = e.splice(0, this.batchSubscribeTopicsLimit);\n                await this.batchSubscribe(s);\n            }\n        }\n        this.events.emit($.resubscribed);\n    }\n    async restore() {\n        try {\n            const e = await this.getRelayerSubscriptions();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.subscriptions.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                subscriptions: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);\n        }\n    }\n    async batchSubscribe(e) {\n        e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async (t)=>He(ge({}, t), {\n                id: await this.getSubscriptionId(t.topic)\n            })))));\n    }\n    async batchFetchMessages(e) {\n        if (!e.length) return;\n        this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);\n        const t = await this.rpcBatchFetchMessages(e);\n        t && t.messages && (await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.sleep)((0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));\n    }\n    async onConnect() {\n        await this.restart(), this.reset();\n    }\n    onDisconnect() {\n        this.onDisable();\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async restartToComplete(e) {\n        !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());\n    }\n    async getClientId() {\n        return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;\n    }\n    async getSubscriptionId(e) {\n        return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.hashMessage)(e + await this.getClientId());\n    }\n}\nvar eo = Object.defineProperty, Ci = Object.getOwnPropertySymbols, to = Object.prototype.hasOwnProperty, io = Object.prototype.propertyIsEnumerable, Ye = (r, e, t)=>e in r ? eo(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Pi = (r, e)=>{\n    for(var t in e || (e = {}))to.call(e, t) && Ye(r, t, e[t]);\n    if (Ci) for (var t of Ci(e))io.call(e, t) && Ye(r, t, e[t]);\n    return r;\n}, y = (r, e, t)=>Ye(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Si extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IRelayer {\n    constructor(e){\n        super(e), y(this, \"protocol\", \"wc\"), y(this, \"version\", 2), y(this, \"core\"), y(this, \"logger\"), y(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), y(this, \"provider\"), y(this, \"messages\"), y(this, \"subscriber\"), y(this, \"publisher\"), y(this, \"name\", $t), y(this, \"transportExplicitlyClosed\", !1), y(this, \"initialized\", !1), y(this, \"connectionAttemptInProgress\", !1), y(this, \"relayUrl\"), y(this, \"projectId\"), y(this, \"packageName\"), y(this, \"bundleId\"), y(this, \"hasExperiencedNetworkDisruption\", !1), y(this, \"pingTimeout\"), y(this, \"heartBeatTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_SECONDS + _walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS)), y(this, \"reconnectTimeout\"), y(this, \"connectPromise\"), y(this, \"reconnectInProgress\", !1), y(this, \"requestsInFlight\", []), y(this, \"connectTimeout\", (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 15)), y(this, \"request\", async (t)=>{\n            var i, s;\n            this.logger.debug(\"Publishing Request Payload\");\n            const n = t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.getBigIntRpcId)().toString();\n            await this.toEstablishConnection();\n            try {\n                this.logger.trace({\n                    id: n,\n                    method: t.method,\n                    topic: (i = t.params) == null ? void 0 : i.topic\n                }, \"relayer.request - publishing...\");\n                const o = `${n}:${((s = t.params) == null ? void 0 : s.tag) || \"\"}`;\n                this.requestsInFlight.push(o);\n                const a = await this.provider.request(t);\n                return this.requestsInFlight = this.requestsInFlight.filter((c)=>c !== o), a;\n            } catch (o) {\n                throw this.logger.debug(`Failed to Publish Request: ${n}`), o;\n            }\n        }), y(this, \"resetPingTimeout\", ()=>{\n            (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isNode)() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(()=>{\n                var t, i, s, n;\n                try {\n                    this.logger.debug({}, \"pingTimeout: Connection stalled, terminating...\"), (n = (s = (i = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : i.socket) == null ? void 0 : s.terminate) == null || n.call(s);\n                } catch (o) {\n                    this.logger.warn(o, o?.message);\n                }\n            }, this.heartBeatTimeout));\n        }), y(this, \"onPayloadHandler\", (t)=>{\n            this.onProviderPayload(t), this.resetPingTimeout();\n        }), y(this, \"onConnectHandler\", ()=>{\n            this.logger.warn({}, \"Relayer connected \\uD83D\\uDEDC\"), this.startPingTimeout(), this.events.emit(C.connect);\n        }), y(this, \"onDisconnectHandler\", ()=>{\n            this.logger.warn({}, \"Relayer disconnected \\uD83D\\uDED1\"), this.requestsInFlight = [], this.onProviderDisconnect();\n        }), y(this, \"onProviderErrorHandler\", (t)=>{\n            this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(C.error, t), this.logger.fatal(\"Fatal socket error received, closing transport\"), this.transportClose();\n        }), y(this, \"registerProviderListeners\", ()=>{\n            this.provider.on(L.payload, this.onPayloadHandler), this.provider.on(L.connect, this.onConnectHandler), this.provider.on(L.disconnect, this.onDisconnectHandler), this.provider.on(L.error, this.onProviderErrorHandler);\n        }), this.core = e.core, this.logger = typeof e.logger < \"u\" && typeof e.logger != \"string\" ? (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(e.logger, this.name) : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: e.logger || Nt\n        })), this.messages = new _i(this.logger, e.core), this.subscriber = new Ti(this, this.logger), this.publisher = new qn(this, this.logger), this.relayUrl = e?.relayUrl || Ue, this.projectId = e.projectId, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isAndroid)() ? this.packageName = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getAppId)() : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isIos)() && (this.bundleId = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getAppId)()), this.provider = {};\n    }\n    async init() {\n        if (this.logger.trace(\"Initialized\"), this.registerEventListeners(), await Promise.all([\n            this.messages.init(),\n            this.subscriber.init()\n        ]), this.initialized = !0, this.subscriber.hasAnyTopics) try {\n            await this.transportOpen();\n        } catch (e) {\n            this.logger.warn(e, e?.message);\n        }\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get connected() {\n        var e, t, i;\n        return ((i = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i.readyState) === 1 || !1;\n    }\n    get connecting() {\n        var e, t, i;\n        return ((i = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i.readyState) === 0 || this.connectPromise !== void 0 || !1;\n    }\n    async publish(e, t, i) {\n        this.isInitialized(), await this.publisher.publish(e, t, i), await this.recordMessageEvent({\n            topic: e,\n            message: t,\n            publishedAt: Date.now(),\n            transportType: Q.relay\n        }, le.outbound);\n    }\n    async subscribe(e, t) {\n        var i, s, n;\n        this.isInitialized(), (!(t != null && t.transportType) || t?.transportType === \"relay\") && await this.toEstablishConnection();\n        const o = typeof ((i = t?.internal) == null ? void 0 : i.throwOnFailedPublish) > \"u\" ? !0 : (s = t?.internal) == null ? void 0 : s.throwOnFailedPublish;\n        let a = ((n = this.subscriber.topicMap.get(e)) == null ? void 0 : n[0]) || \"\", c;\n        const h = (l)=>{\n            l.topic === e && (this.subscriber.off($.created, h), c());\n        };\n        return await Promise.all([\n            new Promise((l)=>{\n                c = l, this.subscriber.on($.created, h);\n            }),\n            new Promise(async (l, d)=>{\n                a = await this.subscriber.subscribe(e, Pi({\n                    internal: {\n                        throwOnFailedPublish: o\n                    }\n                }, t)).catch((g)=>{\n                    o && d(g);\n                }) || a, l();\n            })\n        ]), a;\n    }\n    async unsubscribe(e, t) {\n        this.isInitialized(), await this.subscriber.unsubscribe(e, t);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async transportDisconnect() {\n        this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(this.provider.disconnect(), 2e3, \"provider.disconnect()\").catch(()=>this.onProviderDisconnect()) : this.onProviderDisconnect();\n    }\n    async transportClose() {\n        this.transportExplicitlyClosed = !0, await this.transportDisconnect();\n    }\n    async transportOpen(e) {\n        if (!this.subscriber.hasAnyTopics) {\n            this.logger.warn(\"Starting WS connection skipped because the client has no topics to work with.\");\n            return;\n        }\n        if (this.connectPromise ? (this.logger.debug({}, \"Waiting for existing connection attempt to resolve...\"), await this.connectPromise, this.logger.debug({}, \"Existing connection attempt resolved\")) : (this.connectPromise = new Promise(async (t, i)=>{\n            await this.connect(e).then(t).catch(i).finally(()=>{\n                this.connectPromise = void 0;\n            });\n        }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);\n    }\n    async restartTransport(e) {\n        this.logger.debug({}, \"Restarting transport...\"), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());\n    }\n    async confirmOnlineStateOrThrow() {\n        if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isOnline)()) throw new Error(\"No internet connection detected. Please restart your network and try again.\");\n    }\n    async handleBatchMessageEvents(e) {\n        if (e?.length === 0) {\n            this.logger.trace(\"Batch message events is empty. Ignoring...\");\n            return;\n        }\n        const t = e.sort((i, s)=>i.publishedAt - s.publishedAt);\n        this.logger.debug(`Batch of ${t.length} message events sorted`);\n        for (const i of t)try {\n            await this.onMessageEvent(i);\n        } catch (s) {\n            this.logger.warn(s, \"Error while processing batch message event: \" + s?.message);\n        }\n        this.logger.trace(`Batch of ${t.length} message events processed`);\n    }\n    async onLinkMessageEvent(e, t) {\n        const { topic: i } = e;\n        if (!t.sessionExists) {\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), n = {\n                topic: i,\n                expiry: s,\n                relay: {\n                    protocol: \"irn\"\n                },\n                active: !1\n            };\n            await this.core.pairing.pairings.set(i, n);\n        }\n        this.events.emit(C.message, e), await this.recordMessageEvent(e, le.inbound);\n    }\n    async connect(e) {\n        await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = !0, this.transportExplicitlyClosed = !1;\n        let t = 1;\n        for(; t < 6;){\n            try {\n                if (this.transportExplicitlyClosed) break;\n                this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i, s)=>{\n                    const n = ()=>{\n                        s(new Error(\"Connection interrupted while trying to subscribe\"));\n                    };\n                    this.provider.once(L.disconnect, n), await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createExpiringPromise)(new Promise((o, a)=>{\n                        this.provider.connect().then(o).catch(a);\n                    }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o)=>{\n                        s(o);\n                    }).finally(()=>{\n                        this.provider.off(L.disconnect, n), clearTimeout(this.reconnectTimeout);\n                    }), await new Promise(async (o, a)=>{\n                        const c = ()=>{\n                            a(new Error(\"Connection interrupted while trying to subscribe\"));\n                        };\n                        this.provider.once(L.disconnect, c), await this.subscriber.start().then(o).catch(a).finally(()=>{\n                            this.provider.off(L.disconnect, c);\n                        });\n                    }), this.hasExperiencedNetworkDisruption = !1, i();\n                });\n            } catch (i) {\n                await this.subscriber.stop();\n                const s = i;\n                this.logger.warn({}, s.message), this.hasExperiencedNetworkDisruption = !0;\n            } finally{\n                this.connectionAttemptInProgress = !1;\n            }\n            if (this.connected) {\n                this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);\n                break;\n            }\n            await new Promise((i)=>setTimeout(i, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(t * 1))), t++;\n        }\n    }\n    startPingTimeout() {\n        var e, t, i, s, n;\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isNode)()) try {\n            (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((n = (s = (i = this.provider) == null ? void 0 : i.connection) == null ? void 0 : s.socket) == null || n.on(\"ping\", ()=>{\n                this.resetPingTimeout();\n            })), this.resetPingTimeout();\n        } catch (o) {\n            this.logger.warn(o, o?.message);\n        }\n    }\n    async createProvider() {\n        this.provider.connection && this.unregisterProviderListeners();\n        const e = await this.core.crypto.signJWT(this.relayUrl);\n        this.provider = new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_8__.JsonRpcProvider(new _walletconnect_jsonrpc_ws_connection__WEBPACK_IMPORTED_MODULE_10__[\"default\"]((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatRelayRpcUrl)({\n            sdkVersion: _e,\n            protocol: this.protocol,\n            version: this.version,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId,\n            auth: e,\n            useOnCloseEvent: !0,\n            bundleId: this.bundleId,\n            packageName: this.packageName\n        }))), this.registerProviderListeners();\n    }\n    async recordMessageEvent(e, t) {\n        const { topic: i, message: s } = e;\n        await this.messages.set(i, s, t);\n    }\n    async shouldIgnoreMessageEvent(e) {\n        const { topic: t, message: i } = e;\n        if (!i || i.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i}`), !0;\n        if (!await this.subscriber.isKnownTopic(t)) return this.logger.warn(`Ignoring message for unknown topic ${t}`), !0;\n        const s = this.messages.has(t, i);\n        return s && this.logger.warn(`Ignoring duplicate message: ${i}`), s;\n    }\n    async onProviderPayload(e) {\n        if (this.logger.debug(\"Incoming Relay Payload\"), this.logger.trace({\n            type: \"payload\",\n            direction: \"incoming\",\n            payload: e\n        }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(e)) {\n            if (!e.method.endsWith(zt)) return;\n            const t = e.params, { topic: i, message: s, publishedAt: n, attestation: o } = t.data, a = {\n                topic: i,\n                message: s,\n                publishedAt: n,\n                transportType: Q.relay,\n                attestation: o\n            };\n            this.logger.debug(\"Emitting Relayer Payload\"), this.logger.trace(Pi({\n                type: \"event\",\n                event: t.id\n            }, a)), this.events.emit(t.id, a), await this.acknowledgePayload(e), await this.onMessageEvent(a);\n        } else (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(e) && this.events.emit(C.message_ack, e);\n    }\n    async onMessageEvent(e) {\n        await this.shouldIgnoreMessageEvent(e) || (await this.recordMessageEvent(e, le.inbound), this.events.emit(C.message, e));\n    }\n    async acknowledgePayload(e) {\n        const t = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(e.id, !0);\n        await this.provider.connection.send(t);\n    }\n    unregisterProviderListeners() {\n        this.provider.off(L.payload, this.onPayloadHandler), this.provider.off(L.connect, this.onConnectHandler), this.provider.off(L.disconnect, this.onDisconnectHandler), this.provider.off(L.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);\n    }\n    async registerEventListeners() {\n        let e = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isOnline)();\n        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.subscribeToNetworkChange)(async (t)=>{\n            e !== t && (e = t, t ? await this.transportOpen().catch((i)=>this.logger.error(i, i?.message)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportDisconnect(), this.transportExplicitlyClosed = !1));\n        }), this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, async ()=>{\n            if (!this.transportExplicitlyClosed && !this.connected && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isAppVisible)()) try {\n                await this.confirmOnlineStateOrThrow(), await this.transportOpen();\n            } catch (t) {\n                this.logger.warn(t, t?.message);\n            }\n        });\n    }\n    async onProviderDisconnect() {\n        clearTimeout(this.pingTimeout), this.events.emit(C.disconnect), this.connectionAttemptInProgress = !1, !this.reconnectInProgress && (this.reconnectInProgress = !0, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async ()=>{\n            await this.transportOpen().catch((e)=>this.logger.error(e, e?.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = !1;\n        }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(Lt)))));\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    async toEstablishConnection() {\n        if (await this.confirmOnlineStateOrThrow(), !this.connected) {\n            if (this.connectPromise) {\n                await this.connectPromise;\n                return;\n            }\n            await this.connect();\n        }\n    }\n}\nfunction so() {}\nfunction Oi(r) {\n    if (!r || typeof r != \"object\") return !1;\n    const e = Object.getPrototypeOf(r);\n    return e === null || e === Object.prototype || Object.getPrototypeOf(e) === null ? Object.prototype.toString.call(r) === \"[object Object]\" : !1;\n}\nfunction Ri(r) {\n    return Object.getOwnPropertySymbols(r).filter((e)=>Object.prototype.propertyIsEnumerable.call(r, e));\n}\nfunction Ai(r) {\n    return r == null ? r === void 0 ? \"[object Undefined]\" : \"[object Null]\" : Object.prototype.toString.call(r);\n}\nconst ro = \"[object RegExp]\", no = \"[object String]\", oo = \"[object Number]\", ao = \"[object Boolean]\", xi = \"[object Arguments]\", co = \"[object Symbol]\", ho = \"[object Date]\", lo = \"[object Map]\", uo = \"[object Set]\", go = \"[object Array]\", po = \"[object Function]\", yo = \"[object ArrayBuffer]\", Je = \"[object Object]\", bo = \"[object Error]\", mo = \"[object DataView]\", fo = \"[object Uint8Array]\", Do = \"[object Uint8ClampedArray]\", vo = \"[object Uint16Array]\", wo = \"[object Uint32Array]\", _o = \"[object BigUint64Array]\", Eo = \"[object Int8Array]\", Io = \"[object Int16Array]\", To = \"[object Int32Array]\", Co = \"[object BigInt64Array]\", Po = \"[object Float32Array]\", So = \"[object Float64Array]\";\nfunction Oo(r, e) {\n    return r === e || Number.isNaN(r) && Number.isNaN(e);\n}\nfunction Ro(r, e, t) {\n    return pe(r, e, void 0, void 0, void 0, void 0, t);\n}\nfunction pe(r, e, t, i, s, n, o) {\n    const a = o(r, e, t, i, s, n);\n    if (a !== void 0) return a;\n    if (typeof r == typeof e) switch(typeof r){\n        case \"bigint\":\n        case \"string\":\n        case \"boolean\":\n        case \"symbol\":\n        case \"undefined\":\n            return r === e;\n        case \"number\":\n            return r === e || Object.is(r, e);\n        case \"function\":\n            return r === e;\n        case \"object\":\n            return ye(r, e, n, o);\n    }\n    return ye(r, e, n, o);\n}\nfunction ye(r, e, t, i) {\n    if (Object.is(r, e)) return !0;\n    let s = Ai(r), n = Ai(e);\n    if (s === xi && (s = Je), n === xi && (n = Je), s !== n) return !1;\n    switch(s){\n        case no:\n            return r.toString() === e.toString();\n        case oo:\n            {\n                const c = r.valueOf(), h = e.valueOf();\n                return Oo(c, h);\n            }\n        case ao:\n        case ho:\n        case co:\n            return Object.is(r.valueOf(), e.valueOf());\n        case ro:\n            return r.source === e.source && r.flags === e.flags;\n        case po:\n            return r === e;\n    }\n    t = t ?? new Map;\n    const o = t.get(r), a = t.get(e);\n    if (o != null && a != null) return o === e;\n    t.set(r, e), t.set(e, r);\n    try {\n        switch(s){\n            case lo:\n                {\n                    if (r.size !== e.size) return !1;\n                    for (const [c, h] of r.entries())if (!e.has(c) || !pe(h, e.get(c), c, r, e, t, i)) return !1;\n                    return !0;\n                }\n            case uo:\n                {\n                    if (r.size !== e.size) return !1;\n                    const c = Array.from(r.values()), h = Array.from(e.values());\n                    for(let l = 0; l < c.length; l++){\n                        const d = c[l], g = h.findIndex((_)=>pe(d, _, void 0, r, e, t, i));\n                        if (g === -1) return !1;\n                        h.splice(g, 1);\n                    }\n                    return !0;\n                }\n            case go:\n            case fo:\n            case Do:\n            case vo:\n            case wo:\n            case _o:\n            case Eo:\n            case Io:\n            case To:\n            case Co:\n            case Po:\n            case So:\n                {\n                    if (typeof Buffer < \"u\" && Buffer.isBuffer(r) !== Buffer.isBuffer(e) || r.length !== e.length) return !1;\n                    for(let c = 0; c < r.length; c++)if (!pe(r[c], e[c], c, r, e, t, i)) return !1;\n                    return !0;\n                }\n            case yo:\n                return r.byteLength !== e.byteLength ? !1 : ye(new Uint8Array(r), new Uint8Array(e), t, i);\n            case mo:\n                return r.byteLength !== e.byteLength || r.byteOffset !== e.byteOffset ? !1 : ye(new Uint8Array(r), new Uint8Array(e), t, i);\n            case bo:\n                return r.name === e.name && r.message === e.message;\n            case Je:\n                {\n                    if (!(ye(r.constructor, e.constructor, t, i) || Oi(r) && Oi(e))) return !1;\n                    const h = [\n                        ...Object.keys(r),\n                        ...Ri(r)\n                    ], l = [\n                        ...Object.keys(e),\n                        ...Ri(e)\n                    ];\n                    if (h.length !== l.length) return !1;\n                    for(let d = 0; d < h.length; d++){\n                        const g = h[d], _ = r[g];\n                        if (!Object.hasOwn(e, g)) return !1;\n                        const u = e[g];\n                        if (!pe(_, u, g, r, e, t, i)) return !1;\n                    }\n                    return !0;\n                }\n            default:\n                return !1;\n        }\n    } finally{\n        t.delete(r), t.delete(e);\n    }\n}\nfunction Ao(r, e) {\n    return Ro(r, e, so);\n}\nvar xo = Object.defineProperty, Ni = Object.getOwnPropertySymbols, No = Object.prototype.hasOwnProperty, $o = Object.prototype.propertyIsEnumerable, Xe = (r, e, t)=>e in r ? xo(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, $i = (r, e)=>{\n    for(var t in e || (e = {}))No.call(e, t) && Xe(r, t, e[t]);\n    if (Ni) for (var t of Ni(e))$o.call(e, t) && Xe(r, t, e[t]);\n    return r;\n}, z = (r, e, t)=>Xe(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass zi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IStore {\n    constructor(e, t, i, s = B, n = void 0){\n        super(e, t, i, s), this.core = e, this.logger = t, this.name = i, z(this, \"map\", new Map), z(this, \"version\", kt), z(this, \"cached\", []), z(this, \"initialized\", !1), z(this, \"getKey\"), z(this, \"storagePrefix\", B), z(this, \"recentlyDeleted\", []), z(this, \"recentlyDeletedLimit\", 200), z(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((o)=>{\n                this.getKey && o !== null && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isUndefined)(o) ? this.map.set(this.getKey(o), o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isProposalStruct)(o) ? this.map.set(o.id, o) : (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isSessionStruct)(o) && this.map.set(o.topic, o);\n            }), this.cached = [], this.initialized = !0);\n        }), z(this, \"set\", async (o, a)=>{\n            this.isInitialized(), this.map.has(o) ? await this.update(o, a) : (this.logger.debug(\"Setting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                key: o,\n                value: a\n            }), this.map.set(o, a), await this.persist());\n        }), z(this, \"get\", (o)=>(this.isInitialized(), this.logger.debug(\"Getting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                key: o\n            }), this.getData(o))), z(this, \"getAll\", (o)=>(this.isInitialized(), o ? this.values.filter((a)=>Object.keys(o).every((c)=>Ao(a[c], o[c]))) : this.values)), z(this, \"update\", async (o, a)=>{\n            this.isInitialized(), this.logger.debug(\"Updating value\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                key: o,\n                update: a\n            });\n            const c = $i($i({}, this.getData(o)), a);\n            this.map.set(o, c), await this.persist();\n        }), z(this, \"delete\", async (o, a)=>{\n            this.isInitialized(), this.map.has(o) && (this.logger.debug(\"Deleting value\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                key: o,\n                reason: a\n            }), this.map.delete(o), this.addToRecentlyDeleted(o), await this.persist());\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.storagePrefix = s, this.getKey = n;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.map.size;\n    }\n    get keys() {\n        return Array.from(this.map.keys());\n    }\n    get values() {\n        return Array.from(this.map.values());\n    }\n    addToRecentlyDeleted(e) {\n        this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);\n    }\n    async setDataStore(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getDataStore() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getData(e) {\n        const t = this.map.get(e);\n        if (!t) {\n            if (this.recentlyDeleted.includes(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `Record was recently deleted - ${this.name}: ${e}`);\n                throw this.logger.error(s), new Error(s);\n            }\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.error(i), new Error(i);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setDataStore(this.values);\n    }\n    async restore() {\n        try {\n            const e = await this.getDataStore();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.map.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                value: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar zo = Object.defineProperty, Lo = (r, e, t)=>e in r ? zo(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, p = (r, e, t)=>Lo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Li {\n    constructor(e, t){\n        this.core = e, this.logger = t, p(this, \"name\", Mt), p(this, \"version\", Kt), p(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_0___default())), p(this, \"pairings\"), p(this, \"initialized\", !1), p(this, \"storagePrefix\", B), p(this, \"ignoredPayloadTypes\", [\n            _walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.TYPE_1\n        ]), p(this, \"registeredMethods\", []), p(this, \"init\", async ()=>{\n            this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace(\"Initialized\"));\n        }), p(this, \"register\", ({ methods: i })=>{\n            this.isInitialized(), this.registeredMethods = [\n                ...new Set([\n                    ...this.registeredMethods,\n                    ...i\n                ])\n            ];\n        }), p(this, \"create\", async (i)=>{\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.generateRandomBytes32)(), n = await this.core.crypto.setSymKey(s), o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), a = {\n                protocol: xt\n            }, c = {\n                topic: n,\n                expiry: o,\n                relay: a,\n                active: !1,\n                methods: i?.methods\n            }, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: n,\n                symKey: s,\n                relay: a,\n                expiryTimestamp: o,\n                methods: i?.methods\n            });\n            return this.events.emit(re.create, c), this.core.expirer.set(n, o), await this.pairings.set(n, c), await this.core.relayer.subscribe(n, {\n                transportType: i?.transportType\n            }), {\n                topic: n,\n                uri: h\n            };\n        }), p(this, \"pair\", async (i)=>{\n            this.isInitialized();\n            const s = this.core.eventClient.createEvent({\n                properties: {\n                    topic: i?.uri,\n                    trace: [\n                        G.pairing_started\n                    ]\n                }\n            });\n            this.isValidPair(i, s);\n            const { topic: n, symKey: o, relay: a, expiryTimestamp: c, methods: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseUri)(i.uri);\n            s.props.properties.topic = n, s.addTrace(G.pairing_uri_validation_success), s.addTrace(G.pairing_uri_not_expired);\n            let l;\n            if (this.pairings.keys.includes(n)) {\n                if (l = this.pairings.get(n), s.addTrace(G.existing_pairing), l.active) throw s.setError(Y.active_pairing_already_exists), new Error(`Pairing already exists: ${n}. Please try again with a new connection URI.`);\n                s.addTrace(G.pairing_not_expired);\n            }\n            const d = c || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES), g = {\n                topic: n,\n                relay: a,\n                expiry: d,\n                active: !1,\n                methods: h\n            };\n            this.core.expirer.set(n, d), await this.pairings.set(n, g), s.addTrace(G.store_new_pairing), i.activatePairing && await this.activate({\n                topic: n\n            }), this.events.emit(re.create, g), s.addTrace(G.emit_inactive_pairing), this.core.crypto.keychain.has(n) || await this.core.crypto.setSymKey(o, n), s.addTrace(G.subscribing_pairing_topic);\n            try {\n                await this.core.relayer.confirmOnlineStateOrThrow();\n            } catch  {\n                s.setError(Y.no_internet_connection);\n            }\n            try {\n                await this.core.relayer.subscribe(n, {\n                    relay: a\n                });\n            } catch (_) {\n                throw s.setError(Y.subscribe_pairing_topic_failure), _;\n            }\n            return s.addTrace(G.subscribe_pairing_topic_success), g;\n        }), p(this, \"activate\", async ({ topic: i })=>{\n            this.isInitialized();\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_MINUTES);\n            this.core.expirer.set(i, s), await this.pairings.update(i, {\n                active: !0,\n                expiry: s\n            });\n        }), p(this, \"ping\", async (i)=>{\n            this.isInitialized(), await this.isValidPing(i), this.logger.warn(\"ping() is deprecated and will be removed in the next major release.\");\n            const { topic: s } = i;\n            if (this.pairings.keys.includes(s)) {\n                const n = await this.sendRequest(s, \"wc_pairingPing\", {}), { done: o, resolve: a, reject: c } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", n), ({ error: h })=>{\n                    h ? c(h) : a();\n                }), await o();\n            }\n        }), p(this, \"updateExpiry\", async ({ topic: i, expiry: s })=>{\n            this.isInitialized(), await this.pairings.update(i, {\n                expiry: s\n            });\n        }), p(this, \"updateMetadata\", async ({ topic: i, metadata: s })=>{\n            this.isInitialized(), await this.pairings.update(i, {\n                peerMetadata: s\n            });\n        }), p(this, \"getPairings\", ()=>(this.isInitialized(), this.pairings.values)), p(this, \"disconnect\", async (i)=>{\n            this.isInitialized(), await this.isValidDisconnect(i);\n            const { topic: s } = i;\n            this.pairings.keys.includes(s) && (await this.sendRequest(s, \"wc_pairingDelete\", (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\")), await this.deletePairing(s));\n        }), p(this, \"formatUriFromPairing\", (i)=>{\n            this.isInitialized();\n            const { topic: s, relay: n, expiry: o, methods: a } = i, c = this.core.crypto.keychain.get(s);\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatUri)({\n                protocol: this.core.protocol,\n                version: this.core.version,\n                topic: s,\n                symKey: c,\n                relay: n,\n                expiryTimestamp: o,\n                methods: a\n            });\n        }), p(this, \"sendRequest\", async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(s, n), a = await this.core.crypto.encode(i, o), c = se[s].req;\n            return this.core.history.set(i, o), this.core.relayer.publish(i, a, c), o.id;\n        }), p(this, \"sendResult\", async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcResult)(i, n), a = await this.core.crypto.encode(s, o), c = (await this.core.history.get(s, i)).request.method, h = se[c].res;\n            await this.core.relayer.publish(s, a, h), await this.core.history.resolve(o);\n        }), p(this, \"sendError\", async (i, s, n)=>{\n            const o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcError)(i, n), a = await this.core.crypto.encode(s, o), c = (await this.core.history.get(s, i)).request.method, h = se[c] ? se[c].res : se.unregistered_method.res;\n            await this.core.relayer.publish(s, a, h), await this.core.history.resolve(o);\n        }), p(this, \"deletePairing\", async (i, s)=>{\n            await this.core.relayer.unsubscribe(i), await Promise.all([\n                this.pairings.delete(i, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"USER_DISCONNECTED\")),\n                this.core.crypto.deleteSymKey(i),\n                s ? Promise.resolve() : this.core.expirer.del(i)\n            ]);\n        }), p(this, \"cleanup\", async ()=>{\n            const i = this.pairings.getAll().filter((s)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isExpired)(s.expiry));\n            await Promise.all(i.map((s)=>this.deletePairing(s.topic)));\n        }), p(this, \"onRelayEventRequest\", async (i)=>{\n            const { topic: s, payload: n } = i;\n            switch(n.method){\n                case \"wc_pairingPing\":\n                    return await this.onPairingPingRequest(s, n);\n                case \"wc_pairingDelete\":\n                    return await this.onPairingDeleteRequest(s, n);\n                default:\n                    return await this.onUnknownRpcMethodRequest(s, n);\n            }\n        }), p(this, \"onRelayEventResponse\", async (i)=>{\n            const { topic: s, payload: n } = i, o = (await this.core.history.get(s, n.id)).request.method;\n            switch(o){\n                case \"wc_pairingPing\":\n                    return this.onPairingPingResponse(s, n);\n                default:\n                    return this.onUnknownRpcMethodResponse(o);\n            }\n        }), p(this, \"onPairingPingRequest\", async (i, s)=>{\n            const { id: n } = s;\n            try {\n                this.isValidPing({\n                    topic: i\n                }), await this.sendResult(n, i, !0), this.events.emit(re.ping, {\n                    id: n,\n                    topic: i\n                });\n            } catch (o) {\n                await this.sendError(n, i, o), this.logger.error(o);\n            }\n        }), p(this, \"onPairingPingResponse\", (i, s)=>{\n            const { id: n } = s;\n            setTimeout(()=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResult)(s) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", n), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(s) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.engineEvent)(\"pairing_ping\", n), {\n                    error: s.error\n                });\n            }, 500);\n        }), p(this, \"onPairingDeleteRequest\", async (i, s)=>{\n            const { id: n } = s;\n            try {\n                this.isValidDisconnect({\n                    topic: i\n                }), await this.deletePairing(i), this.events.emit(re.delete, {\n                    id: n,\n                    topic: i\n                });\n            } catch (o) {\n                await this.sendError(n, i, o), this.logger.error(o);\n            }\n        }), p(this, \"onUnknownRpcMethodRequest\", async (i, s)=>{\n            const { id: n, method: o } = s;\n            try {\n                if (this.registeredMethods.includes(o)) return;\n                const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", o);\n                await this.sendError(n, i, a), this.logger.error(a);\n            } catch (a) {\n                await this.sendError(n, i, a), this.logger.error(a);\n            }\n        }), p(this, \"onUnknownRpcMethodResponse\", (i)=>{\n            this.registeredMethods.includes(i) || this.logger.error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", i));\n        }), p(this, \"isValidPair\", (i, s)=>{\n            var n;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(i)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `pair() params: ${i}`);\n                throw s.setError(Y.malformed_pairing_uri), new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidUrl)(i.uri)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `pair() uri: ${i.uri}`);\n                throw s.setError(Y.malformed_pairing_uri), new Error(a);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseUri)(i?.uri);\n            if (!((n = o?.relay) != null && n.protocol)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#relay-protocol\");\n                throw s.setError(Y.malformed_pairing_uri), new Error(a);\n            }\n            if (!(o != null && o.symKey)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", \"pair() uri#symKey\");\n                throw s.setError(Y.malformed_pairing_uri), new Error(a);\n            }\n            if (o != null && o.expiryTimestamp && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(o?.expiryTimestamp) < Date.now()) {\n                s.setError(Y.pairing_expired);\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"EXPIRED\", \"pair() URI has expired. Please try again with a new connection URI.\");\n                throw new Error(a);\n            }\n        }), p(this, \"isValidPing\", async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(i)) {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `ping() params: ${i}`);\n                throw new Error(n);\n            }\n            const { topic: s } = i;\n            await this.isValidPairingTopic(s);\n        }), p(this, \"isValidDisconnect\", async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidParams)(i)) {\n                const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `disconnect() params: ${i}`);\n                throw new Error(n);\n            }\n            const { topic: s } = i;\n            await this.isValidPairingTopic(s);\n        }), p(this, \"isValidPairingTopic\", async (i)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isValidString)(i, !1)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${i}`);\n                throw new Error(s);\n            }\n            if (!this.pairings.keys.includes(i)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${i}`);\n                throw new Error(s);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isExpired)(this.pairings.get(i).expiry)) {\n                await this.deletePairing(i);\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"EXPIRED\", `pairing topic: ${i}`);\n                throw new Error(s);\n            }\n        }), this.core = e, this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.pairings = new zi(this.core, this.logger, this.name, this.storagePrefix);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n    registerRelayerEvents() {\n        this.core.relayer.on(C.message, async (e)=>{\n            const { topic: t, message: i, transportType: s } = e;\n            if (this.pairings.keys.includes(t) && s !== Q.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i))) try {\n                const n = await this.core.crypto.decode(t, i);\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcRequest)(n) ? (this.core.history.set(t, n), await this.onRelayEventRequest({\n                    topic: t,\n                    payload: n\n                })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcResponse)(n) && (await this.core.history.resolve(n), await this.onRelayEventResponse({\n                    topic: t,\n                    payload: n\n                }), this.core.history.delete(t, n.id)), await this.core.relayer.messages.ack(t, i);\n            } catch (n) {\n                this.logger.error(n);\n            }\n        });\n    }\n    registerExpirerEvents() {\n        this.core.expirer.on(M.expired, async (e)=>{\n            const { topic: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.parseExpirerTarget)(e.target);\n            t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(re.expire, {\n                topic: t\n            }));\n        });\n    }\n}\nvar ko = Object.defineProperty, jo = (r, e, t)=>e in r ? ko(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, O = (r, e, t)=>jo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass ki extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IJsonRpcHistory {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, O(this, \"records\", new Map), O(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), O(this, \"name\", Bt), O(this, \"version\", Vt), O(this, \"cached\", []), O(this, \"initialized\", !1), O(this, \"storagePrefix\", B), O(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((i)=>this.records.set(i.id, i)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }), O(this, \"set\", (i, s, n)=>{\n            if (this.isInitialized(), this.logger.debug(\"Setting JSON-RPC request history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"set\",\n                topic: i,\n                request: s,\n                chainId: n\n            }), this.records.has(s.id)) return;\n            const o = {\n                id: s.id,\n                topic: i,\n                request: {\n                    method: s.method,\n                    params: s.params || null\n                },\n                chainId: n,\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.calcExpiry)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.THIRTY_DAYS)\n            };\n            this.records.set(o.id, o), this.persist(), this.events.emit(F.created, o);\n        }), O(this, \"resolve\", async (i)=>{\n            if (this.isInitialized(), this.logger.debug(\"Updating JSON-RPC response history record\"), this.logger.trace({\n                type: \"method\",\n                method: \"update\",\n                response: i\n            }), !this.records.has(i.id)) return;\n            const s = await this.getRecord(i.id);\n            typeof s.response > \"u\" && (s.response = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.isJsonRpcError)(i) ? {\n                error: i.error\n            } : {\n                result: i.result\n            }, this.records.set(s.id, s), this.persist(), this.events.emit(F.updated, s));\n        }), O(this, \"get\", async (i, s)=>(this.isInitialized(), this.logger.debug(\"Getting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"get\",\n                topic: i,\n                id: s\n            }), await this.getRecord(s))), O(this, \"delete\", (i, s)=>{\n            this.isInitialized(), this.logger.debug(\"Deleting record\"), this.logger.trace({\n                type: \"method\",\n                method: \"delete\",\n                id: s\n            }), this.values.forEach((n)=>{\n                if (n.topic === i) {\n                    if (typeof s < \"u\" && n.id !== s) return;\n                    this.records.delete(n.id), this.events.emit(F.deleted, n);\n                }\n            }), this.persist();\n        }), O(this, \"exists\", async (i, s)=>(this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i : !1)), O(this, \"on\", (i, s)=>{\n            this.events.on(i, s);\n        }), O(this, \"once\", (i, s)=>{\n            this.events.once(i, s);\n        }), O(this, \"off\", (i, s)=>{\n            this.events.off(i, s);\n        }), O(this, \"removeListener\", (i, s)=>{\n            this.events.removeListener(i, s);\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const e = [];\n        return this.values.forEach((t)=>{\n            if (typeof t.response < \"u\") return;\n            const i = {\n                topic: t.topic,\n                request: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_9__.formatJsonRpcRequest)(t.request.method, t.request.params, t.id),\n                chainId: t.chainId\n            };\n            return e.push(i);\n        }), e;\n    }\n    async setJsonRpcRecords(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getJsonRpcRecords() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    getRecord(e) {\n        this.isInitialized();\n        const t = this.records.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw new Error(i);\n        }\n        return t;\n    }\n    async persist() {\n        await this.setJsonRpcRecords(this.values), this.events.emit(F.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getJsonRpcRecords();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.records.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                records: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);\n        }\n    }\n    registerEventListeners() {\n        this.events.on(F.created, (e)=>{\n            const t = F.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(F.updated, (e)=>{\n            const t = F.updated;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.events.on(F.deleted, (e)=>{\n            const t = F.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                record: e\n            });\n        }), this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>{\n            this.cleanup();\n        });\n    }\n    cleanup() {\n        try {\n            this.isInitialized();\n            let e = !1;\n            this.records.forEach((t)=>{\n                (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(F.deleted, t, !1), e = !0);\n            }), e && this.persist();\n        } catch (e) {\n            this.logger.warn(e);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar Uo = Object.defineProperty, Fo = (r, e, t)=>e in r ? Uo(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, A = (r, e, t)=>Fo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass ji extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IExpirer {\n    constructor(e, t){\n        super(e, t), this.core = e, this.logger = t, A(this, \"expirations\", new Map), A(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), A(this, \"name\", qt), A(this, \"version\", Gt), A(this, \"cached\", []), A(this, \"initialized\", !1), A(this, \"storagePrefix\", B), A(this, \"init\", async ()=>{\n            this.initialized || (this.logger.trace(\"Initialized\"), await this.restore(), this.cached.forEach((i)=>this.expirations.set(i.target, i)), this.cached = [], this.registerEventListeners(), this.initialized = !0);\n        }), A(this, \"has\", (i)=>{\n            try {\n                const s = this.formatTarget(i);\n                return typeof this.getExpiration(s) < \"u\";\n            } catch  {\n                return !1;\n            }\n        }), A(this, \"set\", (i, s)=>{\n            this.isInitialized();\n            const n = this.formatTarget(i), o = {\n                target: n,\n                expiry: s\n            };\n            this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit(M.created, {\n                target: n,\n                expiration: o\n            });\n        }), A(this, \"get\", (i)=>{\n            this.isInitialized();\n            const s = this.formatTarget(i);\n            return this.getExpiration(s);\n        }), A(this, \"del\", (i)=>{\n            if (this.isInitialized(), this.has(i)) {\n                const s = this.formatTarget(i), n = this.getExpiration(s);\n                this.expirations.delete(s), this.events.emit(M.deleted, {\n                    target: s,\n                    expiration: n\n                });\n            }\n        }), A(this, \"on\", (i, s)=>{\n            this.events.on(i, s);\n        }), A(this, \"once\", (i, s)=>{\n            this.events.once(i, s);\n        }), A(this, \"off\", (i, s)=>{\n            this.events.off(i, s);\n        }), A(this, \"removeListener\", (i, s)=>{\n            this.events.removeListener(i, s);\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name);\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    get storageKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//\" + this.name;\n    }\n    get length() {\n        return this.expirations.size;\n    }\n    get keys() {\n        return Array.from(this.expirations.keys());\n    }\n    get values() {\n        return Array.from(this.expirations.values());\n    }\n    formatTarget(e) {\n        if (typeof e == \"string\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatTopicTarget)(e);\n        if (typeof e == \"number\") return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatIdTarget)(e);\n        const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"UNKNOWN_TYPE\", `Target type: ${typeof e}`);\n        throw new Error(t);\n    }\n    async setExpirations(e) {\n        await this.core.storage.setItem(this.storageKey, e);\n    }\n    async getExpirations() {\n        return await this.core.storage.getItem(this.storageKey);\n    }\n    async persist() {\n        await this.setExpirations(this.values), this.events.emit(M.sync);\n    }\n    async restore() {\n        try {\n            const e = await this.getExpirations();\n            if (typeof e > \"u\" || !e.length) return;\n            if (this.expirations.size) {\n                const { message: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"RESTORE_WILL_OVERRIDE\", this.name);\n                throw this.logger.error(t), new Error(t);\n            }\n            this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({\n                type: \"method\",\n                method: \"restore\",\n                expirations: this.values\n            });\n        } catch (e) {\n            this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);\n        }\n    }\n    getExpiration(e) {\n        const t = this.expirations.get(e);\n        if (!t) {\n            const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NO_MATCHING_KEY\", `${this.name}: ${e}`);\n            throw this.logger.warn(i), new Error(i);\n        }\n        return t;\n    }\n    checkExpiry(e, t) {\n        const { expiry: i } = t;\n        (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(i) - Date.now() <= 0 && this.expire(e, t);\n    }\n    expire(e, t) {\n        this.expirations.delete(e), this.events.emit(M.expired, {\n            target: e,\n            expiration: t\n        });\n    }\n    checkExpirations() {\n        this.core.relayer.connected && this.expirations.forEach((e, t)=>this.checkExpiry(t, e));\n    }\n    registerEventListeners() {\n        this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, ()=>this.checkExpirations()), this.events.on(M.created, (e)=>{\n            const t = M.created;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(M.expired, (e)=>{\n            const t = M.expired;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        }), this.events.on(M.deleted, (e)=>{\n            const t = M.deleted;\n            this.logger.info(`Emitting ${t}`), this.logger.debug({\n                type: \"event\",\n                event: t,\n                data: e\n            }), this.persist();\n        });\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(e);\n        }\n    }\n}\nvar Mo = Object.defineProperty, Ko = (r, e, t)=>e in r ? Mo(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, w = (r, e, t)=>Ko(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Ui extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IVerify {\n    constructor(e, t, i){\n        super(e, t, i), this.core = e, this.logger = t, this.store = i, w(this, \"name\", Wt), w(this, \"abortController\"), w(this, \"isDevEnv\"), w(this, \"verifyUrlV3\", Yt), w(this, \"storagePrefix\", B), w(this, \"version\", Le), w(this, \"publicKey\"), w(this, \"fetchPromise\"), w(this, \"init\", async ()=>{\n            var s;\n            this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)((s = this.publicKey) == null ? void 0 : s.expiresAt) < Date.now() && (this.logger.debug(\"verify v2 public key expired\"), await this.removePublicKey()));\n        }), w(this, \"register\", async (s)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isBrowser)() || this.isDevEnv) return;\n            const n = window.location.origin, { id: o, decryptedId: a } = s, c = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n}&id=${o}&decryptedId=${a}`;\n            try {\n                const h = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_11__.getDocument)(), l = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 5), d = await new Promise((g, _)=>{\n                    const u = ()=>{\n                        window.removeEventListener(\"message\", x), h.body.removeChild(b), _(\"attestation aborted\");\n                    };\n                    this.abortController.signal.addEventListener(\"abort\", u);\n                    const b = h.createElement(\"iframe\");\n                    b.src = c, b.style.display = \"none\", b.addEventListener(\"error\", u, {\n                        signal: this.abortController.signal\n                    });\n                    const x = (I)=>{\n                        if (I.data && typeof I.data == \"string\") try {\n                            const D = JSON.parse(I.data);\n                            if (D.type === \"verify_attestation\") {\n                                if ((0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.decodeJWT)(D.attestation).payload.id !== o) return;\n                                clearInterval(l), h.body.removeChild(b), this.abortController.signal.removeEventListener(\"abort\", u), window.removeEventListener(\"message\", x), g(D.attestation === null ? \"\" : D.attestation);\n                            }\n                        } catch (D) {\n                            this.logger.warn(D);\n                        }\n                    };\n                    h.body.appendChild(b), window.addEventListener(\"message\", x, {\n                        signal: this.abortController.signal\n                    });\n                });\n                return this.logger.debug(\"jwt attestation\", d), d;\n            } catch (h) {\n                this.logger.warn(h);\n            }\n            return \"\";\n        }), w(this, \"resolve\", async (s)=>{\n            if (this.isDevEnv) return \"\";\n            const { attestationId: n, hash: o, encryptedId: a } = s;\n            if (n === \"\") {\n                this.logger.debug(\"resolve: attestationId is empty, skipping\");\n                return;\n            }\n            if (n) {\n                if ((0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_6__.decodeJWT)(n).payload.id !== a) return;\n                const h = await this.isValidJwtAttestation(n);\n                if (h) {\n                    if (!h.isVerified) {\n                        this.logger.warn(\"resolve: jwt attestation: origin url not verified\");\n                        return;\n                    }\n                    return h;\n                }\n            }\n            if (!o) return;\n            const c = this.getVerifyUrl(s?.verifyUrl);\n            return this.fetchAttestation(o, c);\n        }), w(this, \"fetchAttestation\", async (s, n)=>{\n            this.logger.debug(`resolving attestation: ${s} from url: ${n}`);\n            const o = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.ONE_SECOND * 5), a = await fetch(`${n}/attestation/${s}?v2Supported=true`, {\n                signal: this.abortController.signal\n            });\n            return clearTimeout(o), a.status === 200 ? await a.json() : void 0;\n        }), w(this, \"getVerifyUrl\", (s)=>{\n            let n = s || ue;\n            return Jt.includes(n) || (this.logger.info(`verify url: ${n}, not included in trusted list, assigning default: ${ue}`), n = ue), n;\n        }), w(this, \"fetchPublicKey\", async ()=>{\n            try {\n                this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);\n                const s = this.startAbortTimer(_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.FIVE_SECONDS), n = await fetch(`${this.verifyUrlV3}/public-key`, {\n                    signal: this.abortController.signal\n                });\n                return clearTimeout(s), await n.json();\n            } catch (s) {\n                this.logger.warn(s);\n            }\n        }), w(this, \"persistPublicKey\", async (s)=>{\n            this.logger.debug(\"persisting public key to local storage\", s), await this.store.setItem(this.storeKey, s), this.publicKey = s;\n        }), w(this, \"removePublicKey\", async ()=>{\n            this.logger.debug(\"removing verify v2 public key from storage\"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;\n        }), w(this, \"isValidJwtAttestation\", async (s)=>{\n            const n = await this.getPublicKey();\n            try {\n                if (n) return this.validateAttestation(s, n);\n            } catch (a) {\n                this.logger.error(a), this.logger.warn(\"error validating attestation\");\n            }\n            const o = await this.fetchAndPersistPublicKey();\n            try {\n                if (o) return this.validateAttestation(s, o);\n            } catch (a) {\n                this.logger.error(a), this.logger.warn(\"error validating attestation\");\n            }\n        }), w(this, \"getPublicKey\", async ()=>this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w(this, \"fetchAndPersistPublicKey\", async ()=>{\n            if (this.fetchPromise) return await this.fetchPromise, this.publicKey;\n            this.fetchPromise = new Promise(async (n)=>{\n                const o = await this.fetchPublicKey();\n                o && (await this.persistPublicKey(o), n(o));\n            });\n            const s = await this.fetchPromise;\n            return this.fetchPromise = void 0, s;\n        }), w(this, \"validateAttestation\", (s, n)=>{\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.verifyP256Jwt)(s, n.publicKey), a = {\n                hasExpired: (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(o.exp) < Date.now(),\n                payload: o\n            };\n            if (a.hasExpired) throw this.logger.warn(\"resolve: jwt attestation expired\"), new Error(\"JWT attestation expired\");\n            return {\n                origin: a.payload.origin,\n                isScam: a.payload.isScam,\n                isVerified: a.payload.isVerified\n            };\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.name), this.abortController = new AbortController, this.isDevEnv = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTestRun)(), this.init();\n    }\n    get storeKey() {\n        return this.storagePrefix + this.version + this.core.customStoragePrefix + \"//verify:public:key\";\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    startAbortTimer(e) {\n        return this.abortController = new AbortController, setTimeout(()=>this.abortController.abort(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.toMiliseconds)(e));\n    }\n}\nvar Bo = Object.defineProperty, Vo = (r, e, t)=>e in r ? Bo(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, Fi = (r, e, t)=>Vo(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Mi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IEchoClient {\n    constructor(e, t){\n        super(e, t), this.projectId = e, this.logger = t, Fi(this, \"context\", Xt), Fi(this, \"registerDeviceToken\", async (i)=>{\n            const { clientId: s, token: n, notificationType: o, enableEncrypted: a = !1 } = i, c = `${Zt}/${this.projectId}/clients`;\n            await fetch(c, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    client_id: s,\n                    type: o,\n                    token: n,\n                    always_raw: a\n                })\n            });\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context);\n    }\n}\nvar qo = Object.defineProperty, Ki = Object.getOwnPropertySymbols, Go = Object.prototype.hasOwnProperty, Wo = Object.prototype.propertyIsEnumerable, Ze = (r, e, t)=>e in r ? qo(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, be = (r, e)=>{\n    for(var t in e || (e = {}))Go.call(e, t) && Ze(r, t, e[t]);\n    if (Ki) for (var t of Ki(e))Wo.call(e, t) && Ze(r, t, e[t]);\n    return r;\n}, E = (r, e, t)=>Ze(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Bi extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.IEventClient {\n    constructor(e, t, i = !0){\n        super(e, t, i), this.core = e, this.logger = t, E(this, \"context\", ei), E(this, \"storagePrefix\", B), E(this, \"storageVersion\", Qt), E(this, \"events\", new Map), E(this, \"shouldPersist\", !1), E(this, \"init\", async ()=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.isTestRun)()) try {\n                const s = {\n                    eventId: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.uuidv4)(),\n                    timestamp: Date.now(),\n                    domain: this.getAppDomain(),\n                    props: {\n                        event: \"INIT\",\n                        type: \"\",\n                        properties: {\n                            client_id: await this.core.crypto.getClientId(),\n                            user_agent: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.formatUA)(this.core.relayer.protocol, this.core.relayer.version, _e)\n                        }\n                    }\n                };\n                await this.sendEvent([\n                    s\n                ]);\n            } catch (s) {\n                this.logger.warn(s);\n            }\n        }), E(this, \"createEvent\", (s)=>{\n            const { event: n = \"ERROR\", type: o = \"\", properties: { topic: a, trace: c } } = s, h = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.uuidv4)(), l = this.core.projectId || \"\", d = Date.now(), g = be({\n                eventId: h,\n                timestamp: d,\n                props: {\n                    event: n,\n                    type: o,\n                    properties: {\n                        topic: a,\n                        trace: c\n                    }\n                },\n                bundleId: l,\n                domain: this.getAppDomain()\n            }, this.setMethods(h));\n            return this.telemetryEnabled && (this.events.set(h, g), this.shouldPersist = !0), g;\n        }), E(this, \"getEvent\", (s)=>{\n            const { eventId: n, topic: o } = s;\n            if (n) return this.events.get(n);\n            const a = Array.from(this.events.values()).find((c)=>c.props.properties.topic === o);\n            if (a) return be(be({}, a), this.setMethods(a.eventId));\n        }), E(this, \"deleteEvent\", (s)=>{\n            const { eventId: n } = s;\n            this.events.delete(n), this.shouldPersist = !0;\n        }), E(this, \"setEventListeners\", ()=>{\n            this.core.heartbeat.on(_walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HEARTBEAT_EVENTS.pulse, async ()=>{\n                this.shouldPersist && await this.persist(), this.events.forEach((s)=>{\n                    (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.fromMiliseconds)(Date.now()) - (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_4__.fromMiliseconds)(s.timestamp) > ti && (this.events.delete(s.eventId), this.shouldPersist = !0);\n                });\n            });\n        }), E(this, \"setMethods\", (s)=>({\n                addTrace: (n)=>this.addTrace(s, n),\n                setError: (n)=>this.setError(s, n)\n            })), E(this, \"addTrace\", (s, n)=>{\n            const o = this.events.get(s);\n            o && (o.props.properties.trace.push(n), this.events.set(s, o), this.shouldPersist = !0);\n        }), E(this, \"setError\", (s, n)=>{\n            const o = this.events.get(s);\n            o && (o.props.type = n, o.timestamp = Date.now(), this.events.set(s, o), this.shouldPersist = !0);\n        }), E(this, \"persist\", async ()=>{\n            await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = !1;\n        }), E(this, \"restore\", async ()=>{\n            try {\n                const s = await this.core.storage.getItem(this.storageKey) || [];\n                if (!s.length) return;\n                s.forEach((n)=>{\n                    this.events.set(n.eventId, be(be({}, n), this.setMethods(n.eventId)));\n                });\n            } catch (s) {\n                this.logger.warn(s);\n            }\n        }), E(this, \"submit\", async ()=>{\n            if (!this.telemetryEnabled || this.events.size === 0) return;\n            const s = [];\n            for (const [n, o] of this.events)o.props.type && s.push(o);\n            if (s.length !== 0) try {\n                if ((await this.sendEvent(s)).ok) for (const n of s)this.events.delete(n.eventId), this.shouldPersist = !0;\n            } catch (n) {\n                this.logger.warn(n);\n            }\n        }), E(this, \"sendEvent\", async (s)=>{\n            const n = this.getAppDomain() ? \"\" : \"&sp=desktop\";\n            return await fetch(`${ii}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e}${n}`, {\n                method: \"POST\",\n                body: JSON.stringify(s)\n            });\n        }), E(this, \"getAppDomain\", ()=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_12__.getAppMetadata)().url), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(t, this.context), this.telemetryEnabled = i, i ? this.restore().then(async ()=>{\n            await this.submit(), this.setEventListeners();\n        }) : this.persist();\n    }\n    get storageKey() {\n        return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + \"//\" + this.context;\n    }\n}\nvar Ho = Object.defineProperty, Vi = Object.getOwnPropertySymbols, Yo = Object.prototype.hasOwnProperty, Jo = Object.prototype.propertyIsEnumerable, Qe = (r, e, t)=>e in r ? Ho(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, qi = (r, e)=>{\n    for(var t in e || (e = {}))Yo.call(e, t) && Qe(r, t, e[t]);\n    if (Vi) for (var t of Vi(e))Jo.call(e, t) && Qe(r, t, e[t]);\n    return r;\n}, v = (r, e, t)=>Qe(r, typeof e != \"symbol\" ? e + \"\" : e, t);\nclass Te extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_13__.ICore {\n    constructor(e){\n        var t;\n        super(e), v(this, \"protocol\", ze), v(this, \"version\", Le), v(this, \"name\", he), v(this, \"relayUrl\"), v(this, \"projectId\"), v(this, \"customStoragePrefix\"), v(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), v(this, \"logger\"), v(this, \"heartbeat\"), v(this, \"relayer\"), v(this, \"crypto\"), v(this, \"storage\"), v(this, \"history\"), v(this, \"expirer\"), v(this, \"pairing\"), v(this, \"verify\"), v(this, \"echoClient\"), v(this, \"linkModeSupportedApps\"), v(this, \"eventClient\"), v(this, \"initialized\", !1), v(this, \"logChunkController\"), v(this, \"on\", (a, c)=>this.events.on(a, c)), v(this, \"once\", (a, c)=>this.events.once(a, c)), v(this, \"off\", (a, c)=>this.events.off(a, c)), v(this, \"removeListener\", (a, c)=>this.events.removeListener(a, c)), v(this, \"dispatchEnvelope\", ({ topic: a, message: c, sessionExists: h })=>{\n            if (!a || !c) return;\n            const l = {\n                topic: a,\n                message: c,\n                publishedAt: Date.now(),\n                transportType: Q.link_mode\n            };\n            this.relayer.onLinkMessageEvent(l, {\n                sessionExists: h\n            });\n        });\n        const i = this.getGlobalCore(e?.customStoragePrefix);\n        if (i) try {\n            return this.customStoragePrefix = i.customStoragePrefix, this.logger = i.logger, this.heartbeat = i.heartbeat, this.crypto = i.crypto, this.history = i.history, this.expirer = i.expirer, this.storage = i.storage, this.relayer = i.relayer, this.pairing = i.pairing, this.verify = i.verify, this.echoClient = i.echoClient, this.linkModeSupportedApps = i.linkModeSupportedApps, this.eventClient = i.eventClient, this.initialized = i.initialized, this.logChunkController = i.logChunkController, i;\n        } catch (a) {\n            console.warn(\"Failed to copy global core\", a);\n        }\n        this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || Ue, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : \"\";\n        const s = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getDefaultLoggerOptions)({\n            level: typeof e?.logger == \"string\" && e.logger ? e.logger : Et.logger,\n            name: he\n        }), { logger: n, chunkLoggerController: o } = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generatePlatformLogger)({\n            opts: s,\n            maxSizeInBytes: e?.maxLogBlobSizeInBytes,\n            loggerOverride: e?.logger\n        });\n        this.logChunkController = o, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async ()=>{\n            var a, c;\n            (a = this.logChunkController) != null && a.downloadLogsBlobInBrowser && ((c = this.logChunkController) == null || c.downloadLogsBlobInBrowser({\n                clientId: await this.crypto.getClientId()\n            }));\n        }), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.generateChildLogger)(n, this.name), this.heartbeat = new _walletconnect_heartbeat__WEBPACK_IMPORTED_MODULE_1__.HeartBeat, this.crypto = new vi(this, this.logger, e?.keychain), this.history = new ki(this, this.logger), this.expirer = new ji(this, this.logger), this.storage = e != null && e.storage ? e.storage : new _walletconnect_keyvaluestorage__WEBPACK_IMPORTED_MODULE_2__[\"default\"](qi(qi({}, It), e?.storageOptions)), this.relayer = new Si({\n            core: this,\n            logger: this.logger,\n            relayUrl: this.relayUrl,\n            projectId: this.projectId\n        }), this.pairing = new Li(this, this.logger), this.verify = new Ui(this, this.logger, this.storage), this.echoClient = new Mi(this.projectId || \"\", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Bi(this, this.logger, e?.telemetryEnabled), this.setGlobalCore(this);\n    }\n    static async init(e) {\n        const t = new Te(e);\n        await t.initialize();\n        const i = await t.crypto.getClientId();\n        return await t.storage.setItem(jt, i), t;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerContext)(this.logger);\n    }\n    async start() {\n        this.initialized || await this.initialize();\n    }\n    async getLogsBlob() {\n        var e;\n        return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({\n            clientId: await this.crypto.getClientId()\n        });\n    }\n    async addLinkModeSupportedApp(e) {\n        this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(Fe, this.linkModeSupportedApps));\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Fe) || [], this.initialized = !0, this.logger.info(\"Core Initialization Success\");\n        } catch (e) {\n            throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;\n        }\n    }\n    getGlobalCore(e = \"\") {\n        try {\n            if (this.isGlobalCoreDisabled()) return;\n            const t = `_walletConnectCore_${e}`, i = `${t}_count`;\n            return globalThis[i] = (globalThis[i] || 0) + 1, globalThis[i] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i]} times.`), globalThis[t];\n        } catch (t) {\n            console.warn(\"Failed to get global WalletConnect core\", t);\n            return;\n        }\n    }\n    setGlobalCore(e) {\n        var t;\n        try {\n            if (this.isGlobalCoreDisabled()) return;\n            const i = `_walletConnectCore_${((t = e.opts) == null ? void 0 : t.customStoragePrefix) || \"\"}`;\n            globalThis[i] = e;\n        } catch (i) {\n            console.warn(\"Failed to set global WalletConnect core\", i);\n        }\n    }\n    isGlobalCoreDisabled() {\n        try {\n            return typeof process < \"u\" && process.env.DISABLE_GLOBAL_CORE === \"true\";\n        } catch  {\n            return !0;\n        }\n    }\n}\nconst Xo = Te;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyValueStorage: () => (/* binding */ h),\n/* harmony export */   \"default\": () => (/* binding */ h)\n/* harmony export */ });\n/* harmony import */ var unstorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unstorage */ \"(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs\");\n/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! idb-keyval */ \"(ssr)/./node_modules/idb-keyval/dist/index.js\");\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nfunction C(i) {\n    return i;\n}\nconst x = \"idb-keyval\";\nvar z = (i = {})=>{\n    const t = i.base && i.base.length > 0 ? `${i.base}:` : \"\", e = (s)=>t + s;\n    let n;\n    return i.dbName && i.storeName && (n = (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.createStore)(i.dbName, i.storeName)), {\n        name: x,\n        options: i,\n        async hasItem (s) {\n            return !(typeof await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n) > \"u\");\n        },\n        async getItem (s) {\n            return await (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.get)(e(s), n) ?? null;\n        },\n        setItem (s, a) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.set)(e(s), a, n);\n        },\n        removeItem (s) {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.del)(e(s), n);\n        },\n        getKeys () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.keys)(n);\n        },\n        clear () {\n            return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_1__.clear)(n);\n        }\n    };\n};\nconst D = \"WALLET_CONNECT_V2_INDEXED_DB\", E = \"keyvaluestorage\";\nclass _ {\n    constructor(){\n        this.indexedDb = (0,unstorage__WEBPACK_IMPORTED_MODULE_2__.createStorage)({\n            driver: z({\n                dbName: D,\n                storeName: E\n            })\n        });\n    }\n    async getKeys() {\n        return this.indexedDb.getKeys();\n    }\n    async getEntries() {\n        return (await this.indexedDb.getItems(await this.indexedDb.getKeys())).map((t)=>[\n                t.key,\n                t.value\n            ]);\n    }\n    async getItem(t) {\n        const e = await this.indexedDb.getItem(t);\n        if (e !== null) return e;\n    }\n    async setItem(t, e) {\n        await this.indexedDb.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        await this.indexedDb.removeItem(t);\n    }\n}\nvar l = typeof globalThis < \"u\" ? globalThis :  false ? 0 : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {}, c = {\n    exports: {}\n};\n(function() {\n    let i;\n    function t() {}\n    i = t, i.prototype.getItem = function(e) {\n        return this.hasOwnProperty(e) ? String(this[e]) : null;\n    }, i.prototype.setItem = function(e, n) {\n        this[e] = String(n);\n    }, i.prototype.removeItem = function(e) {\n        delete this[e];\n    }, i.prototype.clear = function() {\n        const e = this;\n        Object.keys(e).forEach(function(n) {\n            e[n] = void 0, delete e[n];\n        });\n    }, i.prototype.key = function(e) {\n        return e = e || 0, Object.keys(this)[e];\n    }, i.prototype.__defineGetter__(\"length\", function() {\n        return Object.keys(this).length;\n    }), typeof l < \"u\" && l.localStorage ? c.exports = l.localStorage :  false ? 0 : c.exports = new t;\n})();\nfunction k(i) {\n    var t;\n    return [\n        i[0],\n        (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)((t = i[1]) != null ? t : \"\")\n    ];\n}\nclass K {\n    constructor(){\n        this.localStorage = c.exports;\n    }\n    async getKeys() {\n        return Object.keys(this.localStorage);\n    }\n    async getEntries() {\n        return Object.entries(this.localStorage).map(k);\n    }\n    async getItem(t) {\n        const e = this.localStorage.getItem(t);\n        if (e !== null) return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonParse)(e);\n    }\n    async setItem(t, e) {\n        this.localStorage.setItem(t, (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_0__.safeJsonStringify)(e));\n    }\n    async removeItem(t) {\n        this.localStorage.removeItem(t);\n    }\n}\nconst N = \"wc_storage_version\", y = 1, O = async (i, t, e)=>{\n    const n = N, s = await t.getItem(n);\n    if (s && s >= y) {\n        e(t);\n        return;\n    }\n    const a = await i.getKeys();\n    if (!a.length) {\n        e(t);\n        return;\n    }\n    const m = [];\n    for(; a.length;){\n        const r = a.shift();\n        if (!r) continue;\n        const o = r.toLowerCase();\n        if (o.includes(\"wc@\") || o.includes(\"walletconnect\") || o.includes(\"wc_\") || o.includes(\"wallet_connect\")) {\n            const f = await i.getItem(r);\n            await t.setItem(r, f), m.push(r);\n        }\n    }\n    await t.setItem(n, y), e(t), j(i, m);\n}, j = async (i, t)=>{\n    t.length && t.forEach(async (e)=>{\n        await i.removeItem(e);\n    });\n};\nclass h {\n    constructor(){\n        this.initialized = !1, this.setInitialized = (e)=>{\n            this.storage = e, this.initialized = !0;\n        };\n        const t = new K;\n        this.storage = t;\n        try {\n            const e = new _;\n            O(t, e, this.setInitialized);\n        } catch  {\n            this.initialized = !0;\n        }\n    }\n    async getKeys() {\n        return await this.initialize(), this.storage.getKeys();\n    }\n    async getEntries() {\n        return await this.initialize(), this.storage.getEntries();\n    }\n    async getItem(t) {\n        return await this.initialize(), this.storage.getItem(t);\n    }\n    async setItem(t, e) {\n        return await this.initialize(), this.storage.setItem(t, e);\n    }\n    async removeItem(t) {\n        return await this.initialize(), this.storage.removeItem(t);\n    }\n    async initialize() {\n        this.initialized || await new Promise((t)=>{\n            const e = setInterval(()=>{\n                this.initialized && (clearInterval(e), t());\n            }, 20);\n        });\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/node_modules/@walletconnect/keyvaluestorage/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/crypto.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowserCryptoAvailable = exports.getSubtleCrypto = exports.getBrowerCrypto = void 0;\nfunction getBrowerCrypto() {\n    return (global === null || global === void 0 ? void 0 : global.crypto) || (global === null || global === void 0 ? void 0 : global.msCrypto) || {};\n}\nexports.getBrowerCrypto = getBrowerCrypto;\nfunction getSubtleCrypto() {\n    const browserCrypto = getBrowerCrypto();\n    return browserCrypto.subtle || browserCrypto.webkitSubtle;\n}\nexports.getSubtleCrypto = getSubtleCrypto;\nfunction isBrowserCryptoAvailable() {\n    return !!getBrowerCrypto() && !!getSubtleCrypto();\n}\nexports.isBrowserCryptoAvailable = isBrowserCryptoAvailable; //# sourceMappingURL=crypto.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxnQ0FBZ0MsR0FBR0EsdUJBQXVCLEdBQUdBLHVCQUF1QixHQUFHLEtBQUs7QUFDNUYsU0FBU0k7SUFDTCxPQUFPLENBQUNDLFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPQyxNQUFNLEtBQU1ELENBQUFBLFdBQVcsUUFBUUEsV0FBVyxLQUFLLElBQUksS0FBSyxJQUFJQSxPQUFPRSxRQUFRLEtBQUssQ0FBQztBQUNwSjtBQUNBUCx1QkFBdUIsR0FBR0k7QUFDMUIsU0FBU0Q7SUFDTCxNQUFNSyxnQkFBZ0JKO0lBQ3RCLE9BQU9JLGNBQWNDLE1BQU0sSUFBSUQsY0FBY0UsWUFBWTtBQUM3RDtBQUNBVix1QkFBdUIsR0FBR0c7QUFDMUIsU0FBU0Q7SUFDTCxPQUFPLENBQUMsQ0FBQ0UscUJBQXFCLENBQUMsQ0FBQ0Q7QUFDcEM7QUFDQUgsZ0NBQWdDLEdBQUdFLDBCQUNuQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudC9kaXN0L2Nqcy9jcnlwdG8uanM/NmRkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlID0gZXhwb3J0cy5nZXRTdWJ0bGVDcnlwdG8gPSBleHBvcnRzLmdldEJyb3dlckNyeXB0byA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldEJyb3dlckNyeXB0bygpIHtcbiAgICByZXR1cm4gKGdsb2JhbCA9PT0gbnVsbCB8fCBnbG9iYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdsb2JhbC5jcnlwdG8pIHx8IChnbG9iYWwgPT09IG51bGwgfHwgZ2xvYmFsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBnbG9iYWwubXNDcnlwdG8pIHx8IHt9O1xufVxuZXhwb3J0cy5nZXRCcm93ZXJDcnlwdG8gPSBnZXRCcm93ZXJDcnlwdG87XG5mdW5jdGlvbiBnZXRTdWJ0bGVDcnlwdG8oKSB7XG4gICAgY29uc3QgYnJvd3NlckNyeXB0byA9IGdldEJyb3dlckNyeXB0bygpO1xuICAgIHJldHVybiBicm93c2VyQ3J5cHRvLnN1YnRsZSB8fCBicm93c2VyQ3J5cHRvLndlYmtpdFN1YnRsZTtcbn1cbmV4cG9ydHMuZ2V0U3VidGxlQ3J5cHRvID0gZ2V0U3VidGxlQ3J5cHRvO1xuZnVuY3Rpb24gaXNCcm93c2VyQ3J5cHRvQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiAhIWdldEJyb3dlckNyeXB0bygpICYmICEhZ2V0U3VidGxlQ3J5cHRvKCk7XG59XG5leHBvcnRzLmlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZSA9IGlzQnJvd3NlckNyeXB0b0F2YWlsYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0by5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc0Jyb3dzZXJDcnlwdG9BdmFpbGFibGUiLCJnZXRTdWJ0bGVDcnlwdG8iLCJnZXRCcm93ZXJDcnlwdG8iLCJnbG9iYWwiLCJjcnlwdG8iLCJtc0NyeXB0byIsImJyb3dzZXJDcnlwdG8iLCJzdWJ0bGUiLCJ3ZWJraXRTdWJ0bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/env.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isBrowser = exports.isNode = exports.isReactNative = void 0;\nfunction isReactNative() {\n    return typeof document === \"undefined\" && typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\";\n}\nexports.isReactNative = isReactNative;\nfunction isNode() {\n    return typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\";\n}\nexports.isNode = isNode;\nfunction isBrowser() {\n    return !isReactNative() && !isNode();\n}\nexports.isBrowser = isBrowser; //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvZW52LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsY0FBYyxHQUFHQSxxQkFBcUIsR0FBRyxLQUFLO0FBQ2xFLFNBQVNJO0lBQ0wsT0FBUSxPQUFPQyxhQUFhLGVBQ3hCLE9BQU9DLGNBQWMsZUFDckJBLFVBQVVDLE9BQU8sS0FBSztBQUM5QjtBQUNBUCxxQkFBcUIsR0FBR0k7QUFDeEIsU0FBU0Q7SUFDTCxPQUFRLE9BQU9LLFlBQVksZUFDdkIsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLO0FBQ3pDO0FBQ0FWLGNBQWMsR0FBR0c7QUFDakIsU0FBU0Q7SUFDTCxPQUFPLENBQUNFLG1CQUFtQixDQUFDRDtBQUNoQztBQUNBSCxpQkFBaUIsR0FBR0UsV0FDcEIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvZW52LmpzPzQzOGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnJvd3NlciA9IGV4cG9ydHMuaXNOb2RlID0gZXhwb3J0cy5pc1JlYWN0TmF0aXZlID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNSZWFjdE5hdGl2ZSgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSBcIlJlYWN0TmF0aXZlXCIpO1xufVxuZXhwb3J0cy5pc1JlYWN0TmF0aXZlID0gaXNSZWFjdE5hdGl2ZTtcbmZ1bmN0aW9uIGlzTm9kZSgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT09IFwidW5kZWZpbmVkXCIpO1xufVxuZXhwb3J0cy5pc05vZGUgPSBpc05vZGU7XG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XG4gICAgcmV0dXJuICFpc1JlYWN0TmF0aXZlKCkgJiYgIWlzTm9kZSgpO1xufVxuZXhwb3J0cy5pc0Jyb3dzZXIgPSBpc0Jyb3dzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbnYuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNCcm93c2VyIiwiaXNOb2RlIiwiaXNSZWFjdE5hdGl2ZSIsImRvY3VtZW50IiwibmF2aWdhdG9yIiwicHJvZHVjdCIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/dist/cjs/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./crypto */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/crypto.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./env */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/env.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsOEZBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsb0ZBQVUsR0FBR0g7QUFDMUNFLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsOEVBQU8sR0FBR0gsVUFDdkMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnQvZGlzdC9janMvaW5kZXguanM/NWMyNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jcnlwdG9cIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW52XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/environment/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js":
/*!************************************************************************!*\
  !*** ./node_modules/@walletconnect/ethereum-provider/dist/index.es.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EthereumProvider: () => (/* binding */ Y),\n/* harmony export */   OPTIONAL_EVENTS: () => (/* binding */ P),\n/* harmony export */   OPTIONAL_METHODS: () => (/* binding */ A),\n/* harmony export */   REQUIRED_EVENTS: () => (/* binding */ C),\n/* harmony export */   REQUIRED_METHODS: () => (/* binding */ f),\n/* harmony export */   \"default\": () => (/* binding */ b)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/universal-provider */ \"(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\");\n\n\n\nconst $ = \"wc\", k = \"ethereum_provider\", q = `${$}@2:${k}:`, U = \"https://rpc.walletconnect.org/v1/\", f = [\n    \"eth_sendTransaction\",\n    \"personal_sign\"\n], A = [\n    \"eth_accounts\",\n    \"eth_requestAccounts\",\n    \"eth_sendRawTransaction\",\n    \"eth_sign\",\n    \"eth_signTransaction\",\n    \"eth_signTypedData\",\n    \"eth_signTypedData_v3\",\n    \"eth_signTypedData_v4\",\n    \"eth_sendTransaction\",\n    \"personal_sign\",\n    \"wallet_switchEthereumChain\",\n    \"wallet_addEthereumChain\",\n    \"wallet_getPermissions\",\n    \"wallet_requestPermissions\",\n    \"wallet_registerOnboarding\",\n    \"wallet_watchAsset\",\n    \"wallet_scanQRCode\",\n    \"wallet_sendCalls\",\n    \"wallet_getCapabilities\",\n    \"wallet_getCallsStatus\",\n    \"wallet_showCallsStatus\"\n], C = [\n    \"chainChanged\",\n    \"accountsChanged\"\n], P = [\n    \"chainChanged\",\n    \"accountsChanged\",\n    \"message\",\n    \"disconnect\",\n    \"connect\"\n], D = async ()=>{\n    const { createAppKit: s } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@reown\"), __webpack_require__.e(\"vendor-chunks/viem\"), __webpack_require__.e(\"vendor-chunks/lit-html\"), __webpack_require__.e(\"vendor-chunks/@lit\"), __webpack_require__.e(\"vendor-chunks/lit\"), __webpack_require__.e(\"vendor-chunks/dayjs\"), __webpack_require__.e(\"vendor-chunks/@lit-labs\"), __webpack_require__.e(\"vendor-chunks/valtio\"), __webpack_require__.e(\"vendor-chunks/lit-element\"), __webpack_require__.e(\"vendor-chunks/big.js\"), __webpack_require__.e(\"vendor-chunks/proxy-compare\"), __webpack_require__.e(\"vendor-chunks/derive-valtio\")]).then(__webpack_require__.bind(__webpack_require__, /*! @reown/appkit/core */ \"(ssr)/./node_modules/@reown/appkit/dist/esm/exports/core.js\"));\n    return s;\n};\nvar z = Object.defineProperty, L = Object.defineProperties, K = Object.getOwnPropertyDescriptors, M = Object.getOwnPropertySymbols, Q = Object.prototype.hasOwnProperty, V = Object.prototype.propertyIsEnumerable, _ = (s, t, e)=>t in s ? z(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, v = (s, t)=>{\n    for(var e in t || (t = {}))Q.call(t, e) && _(s, e, t[e]);\n    if (M) for (var e of M(t))V.call(t, e) && _(s, e, t[e]);\n    return s;\n}, w = (s, t)=>L(s, K(t)), p = (s, t, e)=>_(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nfunction I(s) {\n    return Number(s[0].split(\":\")[1]);\n}\nfunction E(s) {\n    return `0x${s.toString(16)}`;\n}\nfunction G(s) {\n    const { chains: t, optionalChains: e, methods: n, optionalMethods: i, events: a, optionalEvents: o, rpcMap: u } = s;\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(t)) throw new Error(\"Invalid chains\");\n    const c = {\n        chains: t,\n        methods: n || f,\n        events: a || C,\n        rpcMap: v({}, t.length ? {\n            [I(t)]: u[I(t)]\n        } : {})\n    }, l = a?.filter((d)=>!C.includes(d)), r = n?.filter((d)=>!f.includes(d));\n    if (!e && !o && !i && !(l != null && l.length) && !(r != null && r.length)) return {\n        required: t.length ? c : void 0\n    };\n    const m = l?.length && r?.length || !e, h = {\n        chains: [\n            ...new Set(m ? c.chains.concat(e || []) : e)\n        ],\n        methods: [\n            ...new Set(c.methods.concat(i != null && i.length ? i : A))\n        ],\n        events: [\n            ...new Set(c.events.concat(o != null && o.length ? o : P))\n        ],\n        rpcMap: u\n    };\n    return {\n        required: t.length ? c : void 0,\n        optional: e.length ? h : void 0\n    };\n}\nclass b {\n    constructor(){\n        p(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter), p(this, \"namespace\", \"eip155\"), p(this, \"accounts\", []), p(this, \"signer\"), p(this, \"chainId\", 1), p(this, \"modal\"), p(this, \"rpc\"), p(this, \"STORAGE_KEY\", q), p(this, \"on\", (t, e)=>(this.events.on(t, e), this)), p(this, \"once\", (t, e)=>(this.events.once(t, e), this)), p(this, \"removeListener\", (t, e)=>(this.events.removeListener(t, e), this)), p(this, \"off\", (t, e)=>(this.events.off(t, e), this)), p(this, \"parseAccount\", (t)=>this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t), this.signer = {}, this.rpc = {};\n    }\n    static async init(t) {\n        const e = new b;\n        return await e.initialize(t), e;\n    }\n    async request(t, e) {\n        return await this.signer.request(t, this.formatChainId(this.chainId), e);\n    }\n    sendAsync(t, e, n) {\n        this.signer.sendAsync(t, e, this.formatChainId(this.chainId), n);\n    }\n    get connected() {\n        return this.signer.client ? this.signer.client.core.relayer.connected : !1;\n    }\n    get connecting() {\n        return this.signer.client ? this.signer.client.core.relayer.connecting : !1;\n    }\n    async enable() {\n        return this.session || await this.connect(), await this.request({\n            method: \"eth_requestAccounts\"\n        });\n    }\n    async connect(t) {\n        var e;\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts(t);\n        const { required: n, optional: i } = G(this.rpc);\n        try {\n            const a = await new Promise(async (u, c)=>{\n                var l, r;\n                this.rpc.showQrModal && ((l = this.modal) == null || l.open(), (r = this.modal) == null || r.subscribeState((h)=>{\n                    !h.open && !this.signer.session && (this.signer.abortPairingAttempt(), c(new Error(\"Connection request reset. Please try again.\")));\n                }));\n                const m = t != null && t.scopedProperties ? {\n                    [this.namespace]: t.scopedProperties\n                } : void 0;\n                await this.signer.connect(w(v({\n                    namespaces: v({}, n && {\n                        [this.namespace]: n\n                    })\n                }, i && {\n                    optionalNamespaces: {\n                        [this.namespace]: i\n                    }\n                }), {\n                    pairingTopic: t?.pairingTopic,\n                    scopedProperties: m\n                })).then((h)=>{\n                    u(h);\n                }).catch((h)=>{\n                    var d;\n                    (d = this.modal) == null || d.showErrorMessage(\"Unable to connect\"), c(new Error(h.message));\n                });\n            });\n            if (!a) return;\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(a.namespaces, [\n                this.namespace\n            ]);\n            this.setChainIds(this.rpc.chains.length ? this.rpc.chains : o), this.setAccounts(o), this.events.emit(\"connect\", {\n                chainId: E(this.chainId)\n            });\n        } catch (a) {\n            throw this.signer.logger.error(a), a;\n        } finally{\n            (e = this.modal) == null || e.close();\n        }\n    }\n    async authenticate(t, e) {\n        var n;\n        if (!this.signer.client) throw new Error(\"Provider not initialized. Call init() first\");\n        this.loadConnectOpts({\n            chains: t?.chains\n        });\n        try {\n            const i = await new Promise(async (o, u)=>{\n                var c, l;\n                this.rpc.showQrModal && ((c = this.modal) == null || c.open(), (l = this.modal) == null || l.subscribeState((r)=>{\n                    !r.open && !this.signer.session && (this.signer.abortPairingAttempt(), u(new Error(\"Connection request reset. Please try again.\")));\n                })), await this.signer.authenticate(w(v({}, t), {\n                    chains: this.rpc.chains\n                }), e).then((r)=>{\n                    o(r);\n                }).catch((r)=>{\n                    var m;\n                    (m = this.modal) == null || m.showErrorMessage(\"Unable to connect\"), u(new Error(r.message));\n                });\n            }), a = i.session;\n            if (a) {\n                const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getAccountsFromNamespaces)(a.namespaces, [\n                    this.namespace\n                ]);\n                this.setChainIds(this.rpc.chains.length ? this.rpc.chains : o), this.setAccounts(o), this.events.emit(\"connect\", {\n                    chainId: E(this.chainId)\n                });\n            }\n            return i;\n        } catch (i) {\n            throw this.signer.logger.error(i), i;\n        } finally{\n            (n = this.modal) == null || n.close();\n        }\n    }\n    async disconnect() {\n        this.session && await this.signer.disconnect(), this.reset();\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    get session() {\n        return this.signer.session;\n    }\n    registerEventListeners() {\n        this.signer.on(\"session_event\", (t)=>{\n            const { params: e } = t, { event: n } = e;\n            n.name === \"accountsChanged\" ? (this.accounts = this.parseAccounts(n.data), this.events.emit(\"accountsChanged\", this.accounts)) : n.name === \"chainChanged\" ? this.setChainId(this.formatChainId(n.data)) : this.events.emit(n.name, n.data), this.events.emit(\"session_event\", t);\n        }), this.signer.on(\"accountsChanged\", (t)=>{\n            this.accounts = this.parseAccounts(t), this.events.emit(\"accountsChanged\", this.accounts);\n        }), this.signer.on(\"chainChanged\", (t)=>{\n            const e = parseInt(t);\n            this.chainId = e, this.events.emit(\"chainChanged\", E(this.chainId)), this.persist();\n        }), this.signer.on(\"session_update\", (t)=>{\n            this.events.emit(\"session_update\", t);\n        }), this.signer.on(\"session_delete\", (t)=>{\n            this.reset(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", w(v({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic,\n                name: \"USER_DISCONNECTED\"\n            }));\n        }), this.signer.on(\"display_uri\", (t)=>{\n            this.events.emit(\"display_uri\", t);\n        });\n    }\n    switchEthereumChain(t) {\n        this.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [\n                {\n                    chainId: t.toString(16)\n                }\n            ]\n        });\n    }\n    isCompatibleChainId(t) {\n        return typeof t == \"string\" ? t.startsWith(`${this.namespace}:`) : !1;\n    }\n    formatChainId(t) {\n        return `${this.namespace}:${t}`;\n    }\n    parseChainId(t) {\n        return Number(t.split(\":\")[1]);\n    }\n    setChainIds(t) {\n        const e = t.filter((n)=>this.isCompatibleChainId(n)).map((n)=>this.parseChainId(n));\n        e.length && (this.chainId = e[0], this.events.emit(\"chainChanged\", E(this.chainId)), this.persist());\n    }\n    setChainId(t) {\n        if (this.isCompatibleChainId(t)) {\n            const e = this.parseChainId(t);\n            this.chainId = e, this.switchEthereumChain(e);\n        }\n    }\n    parseAccountId(t) {\n        const [e, n, i] = t.split(\":\");\n        return {\n            chainId: `${e}:${n}`,\n            address: i\n        };\n    }\n    setAccounts(t) {\n        this.accounts = t.filter((e)=>this.parseChainId(this.parseAccountId(e).chainId) === this.chainId).map((e)=>this.parseAccountId(e).address), this.events.emit(\"accountsChanged\", this.accounts);\n    }\n    getRpcConfig(t) {\n        var e, n;\n        const i = (e = t?.chains) != null ? e : [], a = (n = t?.optionalChains) != null ? n : [], o = i.concat(a);\n        if (!o.length) throw new Error(\"No chains specified in either `chains` or `optionalChains`\");\n        const u = i.length ? t?.methods || f : [], c = i.length ? t?.events || C : [], l = t?.optionalMethods || [], r = t?.optionalEvents || [], m = t?.rpcMap || this.buildRpcMap(o, t.projectId), h = t?.qrModalOptions || void 0;\n        return {\n            chains: i?.map((d)=>this.formatChainId(d)),\n            optionalChains: a.map((d)=>this.formatChainId(d)),\n            methods: u,\n            events: c,\n            optionalMethods: l,\n            optionalEvents: r,\n            rpcMap: m,\n            showQrModal: !!(t != null && t.showQrModal),\n            qrModalOptions: h,\n            projectId: t.projectId,\n            metadata: t.metadata\n        };\n    }\n    buildRpcMap(t, e) {\n        const n = {};\n        return t.forEach((i)=>{\n            n[i] = this.getRpcUrl(i, e);\n        }), n;\n    }\n    async initialize(t) {\n        if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? I(this.rpc.chains) : I(this.rpc.optionalChains), this.signer = await _walletconnect_universal_provider__WEBPACK_IMPORTED_MODULE_1__.UniversalProvider.init({\n            projectId: this.rpc.projectId,\n            metadata: this.rpc.metadata,\n            disableProviderPing: t.disableProviderPing,\n            relayUrl: t.relayUrl,\n            storage: t.storage,\n            storageOptions: t.storageOptions,\n            customStoragePrefix: t.customStoragePrefix,\n            telemetryEnabled: t.telemetryEnabled,\n            logger: t.logger\n        }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {\n            let e;\n            try {\n                const n = await D(), { convertWCMToAppKitOptions: i } = await Promise.resolve().then(function() {\n                    return nt;\n                }), a = i(w(v({}, this.rpc.qrModalOptions), {\n                    chains: [\n                        ...new Set([\n                            ...this.rpc.chains,\n                            ...this.rpc.optionalChains\n                        ])\n                    ],\n                    metadata: this.rpc.metadata,\n                    projectId: this.rpc.projectId\n                }));\n                if (!a.networks.length) throw new Error(\"No networks found for WalletConnect\\xb7\");\n                e = n(w(v({}, a), {\n                    universalProvider: this.signer,\n                    manualWCControl: !0\n                }));\n            } catch (n) {\n                throw console.warn(n), new Error(\"To use QR modal, please install @reown/appkit package\");\n            }\n            if (e) try {\n                this.modal = e;\n            } catch (n) {\n                throw this.signer.logger.error(n), new Error(\"Could not generate WalletConnectModal Instance\");\n            }\n        }\n    }\n    loadConnectOpts(t) {\n        if (!t) return;\n        const { chains: e, optionalChains: n, rpcMap: i } = t;\n        e && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(e) && (this.rpc.chains = e.map((a)=>this.formatChainId(a)), e.forEach((a)=>{\n            this.rpc.rpcMap[a] = i?.[a] || this.getRpcUrl(a);\n        })), n && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_2__.isValidArray)(n) && (this.rpc.optionalChains = [], this.rpc.optionalChains = n?.map((a)=>this.formatChainId(a)), n.forEach((a)=>{\n            this.rpc.rpcMap[a] = i?.[a] || this.getRpcUrl(a);\n        }));\n    }\n    getRpcUrl(t, e) {\n        var n;\n        return ((n = this.rpc.rpcMap) == null ? void 0 : n[t]) || `${U}?chainId=eip155:${t}&projectId=${e || this.rpc.projectId}`;\n    }\n    async loadPersistedSession() {\n        if (this.session) try {\n            const t = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`), e = this.session.namespaces[`${this.namespace}:${t}`] ? this.session.namespaces[`${this.namespace}:${t}`] : this.session.namespaces[this.namespace];\n            this.setChainIds(t ? [\n                this.formatChainId(t)\n            ] : e?.accounts), this.setAccounts(e?.accounts);\n        } catch (t) {\n            this.signer.logger.error(\"Failed to load persisted session, clearing state...\"), this.signer.logger.error(t), await this.disconnect().catch((e)=>this.signer.logger.warn(e));\n        }\n    }\n    reset() {\n        this.chainId = 1, this.accounts = [];\n    }\n    persist() {\n        this.session && this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);\n    }\n    parseAccounts(t) {\n        return typeof t == \"string\" || t instanceof String ? [\n            this.parseAccount(t)\n        ] : t.map((e)=>this.parseAccount(e));\n    }\n}\nconst Y = b;\nvar H = Object.defineProperty, B = Object.defineProperties, F = Object.getOwnPropertyDescriptors, S = Object.getOwnPropertySymbols, X = Object.prototype.hasOwnProperty, J = Object.prototype.propertyIsEnumerable, T = (s, t, e)=>t in s ? H(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, R = (s, t)=>{\n    for(var e in t || (t = {}))X.call(t, e) && T(s, e, t[e]);\n    if (S) for (var e of S(t))J.call(t, e) && T(s, e, t[e]);\n    return s;\n}, Z = (s, t)=>B(s, F(t));\nfunction tt(s) {\n    if (s) return {\n        \"--w3m-font-family\": s[\"--wcm-font-family\"],\n        \"--w3m-accent\": s[\"--wcm-accent-color\"],\n        \"--w3m-color-mix\": s[\"--wcm-background-color\"],\n        \"--w3m-z-index\": s[\"--wcm-z-index\"] ? Number(s[\"--wcm-z-index\"]) : void 0,\n        \"--w3m-qr-color\": s[\"--wcm-accent-color\"],\n        \"--w3m-font-size-master\": s[\"--wcm-text-medium-regular-size\"],\n        \"--w3m-border-radius-master\": s[\"--wcm-container-border-radius\"],\n        \"--w3m-color-mix-strength\": 0\n    };\n}\nconst et = (s)=>{\n    const [t, e] = s.split(\":\");\n    return W({\n        id: e,\n        caipNetworkId: s,\n        chainNamespace: t,\n        name: \"\",\n        nativeCurrency: {\n            name: \"\",\n            symbol: \"\",\n            decimals: 8\n        },\n        rpcUrls: {\n            default: {\n                http: [\n                    \"https://rpc.walletconnect.org/v1\"\n                ]\n            }\n        }\n    });\n};\nfunction st(s) {\n    var t, e, n, i, a, o, u;\n    const c = (t = s.chains) == null ? void 0 : t.map(et).filter(Boolean);\n    if (c.length === 0) throw new Error(\"At least one chain must be specified\");\n    const l = c.find((m)=>{\n        var h;\n        return m.id === ((h = s.defaultChain) == null ? void 0 : h.id);\n    }), r = {\n        projectId: s.projectId,\n        networks: c,\n        themeMode: s.themeMode,\n        themeVariables: tt(s.themeVariables),\n        chainImages: s.chainImages,\n        connectorImages: s.walletImages,\n        defaultNetwork: l,\n        metadata: Z(R({}, s.metadata), {\n            name: ((e = s.metadata) == null ? void 0 : e.name) || \"WalletConnect\",\n            description: ((n = s.metadata) == null ? void 0 : n.description) || \"Connect to WalletConnect-compatible wallets\",\n            url: ((i = s.metadata) == null ? void 0 : i.url) || \"https://walletconnect.org\",\n            icons: ((a = s.metadata) == null ? void 0 : a.icons) || [\n                \"https://walletconnect.org/walletconnect-logo.png\"\n            ]\n        }),\n        showWallets: !0,\n        featuredWalletIds: s.explorerRecommendedWalletIds === \"NONE\" ? [] : Array.isArray(s.explorerRecommendedWalletIds) ? s.explorerRecommendedWalletIds : [],\n        excludeWalletIds: s.explorerExcludedWalletIds === \"ALL\" ? [] : Array.isArray(s.explorerExcludedWalletIds) ? s.explorerExcludedWalletIds : [],\n        enableEIP6963: !1,\n        enableInjected: !1,\n        enableCoinbase: !0,\n        enableWalletConnect: !0,\n        features: {\n            email: !1,\n            socials: !1\n        }\n    };\n    if ((o = s.mobileWallets) != null && o.length || (u = s.desktopWallets) != null && u.length) {\n        const m = [\n            ...(s.mobileWallets || []).map((g)=>({\n                    id: g.id,\n                    name: g.name,\n                    links: g.links\n                })),\n            ...(s.desktopWallets || []).map((g)=>({\n                    id: g.id,\n                    name: g.name,\n                    links: {\n                        native: g.links.native,\n                        universal: g.links.universal\n                    }\n                }))\n        ], h = [\n            ...r.featuredWalletIds || [],\n            ...r.excludeWalletIds || []\n        ], d = m.filter((g)=>!h.includes(g.id));\n        d.length && (r.customWallets = d);\n    }\n    return r;\n}\nfunction W(s) {\n    return R({\n        formatters: void 0,\n        fees: void 0,\n        serializers: void 0\n    }, s);\n}\nvar nt = Object.freeze({\n    __proto__: null,\n    convertWCMToAppKitOptions: st,\n    defineChain: W\n});\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js":
/*!***************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/events.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: () => (/* binding */ IEvents)\n/* harmony export */ });\nclass IEvents {\n} //# sourceMappingURL=events.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUE7QUFDYixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2V2ZW50cy9kaXN0L2VzbS9ldmVudHMuanM/MTA1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSUV2ZW50cyB7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudHMuanMubWFwIl0sIm5hbWVzIjpbIklFdmVudHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@walletconnect/events/dist/esm/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IEvents: () => (/* reexport safe */ _events__WEBPACK_IMPORTED_MODULE_0__.IEvents)\n/* harmony export */ });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/events.js\");\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvZXZlbnRzL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlCLENBQ3pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2V2ZW50cy9kaXN0L2VzbS9pbmRleC5qcz9kMzBmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2V2ZW50c1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/heartbeat/dist/index.es.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HEARTBEAT_EVENTS: () => (/* binding */ r),\n/* harmony export */   HEARTBEAT_INTERVAL: () => (/* binding */ s),\n/* harmony export */   HeartBeat: () => (/* binding */ i),\n/* harmony export */   IHeartBeat: () => (/* binding */ n)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n\n\n\nclass n extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_2__.IEvents {\n    constructor(e){\n        super();\n    }\n}\nconst s = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_SECONDS, r = {\n    pulse: \"heartbeat_pulse\"\n};\nclass i extends n {\n    constructor(e){\n        super(e), this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.interval = s, this.interval = e?.interval || s;\n    }\n    static async init(e) {\n        const t = new i(e);\n        return await t.init(), t;\n    }\n    async init() {\n        await this.initialize();\n    }\n    stop() {\n        clearInterval(this.intervalRef);\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async initialize() {\n        this.intervalRef = setInterval(()=>this.pulse(), (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.interval));\n    }\n    pulse() {\n        this.events.emit(r.pulse);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvaGVhcnRiZWF0L2Rpc3QvaW5kZXguZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXNDO0FBQXNFO0FBQWdEO0FBQUEsTUFBTVEsVUFBVUQsMERBQUNBO0lBQUNFLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUs7SUFBRTtBQUFDO0FBQUMsTUFBTUMsSUFBRVIsNkRBQUNBLEVBQUNTLElBQUU7SUFBQ0MsT0FBTTtBQUFpQjtBQUFFLE1BQU1DLFVBQVVOO0lBQUVDLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssQ0FBQ0EsSUFBRyxJQUFJLENBQUNLLE1BQU0sR0FBQyxJQUFJZCxnREFBQ0EsRUFBQyxJQUFJLENBQUNlLFFBQVEsR0FBQ0wsR0FBRSxJQUFJLENBQUNLLFFBQVEsR0FBQ04sR0FBR00sWUFBVUw7SUFBQztJQUFDLGFBQWFNLEtBQUtQLENBQUMsRUFBQztRQUFDLE1BQU1RLElBQUUsSUFBSUosRUFBRUo7UUFBRyxPQUFPLE1BQU1RLEVBQUVELElBQUksSUFBR0M7SUFBQztJQUFDLE1BQU1ELE9BQU07UUFBQyxNQUFNLElBQUksQ0FBQ0UsVUFBVTtJQUFFO0lBQUNDLE9BQU07UUFBQ0MsY0FBYyxJQUFJLENBQUNDLFdBQVc7SUFBQztJQUFDQyxHQUFHYixDQUFDLEVBQUNRLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ0gsTUFBTSxDQUFDUSxFQUFFLENBQUNiLEdBQUVRO0lBQUU7SUFBQ00sS0FBS2QsQ0FBQyxFQUFDUSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNILE1BQU0sQ0FBQ1MsSUFBSSxDQUFDZCxHQUFFUTtJQUFFO0lBQUNPLElBQUlmLENBQUMsRUFBQ1EsQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDSCxNQUFNLENBQUNVLEdBQUcsQ0FBQ2YsR0FBRVE7SUFBRTtJQUFDUSxlQUFlaEIsQ0FBQyxFQUFDUSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNILE1BQU0sQ0FBQ1csY0FBYyxDQUFDaEIsR0FBRVE7SUFBRTtJQUFDLE1BQU1DLGFBQVk7UUFBQyxJQUFJLENBQUNHLFdBQVcsR0FBQ0ssWUFBWSxJQUFJLElBQUksQ0FBQ2QsS0FBSyxJQUFHUixrRUFBQ0EsQ0FBQyxJQUFJLENBQUNXLFFBQVE7SUFBRTtJQUFDSCxRQUFPO1FBQUMsSUFBSSxDQUFDRSxNQUFNLENBQUNhLElBQUksQ0FBQ2hCLEVBQUVDLEtBQUs7SUFBQztBQUFDO0FBQXNGLENBQ3h6QixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9oZWFydGJlYXQvZGlzdC9pbmRleC5lcy5qcz9kMzA5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtFdmVudEVtaXR0ZXIgYXMgYX1mcm9tXCJldmVudHNcIjtpbXBvcnR7RklWRV9TRUNPTkRTIGFzIG8sdG9NaWxpc2Vjb25kcyBhcyBsfWZyb21cIkB3YWxsZXRjb25uZWN0L3RpbWVcIjtpbXBvcnR7SUV2ZW50cyBhcyB2fWZyb21cIkB3YWxsZXRjb25uZWN0L2V2ZW50c1wiO2NsYXNzIG4gZXh0ZW5kcyB2e2NvbnN0cnVjdG9yKGUpe3N1cGVyKCl9fWNvbnN0IHM9byxyPXtwdWxzZTpcImhlYXJ0YmVhdF9wdWxzZVwifTtjbGFzcyBpIGV4dGVuZHMgbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKSx0aGlzLmV2ZW50cz1uZXcgYSx0aGlzLmludGVydmFsPXMsdGhpcy5pbnRlcnZhbD1lPy5pbnRlcnZhbHx8c31zdGF0aWMgYXN5bmMgaW5pdChlKXtjb25zdCB0PW5ldyBpKGUpO3JldHVybiBhd2FpdCB0LmluaXQoKSx0fWFzeW5jIGluaXQoKXthd2FpdCB0aGlzLmluaXRpYWxpemUoKX1zdG9wKCl7Y2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsUmVmKX1vbihlLHQpe3RoaXMuZXZlbnRzLm9uKGUsdCl9b25jZShlLHQpe3RoaXMuZXZlbnRzLm9uY2UoZSx0KX1vZmYoZSx0KXt0aGlzLmV2ZW50cy5vZmYoZSx0KX1yZW1vdmVMaXN0ZW5lcihlLHQpe3RoaXMuZXZlbnRzLnJlbW92ZUxpc3RlbmVyKGUsdCl9YXN5bmMgaW5pdGlhbGl6ZSgpe3RoaXMuaW50ZXJ2YWxSZWY9c2V0SW50ZXJ2YWwoKCk9PnRoaXMucHVsc2UoKSxsKHRoaXMuaW50ZXJ2YWwpKX1wdWxzZSgpe3RoaXMuZXZlbnRzLmVtaXQoci5wdWxzZSl9fWV4cG9ydHtyIGFzIEhFQVJUQkVBVF9FVkVOVFMscyBhcyBIRUFSVEJFQVRfSU5URVJWQUwsaSBhcyBIZWFydEJlYXQsbiBhcyBJSGVhcnRCZWF0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsImEiLCJGSVZFX1NFQ09ORFMiLCJvIiwidG9NaWxpc2Vjb25kcyIsImwiLCJJRXZlbnRzIiwidiIsIm4iLCJjb25zdHJ1Y3RvciIsImUiLCJzIiwiciIsInB1bHNlIiwiaSIsImV2ZW50cyIsImludGVydmFsIiwiaW5pdCIsInQiLCJpbml0aWFsaXplIiwic3RvcCIsImNsZWFySW50ZXJ2YWwiLCJpbnRlcnZhbFJlZiIsIm9uIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwic2V0SW50ZXJ2YWwiLCJlbWl0IiwiSEVBUlRCRUFUX0VWRU5UUyIsIkhFQVJUQkVBVF9JTlRFUlZBTCIsIkhlYXJ0QmVhdCIsIklIZWFydEJlYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/heartbeat/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpConnection: () => (/* binding */ f),\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cross-fetch */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\nvar P = Object.defineProperty, w = Object.defineProperties, E = Object.getOwnPropertyDescriptors, c = Object.getOwnPropertySymbols, L = Object.prototype.hasOwnProperty, O = Object.prototype.propertyIsEnumerable, l = (r, t, e)=>t in r ? P(r, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : r[t] = e, p = (r, t)=>{\n    for(var e in t || (t = {}))L.call(t, e) && l(r, e, t[e]);\n    if (c) for (var e of c(t))O.call(t, e) && l(r, e, t[e]);\n    return r;\n}, v = (r, t)=>w(r, E(t));\nconst j = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\"\n}, T = \"POST\", d = {\n    headers: j,\n    method: T\n}, g = 10;\nclass f {\n    constructor(t, e = !1){\n        if (this.url = t, this.disableProviderPing = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.isAvailable = !1, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);\n        this.url = t, this.disableProviderPing = e;\n    }\n    get connected() {\n        return this.isAvailable;\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async open(t = this.url) {\n        await this.register(t);\n    }\n    async close() {\n        if (!this.isAvailable) throw new Error(\"Connection already closed\");\n        this.onClose();\n    }\n    async send(t) {\n        this.isAvailable || await this.register();\n        try {\n            const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)(t), s = await (await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(this.url, v(p({}, d), {\n                body: e\n            }))).json();\n            this.onPayload({\n                data: s\n            });\n        } catch (e) {\n            this.onError(t.id, e);\n        }\n    }\n    async register(t = this.url) {\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isHttpUrl)(t)) throw new Error(`Provided URL is not compatible with HTTP connection: ${t}`);\n        if (this.registering) {\n            const e = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= e || this.events.listenerCount(\"open\") >= e) && this.events.setMaxListeners(e + 1), new Promise((s, i)=>{\n                this.events.once(\"register_error\", (n)=>{\n                    this.resetMaxListeners(), i(n);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.isAvailable > \"u\") return i(new Error(\"HTTP connection is missing or invalid\"));\n                    s();\n                });\n            });\n        }\n        this.url = t, this.registering = !0;\n        try {\n            if (!this.disableProviderPing) {\n                const e = (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonStringify)({\n                    id: 1,\n                    jsonrpc: \"2.0\",\n                    method: \"test\",\n                    params: []\n                });\n                await cross_fetch__WEBPACK_IMPORTED_MODULE_1___default()(t, v(p({}, d), {\n                    body: e\n                }));\n            }\n            this.onOpen();\n        } catch (e) {\n            const s = this.parseError(e);\n            throw this.events.emit(\"register_error\", s), this.onClose(), s;\n        }\n    }\n    onOpen() {\n        this.isAvailable = !0, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose() {\n        this.isAvailable = !1, this.registering = !1, this.events.emit(\"close\");\n    }\n    onPayload(t) {\n        if (typeof t.data > \"u\") return;\n        const e = typeof t.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_2__.safeJsonParse)(t.data) : t.data;\n        this.events.emit(\"payload\", e);\n    }\n    onError(t, e) {\n        const s = this.parseError(e), i = s.message || s.toString(), n = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(t, i);\n        this.events.emit(\"payload\", n);\n    }\n    parseError(t, e = this.url) {\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.parseConnectionError)(t, e, \"HTTP\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > g && this.events.setMaxListeners(g);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js ***!
  \************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("const nodeFetch = __webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\");\nconst realFetch = nodeFetch.default || nodeFetch;\nconst fetch = function(url, options) {\n    // Support schemaless URIs on the server for parity with the browser.\n    // Ex: //github.com/ -> https://github.com/\n    if (/^\\/\\//.test(url)) {\n        url = \"https:\" + url;\n    }\n    return realFetch.call(this, url, options);\n};\nfetch.ponyfill = true;\nmodule.exports = exports = fetch;\nexports.fetch = fetch;\nexports.Headers = nodeFetch.Headers;\nexports.Request = nodeFetch.Request;\nexports.Response = nodeFetch.Response;\n// Needed for TypeScript consumers without esModuleInterop.\nexports[\"default\"] = fetch;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1odHRwLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3Qvbm9kZS1wb255ZmlsbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxZQUFZQyxtQkFBT0EsQ0FBQztBQUMxQixNQUFNQyxZQUFZRixVQUFVRyxPQUFPLElBQUlIO0FBRXZDLE1BQU1JLFFBQVEsU0FBVUMsR0FBRyxFQUFFQyxPQUFPO0lBQ2xDLHFFQUFxRTtJQUNyRSwyQ0FBMkM7SUFDM0MsSUFBSSxRQUFRQyxJQUFJLENBQUNGLE1BQU07UUFDckJBLE1BQU0sV0FBV0E7SUFDbkI7SUFDQSxPQUFPSCxVQUFVTSxJQUFJLENBQUMsSUFBSSxFQUFFSCxLQUFLQztBQUNuQztBQUVBRixNQUFNSyxRQUFRLEdBQUc7QUFFakJDLE9BQU9DLE9BQU8sR0FBR0EsVUFBVVA7QUFDM0JPLGFBQWEsR0FBR1A7QUFDaEJPLGVBQWUsR0FBR1gsVUFBVVksT0FBTztBQUNuQ0QsZUFBZSxHQUFHWCxVQUFVYSxPQUFPO0FBQ25DRixnQkFBZ0IsR0FBR1gsVUFBVWMsUUFBUTtBQUVyQywyREFBMkQ7QUFDM0RILGtCQUFlLEdBQUdQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1odHRwLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL2Nyb3NzLWZldGNoL2Rpc3Qvbm9kZS1wb255ZmlsbC5qcz9iNjkwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG5vZGVGZXRjaCA9IHJlcXVpcmUoJ25vZGUtZmV0Y2gnKVxuY29uc3QgcmVhbEZldGNoID0gbm9kZUZldGNoLmRlZmF1bHQgfHwgbm9kZUZldGNoXG5cbmNvbnN0IGZldGNoID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICAvLyBTdXBwb3J0IHNjaGVtYWxlc3MgVVJJcyBvbiB0aGUgc2VydmVyIGZvciBwYXJpdHkgd2l0aCB0aGUgYnJvd3Nlci5cbiAgLy8gRXg6IC8vZ2l0aHViLmNvbS8gLT4gaHR0cHM6Ly9naXRodWIuY29tL1xuICBpZiAoL15cXC9cXC8vLnRlc3QodXJsKSkge1xuICAgIHVybCA9ICdodHRwczonICsgdXJsXG4gIH1cbiAgcmV0dXJuIHJlYWxGZXRjaC5jYWxsKHRoaXMsIHVybCwgb3B0aW9ucylcbn1cblxuZmV0Y2gucG9ueWZpbGwgPSB0cnVlXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZldGNoXG5leHBvcnRzLmZldGNoID0gZmV0Y2hcbmV4cG9ydHMuSGVhZGVycyA9IG5vZGVGZXRjaC5IZWFkZXJzXG5leHBvcnRzLlJlcXVlc3QgPSBub2RlRmV0Y2guUmVxdWVzdFxuZXhwb3J0cy5SZXNwb25zZSA9IG5vZGVGZXRjaC5SZXNwb25zZVxuXG4vLyBOZWVkZWQgZm9yIFR5cGVTY3JpcHQgY29uc3VtZXJzIHdpdGhvdXQgZXNNb2R1bGVJbnRlcm9wLlxuZXhwb3J0cy5kZWZhdWx0ID0gZmV0Y2hcbiJdLCJuYW1lcyI6WyJub2RlRmV0Y2giLCJyZXF1aXJlIiwicmVhbEZldGNoIiwiZGVmYXVsdCIsImZldGNoIiwidXJsIiwib3B0aW9ucyIsInRlc3QiLCJjYWxsIiwicG9ueWZpbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwiSGVhZGVycyIsIlJlcXVlc3QiLCJSZXNwb25zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/node_modules/cross-fetch/dist/node-ponyfill.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonRpcProvider: () => (/* binding */ o),\n/* harmony export */   \"default\": () => (/* binding */ o)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\nclass o extends _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.IJsonRpcProvider {\n    constructor(t){\n        super(t), this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(t), this.connection.connected && this.registerEventListeners();\n    }\n    async connect(t = this.connection) {\n        await this.open(t);\n    }\n    async disconnect() {\n        await this.close();\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    async request(t, e) {\n        return this.requestStrict((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.formatJsonRpcRequest)(t.method, t.params || [], t.id || (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.getBigIntRpcId)().toString()), e);\n    }\n    async requestStrict(t, e) {\n        return new Promise(async (i, s)=>{\n            if (!this.connection.connected) try {\n                await this.open();\n            } catch (n) {\n                s(n);\n            }\n            this.events.on(`${t.id}`, (n)=>{\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcError)(n) ? s(n.error) : i(n.result);\n            });\n            try {\n                await this.connection.send(t, e);\n            } catch (n) {\n                s(n);\n            }\n        });\n    }\n    setConnection(t = this.connection) {\n        return t;\n    }\n    onPayload(t) {\n        this.events.emit(\"payload\", t), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcResponse)(t) ? this.events.emit(`${t.id}`, t) : this.events.emit(\"message\", {\n            type: t.method,\n            data: t.params\n        });\n    }\n    onClose(t) {\n        t && t.code === 3e3 && this.events.emit(\"error\", new Error(`WebSocket connection closed abnormally with code: ${t.code} ${t.reason ? `(${t.reason})` : \"\"}`)), this.events.emit(\"disconnect\");\n    }\n    async open(t = this.connection) {\n        this.connection === t && this.connection.connected || (this.connection.connected && this.close(), typeof t == \"string\" && (await this.connection.open(t), t = this.connection), this.connection = this.setConnection(t), await this.connection.open(), this.registerEventListeners(), this.events.emit(\"connect\"));\n    }\n    async close() {\n        await this.connection.close();\n    }\n    registerEventListeners() {\n        this.hasRegisteredEventListeners || (this.connection.on(\"payload\", (t)=>this.onPayload(t)), this.connection.on(\"close\", (t)=>this.onClose(t)), this.connection.on(\"error\", (t)=>this.events.emit(\"error\", t)), this.connection.on(\"register_error\", (t)=>this.onClose()), this.hasRegisteredEventListeners = !0);\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy1wcm92aWRlci9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNDO0FBQXlKO0FBQUEsTUFBTVksVUFBVVQsMEVBQUNBO0lBQUNVLFlBQVlDLENBQUMsQ0FBQztRQUFDLEtBQUssQ0FBQ0EsSUFBRyxJQUFJLENBQUNDLE1BQU0sR0FBQyxJQUFJZCxnREFBQ0EsRUFBQyxJQUFJLENBQUNlLDJCQUEyQixHQUFDLENBQUMsR0FBRSxJQUFJLENBQUNDLFVBQVUsR0FBQyxJQUFJLENBQUNDLGFBQWEsQ0FBQ0osSUFBRyxJQUFJLENBQUNHLFVBQVUsQ0FBQ0UsU0FBUyxJQUFFLElBQUksQ0FBQ0Msc0JBQXNCO0lBQUU7SUFBQyxNQUFNQyxRQUFRUCxJQUFFLElBQUksQ0FBQ0csVUFBVSxFQUFDO1FBQUMsTUFBTSxJQUFJLENBQUNLLElBQUksQ0FBQ1I7SUFBRTtJQUFDLE1BQU1TLGFBQVk7UUFBQyxNQUFNLElBQUksQ0FBQ0MsS0FBSztJQUFFO0lBQUNDLEdBQUdYLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDWCxNQUFNLENBQUNVLEVBQUUsQ0FBQ1gsR0FBRVk7SUFBRTtJQUFDQyxLQUFLYixDQUFDLEVBQUNZLENBQUMsRUFBQztRQUFDLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUNiLEdBQUVZO0lBQUU7SUFBQ0UsSUFBSWQsQ0FBQyxFQUFDWSxDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNYLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDZCxHQUFFWTtJQUFFO0lBQUNHLGVBQWVmLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsSUFBSSxDQUFDWCxNQUFNLENBQUNjLGNBQWMsQ0FBQ2YsR0FBRVk7SUFBRTtJQUFDLE1BQU1JLFFBQVFoQixDQUFDLEVBQUNZLENBQUMsRUFBQztRQUFDLE9BQU8sSUFBSSxDQUFDSyxhQUFhLENBQUMxQixrRkFBQ0EsQ0FBQ1MsRUFBRWtCLE1BQU0sRUFBQ2xCLEVBQUVtQixNQUFNLElBQUUsRUFBRSxFQUFDbkIsRUFBRW9CLEVBQUUsSUFBRTNCLDRFQUFDQSxHQUFHNEIsUUFBUSxLQUFJVDtJQUFFO0lBQUMsTUFBTUssY0FBY2pCLENBQUMsRUFBQ1ksQ0FBQyxFQUFDO1FBQUMsT0FBTyxJQUFJVSxRQUFRLE9BQU1DLEdBQUVDO1lBQUssSUFBRyxDQUFDLElBQUksQ0FBQ3JCLFVBQVUsQ0FBQ0UsU0FBUyxFQUFDLElBQUc7Z0JBQUMsTUFBTSxJQUFJLENBQUNHLElBQUk7WUFBRSxFQUFDLE9BQU1pQixHQUFFO2dCQUFDRCxFQUFFQztZQUFFO1lBQUMsSUFBSSxDQUFDeEIsTUFBTSxDQUFDVSxFQUFFLENBQUMsQ0FBQyxFQUFFWCxFQUFFb0IsRUFBRSxDQUFDLENBQUMsRUFBQ0ssQ0FBQUE7Z0JBQUk5Qiw0RUFBQ0EsQ0FBQzhCLEtBQUdELEVBQUVDLEVBQUVDLEtBQUssSUFBRUgsRUFBRUUsRUFBRUUsTUFBTTtZQUFDO1lBQUcsSUFBRztnQkFBQyxNQUFNLElBQUksQ0FBQ3hCLFVBQVUsQ0FBQ3lCLElBQUksQ0FBQzVCLEdBQUVZO1lBQUUsRUFBQyxPQUFNYSxHQUFFO2dCQUFDRCxFQUFFQztZQUFFO1FBQUM7SUFBRTtJQUFDckIsY0FBY0osSUFBRSxJQUFJLENBQUNHLFVBQVUsRUFBQztRQUFDLE9BQU9IO0lBQUM7SUFBQzZCLFVBQVU3QixDQUFDLEVBQUM7UUFBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQzZCLElBQUksQ0FBQyxXQUFVOUIsSUFBR0gsK0VBQUNBLENBQUNHLEtBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUM2QixJQUFJLENBQUMsQ0FBQyxFQUFFOUIsRUFBRW9CLEVBQUUsQ0FBQyxDQUFDLEVBQUNwQixLQUFHLElBQUksQ0FBQ0MsTUFBTSxDQUFDNkIsSUFBSSxDQUFDLFdBQVU7WUFBQ0MsTUFBSy9CLEVBQUVrQixNQUFNO1lBQUNjLE1BQUtoQyxFQUFFbUIsTUFBTTtRQUFBO0lBQUU7SUFBQ2MsUUFBUWpDLENBQUMsRUFBQztRQUFDQSxLQUFHQSxFQUFFa0MsSUFBSSxLQUFHLE9BQUssSUFBSSxDQUFDakMsTUFBTSxDQUFDNkIsSUFBSSxDQUFDLFNBQVEsSUFBSUssTUFBTSxDQUFDLGtEQUFrRCxFQUFFbkMsRUFBRWtDLElBQUksQ0FBQyxDQUFDLEVBQUVsQyxFQUFFb0MsTUFBTSxHQUFDLENBQUMsQ0FBQyxFQUFFcEMsRUFBRW9DLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLENBQUMsSUFBRyxJQUFJLENBQUNuQyxNQUFNLENBQUM2QixJQUFJLENBQUM7SUFBYTtJQUFDLE1BQU10QixLQUFLUixJQUFFLElBQUksQ0FBQ0csVUFBVSxFQUFDO1FBQUMsSUFBSSxDQUFDQSxVQUFVLEtBQUdILEtBQUcsSUFBSSxDQUFDRyxVQUFVLENBQUNFLFNBQVMsSUFBRyxLQUFJLENBQUNGLFVBQVUsQ0FBQ0UsU0FBUyxJQUFFLElBQUksQ0FBQ0ssS0FBSyxJQUFHLE9BQU9WLEtBQUcsWUFBVyxPQUFNLElBQUksQ0FBQ0csVUFBVSxDQUFDSyxJQUFJLENBQUNSLElBQUdBLElBQUUsSUFBSSxDQUFDRyxVQUFVLEdBQUUsSUFBSSxDQUFDQSxVQUFVLEdBQUMsSUFBSSxDQUFDQyxhQUFhLENBQUNKLElBQUcsTUFBTSxJQUFJLENBQUNHLFVBQVUsQ0FBQ0ssSUFBSSxJQUFHLElBQUksQ0FBQ0Ysc0JBQXNCLElBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUM2QixJQUFJLENBQUMsVUFBUztJQUFFO0lBQUMsTUFBTXBCLFFBQU87UUFBQyxNQUFNLElBQUksQ0FBQ1AsVUFBVSxDQUFDTyxLQUFLO0lBQUU7SUFBQ0oseUJBQXdCO1FBQUMsSUFBSSxDQUFDSiwyQkFBMkIsSUFBRyxLQUFJLENBQUNDLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFdBQVVYLENBQUFBLElBQUcsSUFBSSxDQUFDNkIsU0FBUyxDQUFDN0IsS0FBSSxJQUFJLENBQUNHLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFNBQVFYLENBQUFBLElBQUcsSUFBSSxDQUFDaUMsT0FBTyxDQUFDakMsS0FBSSxJQUFJLENBQUNHLFVBQVUsQ0FBQ1EsRUFBRSxDQUFDLFNBQVFYLENBQUFBLElBQUcsSUFBSSxDQUFDQyxNQUFNLENBQUM2QixJQUFJLENBQUMsU0FBUTlCLEtBQUksSUFBSSxDQUFDRyxVQUFVLENBQUNRLEVBQUUsQ0FBQyxrQkFBaUJYLENBQUFBLElBQUcsSUFBSSxDQUFDaUMsT0FBTyxLQUFJLElBQUksQ0FBQy9CLDJCQUEyQixHQUFDLENBQUM7SUFBRTtBQUFDO0FBQTJDLENBQ3IrRCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXByb3ZpZGVyL2Rpc3QvaW5kZXguZXMuanM/N2VlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnR7RXZlbnRFbWl0dGVyIGFzIGN9ZnJvbVwiZXZlbnRzXCI7aW1wb3J0e0lKc29uUnBjUHJvdmlkZXIgYXMgcixmb3JtYXRKc29uUnBjUmVxdWVzdCBhcyBoLGdldEJpZ0ludFJwY0lkIGFzIGEsaXNKc29uUnBjRXJyb3IgYXMgZCxpc0pzb25ScGNSZXNwb25zZSBhcyB2fWZyb21cIkB3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHNcIjtjbGFzcyBvIGV4dGVuZHMgcntjb25zdHJ1Y3Rvcih0KXtzdXBlcih0KSx0aGlzLmV2ZW50cz1uZXcgYyx0aGlzLmhhc1JlZ2lzdGVyZWRFdmVudExpc3RlbmVycz0hMSx0aGlzLmNvbm5lY3Rpb249dGhpcy5zZXRDb25uZWN0aW9uKHQpLHRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQmJnRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVycygpfWFzeW5jIGNvbm5lY3QodD10aGlzLmNvbm5lY3Rpb24pe2F3YWl0IHRoaXMub3Blbih0KX1hc3luYyBkaXNjb25uZWN0KCl7YXdhaXQgdGhpcy5jbG9zZSgpfW9uKHQsZSl7dGhpcy5ldmVudHMub24odCxlKX1vbmNlKHQsZSl7dGhpcy5ldmVudHMub25jZSh0LGUpfW9mZih0LGUpe3RoaXMuZXZlbnRzLm9mZih0LGUpfXJlbW92ZUxpc3RlbmVyKHQsZSl7dGhpcy5ldmVudHMucmVtb3ZlTGlzdGVuZXIodCxlKX1hc3luYyByZXF1ZXN0KHQsZSl7cmV0dXJuIHRoaXMucmVxdWVzdFN0cmljdChoKHQubWV0aG9kLHQucGFyYW1zfHxbXSx0LmlkfHxhKCkudG9TdHJpbmcoKSksZSl9YXN5bmMgcmVxdWVzdFN0cmljdCh0LGUpe3JldHVybiBuZXcgUHJvbWlzZShhc3luYyhpLHMpPT57aWYoIXRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQpdHJ5e2F3YWl0IHRoaXMub3BlbigpfWNhdGNoKG4pe3Mobil9dGhpcy5ldmVudHMub24oYCR7dC5pZH1gLG49PntkKG4pP3Mobi5lcnJvcik6aShuLnJlc3VsdCl9KTt0cnl7YXdhaXQgdGhpcy5jb25uZWN0aW9uLnNlbmQodCxlKX1jYXRjaChuKXtzKG4pfX0pfXNldENvbm5lY3Rpb24odD10aGlzLmNvbm5lY3Rpb24pe3JldHVybiB0fW9uUGF5bG9hZCh0KXt0aGlzLmV2ZW50cy5lbWl0KFwicGF5bG9hZFwiLHQpLHYodCk/dGhpcy5ldmVudHMuZW1pdChgJHt0LmlkfWAsdCk6dGhpcy5ldmVudHMuZW1pdChcIm1lc3NhZ2VcIix7dHlwZTp0Lm1ldGhvZCxkYXRhOnQucGFyYW1zfSl9b25DbG9zZSh0KXt0JiZ0LmNvZGU9PT0zZTMmJnRoaXMuZXZlbnRzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihgV2ViU29ja2V0IGNvbm5lY3Rpb24gY2xvc2VkIGFibm9ybWFsbHkgd2l0aCBjb2RlOiAke3QuY29kZX0gJHt0LnJlYXNvbj9gKCR7dC5yZWFzb259KWA6XCJcIn1gKSksdGhpcy5ldmVudHMuZW1pdChcImRpc2Nvbm5lY3RcIil9YXN5bmMgb3Blbih0PXRoaXMuY29ubmVjdGlvbil7dGhpcy5jb25uZWN0aW9uPT09dCYmdGhpcy5jb25uZWN0aW9uLmNvbm5lY3RlZHx8KHRoaXMuY29ubmVjdGlvbi5jb25uZWN0ZWQmJnRoaXMuY2xvc2UoKSx0eXBlb2YgdD09XCJzdHJpbmdcIiYmKGF3YWl0IHRoaXMuY29ubmVjdGlvbi5vcGVuKHQpLHQ9dGhpcy5jb25uZWN0aW9uKSx0aGlzLmNvbm5lY3Rpb249dGhpcy5zZXRDb25uZWN0aW9uKHQpLGF3YWl0IHRoaXMuY29ubmVjdGlvbi5vcGVuKCksdGhpcy5yZWdpc3RlckV2ZW50TGlzdGVuZXJzKCksdGhpcy5ldmVudHMuZW1pdChcImNvbm5lY3RcIikpfWFzeW5jIGNsb3NlKCl7YXdhaXQgdGhpcy5jb25uZWN0aW9uLmNsb3NlKCl9cmVnaXN0ZXJFdmVudExpc3RlbmVycygpe3RoaXMuaGFzUmVnaXN0ZXJlZEV2ZW50TGlzdGVuZXJzfHwodGhpcy5jb25uZWN0aW9uLm9uKFwicGF5bG9hZFwiLHQ9PnRoaXMub25QYXlsb2FkKHQpKSx0aGlzLmNvbm5lY3Rpb24ub24oXCJjbG9zZVwiLHQ9PnRoaXMub25DbG9zZSh0KSksdGhpcy5jb25uZWN0aW9uLm9uKFwiZXJyb3JcIix0PT50aGlzLmV2ZW50cy5lbWl0KFwiZXJyb3JcIix0KSksdGhpcy5jb25uZWN0aW9uLm9uKFwicmVnaXN0ZXJfZXJyb3JcIix0PT50aGlzLm9uQ2xvc2UoKSksdGhpcy5oYXNSZWdpc3RlcmVkRXZlbnRMaXN0ZW5lcnM9ITApfX1leHBvcnR7byBhcyBKc29uUnBjUHJvdmlkZXIsbyBhcyBkZWZhdWx0fTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsImMiLCJJSnNvblJwY1Byb3ZpZGVyIiwiciIsImZvcm1hdEpzb25ScGNSZXF1ZXN0IiwiaCIsImdldEJpZ0ludFJwY0lkIiwiYSIsImlzSnNvblJwY0Vycm9yIiwiZCIsImlzSnNvblJwY1Jlc3BvbnNlIiwidiIsIm8iLCJjb25zdHJ1Y3RvciIsInQiLCJldmVudHMiLCJoYXNSZWdpc3RlcmVkRXZlbnRMaXN0ZW5lcnMiLCJjb25uZWN0aW9uIiwic2V0Q29ubmVjdGlvbiIsImNvbm5lY3RlZCIsInJlZ2lzdGVyRXZlbnRMaXN0ZW5lcnMiLCJjb25uZWN0Iiwib3BlbiIsImRpc2Nvbm5lY3QiLCJjbG9zZSIsIm9uIiwiZSIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlcXVlc3QiLCJyZXF1ZXN0U3RyaWN0IiwibWV0aG9kIiwicGFyYW1zIiwiaWQiLCJ0b1N0cmluZyIsIlByb21pc2UiLCJpIiwicyIsIm4iLCJlcnJvciIsInJlc3VsdCIsInNlbmQiLCJvblBheWxvYWQiLCJlbWl0IiwidHlwZSIsImRhdGEiLCJvbkNsb3NlIiwiY29kZSIsIkVycm9yIiwicmVhc29uIiwiSnNvblJwY1Byb3ZpZGVyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: () => (/* binding */ n),\n/* harmony export */   IEvents: () => (/* binding */ e),\n/* harmony export */   IJsonRpcConnection: () => (/* binding */ o),\n/* harmony export */   IJsonRpcProvider: () => (/* binding */ r)\n/* harmony export */ });\nclass e {\n}\nclass o extends e {\n    constructor(c){\n        super();\n    }\n}\nclass n extends e {\n    constructor(){\n        super();\n    }\n}\nclass r extends n {\n    constructor(c){\n        super();\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy10eXBlcy9kaXN0L2luZGV4LmVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFNQTtBQUFFO0FBQUMsTUFBTUMsVUFBVUQ7SUFBRUUsWUFBWUMsQ0FBQyxDQUFDO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNQyxVQUFVSjtJQUFFRSxhQUFhO1FBQUMsS0FBSztJQUFFO0FBQUM7QUFBQyxNQUFNRyxVQUFVRDtJQUFFRixZQUFZQyxDQUFDLENBQUM7UUFBQyxLQUFLO0lBQUU7QUFBQztBQUE4RixDQUNuTyxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXR5cGVzL2Rpc3QvaW5kZXguZXMuanM/YjEyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBle31jbGFzcyBvIGV4dGVuZHMgZXtjb25zdHJ1Y3RvcihjKXtzdXBlcigpfX1jbGFzcyBuIGV4dGVuZHMgZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCl9fWNsYXNzIHIgZXh0ZW5kcyBue2NvbnN0cnVjdG9yKGMpe3N1cGVyKCl9fWV4cG9ydHtuIGFzIElCYXNlSnNvblJwY1Byb3ZpZGVyLGUgYXMgSUV2ZW50cyxvIGFzIElKc29uUnBjQ29ubmVjdGlvbixyIGFzIElKc29uUnBjUHJvdmlkZXJ9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iXSwibmFtZXMiOlsiZSIsIm8iLCJjb25zdHJ1Y3RvciIsImMiLCJuIiwiciIsIklCYXNlSnNvblJwY1Byb3ZpZGVyIiwiSUV2ZW50cyIsIklKc29uUnBjQ29ubmVjdGlvbiIsIklKc29uUnBjUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: () => (/* binding */ DEFAULT_ERROR),\n/* harmony export */   INTERNAL_ERROR: () => (/* binding */ INTERNAL_ERROR),\n/* harmony export */   INVALID_PARAMS: () => (/* binding */ INVALID_PARAMS),\n/* harmony export */   INVALID_REQUEST: () => (/* binding */ INVALID_REQUEST),\n/* harmony export */   METHOD_NOT_FOUND: () => (/* binding */ METHOD_NOT_FOUND),\n/* harmony export */   PARSE_ERROR: () => (/* binding */ PARSE_ERROR),\n/* harmony export */   RESERVED_ERROR_CODES: () => (/* binding */ RESERVED_ERROR_CODES),\n/* harmony export */   SERVER_ERROR: () => (/* binding */ SERVER_ERROR),\n/* harmony export */   SERVER_ERROR_CODE_RANGE: () => (/* binding */ SERVER_ERROR_CODE_RANGE),\n/* harmony export */   STANDARD_ERROR_MAP: () => (/* binding */ STANDARD_ERROR_MAP)\n/* harmony export */ });\nconst PARSE_ERROR = \"PARSE_ERROR\";\nconst INVALID_REQUEST = \"INVALID_REQUEST\";\nconst METHOD_NOT_FOUND = \"METHOD_NOT_FOUND\";\nconst INVALID_PARAMS = \"INVALID_PARAMS\";\nconst INTERNAL_ERROR = \"INTERNAL_ERROR\";\nconst SERVER_ERROR = \"SERVER_ERROR\";\nconst RESERVED_ERROR_CODES = [\n    -32700,\n    -32600,\n    -32601,\n    -32602,\n    -32603\n];\nconst SERVER_ERROR_CODE_RANGE = [\n    -32000,\n    -32099\n];\nconst STANDARD_ERROR_MAP = {\n    [PARSE_ERROR]: {\n        code: -32700,\n        message: \"Parse error\"\n    },\n    [INVALID_REQUEST]: {\n        code: -32600,\n        message: \"Invalid Request\"\n    },\n    [METHOD_NOT_FOUND]: {\n        code: -32601,\n        message: \"Method not found\"\n    },\n    [INVALID_PARAMS]: {\n        code: -32602,\n        message: \"Invalid params\"\n    },\n    [INTERNAL_ERROR]: {\n        code: -32603,\n        message: \"Internal error\"\n    },\n    [SERVER_ERROR]: {\n        code: -32000,\n        message: \"Server error\"\n    }\n};\nconst DEFAULT_ERROR = SERVER_ERROR; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFPLE1BQU1BLGNBQWMsY0FBYztBQUNsQyxNQUFNQyxrQkFBa0Isa0JBQWtCO0FBQzFDLE1BQU1DLG1CQUFtQixtQkFBbUI7QUFDNUMsTUFBTUMsaUJBQWlCLGlCQUFpQjtBQUN4QyxNQUFNQyxpQkFBaUIsaUJBQWlCO0FBQ3hDLE1BQU1DLGVBQWUsZUFBZTtBQUNwQyxNQUFNQyx1QkFBdUI7SUFBQyxDQUFDO0lBQU8sQ0FBQztJQUFPLENBQUM7SUFBTyxDQUFDO0lBQU8sQ0FBQztDQUFNLENBQUM7QUFDdEUsTUFBTUMsMEJBQTBCO0lBQUMsQ0FBQztJQUFPLENBQUM7Q0FBTSxDQUFDO0FBQ2pELE1BQU1DLHFCQUFxQjtJQUM5QixDQUFDUixZQUFZLEVBQUU7UUFBRVMsTUFBTSxDQUFDO1FBQU9DLFNBQVM7SUFBYztJQUN0RCxDQUFDVCxnQkFBZ0IsRUFBRTtRQUFFUSxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFrQjtJQUM5RCxDQUFDUixpQkFBaUIsRUFBRTtRQUFFTyxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFtQjtJQUNoRSxDQUFDUCxlQUFlLEVBQUU7UUFBRU0sTUFBTSxDQUFDO1FBQU9DLFNBQVM7SUFBaUI7SUFDNUQsQ0FBQ04sZUFBZSxFQUFFO1FBQUVLLE1BQU0sQ0FBQztRQUFPQyxTQUFTO0lBQWlCO0lBQzVELENBQUNMLGFBQWEsRUFBRTtRQUFFSSxNQUFNLENBQUM7UUFBT0MsU0FBUztJQUFlO0FBQzVELEVBQUU7QUFDSyxNQUFNQyxnQkFBZ0JOLGFBQWEsQ0FDMUMscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9jb25zdGFudHMuanM/OWMwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgUEFSU0VfRVJST1IgPSBcIlBBUlNFX0VSUk9SXCI7XG5leHBvcnQgY29uc3QgSU5WQUxJRF9SRVFVRVNUID0gXCJJTlZBTElEX1JFUVVFU1RcIjtcbmV4cG9ydCBjb25zdCBNRVRIT0RfTk9UX0ZPVU5EID0gXCJNRVRIT0RfTk9UX0ZPVU5EXCI7XG5leHBvcnQgY29uc3QgSU5WQUxJRF9QQVJBTVMgPSBcIklOVkFMSURfUEFSQU1TXCI7XG5leHBvcnQgY29uc3QgSU5URVJOQUxfRVJST1IgPSBcIklOVEVSTkFMX0VSUk9SXCI7XG5leHBvcnQgY29uc3QgU0VSVkVSX0VSUk9SID0gXCJTRVJWRVJfRVJST1JcIjtcbmV4cG9ydCBjb25zdCBSRVNFUlZFRF9FUlJPUl9DT0RFUyA9IFstMzI3MDAsIC0zMjYwMCwgLTMyNjAxLCAtMzI2MDIsIC0zMjYwM107XG5leHBvcnQgY29uc3QgU0VSVkVSX0VSUk9SX0NPREVfUkFOR0UgPSBbLTMyMDAwLCAtMzIwOTldO1xuZXhwb3J0IGNvbnN0IFNUQU5EQVJEX0VSUk9SX01BUCA9IHtcbiAgICBbUEFSU0VfRVJST1JdOiB7IGNvZGU6IC0zMjcwMCwgbWVzc2FnZTogXCJQYXJzZSBlcnJvclwiIH0sXG4gICAgW0lOVkFMSURfUkVRVUVTVF06IHsgY29kZTogLTMyNjAwLCBtZXNzYWdlOiBcIkludmFsaWQgUmVxdWVzdFwiIH0sXG4gICAgW01FVEhPRF9OT1RfRk9VTkRdOiB7IGNvZGU6IC0zMjYwMSwgbWVzc2FnZTogXCJNZXRob2Qgbm90IGZvdW5kXCIgfSxcbiAgICBbSU5WQUxJRF9QQVJBTVNdOiB7IGNvZGU6IC0zMjYwMiwgbWVzc2FnZTogXCJJbnZhbGlkIHBhcmFtc1wiIH0sXG4gICAgW0lOVEVSTkFMX0VSUk9SXTogeyBjb2RlOiAtMzI2MDMsIG1lc3NhZ2U6IFwiSW50ZXJuYWwgZXJyb3JcIiB9LFxuICAgIFtTRVJWRVJfRVJST1JdOiB7IGNvZGU6IC0zMjAwMCwgbWVzc2FnZTogXCJTZXJ2ZXIgZXJyb3JcIiB9LFxufTtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0VSUk9SID0gU0VSVkVSX0VSUk9SO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJQQVJTRV9FUlJPUiIsIklOVkFMSURfUkVRVUVTVCIsIk1FVEhPRF9OT1RfRk9VTkQiLCJJTlZBTElEX1BBUkFNUyIsIklOVEVSTkFMX0VSUk9SIiwiU0VSVkVSX0VSUk9SIiwiUkVTRVJWRURfRVJST1JfQ09ERVMiLCJTRVJWRVJfRVJST1JfQ09ERV9SQU5HRSIsIlNUQU5EQVJEX0VSUk9SX01BUCIsImNvZGUiLCJtZXNzYWdlIiwiREVGQVVMVF9FUlJPUiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNodeJs: () => (/* binding */ isNodeJs)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/environment */ \"(ssr)/./node_modules/@walletconnect/environment/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"isNodeJs\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\nconst isNodeJs = _walletconnect_environment__WEBPACK_IMPORTED_MODULE_0__.isNode;\n //# sourceMappingURL=env.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lbnYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9EO0FBQzdDLE1BQU1DLFdBQVdELDhEQUFNQSxDQUFDO0FBQ1ksQ0FDM0MsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lbnYuanM/Njg0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc05vZGUgfSBmcm9tIFwiQHdhbGxldGNvbm5lY3QvZW52aXJvbm1lbnRcIjtcbmV4cG9ydCBjb25zdCBpc05vZGVKcyA9IGlzTm9kZTtcbmV4cG9ydCAqIGZyb20gXCJAd2FsbGV0Y29ubmVjdC9lbnZpcm9ubWVudFwiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW52LmpzLm1hcCJdLCJuYW1lcyI6WyJpc05vZGUiLCJpc05vZGVKcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getError: () => (/* binding */ getError),\n/* harmony export */   getErrorByCode: () => (/* binding */ getErrorByCode),\n/* harmony export */   isReservedErrorCode: () => (/* binding */ isReservedErrorCode),\n/* harmony export */   isServerErrorCode: () => (/* binding */ isServerErrorCode),\n/* harmony export */   isValidErrorCode: () => (/* binding */ isValidErrorCode),\n/* harmony export */   parseConnectionError: () => (/* binding */ parseConnectionError),\n/* harmony export */   validateJsonRpcError: () => (/* binding */ validateJsonRpcError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\nfunction isServerErrorCode(code) {\n    return code <= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[0] && code >= _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE[1];\n}\nfunction isReservedErrorCode(code) {\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES.includes(code);\n}\nfunction isValidErrorCode(code) {\n    return typeof code === \"number\";\n}\nfunction getError(type) {\n    if (!Object.keys(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).includes(type)) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[type];\n}\nfunction getErrorByCode(code) {\n    const match = Object.values(_constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP).find((e)=>e.code === code);\n    if (!match) {\n        return _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR];\n    }\n    return match;\n}\nfunction validateJsonRpcError(response) {\n    if (typeof response.error.code === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing code for JSON-RPC error\"\n        };\n    }\n    if (typeof response.error.message === \"undefined\") {\n        return {\n            valid: false,\n            error: \"Missing message for JSON-RPC error\"\n        };\n    }\n    if (!isValidErrorCode(response.error.code)) {\n        return {\n            valid: false,\n            error: `Invalid error code type for JSON-RPC: ${response.error.code}`\n        };\n    }\n    if (isReservedErrorCode(response.error.code)) {\n        const error = getErrorByCode(response.error.code);\n        if (error.message !== _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP[_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR].message && response.error.message === error.message) {\n            return {\n                valid: false,\n                error: `Invalid error code message for JSON-RPC: ${response.error.code}`\n            };\n        }\n    }\n    return {\n        valid: true\n    };\n}\nfunction parseConnectionError(e, url, type) {\n    return e.message.includes(\"getaddrinfo ENOTFOUND\") || e.message.includes(\"connect ECONNREFUSED\") ? new Error(`Unavailable ${type} RPC url at ${url}`) : e;\n} //# sourceMappingURL=error.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9lcnJvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFnSDtBQUN6RyxTQUFTSSxrQkFBa0JDLElBQUk7SUFDbEMsT0FBT0EsUUFBUUwsK0RBQXVCLENBQUMsRUFBRSxJQUFJSyxRQUFRTCwrREFBdUIsQ0FBQyxFQUFFO0FBQ25GO0FBQ08sU0FBU00sb0JBQW9CRCxJQUFJO0lBQ3BDLE9BQU9KLDREQUFvQkEsQ0FBQ00sUUFBUSxDQUFDRjtBQUN6QztBQUNPLFNBQVNHLGlCQUFpQkgsSUFBSTtJQUNqQyxPQUFPLE9BQU9BLFNBQVM7QUFDM0I7QUFDTyxTQUFTSSxTQUFTQyxJQUFJO0lBQ3pCLElBQUksQ0FBQ0MsT0FBT0MsSUFBSSxDQUFDViwwREFBa0JBLEVBQUVLLFFBQVEsQ0FBQ0csT0FBTztRQUNqRCxPQUFPUiwwREFBa0IsQ0FBQ0MscURBQWFBLENBQUM7SUFDNUM7SUFDQSxPQUFPRCwwREFBa0IsQ0FBQ1EsS0FBSztBQUNuQztBQUNPLFNBQVNHLGVBQWVSLElBQUk7SUFDL0IsTUFBTVMsUUFBUUgsT0FBT0ksTUFBTSxDQUFDYiwwREFBa0JBLEVBQUVjLElBQUksQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRVosSUFBSSxLQUFLQTtJQUNyRSxJQUFJLENBQUNTLE9BQU87UUFDUixPQUFPWiwwREFBa0IsQ0FBQ0MscURBQWFBLENBQUM7SUFDNUM7SUFDQSxPQUFPVztBQUNYO0FBQ08sU0FBU0kscUJBQXFCQyxRQUFRO0lBQ3pDLElBQUksT0FBT0EsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEtBQUssYUFBYTtRQUM1QyxPQUFPO1lBQUVnQixPQUFPO1lBQU9ELE9BQU87UUFBa0M7SUFDcEU7SUFDQSxJQUFJLE9BQU9ELFNBQVNDLEtBQUssQ0FBQ0UsT0FBTyxLQUFLLGFBQWE7UUFDL0MsT0FBTztZQUFFRCxPQUFPO1lBQU9ELE9BQU87UUFBcUM7SUFDdkU7SUFDQSxJQUFJLENBQUNaLGlCQUFpQlcsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEdBQUc7UUFDeEMsT0FBTztZQUNIZ0IsT0FBTztZQUNQRCxPQUFPLENBQUMsc0NBQXNDLEVBQUVELFNBQVNDLEtBQUssQ0FBQ2YsSUFBSSxDQUFDLENBQUM7UUFDekU7SUFDSjtJQUNBLElBQUlDLG9CQUFvQmEsU0FBU0MsS0FBSyxDQUFDZixJQUFJLEdBQUc7UUFDMUMsTUFBTWUsUUFBUVAsZUFBZU0sU0FBU0MsS0FBSyxDQUFDZixJQUFJO1FBQ2hELElBQUllLE1BQU1FLE9BQU8sS0FBS3BCLDBEQUFrQixDQUFDQyxxREFBYUEsQ0FBQyxDQUFDbUIsT0FBTyxJQUMzREgsU0FBU0MsS0FBSyxDQUFDRSxPQUFPLEtBQUtGLE1BQU1FLE9BQU8sRUFBRTtZQUMxQyxPQUFPO2dCQUNIRCxPQUFPO2dCQUNQRCxPQUFPLENBQUMseUNBQXlDLEVBQUVELFNBQVNDLEtBQUssQ0FBQ2YsSUFBSSxDQUFDLENBQUM7WUFDNUU7UUFDSjtJQUNKO0lBQ0EsT0FBTztRQUFFZ0IsT0FBTztJQUFLO0FBQ3pCO0FBQ08sU0FBU0UscUJBQXFCTixDQUFDLEVBQUVPLEdBQUcsRUFBRWQsSUFBSTtJQUM3QyxPQUFPTyxFQUFFSyxPQUFPLENBQUNmLFFBQVEsQ0FBQyw0QkFBNEJVLEVBQUVLLE9BQU8sQ0FBQ2YsUUFBUSxDQUFDLDBCQUNuRSxJQUFJa0IsTUFBTSxDQUFDLFlBQVksRUFBRWYsS0FBSyxZQUFZLEVBQUVjLElBQUksQ0FBQyxJQUNqRFA7QUFDVixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtdXRpbHMvZGlzdC9lc20vZXJyb3IuanM/NTk1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTRVJWRVJfRVJST1JfQ09ERV9SQU5HRSwgUkVTRVJWRURfRVJST1JfQ09ERVMsIFNUQU5EQVJEX0VSUk9SX01BUCwgREVGQVVMVF9FUlJPUiwgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1NlcnZlckVycm9yQ29kZShjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPD0gU0VSVkVSX0VSUk9SX0NPREVfUkFOR0VbMF0gJiYgY29kZSA+PSBTRVJWRVJfRVJST1JfQ09ERV9SQU5HRVsxXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc2VydmVkRXJyb3JDb2RlKGNvZGUpIHtcbiAgICByZXR1cm4gUkVTRVJWRURfRVJST1JfQ09ERVMuaW5jbHVkZXMoY29kZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZEVycm9yQ29kZShjb2RlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjb2RlID09PSBcIm51bWJlclwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVycm9yKHR5cGUpIHtcbiAgICBpZiAoIU9iamVjdC5rZXlzKFNUQU5EQVJEX0VSUk9SX01BUCkuaW5jbHVkZXModHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIFNUQU5EQVJEX0VSUk9SX01BUFtERUZBVUxUX0VSUk9SXTtcbiAgICB9XG4gICAgcmV0dXJuIFNUQU5EQVJEX0VSUk9SX01BUFt0eXBlXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRFcnJvckJ5Q29kZShjb2RlKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBPYmplY3QudmFsdWVzKFNUQU5EQVJEX0VSUk9SX01BUCkuZmluZChlID0+IGUuY29kZSA9PT0gY29kZSk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gU1RBTkRBUkRfRVJST1JfTUFQW0RFRkFVTFRfRVJST1JdO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2g7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVKc29uUnBjRXJyb3IocmVzcG9uc2UpIHtcbiAgICBpZiAodHlwZW9mIHJlc3BvbnNlLmVycm9yLmNvZGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IGZhbHNlLCBlcnJvcjogXCJNaXNzaW5nIGNvZGUgZm9yIEpTT04tUlBDIGVycm9yXCIgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXNwb25zZS5lcnJvci5tZXNzYWdlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgZXJyb3I6IFwiTWlzc2luZyBtZXNzYWdlIGZvciBKU09OLVJQQyBlcnJvclwiIH07XG4gICAgfVxuICAgIGlmICghaXNWYWxpZEVycm9yQ29kZShyZXNwb25zZS5lcnJvci5jb2RlKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IGBJbnZhbGlkIGVycm9yIGNvZGUgdHlwZSBmb3IgSlNPTi1SUEM6ICR7cmVzcG9uc2UuZXJyb3IuY29kZX1gLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNSZXNlcnZlZEVycm9yQ29kZShyZXNwb25zZS5lcnJvci5jb2RlKSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IGdldEVycm9yQnlDb2RlKHJlc3BvbnNlLmVycm9yLmNvZGUpO1xuICAgICAgICBpZiAoZXJyb3IubWVzc2FnZSAhPT0gU1RBTkRBUkRfRVJST1JfTUFQW0RFRkFVTFRfRVJST1JdLm1lc3NhZ2UgJiZcbiAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UgPT09IGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBgSW52YWxpZCBlcnJvciBjb2RlIG1lc3NhZ2UgZm9yIEpTT04tUlBDOiAke3Jlc3BvbnNlLmVycm9yLmNvZGV9YCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNvbm5lY3Rpb25FcnJvcihlLCB1cmwsIHR5cGUpIHtcbiAgICByZXR1cm4gZS5tZXNzYWdlLmluY2x1ZGVzKFwiZ2V0YWRkcmluZm8gRU5PVEZPVU5EXCIpIHx8IGUubWVzc2FnZS5pbmNsdWRlcyhcImNvbm5lY3QgRUNPTk5SRUZVU0VEXCIpXG4gICAgICAgID8gbmV3IEVycm9yKGBVbmF2YWlsYWJsZSAke3R5cGV9IFJQQyB1cmwgYXQgJHt1cmx9YClcbiAgICAgICAgOiBlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3IuanMubWFwIl0sIm5hbWVzIjpbIlNFUlZFUl9FUlJPUl9DT0RFX1JBTkdFIiwiUkVTRVJWRURfRVJST1JfQ09ERVMiLCJTVEFOREFSRF9FUlJPUl9NQVAiLCJERUZBVUxUX0VSUk9SIiwiaXNTZXJ2ZXJFcnJvckNvZGUiLCJjb2RlIiwiaXNSZXNlcnZlZEVycm9yQ29kZSIsImluY2x1ZGVzIiwiaXNWYWxpZEVycm9yQ29kZSIsImdldEVycm9yIiwidHlwZSIsIk9iamVjdCIsImtleXMiLCJnZXRFcnJvckJ5Q29kZSIsIm1hdGNoIiwidmFsdWVzIiwiZmluZCIsImUiLCJ2YWxpZGF0ZUpzb25ScGNFcnJvciIsInJlc3BvbnNlIiwiZXJyb3IiLCJ2YWxpZCIsIm1lc3NhZ2UiLCJwYXJzZUNvbm5lY3Rpb25FcnJvciIsInVybCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatErrorMessage: () => (/* binding */ formatErrorMessage),\n/* harmony export */   formatJsonRpcError: () => (/* binding */ formatJsonRpcError),\n/* harmony export */   formatJsonRpcRequest: () => (/* binding */ formatJsonRpcRequest),\n/* harmony export */   formatJsonRpcResult: () => (/* binding */ formatJsonRpcResult),\n/* harmony export */   getBigIntRpcId: () => (/* binding */ getBigIntRpcId),\n/* harmony export */   payloadId: () => (/* binding */ payloadId)\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n\n\nfunction payloadId(entropy = 3) {\n    const date = Date.now() * Math.pow(10, entropy);\n    const extra = Math.floor(Math.random() * Math.pow(10, entropy));\n    return date + extra;\n}\nfunction getBigIntRpcId(entropy = 6) {\n    return BigInt(payloadId(entropy));\n}\nfunction formatJsonRpcRequest(method, params, id) {\n    return {\n        id: id || payloadId(),\n        jsonrpc: \"2.0\",\n        method,\n        params\n    };\n}\nfunction formatJsonRpcResult(id, result) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        result\n    };\n}\nfunction formatJsonRpcError(id, error, data) {\n    return {\n        id,\n        jsonrpc: \"2.0\",\n        error: formatErrorMessage(error, data)\n    };\n}\nfunction formatErrorMessage(error, data) {\n    if (typeof error === \"undefined\") {\n        return (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.INTERNAL_ERROR);\n    }\n    if (typeof error === \"string\") {\n        error = Object.assign(Object.assign({}, (0,_error__WEBPACK_IMPORTED_MODULE_0__.getError)(_constants__WEBPACK_IMPORTED_MODULE_1__.SERVER_ERROR)), {\n            message: error\n        });\n    }\n    if (typeof data !== \"undefined\") {\n        error.data = data;\n    }\n    if ((0,_error__WEBPACK_IMPORTED_MODULE_0__.isReservedErrorCode)(error.code)) {\n        error = (0,_error__WEBPACK_IMPORTED_MODULE_0__.getErrorByCode)(error.code);\n    }\n    return error;\n} //# sourceMappingURL=format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9mb3JtYXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBd0U7QUFDYjtBQUNwRCxTQUFTSyxVQUFVQyxVQUFVLENBQUM7SUFDakMsTUFBTUMsT0FBT0MsS0FBS0MsR0FBRyxLQUFLQyxLQUFLQyxHQUFHLENBQUMsSUFBSUw7SUFDdkMsTUFBTU0sUUFBUUYsS0FBS0csS0FBSyxDQUFDSCxLQUFLSSxNQUFNLEtBQUtKLEtBQUtDLEdBQUcsQ0FBQyxJQUFJTDtJQUN0RCxPQUFPQyxPQUFPSztBQUNsQjtBQUNPLFNBQVNHLGVBQWVULFVBQVUsQ0FBQztJQUN0QyxPQUFPVSxPQUFPWCxVQUFVQztBQUM1QjtBQUNPLFNBQVNXLHFCQUFxQkMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLEVBQUU7SUFDbkQsT0FBTztRQUNIQSxJQUFJQSxNQUFNZjtRQUNWZ0IsU0FBUztRQUNUSDtRQUNBQztJQUNKO0FBQ0o7QUFDTyxTQUFTRyxvQkFBb0JGLEVBQUUsRUFBRUcsTUFBTTtJQUMxQyxPQUFPO1FBQ0hIO1FBQ0FDLFNBQVM7UUFDVEU7SUFDSjtBQUNKO0FBQ08sU0FBU0MsbUJBQW1CSixFQUFFLEVBQUVLLEtBQUssRUFBRUMsSUFBSTtJQUM5QyxPQUFPO1FBQ0hOO1FBQ0FDLFNBQVM7UUFDVEksT0FBT0UsbUJBQW1CRixPQUFPQztJQUNyQztBQUNKO0FBQ08sU0FBU0MsbUJBQW1CRixLQUFLLEVBQUVDLElBQUk7SUFDMUMsSUFBSSxPQUFPRCxVQUFVLGFBQWE7UUFDOUIsT0FBT3pCLGdEQUFRQSxDQUFDRyxzREFBY0E7SUFDbEM7SUFDQSxJQUFJLE9BQU9zQixVQUFVLFVBQVU7UUFDM0JBLFFBQVFHLE9BQU9DLE1BQU0sQ0FBQ0QsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBRzdCLGdEQUFRQSxDQUFDSSxvREFBWUEsSUFBSTtZQUFFMEIsU0FBU0w7UUFBTTtJQUN0RjtJQUNBLElBQUksT0FBT0MsU0FBUyxhQUFhO1FBQzdCRCxNQUFNQyxJQUFJLEdBQUdBO0lBQ2pCO0lBQ0EsSUFBSXhCLDJEQUFtQkEsQ0FBQ3VCLE1BQU1NLElBQUksR0FBRztRQUNqQ04sUUFBUXhCLHNEQUFjQSxDQUFDd0IsTUFBTU0sSUFBSTtJQUNyQztJQUNBLE9BQU9OO0FBQ1gsRUFDQSxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL2Zvcm1hdC5qcz8yNTAwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVycm9yLCBnZXRFcnJvckJ5Q29kZSwgaXNSZXNlcnZlZEVycm9yQ29kZSB9IGZyb20gXCIuL2Vycm9yXCI7XG5pbXBvcnQgeyBJTlRFUk5BTF9FUlJPUiwgU0VSVkVSX0VSUk9SIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGF5bG9hZElkKGVudHJvcHkgPSAzKSB7XG4gICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCkgKiBNYXRoLnBvdygxMCwgZW50cm9weSk7XG4gICAgY29uc3QgZXh0cmEgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygxMCwgZW50cm9weSkpO1xuICAgIHJldHVybiBkYXRlICsgZXh0cmE7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0QmlnSW50UnBjSWQoZW50cm9weSA9IDYpIHtcbiAgICByZXR1cm4gQmlnSW50KHBheWxvYWRJZChlbnRyb3B5KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0SnNvblJwY1JlcXVlc3QobWV0aG9kLCBwYXJhbXMsIGlkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGlkIHx8IHBheWxvYWRJZCgpLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICBtZXRob2QsXG4gICAgICAgIHBhcmFtcyxcbiAgICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEpzb25ScGNSZXN1bHQoaWQsIHJlc3VsdCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkLFxuICAgICAgICBqc29ucnBjOiBcIjIuMFwiLFxuICAgICAgICByZXN1bHQsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRKc29uUnBjRXJyb3IoaWQsIGVycm9yLCBkYXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIGpzb25ycGM6IFwiMi4wXCIsXG4gICAgICAgIGVycm9yOiBmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IsIGRhdGEpLFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXJyb3JNZXNzYWdlKGVycm9yLCBkYXRhKSB7XG4gICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2V0RXJyb3IoSU5URVJOQUxfRVJST1IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBnZXRFcnJvcihTRVJWRVJfRVJST1IpKSwgeyBtZXNzYWdlOiBlcnJvciB9KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGVycm9yLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgICBpZiAoaXNSZXNlcnZlZEVycm9yQ29kZShlcnJvci5jb2RlKSkge1xuICAgICAgICBlcnJvciA9IGdldEVycm9yQnlDb2RlKGVycm9yLmNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3I7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXQuanMubWFwIl0sIm5hbWVzIjpbImdldEVycm9yIiwiZ2V0RXJyb3JCeUNvZGUiLCJpc1Jlc2VydmVkRXJyb3JDb2RlIiwiSU5URVJOQUxfRVJST1IiLCJTRVJWRVJfRVJST1IiLCJwYXlsb2FkSWQiLCJlbnRyb3B5IiwiZGF0ZSIsIkRhdGUiLCJub3ciLCJNYXRoIiwicG93IiwiZXh0cmEiLCJmbG9vciIsInJhbmRvbSIsImdldEJpZ0ludFJwY0lkIiwiQmlnSW50IiwiZm9ybWF0SnNvblJwY1JlcXVlc3QiLCJtZXRob2QiLCJwYXJhbXMiLCJpZCIsImpzb25ycGMiLCJmb3JtYXRKc29uUnBjUmVzdWx0IiwicmVzdWx0IiwiZm9ybWF0SnNvblJwY0Vycm9yIiwiZXJyb3IiLCJkYXRhIiwiZm9ybWF0RXJyb3JNZXNzYWdlIiwiT2JqZWN0IiwiYXNzaWduIiwibWVzc2FnZSIsImNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_ERROR),\n/* harmony export */   IBaseJsonRpcProvider: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IBaseJsonRpcProvider),\n/* harmony export */   IEvents: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IEvents),\n/* harmony export */   IJsonRpcConnection: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcConnection),\n/* harmony export */   IJsonRpcProvider: () => (/* reexport safe */ _types__WEBPACK_IMPORTED_MODULE_5__.IJsonRpcProvider),\n/* harmony export */   INTERNAL_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INTERNAL_ERROR),\n/* harmony export */   INVALID_PARAMS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_PARAMS),\n/* harmony export */   INVALID_REQUEST: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.INVALID_REQUEST),\n/* harmony export */   METHOD_NOT_FOUND: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.METHOD_NOT_FOUND),\n/* harmony export */   PARSE_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.PARSE_ERROR),\n/* harmony export */   RESERVED_ERROR_CODES: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.RESERVED_ERROR_CODES),\n/* harmony export */   SERVER_ERROR: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR),\n/* harmony export */   SERVER_ERROR_CODE_RANGE: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.SERVER_ERROR_CODE_RANGE),\n/* harmony export */   STANDARD_ERROR_MAP: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_0__.STANDARD_ERROR_MAP),\n/* harmony export */   formatErrorMessage: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatErrorMessage),\n/* harmony export */   formatJsonRpcError: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError),\n/* harmony export */   formatJsonRpcRequest: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest),\n/* harmony export */   formatJsonRpcResult: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult),\n/* harmony export */   getBigIntRpcId: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId),\n/* harmony export */   getError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getError),\n/* harmony export */   getErrorByCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.getErrorByCode),\n/* harmony export */   isHttpUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isHttpUrl),\n/* harmony export */   isJsonRpcError: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcError),\n/* harmony export */   isJsonRpcPayload: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcPayload),\n/* harmony export */   isJsonRpcRequest: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcRequest),\n/* harmony export */   isJsonRpcResponse: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResponse),\n/* harmony export */   isJsonRpcResult: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcResult),\n/* harmony export */   isJsonRpcValidationInvalid: () => (/* reexport safe */ _validators__WEBPACK_IMPORTED_MODULE_7__.isJsonRpcValidationInvalid),\n/* harmony export */   isLocalhostUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isLocalhostUrl),\n/* harmony export */   isReservedErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isReservedErrorCode),\n/* harmony export */   isServerErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isServerErrorCode),\n/* harmony export */   isValidDefaultRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidDefaultRoute),\n/* harmony export */   isValidErrorCode: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.isValidErrorCode),\n/* harmony export */   isValidLeadingWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidLeadingWildcardRoute),\n/* harmony export */   isValidRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidRoute),\n/* harmony export */   isValidTrailingWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidTrailingWildcardRoute),\n/* harmony export */   isValidWildcardRoute: () => (/* reexport safe */ _routing__WEBPACK_IMPORTED_MODULE_4__.isValidWildcardRoute),\n/* harmony export */   isWsUrl: () => (/* reexport safe */ _url__WEBPACK_IMPORTED_MODULE_6__.isWsUrl),\n/* harmony export */   parseConnectionError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.parseConnectionError),\n/* harmony export */   payloadId: () => (/* reexport safe */ _format__WEBPACK_IMPORTED_MODULE_3__.payloadId),\n/* harmony export */   validateJsonRpcError: () => (/* reexport safe */ _error__WEBPACK_IMPORTED_MODULE_1__.validateJsonRpcError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/constants.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/error.js\");\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./env */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/env.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _env__WEBPACK_IMPORTED_MODULE_2__) if([\"default\",\"DEFAULT_ERROR\",\"INTERNAL_ERROR\",\"INVALID_PARAMS\",\"INVALID_REQUEST\",\"METHOD_NOT_FOUND\",\"PARSE_ERROR\",\"RESERVED_ERROR_CODES\",\"SERVER_ERROR\",\"SERVER_ERROR_CODE_RANGE\",\"STANDARD_ERROR_MAP\",\"getError\",\"getErrorByCode\",\"isReservedErrorCode\",\"isServerErrorCode\",\"isValidErrorCode\",\"parseConnectionError\",\"validateJsonRpcError\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _env__WEBPACK_IMPORTED_MODULE_2__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./format */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/format.js\");\n/* harmony import */ var _routing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./routing */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\");\n/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./url */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\");\n/* harmony import */ var _validators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./validators */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0o7QUFDRjtBQUNHO0FBQ0M7QUFDRjtBQUNGO0FBQ08sQ0FDN0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9pbmRleC5qcz82ODBmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2NvbnN0YW50c1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vZXJyb3JcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VudlwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZm9ybWF0XCI7XG5leHBvcnQgKiBmcm9tIFwiLi9yb3V0aW5nXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90eXBlc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXJsXCI7XG5leHBvcnQgKiBmcm9tIFwiLi92YWxpZGF0b3JzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isValidDefaultRoute: () => (/* binding */ isValidDefaultRoute),\n/* harmony export */   isValidLeadingWildcardRoute: () => (/* binding */ isValidLeadingWildcardRoute),\n/* harmony export */   isValidRoute: () => (/* binding */ isValidRoute),\n/* harmony export */   isValidTrailingWildcardRoute: () => (/* binding */ isValidTrailingWildcardRoute),\n/* harmony export */   isValidWildcardRoute: () => (/* binding */ isValidWildcardRoute)\n/* harmony export */ });\nfunction isValidRoute(route) {\n    if (route.includes(\"*\")) {\n        return isValidWildcardRoute(route);\n    }\n    if (/\\W/g.test(route)) {\n        return false;\n    }\n    return true;\n}\nfunction isValidDefaultRoute(route) {\n    return route === \"*\";\n}\nfunction isValidWildcardRoute(route) {\n    if (isValidDefaultRoute(route)) {\n        return true;\n    }\n    if (!route.includes(\"*\")) {\n        return false;\n    }\n    if (route.split(\"*\").length !== 2) {\n        return false;\n    }\n    if (route.split(\"*\").filter((x)=>x.trim() === \"\").length !== 1) {\n        return false;\n    }\n    return true;\n}\nfunction isValidLeadingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[0].trim();\n}\nfunction isValidTrailingWildcardRoute(route) {\n    return !isValidDefaultRoute(route) && isValidWildcardRoute(route) && !route.split(\"*\")[1].trim();\n} //# sourceMappingURL=routing.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9yb3V0aW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQU8sU0FBU0EsYUFBYUMsS0FBSztJQUM5QixJQUFJQSxNQUFNQyxRQUFRLENBQUMsTUFBTTtRQUNyQixPQUFPQyxxQkFBcUJGO0lBQ2hDO0lBQ0EsSUFBSSxNQUFNRyxJQUFJLENBQUNILFFBQVE7UUFDbkIsT0FBTztJQUNYO0lBQ0EsT0FBTztBQUNYO0FBQ08sU0FBU0ksb0JBQW9CSixLQUFLO0lBQ3JDLE9BQU9BLFVBQVU7QUFDckI7QUFDTyxTQUFTRSxxQkFBcUJGLEtBQUs7SUFDdEMsSUFBSUksb0JBQW9CSixRQUFRO1FBQzVCLE9BQU87SUFDWDtJQUNBLElBQUksQ0FBQ0EsTUFBTUMsUUFBUSxDQUFDLE1BQU07UUFDdEIsT0FBTztJQUNYO0lBQ0EsSUFBSUQsTUFBTUssS0FBSyxDQUFDLEtBQUtDLE1BQU0sS0FBSyxHQUFHO1FBQy9CLE9BQU87SUFDWDtJQUNBLElBQUlOLE1BQU1LLEtBQUssQ0FBQyxLQUFLRSxNQUFNLENBQUNDLENBQUFBLElBQUtBLEVBQUVDLElBQUksT0FBTyxJQUFJSCxNQUFNLEtBQUssR0FBRztRQUM1RCxPQUFPO0lBQ1g7SUFDQSxPQUFPO0FBQ1g7QUFDTyxTQUFTSSw0QkFBNEJWLEtBQUs7SUFDN0MsT0FBTyxDQUFDSSxvQkFBb0JKLFVBQVVFLHFCQUFxQkYsVUFBVSxDQUFDQSxNQUFNSyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQ0ksSUFBSTtBQUNsRztBQUNPLFNBQVNFLDZCQUE2QlgsS0FBSztJQUM5QyxPQUFPLENBQUNJLG9CQUFvQkosVUFBVUUscUJBQXFCRixVQUFVLENBQUNBLE1BQU1LLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDSSxJQUFJO0FBQ2xHLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS9yb3V0aW5nLmpzPzk2MGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRSb3V0ZShyb3V0ZSkge1xuICAgIGlmIChyb3V0ZS5pbmNsdWRlcyhcIipcIikpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWRXaWxkY2FyZFJvdXRlKHJvdXRlKTtcbiAgICB9XG4gICAgaWYgKC9cXFcvZy50ZXN0KHJvdXRlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWREZWZhdWx0Um91dGUocm91dGUpIHtcbiAgICByZXR1cm4gcm91dGUgPT09IFwiKlwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRXaWxkY2FyZFJvdXRlKHJvdXRlKSB7XG4gICAgaWYgKGlzVmFsaWREZWZhdWx0Um91dGUocm91dGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXJvdXRlLmluY2x1ZGVzKFwiKlwiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5zcGxpdChcIipcIikubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLnNwbGl0KFwiKlwiKS5maWx0ZXIoeCA9PiB4LnRyaW0oKSA9PT0gXCJcIikubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZExlYWRpbmdXaWxkY2FyZFJvdXRlKHJvdXRlKSB7XG4gICAgcmV0dXJuICFpc1ZhbGlkRGVmYXVsdFJvdXRlKHJvdXRlKSAmJiBpc1ZhbGlkV2lsZGNhcmRSb3V0ZShyb3V0ZSkgJiYgIXJvdXRlLnNwbGl0KFwiKlwiKVswXS50cmltKCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFRyYWlsaW5nV2lsZGNhcmRSb3V0ZShyb3V0ZSkge1xuICAgIHJldHVybiAhaXNWYWxpZERlZmF1bHRSb3V0ZShyb3V0ZSkgJiYgaXNWYWxpZFdpbGRjYXJkUm91dGUocm91dGUpICYmICFyb3V0ZS5zcGxpdChcIipcIilbMV0udHJpbSgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGluZy5qcy5tYXAiXSwibmFtZXMiOlsiaXNWYWxpZFJvdXRlIiwicm91dGUiLCJpbmNsdWRlcyIsImlzVmFsaWRXaWxkY2FyZFJvdXRlIiwidGVzdCIsImlzVmFsaWREZWZhdWx0Um91dGUiLCJzcGxpdCIsImxlbmd0aCIsImZpbHRlciIsIngiLCJ0cmltIiwiaXNWYWxpZExlYWRpbmdXaWxkY2FyZFJvdXRlIiwiaXNWYWxpZFRyYWlsaW5nV2lsZGNhcmRSb3V0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/routing.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IBaseJsonRpcProvider: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IBaseJsonRpcProvider),\n/* harmony export */   IEvents: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IEvents),\n/* harmony export */   IJsonRpcConnection: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcConnection),\n/* harmony export */   IJsonRpcProvider: () => (/* reexport safe */ _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__.IJsonRpcProvider)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_jsonrpc_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/jsonrpc-types */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-types/dist/index.es.js\");\n //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE2QyxDQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3R5cGVzLmpzPzI2MjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIkB3YWxsZXRjb25uZWN0L2pzb25ycGMtdHlwZXNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHttpUrl: () => (/* binding */ isHttpUrl),\n/* harmony export */   isLocalhostUrl: () => (/* binding */ isLocalhostUrl),\n/* harmony export */   isWsUrl: () => (/* binding */ isWsUrl)\n/* harmony export */ });\nconst HTTP_REGEX = \"^https?:\";\nconst WS_REGEX = \"^wss?:\";\nfunction getUrlProtocol(url) {\n    const matches = url.match(new RegExp(/^\\w+:/, \"gi\"));\n    if (!matches || !matches.length) return;\n    return matches[0];\n}\nfunction matchRegexProtocol(url, regex) {\n    const protocol = getUrlProtocol(url);\n    if (typeof protocol === \"undefined\") return false;\n    return new RegExp(regex).test(protocol);\n}\nfunction isHttpUrl(url) {\n    return matchRegexProtocol(url, HTTP_REGEX);\n}\nfunction isWsUrl(url) {\n    return matchRegexProtocol(url, WS_REGEX);\n}\nfunction isLocalhostUrl(url) {\n    return new RegExp(\"wss?://localhost(:d{2,5})?\").test(url);\n} //# sourceMappingURL=url.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS91cmwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsYUFBYTtBQUNuQixNQUFNQyxXQUFXO0FBQ2pCLFNBQVNDLGVBQWVDLEdBQUc7SUFDdkIsTUFBTUMsVUFBVUQsSUFBSUUsS0FBSyxDQUFDLElBQUlDLE9BQU8sU0FBUztJQUM5QyxJQUFJLENBQUNGLFdBQVcsQ0FBQ0EsUUFBUUcsTUFBTSxFQUMzQjtJQUNKLE9BQU9ILE9BQU8sQ0FBQyxFQUFFO0FBQ3JCO0FBQ0EsU0FBU0ksbUJBQW1CTCxHQUFHLEVBQUVNLEtBQUs7SUFDbEMsTUFBTUMsV0FBV1IsZUFBZUM7SUFDaEMsSUFBSSxPQUFPTyxhQUFhLGFBQ3BCLE9BQU87SUFDWCxPQUFPLElBQUlKLE9BQU9HLE9BQU9FLElBQUksQ0FBQ0Q7QUFDbEM7QUFDTyxTQUFTRSxVQUFVVCxHQUFHO0lBQ3pCLE9BQU9LLG1CQUFtQkwsS0FBS0g7QUFDbkM7QUFDTyxTQUFTYSxRQUFRVixHQUFHO0lBQ3ZCLE9BQU9LLG1CQUFtQkwsS0FBS0Y7QUFDbkM7QUFDTyxTQUFTYSxlQUFlWCxHQUFHO0lBQzlCLE9BQU8sSUFBSUcsT0FBTyw4QkFBOEJLLElBQUksQ0FBQ1I7QUFDekQsRUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3VybC5qcz84MzI4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEhUVFBfUkVHRVggPSBcIl5odHRwcz86XCI7XG5jb25zdCBXU19SRUdFWCA9IFwiXndzcz86XCI7XG5mdW5jdGlvbiBnZXRVcmxQcm90b2NvbCh1cmwpIHtcbiAgICBjb25zdCBtYXRjaGVzID0gdXJsLm1hdGNoKG5ldyBSZWdFeHAoL15cXHcrOi8sIFwiZ2lcIikpO1xuICAgIGlmICghbWF0Y2hlcyB8fCAhbWF0Y2hlcy5sZW5ndGgpXG4gICAgICAgIHJldHVybjtcbiAgICByZXR1cm4gbWF0Y2hlc1swXTtcbn1cbmZ1bmN0aW9uIG1hdGNoUmVnZXhQcm90b2NvbCh1cmwsIHJlZ2V4KSB7XG4gICAgY29uc3QgcHJvdG9jb2wgPSBnZXRVcmxQcm90b2NvbCh1cmwpO1xuICAgIGlmICh0eXBlb2YgcHJvdG9jb2wgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleCkudGVzdChwcm90b2NvbCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNIdHRwVXJsKHVybCkge1xuICAgIHJldHVybiBtYXRjaFJlZ2V4UHJvdG9jb2wodXJsLCBIVFRQX1JFR0VYKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1dzVXJsKHVybCkge1xuICAgIHJldHVybiBtYXRjaFJlZ2V4UHJvdG9jb2wodXJsLCBXU19SRUdFWCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNMb2NhbGhvc3RVcmwodXJsKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJ3c3M/Oi8vbG9jYWxob3N0KDpkezIsNX0pP1wiKS50ZXN0KHVybCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmwuanMubWFwIl0sIm5hbWVzIjpbIkhUVFBfUkVHRVgiLCJXU19SRUdFWCIsImdldFVybFByb3RvY29sIiwidXJsIiwibWF0Y2hlcyIsIm1hdGNoIiwiUmVnRXhwIiwibGVuZ3RoIiwibWF0Y2hSZWdleFByb3RvY29sIiwicmVnZXgiLCJwcm90b2NvbCIsInRlc3QiLCJpc0h0dHBVcmwiLCJpc1dzVXJsIiwiaXNMb2NhbGhvc3RVcmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isJsonRpcError: () => (/* binding */ isJsonRpcError),\n/* harmony export */   isJsonRpcPayload: () => (/* binding */ isJsonRpcPayload),\n/* harmony export */   isJsonRpcRequest: () => (/* binding */ isJsonRpcRequest),\n/* harmony export */   isJsonRpcResponse: () => (/* binding */ isJsonRpcResponse),\n/* harmony export */   isJsonRpcResult: () => (/* binding */ isJsonRpcResult),\n/* harmony export */   isJsonRpcValidationInvalid: () => (/* binding */ isJsonRpcValidationInvalid)\n/* harmony export */ });\nfunction isJsonRpcPayload(payload) {\n    return typeof payload === \"object\" && \"id\" in payload && \"jsonrpc\" in payload && payload.jsonrpc === \"2.0\";\n}\nfunction isJsonRpcRequest(payload) {\n    return isJsonRpcPayload(payload) && \"method\" in payload;\n}\nfunction isJsonRpcResponse(payload) {\n    return isJsonRpcPayload(payload) && (isJsonRpcResult(payload) || isJsonRpcError(payload));\n}\nfunction isJsonRpcResult(payload) {\n    return \"result\" in payload;\n}\nfunction isJsonRpcError(payload) {\n    return \"error\" in payload;\n}\nfunction isJsonRpcValidationInvalid(validation) {\n    return \"error\" in validation && validation.valid === false;\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy11dGlscy9kaXN0L2VzbS92YWxpZGF0b3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFPLFNBQVNBLGlCQUFpQkMsT0FBTztJQUNwQyxPQUFRLE9BQU9BLFlBQVksWUFDdkIsUUFBUUEsV0FDUixhQUFhQSxXQUNiQSxRQUFRQyxPQUFPLEtBQUs7QUFDNUI7QUFDTyxTQUFTQyxpQkFBaUJGLE9BQU87SUFDcEMsT0FBT0QsaUJBQWlCQyxZQUFZLFlBQVlBO0FBQ3BEO0FBQ08sU0FBU0csa0JBQWtCSCxPQUFPO0lBQ3JDLE9BQU9ELGlCQUFpQkMsWUFBYUksQ0FBQUEsZ0JBQWdCSixZQUFZSyxlQUFlTCxRQUFPO0FBQzNGO0FBQ08sU0FBU0ksZ0JBQWdCSixPQUFPO0lBQ25DLE9BQU8sWUFBWUE7QUFDdkI7QUFDTyxTQUFTSyxlQUFlTCxPQUFPO0lBQ2xDLE9BQU8sV0FBV0E7QUFDdEI7QUFDTyxTQUFTTSwyQkFBMkJDLFVBQVU7SUFDakQsT0FBTyxXQUFXQSxjQUFjQSxXQUFXQyxLQUFLLEtBQUs7QUFDekQsRUFDQSxzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXV0aWxzL2Rpc3QvZXNtL3ZhbGlkYXRvcnMuanM/NDc0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUGF5bG9hZChwYXlsb2FkKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgcGF5bG9hZCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBcImlkXCIgaW4gcGF5bG9hZCAmJlxuICAgICAgICBcImpzb25ycGNcIiBpbiBwYXlsb2FkICYmXG4gICAgICAgIHBheWxvYWQuanNvbnJwYyA9PT0gXCIyLjBcIik7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjUmVxdWVzdChwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGlzSnNvblJwY1BheWxvYWQocGF5bG9hZCkgJiYgXCJtZXRob2RcIiBpbiBwYXlsb2FkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblJwY1Jlc3BvbnNlKHBheWxvYWQpIHtcbiAgICByZXR1cm4gaXNKc29uUnBjUGF5bG9hZChwYXlsb2FkKSAmJiAoaXNKc29uUnBjUmVzdWx0KHBheWxvYWQpIHx8IGlzSnNvblJwY0Vycm9yKHBheWxvYWQpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNSZXN1bHQocGF5bG9hZCkge1xuICAgIHJldHVybiBcInJlc3VsdFwiIGluIHBheWxvYWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNKc29uUnBjRXJyb3IocGF5bG9hZCkge1xuICAgIHJldHVybiBcImVycm9yXCIgaW4gcGF5bG9hZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25ScGNWYWxpZGF0aW9uSW52YWxpZCh2YWxpZGF0aW9uKSB7XG4gICAgcmV0dXJuIFwiZXJyb3JcIiBpbiB2YWxpZGF0aW9uICYmIHZhbGlkYXRpb24udmFsaWQgPT09IGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdG9ycy5qcy5tYXAiXSwibmFtZXMiOlsiaXNKc29uUnBjUGF5bG9hZCIsInBheWxvYWQiLCJqc29ucnBjIiwiaXNKc29uUnBjUmVxdWVzdCIsImlzSnNvblJwY1Jlc3BvbnNlIiwiaXNKc29uUnBjUmVzdWx0IiwiaXNKc29uUnBjRXJyb3IiLCJpc0pzb25ScGNWYWxpZGF0aW9uSW52YWxpZCIsInZhbGlkYXRpb24iLCJ2YWxpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WsConnection: () => (/* binding */ f),\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\nconst v = ()=>typeof WebSocket < \"u\" ? WebSocket : typeof global < \"u\" && typeof global.WebSocket < \"u\" ? global.WebSocket :  false ? 0 : typeof self < \"u\" && typeof self.WebSocket < \"u\" ? self.WebSocket : __webpack_require__(/*! ws */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js\"), w = ()=>typeof WebSocket < \"u\" || typeof global < \"u\" && typeof global.WebSocket < \"u\" ||  false && 0 || typeof self < \"u\" && typeof self.WebSocket < \"u\", d = (r)=>r.split(\"?\")[0], h = 10, b = v();\nclass f {\n    constructor(e){\n        if (this.url = e, this.events = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter, this.registering = !1, !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n        this.url = e;\n    }\n    get connected() {\n        return typeof this.socket < \"u\";\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(e, t) {\n        this.events.on(e, t);\n    }\n    once(e, t) {\n        this.events.once(e, t);\n    }\n    off(e, t) {\n        this.events.off(e, t);\n    }\n    removeListener(e, t) {\n        this.events.removeListener(e, t);\n    }\n    async open(e = this.url) {\n        await this.register(e);\n    }\n    async close() {\n        return new Promise((e, t)=>{\n            if (typeof this.socket > \"u\") {\n                t(new Error(\"Connection already closed\"));\n                return;\n            }\n            this.socket.onclose = (n)=>{\n                this.onClose(n), e();\n            }, this.socket.close();\n        });\n    }\n    async send(e) {\n        typeof this.socket > \"u\" && (this.socket = await this.register());\n        try {\n            this.socket.send((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(e));\n        } catch (t) {\n            this.onError(e.id, t);\n        }\n    }\n    register(e = this.url) {\n        if (!(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isWsUrl)(e)) throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);\n        if (this.registering) {\n            const t = this.events.getMaxListeners();\n            return (this.events.listenerCount(\"register_error\") >= t || this.events.listenerCount(\"open\") >= t) && this.events.setMaxListeners(t + 1), new Promise((n, s)=>{\n                this.events.once(\"register_error\", (o)=>{\n                    this.resetMaxListeners(), s(o);\n                }), this.events.once(\"open\", ()=>{\n                    if (this.resetMaxListeners(), typeof this.socket > \"u\") return s(new Error(\"WebSocket connection is missing or invalid\"));\n                    n(this.socket);\n                });\n            });\n        }\n        return this.url = e, this.registering = !0, new Promise((t, n)=>{\n            const s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isReactNative)() ? void 0 : {\n                rejectUnauthorized: !(0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.isLocalhostUrl)(e)\n            }, o = new b(e, [], s);\n            w() ? o.onerror = (i)=>{\n                const a = i;\n                n(this.emitError(a.error));\n            } : o.on(\"error\", (i)=>{\n                n(this.emitError(i));\n            }), o.onopen = ()=>{\n                this.onOpen(o), t(o);\n            };\n        });\n    }\n    onOpen(e) {\n        e.onmessage = (t)=>this.onPayload(t), e.onclose = (t)=>this.onClose(t), this.socket = e, this.registering = !1, this.events.emit(\"open\");\n    }\n    onClose(e) {\n        this.socket = void 0, this.registering = !1, this.events.emit(\"close\", e);\n    }\n    onPayload(e) {\n        if (typeof e.data > \"u\") return;\n        const t = typeof e.data == \"string\" ? (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(e.data) : e.data;\n        this.events.emit(\"payload\", t);\n    }\n    onError(e, t) {\n        const n = this.parseError(t), s = n.message || n.toString(), o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(e, s);\n        this.events.emit(\"payload\", o);\n    }\n    parseError(e, t = this.url) {\n        return (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_2__.parseConnectionError)(e, d(t), \"WS\");\n    }\n    resetMaxListeners() {\n        this.events.getMaxListeners() > h && this.events.setMaxListeners(h);\n    }\n    emitError(e) {\n        const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${d(this.url)}`));\n        return this.events.emit(\"register_error\", t), t;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\");\nWebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js\");\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js\");\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\");\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\");\nmodule.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBRTFCRCxVQUFVRSxxQkFBcUIsR0FBR0QsbUJBQU9BLENBQUM7QUFDMUNELFVBQVVHLE1BQU0sR0FBR0YsbUJBQU9BLENBQUM7QUFDM0JELFVBQVVJLFFBQVEsR0FBR0gsbUJBQU9BLENBQUM7QUFDN0JELFVBQVVLLE1BQU0sR0FBR0osbUJBQU9BLENBQUM7QUFFM0JLLE9BQU9DLE9BQU8sR0FBR1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXdzLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL3dzL2luZGV4LmpzP2U0YmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBXZWJTb2NrZXQgPSByZXF1aXJlKCcuL2xpYi93ZWJzb2NrZXQnKTtcblxuV2ViU29ja2V0LmNyZWF0ZVdlYlNvY2tldFN0cmVhbSA9IHJlcXVpcmUoJy4vbGliL3N0cmVhbScpO1xuV2ViU29ja2V0LlNlcnZlciA9IHJlcXVpcmUoJy4vbGliL3dlYnNvY2tldC1zZXJ2ZXInKTtcbldlYlNvY2tldC5SZWNlaXZlciA9IHJlcXVpcmUoJy4vbGliL3JlY2VpdmVyJyk7XG5XZWJTb2NrZXQuU2VuZGVyID0gcmVxdWlyZSgnLi9saWIvc2VuZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0O1xuIl0sIm5hbWVzIjpbIldlYlNvY2tldCIsInJlcXVpcmUiLCJjcmVhdGVXZWJTb2NrZXRTdHJlYW0iLCJTZXJ2ZXIiLCJSZWNlaXZlciIsIlNlbmRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */ function concat(list, totalLength) {\n    if (list.length === 0) return EMPTY_BUFFER;\n    if (list.length === 1) return list[0];\n    const target = Buffer.allocUnsafe(totalLength);\n    let offset = 0;\n    for(let i = 0; i < list.length; i++){\n        const buf = list[i];\n        target.set(buf, offset);\n        offset += buf.length;\n    }\n    if (offset < totalLength) return target.slice(0, offset);\n    return target;\n}\n/**\n * Masks a buffer using the given mask.\n *\n * @param {Buffer} source The buffer to mask\n * @param {Buffer} mask The mask to use\n * @param {Buffer} output The buffer where to store the result\n * @param {Number} offset The offset at which to start writing\n * @param {Number} length The number of bytes to mask.\n * @public\n */ function _mask(source, mask, output, offset, length) {\n    for(let i = 0; i < length; i++){\n        output[offset + i] = source[i] ^ mask[i & 3];\n    }\n}\n/**\n * Unmasks a buffer using the given mask.\n *\n * @param {Buffer} buffer The buffer to unmask\n * @param {Buffer} mask The mask to use\n * @public\n */ function _unmask(buffer, mask) {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for(let i = 0; i < length; i++){\n        buffer[i] ^= mask[i & 3];\n    }\n}\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} buf The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n * @public\n */ function toArrayBuffer(buf) {\n    if (buf.byteLength === buf.buffer.byteLength) {\n        return buf.buffer;\n    }\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n/**\n * Converts `data` to a `Buffer`.\n *\n * @param {*} data The data to convert\n * @return {Buffer} The buffer\n * @throws {TypeError}\n * @public\n */ function toBuffer(data) {\n    toBuffer.readOnly = true;\n    if (Buffer.isBuffer(data)) return data;\n    let buf;\n    if (data instanceof ArrayBuffer) {\n        buf = Buffer.from(data);\n    } else if (ArrayBuffer.isView(data)) {\n        buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n    } else {\n        buf = Buffer.from(data);\n        toBuffer.readOnly = false;\n    }\n    return buf;\n}\ntry {\n    const bufferUtil = __webpack_require__(/*! bufferutil */ \"(ssr)/./node_modules/bufferutil/index.js\");\n    const bu = bufferUtil.BufferUtil || bufferUtil;\n    module.exports = {\n        concat,\n        mask (source, mask, output, offset, length) {\n            if (length < 48) _mask(source, mask, output, offset, length);\n            else bu.mask(source, mask, output, offset, length);\n        },\n        toArrayBuffer,\n        toBuffer,\n        unmask (buffer, mask) {\n            if (buffer.length < 32) _unmask(buffer, mask);\n            else bu.unmask(buffer, mask);\n        }\n    };\n} catch (e) /* istanbul ignore next */ {\n    module.exports = {\n        concat,\n        mask: _mask,\n        toArrayBuffer,\n        toBuffer,\n        unmask: _unmask\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvYnVmZmVyLXV0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFlBQVksRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUVqQzs7Ozs7OztDQU9DLEdBQ0QsU0FBU0MsT0FBT0MsSUFBSSxFQUFFQyxXQUFXO0lBQy9CLElBQUlELEtBQUtFLE1BQU0sS0FBSyxHQUFHLE9BQU9MO0lBQzlCLElBQUlHLEtBQUtFLE1BQU0sS0FBSyxHQUFHLE9BQU9GLElBQUksQ0FBQyxFQUFFO0lBRXJDLE1BQU1HLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0o7SUFDbEMsSUFBSUssU0FBUztJQUViLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxLQUFLRSxNQUFNLEVBQUVLLElBQUs7UUFDcEMsTUFBTUMsTUFBTVIsSUFBSSxDQUFDTyxFQUFFO1FBQ25CSixPQUFPTSxHQUFHLENBQUNELEtBQUtGO1FBQ2hCQSxVQUFVRSxJQUFJTixNQUFNO0lBQ3RCO0lBRUEsSUFBSUksU0FBU0wsYUFBYSxPQUFPRSxPQUFPTyxLQUFLLENBQUMsR0FBR0o7SUFFakQsT0FBT0g7QUFDVDtBQUVBOzs7Ozs7Ozs7Q0FTQyxHQUNELFNBQVNRLE1BQU1DLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUVSLE1BQU0sRUFBRUosTUFBTTtJQUNqRCxJQUFLLElBQUlLLElBQUksR0FBR0EsSUFBSUwsUUFBUUssSUFBSztRQUMvQk8sTUFBTSxDQUFDUixTQUFTQyxFQUFFLEdBQUdLLE1BQU0sQ0FBQ0wsRUFBRSxHQUFHTSxJQUFJLENBQUNOLElBQUksRUFBRTtJQUM5QztBQUNGO0FBRUE7Ozs7OztDQU1DLEdBQ0QsU0FBU1EsUUFBUUMsTUFBTSxFQUFFSCxJQUFJO0lBQzNCLHlFQUF5RTtJQUN6RSxNQUFNWCxTQUFTYyxPQUFPZCxNQUFNO0lBQzVCLElBQUssSUFBSUssSUFBSSxHQUFHQSxJQUFJTCxRQUFRSyxJQUFLO1FBQy9CUyxNQUFNLENBQUNULEVBQUUsSUFBSU0sSUFBSSxDQUFDTixJQUFJLEVBQUU7SUFDMUI7QUFDRjtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNVLGNBQWNULEdBQUc7SUFDeEIsSUFBSUEsSUFBSVUsVUFBVSxLQUFLVixJQUFJUSxNQUFNLENBQUNFLFVBQVUsRUFBRTtRQUM1QyxPQUFPVixJQUFJUSxNQUFNO0lBQ25CO0lBRUEsT0FBT1IsSUFBSVEsTUFBTSxDQUFDTixLQUFLLENBQUNGLElBQUlXLFVBQVUsRUFBRVgsSUFBSVcsVUFBVSxHQUFHWCxJQUFJVSxVQUFVO0FBQ3pFO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNELFNBQVNFLFNBQVNDLElBQUk7SUFDcEJELFNBQVNFLFFBQVEsR0FBRztJQUVwQixJQUFJbEIsT0FBT21CLFFBQVEsQ0FBQ0YsT0FBTyxPQUFPQTtJQUVsQyxJQUFJYjtJQUVKLElBQUlhLGdCQUFnQkcsYUFBYTtRQUMvQmhCLE1BQU1KLE9BQU9xQixJQUFJLENBQUNKO0lBQ3BCLE9BQU8sSUFBSUcsWUFBWUUsTUFBTSxDQUFDTCxPQUFPO1FBQ25DYixNQUFNSixPQUFPcUIsSUFBSSxDQUFDSixLQUFLTCxNQUFNLEVBQUVLLEtBQUtGLFVBQVUsRUFBRUUsS0FBS0gsVUFBVTtJQUNqRSxPQUFPO1FBQ0xWLE1BQU1KLE9BQU9xQixJQUFJLENBQUNKO1FBQ2xCRCxTQUFTRSxRQUFRLEdBQUc7SUFDdEI7SUFFQSxPQUFPZDtBQUNUO0FBRUEsSUFBSTtJQUNGLE1BQU1tQixhQUFhN0IsbUJBQU9BLENBQUM7SUFDM0IsTUFBTThCLEtBQUtELFdBQVdFLFVBQVUsSUFBSUY7SUFFcENHLE9BQU9DLE9BQU8sR0FBRztRQUNmaEM7UUFDQWMsTUFBS0QsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRVIsTUFBTSxFQUFFSixNQUFNO1lBQ3ZDLElBQUlBLFNBQVMsSUFBSVMsTUFBTUMsUUFBUUMsTUFBTUMsUUFBUVIsUUFBUUo7aUJBQ2hEMEIsR0FBR2YsSUFBSSxDQUFDRCxRQUFRQyxNQUFNQyxRQUFRUixRQUFRSjtRQUM3QztRQUNBZTtRQUNBRztRQUNBWSxRQUFPaEIsTUFBTSxFQUFFSCxJQUFJO1lBQ2pCLElBQUlHLE9BQU9kLE1BQU0sR0FBRyxJQUFJYSxRQUFRQyxRQUFRSDtpQkFDbkNlLEdBQUdJLE1BQU0sQ0FBQ2hCLFFBQVFIO1FBQ3pCO0lBQ0Y7QUFDRixFQUFFLE9BQU9vQixHQUFHLHdCQUF3QixHQUFHO0lBQ3JDSCxPQUFPQyxPQUFPLEdBQUc7UUFDZmhDO1FBQ0FjLE1BQU1GO1FBQ05NO1FBQ0FHO1FBQ0FZLFFBQVFqQjtJQUNWO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXdzLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL3dzL2xpYi9idWZmZXItdXRpbC5qcz81ODgxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBFTVBUWV9CVUZGRVIgfSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5cbi8qKlxuICogTWVyZ2VzIGFuIGFycmF5IG9mIGJ1ZmZlcnMgaW50byBhIG5ldyBidWZmZXIuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJbXX0gbGlzdCBUaGUgYXJyYXkgb2YgYnVmZmVycyB0byBjb25jYXRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0b3RhbExlbmd0aCBUaGUgdG90YWwgbGVuZ3RoIG9mIGJ1ZmZlcnMgaW4gdGhlIGxpc3RcbiAqIEByZXR1cm4ge0J1ZmZlcn0gVGhlIHJlc3VsdGluZyBidWZmZXJcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gY29uY2F0KGxpc3QsIHRvdGFsTGVuZ3RoKSB7XG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIEVNUFRZX0JVRkZFUjtcbiAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSByZXR1cm4gbGlzdFswXTtcblxuICBjb25zdCB0YXJnZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUodG90YWxMZW5ndGgpO1xuICBsZXQgb2Zmc2V0ID0gMDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBidWYgPSBsaXN0W2ldO1xuICAgIHRhcmdldC5zZXQoYnVmLCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBidWYubGVuZ3RoO1xuICB9XG5cbiAgaWYgKG9mZnNldCA8IHRvdGFsTGVuZ3RoKSByZXR1cm4gdGFyZ2V0LnNsaWNlKDAsIG9mZnNldCk7XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBNYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gc291cmNlIFRoZSBidWZmZXIgdG8gbWFza1xuICogQHBhcmFtIHtCdWZmZXJ9IG1hc2sgVGhlIG1hc2sgdG8gdXNlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gb3V0cHV0IFRoZSBidWZmZXIgd2hlcmUgdG8gc3RvcmUgdGhlIHJlc3VsdFxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IGF0IHdoaWNoIHRvIHN0YXJ0IHdyaXRpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZW5ndGggVGhlIG51bWJlciBvZiBieXRlcyB0byBtYXNrLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBfbWFzayhzb3VyY2UsIG1hc2ssIG91dHB1dCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFtvZmZzZXQgKyBpXSA9IHNvdXJjZVtpXSBeIG1hc2tbaSAmIDNdO1xuICB9XG59XG5cbi8qKlxuICogVW5tYXNrcyBhIGJ1ZmZlciB1c2luZyB0aGUgZ2l2ZW4gbWFzay5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gdW5tYXNrXG4gKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gX3VubWFzayhidWZmZXIsIG1hc2spIHtcbiAgLy8gUmVxdWlyZWQgdW50aWwgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy85MDA2IGlzIHJlc29sdmVkLlxuICBjb25zdCBsZW5ndGggPSBidWZmZXIubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgYnVmZmVyW2ldIF49IG1hc2tbaSAmIDNdO1xuICB9XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBidWZmZXIgdG8gYW4gYEFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmIFRoZSBidWZmZXIgdG8gY29udmVydFxuICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IENvbnZlcnRlZCBidWZmZXJcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gdG9BcnJheUJ1ZmZlcihidWYpIHtcbiAgaWYgKGJ1Zi5ieXRlTGVuZ3RoID09PSBidWYuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICByZXR1cm4gYnVmLmJ1ZmZlcjtcbiAgfVxuXG4gIHJldHVybiBidWYuYnVmZmVyLnNsaWNlKGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZU9mZnNldCArIGJ1Zi5ieXRlTGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZGF0YWAgdG8gYSBgQnVmZmVyYC5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGEgVGhlIGRhdGEgdG8gY29udmVydFxuICogQHJldHVybiB7QnVmZmVyfSBUaGUgYnVmZmVyXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvQnVmZmVyKGRhdGEpIHtcbiAgdG9CdWZmZXIucmVhZE9ubHkgPSB0cnVlO1xuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHJldHVybiBkYXRhO1xuXG4gIGxldCBidWY7XG5cbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICB9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhkYXRhKSkge1xuICAgIGJ1ZiA9IEJ1ZmZlci5mcm9tKGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCk7XG4gIH0gZWxzZSB7XG4gICAgYnVmID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgdG9CdWZmZXIucmVhZE9ubHkgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBidWY7XG59XG5cbnRyeSB7XG4gIGNvbnN0IGJ1ZmZlclV0aWwgPSByZXF1aXJlKCdidWZmZXJ1dGlsJyk7XG4gIGNvbnN0IGJ1ID0gYnVmZmVyVXRpbC5CdWZmZXJVdGlsIHx8IGJ1ZmZlclV0aWw7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgY29uY2F0LFxuICAgIG1hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICBpZiAobGVuZ3RoIDwgNDgpIF9tYXNrKHNvdXJjZSwgbWFzaywgb3V0cHV0LCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgICBlbHNlIGJ1Lm1hc2soc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKTtcbiAgICB9LFxuICAgIHRvQXJyYXlCdWZmZXIsXG4gICAgdG9CdWZmZXIsXG4gICAgdW5tYXNrKGJ1ZmZlciwgbWFzaykge1xuICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPCAzMikgX3VubWFzayhidWZmZXIsIG1hc2spO1xuICAgICAgZWxzZSBidS51bm1hc2soYnVmZmVyLCBtYXNrKTtcbiAgICB9XG4gIH07XG59IGNhdGNoIChlKSAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNvbmNhdCxcbiAgICBtYXNrOiBfbWFzayxcbiAgICB0b0FycmF5QnVmZmVyLFxuICAgIHRvQnVmZmVyLFxuICAgIHVubWFzazogX3VubWFza1xuICB9O1xufVxuIl0sIm5hbWVzIjpbIkVNUFRZX0JVRkZFUiIsInJlcXVpcmUiLCJjb25jYXQiLCJsaXN0IiwidG90YWxMZW5ndGgiLCJsZW5ndGgiLCJ0YXJnZXQiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIm9mZnNldCIsImkiLCJidWYiLCJzZXQiLCJzbGljZSIsIl9tYXNrIiwic291cmNlIiwibWFzayIsIm91dHB1dCIsIl91bm1hc2siLCJidWZmZXIiLCJ0b0FycmF5QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJ0b0J1ZmZlciIsImRhdGEiLCJyZWFkT25seSIsImlzQnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJmcm9tIiwiaXNWaWV3IiwiYnVmZmVyVXRpbCIsImJ1IiwiQnVmZmVyVXRpbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ1bm1hc2siLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    BINARY_TYPES: [\n        \"nodebuffer\",\n        \"arraybuffer\",\n        \"fragments\"\n    ],\n    GUID: \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\",\n    kStatusCode: Symbol(\"status-code\"),\n    kWebSocket: Symbol(\"websocket\"),\n    EMPTY_BUFFER: Buffer.alloc(0),\n    NOOP: ()=>{}\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxjQUFjO1FBQUM7UUFBYztRQUFlO0tBQVk7SUFDeERDLE1BQU07SUFDTkMsYUFBYUMsT0FBTztJQUNwQkMsWUFBWUQsT0FBTztJQUNuQkUsY0FBY0MsT0FBT0MsS0FBSyxDQUFDO0lBQzNCQyxNQUFNLEtBQU87QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L2pzb25ycGMtd3MtY29ubmVjdGlvbi9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcz9hYWQxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJJTkFSWV9UWVBFUzogWydub2RlYnVmZmVyJywgJ2FycmF5YnVmZmVyJywgJ2ZyYWdtZW50cyddLFxuICBHVUlEOiAnMjU4RUFGQTUtRTkxNC00N0RBLTk1Q0EtQzVBQjBEQzg1QjExJyxcbiAga1N0YXR1c0NvZGU6IFN5bWJvbCgnc3RhdHVzLWNvZGUnKSxcbiAga1dlYlNvY2tldDogU3ltYm9sKCd3ZWJzb2NrZXQnKSxcbiAgRU1QVFlfQlVGRkVSOiBCdWZmZXIuYWxsb2MoMCksXG4gIE5PT1A6ICgpID0+IHt9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJCSU5BUllfVFlQRVMiLCJHVUlEIiwia1N0YXR1c0NvZGUiLCJTeW1ib2wiLCJrV2ViU29ja2V0IiwiRU1QVFlfQlVGRkVSIiwiQnVmZmVyIiwiYWxsb2MiLCJOT09QIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js ***!
  \***********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Class representing an event.\n *\n * @private\n */ class Event {\n    /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(type, target){\n        this.target = target;\n        this.type = type;\n    }\n}\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */ class MessageEvent extends Event {\n    /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(data, target){\n        super(\"message\", target);\n        this.data = data;\n    }\n}\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */ class CloseEvent extends Event {\n    /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being\n   *     closed\n   * @param {String} reason A human-readable string explaining why the\n   *     connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(code, reason, target){\n        super(\"close\", target);\n        this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n        this.reason = reason;\n        this.code = code;\n    }\n}\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */ class OpenEvent extends Event {\n    /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(target){\n        super(\"open\", target);\n    }\n}\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */ class ErrorEvent extends Event {\n    /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */ constructor(error, target){\n        super(\"error\", target);\n        this.message = error.message;\n        this.error = error;\n    }\n}\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */ const EventTarget = {\n    /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */ addEventListener (type, listener, options) {\n        if (typeof listener !== \"function\") return;\n        function onMessage(data) {\n            listener.call(this, new MessageEvent(data, this));\n        }\n        function onClose(code, message) {\n            listener.call(this, new CloseEvent(code, message, this));\n        }\n        function onError(error) {\n            listener.call(this, new ErrorEvent(error, this));\n        }\n        function onOpen() {\n            listener.call(this, new OpenEvent(this));\n        }\n        const method = options && options.once ? \"once\" : \"on\";\n        if (type === \"message\") {\n            onMessage._listener = listener;\n            this[method](type, onMessage);\n        } else if (type === \"close\") {\n            onClose._listener = listener;\n            this[method](type, onClose);\n        } else if (type === \"error\") {\n            onError._listener = listener;\n            this[method](type, onError);\n        } else if (type === \"open\") {\n            onOpen._listener = listener;\n            this[method](type, onOpen);\n        } else {\n            this[method](type, listener);\n        }\n    },\n    /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */ removeEventListener (type, listener) {\n        const listeners = this.listeners(type);\n        for(let i = 0; i < listeners.length; i++){\n            if (listeners[i] === listener || listeners[i]._listener === listener) {\n                this.removeListener(type, listeners[i]);\n            }\n        }\n    }\n};\nmodule.exports = EventTarget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\n// prettier-ignore\nconst tokenChars = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    0,\n    1,\n    0,\n    1,\n    0 // 112 - 127\n];\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */ function push(dest, name, elem) {\n    if (dest[name] === undefined) dest[name] = [\n        elem\n    ];\n    else dest[name].push(elem);\n}\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */ function parse(header) {\n    const offers = Object.create(null);\n    if (header === undefined || header === \"\") return offers;\n    let params = Object.create(null);\n    let mustUnescape = false;\n    let isEscaping = false;\n    let inQuotes = false;\n    let extensionName;\n    let paramName;\n    let start = -1;\n    let end = -1;\n    let i = 0;\n    for(; i < header.length; i++){\n        const code = header.charCodeAt(i);\n        if (extensionName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 /* ' ' */  || code === 0x09 /* '\\t' */ ) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b /* ';' */  || code === 0x2c /* ',' */ ) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                const name = header.slice(start, end);\n                if (code === 0x2c) {\n                    push(offers, name, params);\n                    params = Object.create(null);\n                } else {\n                    extensionName = name;\n                }\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        } else if (paramName === undefined) {\n            if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (code === 0x20 || code === 0x09) {\n                if (end === -1 && start !== -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                push(params, header.slice(start, end), true);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = Object.create(null);\n                    extensionName = undefined;\n                }\n                start = end = -1;\n            } else if (code === 0x3d /* '=' */  && start !== -1 && end === -1) {\n                paramName = header.slice(start, i);\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        } else {\n            //\n            // The value of a quoted-string after unescaping must conform to the\n            // token ABNF, so only token characters are valid.\n            // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n            //\n            if (isEscaping) {\n                if (tokenChars[code] !== 1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (start === -1) start = i;\n                else if (!mustUnescape) mustUnescape = true;\n                isEscaping = false;\n            } else if (inQuotes) {\n                if (tokenChars[code] === 1) {\n                    if (start === -1) start = i;\n                } else if (code === 0x22 /* '\"' */  && start !== -1) {\n                    inQuotes = false;\n                    end = i;\n                } else if (code === 0x5c /* '\\' */ ) {\n                    isEscaping = true;\n                } else {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n            } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n                inQuotes = true;\n            } else if (end === -1 && tokenChars[code] === 1) {\n                if (start === -1) start = i;\n            } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n                if (end === -1) end = i;\n            } else if (code === 0x3b || code === 0x2c) {\n                if (start === -1) {\n                    throw new SyntaxError(`Unexpected character at index ${i}`);\n                }\n                if (end === -1) end = i;\n                let value = header.slice(start, end);\n                if (mustUnescape) {\n                    value = value.replace(/\\\\/g, \"\");\n                    mustUnescape = false;\n                }\n                push(params, paramName, value);\n                if (code === 0x2c) {\n                    push(offers, extensionName, params);\n                    params = Object.create(null);\n                    extensionName = undefined;\n                }\n                paramName = undefined;\n                start = end = -1;\n            } else {\n                throw new SyntaxError(`Unexpected character at index ${i}`);\n            }\n        }\n    }\n    if (start === -1 || inQuotes) {\n        throw new SyntaxError(\"Unexpected end of input\");\n    }\n    if (end === -1) end = i;\n    const token = header.slice(start, end);\n    if (extensionName === undefined) {\n        push(offers, token, params);\n    } else {\n        if (paramName === undefined) {\n            push(params, token, true);\n        } else if (mustUnescape) {\n            push(params, paramName, token.replace(/\\\\/g, \"\"));\n        } else {\n            push(params, paramName, token);\n        }\n        push(offers, extensionName, params);\n    }\n    return offers;\n}\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */ function format(extensions) {\n    return Object.keys(extensions).map((extension)=>{\n        let configurations = extensions[extension];\n        if (!Array.isArray(configurations)) configurations = [\n            configurations\n        ];\n        return configurations.map((params)=>{\n            return [\n                extension\n            ].concat(Object.keys(params).map((k)=>{\n                let values = params[k];\n                if (!Array.isArray(values)) values = [\n                    values\n                ];\n                return values.map((v)=>v === true ? k : `${k}=${v}`).join(\"; \");\n            })).join(\"; \");\n        }).join(\", \");\n    }).join(\", \");\n}\nmodule.exports = {\n    format,\n    parse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nconst kDone = Symbol(\"kDone\");\nconst kRun = Symbol(\"kRun\");\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */ class Limiter {\n    /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */ constructor(concurrency){\n        this[kDone] = ()=>{\n            this.pending--;\n            this[kRun]();\n        };\n        this.concurrency = concurrency || Infinity;\n        this.jobs = [];\n        this.pending = 0;\n    }\n    /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */ add(job) {\n        this.jobs.push(job);\n        this[kRun]();\n    }\n    /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */ [kRun]() {\n        if (this.pending === this.concurrency) return;\n        if (this.jobs.length) {\n            const job = this.jobs.shift();\n            this.pending++;\n            job(this[kDone]);\n        }\n    }\n}\nmodule.exports = Limiter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvbGltaXRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFFBQVFDLE9BQU87QUFDckIsTUFBTUMsT0FBT0QsT0FBTztBQUVwQjs7O0NBR0MsR0FDRCxNQUFNRTtJQUNKOzs7OztHQUtDLEdBQ0RDLFlBQVlDLFdBQVcsQ0FBRTtRQUN2QixJQUFJLENBQUNMLE1BQU0sR0FBRztZQUNaLElBQUksQ0FBQ00sT0FBTztZQUNaLElBQUksQ0FBQ0osS0FBSztRQUNaO1FBQ0EsSUFBSSxDQUFDRyxXQUFXLEdBQUdBLGVBQWVFO1FBQ2xDLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUNGLE9BQU8sR0FBRztJQUNqQjtJQUVBOzs7OztHQUtDLEdBQ0RHLElBQUlDLEdBQUcsRUFBRTtRQUNQLElBQUksQ0FBQ0YsSUFBSSxDQUFDRyxJQUFJLENBQUNEO1FBQ2YsSUFBSSxDQUFDUixLQUFLO0lBQ1o7SUFFQTs7OztHQUlDLEdBQ0QsQ0FBQ0EsS0FBSyxHQUFHO1FBQ1AsSUFBSSxJQUFJLENBQUNJLE9BQU8sS0FBSyxJQUFJLENBQUNELFdBQVcsRUFBRTtRQUV2QyxJQUFJLElBQUksQ0FBQ0csSUFBSSxDQUFDSSxNQUFNLEVBQUU7WUFDcEIsTUFBTUYsTUFBTSxJQUFJLENBQUNGLElBQUksQ0FBQ0ssS0FBSztZQUUzQixJQUFJLENBQUNQLE9BQU87WUFDWkksSUFBSSxJQUFJLENBQUNWLE1BQU07UUFDakI7SUFDRjtBQUNGO0FBRUFjLE9BQU9DLE9BQU8sR0FBR1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXdzLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL3dzL2xpYi9saW1pdGVyLmpzPzQzYWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBrRG9uZSA9IFN5bWJvbCgna0RvbmUnKTtcbmNvbnN0IGtSdW4gPSBTeW1ib2woJ2tSdW4nKTtcblxuLyoqXG4gKiBBIHZlcnkgc2ltcGxlIGpvYiBxdWV1ZSB3aXRoIGFkanVzdGFibGUgY29uY3VycmVuY3kuIEFkYXB0ZWQgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL1NUUk1ML2FzeW5jLWxpbWl0ZXJcbiAqL1xuY2xhc3MgTGltaXRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGBMaW1pdGVyYC5cbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IFtjb25jdXJyZW5jeT1JbmZpbml0eV0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGpvYnMgYWxsb3dlZFxuICAgKiAgICAgdG8gcnVuIGNvbmN1cnJlbnRseVxuICAgKi9cbiAgY29uc3RydWN0b3IoY29uY3VycmVuY3kpIHtcbiAgICB0aGlzW2tEb25lXSA9ICgpID0+IHtcbiAgICAgIHRoaXMucGVuZGluZy0tO1xuICAgICAgdGhpc1trUnVuXSgpO1xuICAgIH07XG4gICAgdGhpcy5jb25jdXJyZW5jeSA9IGNvbmN1cnJlbmN5IHx8IEluZmluaXR5O1xuICAgIHRoaXMuam9icyA9IFtdO1xuICAgIHRoaXMucGVuZGluZyA9IDA7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGpvYiB0byB0aGUgcXVldWUuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGpvYiBUaGUgam9iIHRvIHJ1blxuICAgKiBAcHVibGljXG4gICAqL1xuICBhZGQoam9iKSB7XG4gICAgdGhpcy5qb2JzLnB1c2goam9iKTtcbiAgICB0aGlzW2tSdW5dKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGpvYiBmcm9tIHRoZSBxdWV1ZSBhbmQgcnVucyBpdCBpZiBwb3NzaWJsZS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIFtrUnVuXSgpIHtcbiAgICBpZiAodGhpcy5wZW5kaW5nID09PSB0aGlzLmNvbmN1cnJlbmN5KSByZXR1cm47XG5cbiAgICBpZiAodGhpcy5qb2JzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgam9iID0gdGhpcy5qb2JzLnNoaWZ0KCk7XG5cbiAgICAgIHRoaXMucGVuZGluZysrO1xuICAgICAgam9iKHRoaXNba0RvbmVdKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMaW1pdGVyO1xuIl0sIm5hbWVzIjpbImtEb25lIiwiU3ltYm9sIiwia1J1biIsIkxpbWl0ZXIiLCJjb25zdHJ1Y3RvciIsImNvbmN1cnJlbmN5IiwicGVuZGluZyIsIkluZmluaXR5Iiwiam9icyIsImFkZCIsImpvYiIsInB1c2giLCJsZW5ndGgiLCJzaGlmdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js ***!
  \*****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst Limiter = __webpack_require__(/*! ./limiter */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/limiter.js\");\nconst { kStatusCode, NOOP } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst TRAILER = Buffer.from([\n    0x00,\n    0x00,\n    0xff,\n    0xff\n]);\nconst kPerMessageDeflate = Symbol(\"permessage-deflate\");\nconst kTotalLength = Symbol(\"total-length\");\nconst kCallback = Symbol(\"callback\");\nconst kBuffers = Symbol(\"buffers\");\nconst kError = Symbol(\"error\");\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n/**\n * permessage-deflate implementation.\n */ class PerMessageDeflate {\n    /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} [options] Configuration options\n   * @param {Boolean} [options.serverNoContextTakeover=false] Request/accept\n   *     disabling of server context takeover\n   * @param {Boolean} [options.clientNoContextTakeover=false] Advertise/\n   *     acknowledge disabling of client context takeover\n   * @param {(Boolean|Number)} [options.serverMaxWindowBits] Request/confirm the\n   *     use of a custom server window size\n   * @param {(Boolean|Number)} [options.clientMaxWindowBits] Advertise support\n   *     for, or request, a custom client window size\n   * @param {Object} [options.zlibDeflateOptions] Options to pass to zlib on\n   *     deflate\n   * @param {Object} [options.zlibInflateOptions] Options to pass to zlib on\n   *     inflate\n   * @param {Number} [options.threshold=1024] Size (in bytes) below which\n   *     messages should not be compressed\n   * @param {Number} [options.concurrencyLimit=10] The number of concurrent\n   *     calls to zlib\n   * @param {Boolean} [isServer=false] Create the instance in either server or\n   *     client mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */ constructor(options, isServer, maxPayload){\n        this._maxPayload = maxPayload | 0;\n        this._options = options || {};\n        this._threshold = this._options.threshold !== undefined ? this._options.threshold : 1024;\n        this._isServer = !!isServer;\n        this._deflate = null;\n        this._inflate = null;\n        this.params = null;\n        if (!zlibLimiter) {\n            const concurrency = this._options.concurrencyLimit !== undefined ? this._options.concurrencyLimit : 10;\n            zlibLimiter = new Limiter(concurrency);\n        }\n    }\n    /**\n   * @type {String}\n   */ static get extensionName() {\n        return \"permessage-deflate\";\n    }\n    /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */ offer() {\n        const params = {};\n        if (this._options.serverNoContextTakeover) {\n            params.server_no_context_takeover = true;\n        }\n        if (this._options.clientNoContextTakeover) {\n            params.client_no_context_takeover = true;\n        }\n        if (this._options.serverMaxWindowBits) {\n            params.server_max_window_bits = this._options.serverMaxWindowBits;\n        }\n        if (this._options.clientMaxWindowBits) {\n            params.client_max_window_bits = this._options.clientMaxWindowBits;\n        } else if (this._options.clientMaxWindowBits == null) {\n            params.client_max_window_bits = true;\n        }\n        return params;\n    }\n    /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */ accept(configurations) {\n        configurations = this.normalizeParams(configurations);\n        this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);\n        return this.params;\n    }\n    /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */ cleanup() {\n        if (this._inflate) {\n            this._inflate.close();\n            this._inflate = null;\n        }\n        if (this._deflate) {\n            const callback = this._deflate[kCallback];\n            this._deflate.close();\n            this._deflate = null;\n            if (callback) {\n                callback(new Error(\"The deflate stream was closed while data was being processed\"));\n            }\n        }\n    }\n    /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsServer(offers) {\n        const opts = this._options;\n        const accepted = offers.find((params)=>{\n            if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === \"number\" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === \"number\" && !params.client_max_window_bits) {\n                return false;\n            }\n            return true;\n        });\n        if (!accepted) {\n            throw new Error(\"None of the extension offers can be accepted\");\n        }\n        if (opts.serverNoContextTakeover) {\n            accepted.server_no_context_takeover = true;\n        }\n        if (opts.clientNoContextTakeover) {\n            accepted.client_no_context_takeover = true;\n        }\n        if (typeof opts.serverMaxWindowBits === \"number\") {\n            accepted.server_max_window_bits = opts.serverMaxWindowBits;\n        }\n        if (typeof opts.clientMaxWindowBits === \"number\") {\n            accepted.client_max_window_bits = opts.clientMaxWindowBits;\n        } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {\n            delete accepted.client_max_window_bits;\n        }\n        return accepted;\n    }\n    /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */ acceptAsClient(response) {\n        const params = response[0];\n        if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n            throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n        }\n        if (!params.client_max_window_bits) {\n            if (typeof this._options.clientMaxWindowBits === \"number\") {\n                params.client_max_window_bits = this._options.clientMaxWindowBits;\n            }\n        } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === \"number\" && params.client_max_window_bits > this._options.clientMaxWindowBits) {\n            throw new Error('Unexpected or invalid parameter \"client_max_window_bits\"');\n        }\n        return params;\n    }\n    /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */ normalizeParams(configurations) {\n        configurations.forEach((params)=>{\n            Object.keys(params).forEach((key)=>{\n                let value = params[key];\n                if (value.length > 1) {\n                    throw new Error(`Parameter \"${key}\" must have only a single value`);\n                }\n                value = value[0];\n                if (key === \"client_max_window_bits\") {\n                    if (value !== true) {\n                        const num = +value;\n                        if (!Number.isInteger(num) || num < 8 || num > 15) {\n                            throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                        }\n                        value = num;\n                    } else if (!this._isServer) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                } else if (key === \"server_max_window_bits\") {\n                    const num = +value;\n                    if (!Number.isInteger(num) || num < 8 || num > 15) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                    value = num;\n                } else if (key === \"client_no_context_takeover\" || key === \"server_no_context_takeover\") {\n                    if (value !== true) {\n                        throw new TypeError(`Invalid value for parameter \"${key}\": ${value}`);\n                    }\n                } else {\n                    throw new Error(`Unknown parameter \"${key}\"`);\n                }\n                params[key] = value;\n            });\n        });\n        return configurations;\n    }\n    /**\n   * Decompress data. Concurrency limited.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ decompress(data, fin, callback) {\n        zlibLimiter.add((done)=>{\n            this._decompress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Compress data. Concurrency limited.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */ compress(data, fin, callback) {\n        zlibLimiter.add((done)=>{\n            this._compress(data, fin, (err, result)=>{\n                done();\n                callback(err, result);\n            });\n        });\n    }\n    /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _decompress(data, fin, callback) {\n        const endpoint = this._isServer ? \"client\" : \"server\";\n        if (!this._inflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._inflate = zlib.createInflateRaw({\n                ...this._options.zlibInflateOptions,\n                windowBits\n            });\n            this._inflate[kPerMessageDeflate] = this;\n            this._inflate[kTotalLength] = 0;\n            this._inflate[kBuffers] = [];\n            this._inflate.on(\"error\", inflateOnError);\n            this._inflate.on(\"data\", inflateOnData);\n        }\n        this._inflate[kCallback] = callback;\n        this._inflate.write(data);\n        if (fin) this._inflate.write(TRAILER);\n        this._inflate.flush(()=>{\n            const err = this._inflate[kError];\n            if (err) {\n                this._inflate.close();\n                this._inflate = null;\n                callback(err);\n                return;\n            }\n            const data = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);\n            if (this._inflate._readableState.endEmitted) {\n                this._inflate.close();\n                this._inflate = null;\n            } else {\n                this._inflate[kTotalLength] = 0;\n                this._inflate[kBuffers] = [];\n                if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                    this._inflate.reset();\n                }\n            }\n            callback(null, data);\n        });\n    }\n    /**\n   * Compress data.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */ _compress(data, fin, callback) {\n        const endpoint = this._isServer ? \"server\" : \"client\";\n        if (!this._deflate) {\n            const key = `${endpoint}_max_window_bits`;\n            const windowBits = typeof this.params[key] !== \"number\" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];\n            this._deflate = zlib.createDeflateRaw({\n                ...this._options.zlibDeflateOptions,\n                windowBits\n            });\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            //\n            // An `'error'` event is emitted, only on Node.js < 10.0.0, if the\n            // `zlib.DeflateRaw` instance is closed while data is being processed.\n            // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong\n            // time due to an abnormal WebSocket closure.\n            //\n            this._deflate.on(\"error\", NOOP);\n            this._deflate.on(\"data\", deflateOnData);\n        }\n        this._deflate[kCallback] = callback;\n        this._deflate.write(data);\n        this._deflate.flush(zlib.Z_SYNC_FLUSH, ()=>{\n            if (!this._deflate) {\n                //\n                // The deflate stream was closed while data was being processed.\n                //\n                return;\n            }\n            let data = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);\n            if (fin) data = data.slice(0, data.length - 4);\n            //\n            // Ensure that the callback will not be called again in\n            // `PerMessageDeflate#cleanup()`.\n            //\n            this._deflate[kCallback] = null;\n            this._deflate[kTotalLength] = 0;\n            this._deflate[kBuffers] = [];\n            if (fin && this.params[`${endpoint}_no_context_takeover`]) {\n                this._deflate.reset();\n            }\n            callback(null, data);\n        });\n    }\n}\nmodule.exports = PerMessageDeflate;\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function deflateOnData(chunk) {\n    this[kBuffers].push(chunk);\n    this[kTotalLength] += chunk.length;\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function inflateOnData(chunk) {\n    this[kTotalLength] += chunk.length;\n    if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {\n        this[kBuffers].push(chunk);\n        return;\n    }\n    this[kError] = new RangeError(\"Max payload size exceeded\");\n    this[kError].code = \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\";\n    this[kError][kStatusCode] = 1009;\n    this.removeListener(\"data\", inflateOnData);\n    this.reset();\n}\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */ function inflateOnError(err) {\n    //\n    // There is no need to call `Zlib#close()` as the handle is automatically\n    // closed when an error is emitted.\n    //\n    this[kPerMessageDeflate]._inflate = null;\n    err[kStatusCode] = 1007;\n    this[kCallback](err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Writable } = __webpack_require__(/*! stream */ \"stream\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst { BINARY_TYPES, EMPTY_BUFFER, kStatusCode, kWebSocket } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\");\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n/**\n * HyBi Receiver implementation.\n *\n * @extends Writable\n */ class Receiver extends Writable {\n    /**\n   * Creates a Receiver instance.\n   *\n   * @param {String} [binaryType=nodebuffer] The type for binary data\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   * @param {Boolean} [isServer=false] Specifies whether to operate in client or\n   *     server mode\n   * @param {Number} [maxPayload=0] The maximum allowed message length\n   */ constructor(binaryType, extensions, isServer, maxPayload){\n        super();\n        this._binaryType = binaryType || BINARY_TYPES[0];\n        this[kWebSocket] = undefined;\n        this._extensions = extensions || {};\n        this._isServer = !!isServer;\n        this._maxPayload = maxPayload | 0;\n        this._bufferedBytes = 0;\n        this._buffers = [];\n        this._compressed = false;\n        this._payloadLength = 0;\n        this._mask = undefined;\n        this._fragmented = 0;\n        this._masked = false;\n        this._fin = false;\n        this._opcode = 0;\n        this._totalPayloadLength = 0;\n        this._messageLength = 0;\n        this._fragments = [];\n        this._state = GET_INFO;\n        this._loop = false;\n    }\n    /**\n   * Implements `Writable.prototype._write()`.\n   *\n   * @param {Buffer} chunk The chunk of data to write\n   * @param {String} encoding The character encoding of `chunk`\n   * @param {Function} cb Callback\n   * @private\n   */ _write(chunk, encoding, cb) {\n        if (this._opcode === 0x08 && this._state == GET_INFO) return cb();\n        this._bufferedBytes += chunk.length;\n        this._buffers.push(chunk);\n        this.startLoop(cb);\n    }\n    /**\n   * Consumes `n` bytes from the buffered data.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {Buffer} The consumed bytes\n   * @private\n   */ consume(n) {\n        this._bufferedBytes -= n;\n        if (n === this._buffers[0].length) return this._buffers.shift();\n        if (n < this._buffers[0].length) {\n            const buf = this._buffers[0];\n            this._buffers[0] = buf.slice(n);\n            return buf.slice(0, n);\n        }\n        const dst = Buffer.allocUnsafe(n);\n        do {\n            const buf = this._buffers[0];\n            const offset = dst.length - n;\n            if (n >= buf.length) {\n                dst.set(this._buffers.shift(), offset);\n            } else {\n                dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);\n                this._buffers[0] = buf.slice(n);\n            }\n            n -= buf.length;\n        }while (n > 0);\n        return dst;\n    }\n    /**\n   * Starts the parsing loop.\n   *\n   * @param {Function} cb Callback\n   * @private\n   */ startLoop(cb) {\n        let err;\n        this._loop = true;\n        do {\n            switch(this._state){\n                case GET_INFO:\n                    err = this.getInfo();\n                    break;\n                case GET_PAYLOAD_LENGTH_16:\n                    err = this.getPayloadLength16();\n                    break;\n                case GET_PAYLOAD_LENGTH_64:\n                    err = this.getPayloadLength64();\n                    break;\n                case GET_MASK:\n                    this.getMask();\n                    break;\n                case GET_DATA:\n                    err = this.getData(cb);\n                    break;\n                default:\n                    // `INFLATING`\n                    this._loop = false;\n                    return;\n            }\n        }while (this._loop);\n        cb(err);\n    }\n    /**\n   * Reads the first two bytes of a frame.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getInfo() {\n        if (this._bufferedBytes < 2) {\n            this._loop = false;\n            return;\n        }\n        const buf = this.consume(2);\n        if ((buf[0] & 0x30) !== 0x00) {\n            this._loop = false;\n            return error(RangeError, \"RSV2 and RSV3 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_2_3\");\n        }\n        const compressed = (buf[0] & 0x40) === 0x40;\n        if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n            this._loop = false;\n            return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n        }\n        this._fin = (buf[0] & 0x80) === 0x80;\n        this._opcode = buf[0] & 0x0f;\n        this._payloadLength = buf[1] & 0x7f;\n        if (this._opcode === 0x00) {\n            if (compressed) {\n                this._loop = false;\n                return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n            }\n            if (!this._fragmented) {\n                this._loop = false;\n                return error(RangeError, \"invalid opcode 0\", true, 1002, \"WS_ERR_INVALID_OPCODE\");\n            }\n            this._opcode = this._fragmented;\n        } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n            if (this._fragmented) {\n                this._loop = false;\n                return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, \"WS_ERR_INVALID_OPCODE\");\n            }\n            this._compressed = compressed;\n        } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n            if (!this._fin) {\n                this._loop = false;\n                return error(RangeError, \"FIN must be set\", true, 1002, \"WS_ERR_EXPECTED_FIN\");\n            }\n            if (compressed) {\n                this._loop = false;\n                return error(RangeError, \"RSV1 must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_RSV_1\");\n            }\n            if (this._payloadLength > 0x7d) {\n                this._loop = false;\n                return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002, \"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH\");\n            }\n        } else {\n            this._loop = false;\n            return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002, \"WS_ERR_INVALID_OPCODE\");\n        }\n        if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n        this._masked = (buf[1] & 0x80) === 0x80;\n        if (this._isServer) {\n            if (!this._masked) {\n                this._loop = false;\n                return error(RangeError, \"MASK must be set\", true, 1002, \"WS_ERR_EXPECTED_MASK\");\n            }\n        } else if (this._masked) {\n            this._loop = false;\n            return error(RangeError, \"MASK must be clear\", true, 1002, \"WS_ERR_UNEXPECTED_MASK\");\n        }\n        if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n        else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n        else return this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+16).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getPayloadLength16() {\n        if (this._bufferedBytes < 2) {\n            this._loop = false;\n            return;\n        }\n        this._payloadLength = this.consume(2).readUInt16BE(0);\n        return this.haveLength();\n    }\n    /**\n   * Gets extended payload length (7+64).\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ getPayloadLength64() {\n        if (this._bufferedBytes < 8) {\n            this._loop = false;\n            return;\n        }\n        const buf = this.consume(8);\n        const num = buf.readUInt32BE(0);\n        //\n        // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n        // if payload length is greater than this number.\n        //\n        if (num > Math.pow(2, 53 - 32) - 1) {\n            this._loop = false;\n            return error(RangeError, \"Unsupported WebSocket frame: payload length > 2^53 - 1\", false, 1009, \"WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH\");\n        }\n        this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);\n        return this.haveLength();\n    }\n    /**\n   * Payload length has been read.\n   *\n   * @return {(RangeError|undefined)} A possible error\n   * @private\n   */ haveLength() {\n        if (this._payloadLength && this._opcode < 0x08) {\n            this._totalPayloadLength += this._payloadLength;\n            if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {\n                this._loop = false;\n                return error(RangeError, \"Max payload size exceeded\", false, 1009, \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\");\n            }\n        }\n        if (this._masked) this._state = GET_MASK;\n        else this._state = GET_DATA;\n    }\n    /**\n   * Reads mask bytes.\n   *\n   * @private\n   */ getMask() {\n        if (this._bufferedBytes < 4) {\n            this._loop = false;\n            return;\n        }\n        this._mask = this.consume(4);\n        this._state = GET_DATA;\n    }\n    /**\n   * Reads data bytes.\n   *\n   * @param {Function} cb Callback\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */ getData(cb) {\n        let data = EMPTY_BUFFER;\n        if (this._payloadLength) {\n            if (this._bufferedBytes < this._payloadLength) {\n                this._loop = false;\n                return;\n            }\n            data = this.consume(this._payloadLength);\n            if (this._masked) unmask(data, this._mask);\n        }\n        if (this._opcode > 0x07) return this.controlMessage(data);\n        if (this._compressed) {\n            this._state = INFLATING;\n            this.decompress(data, cb);\n            return;\n        }\n        if (data.length) {\n            //\n            // This message is not compressed so its lenght is the sum of the payload\n            // length of all fragments.\n            //\n            this._messageLength = this._totalPayloadLength;\n            this._fragments.push(data);\n        }\n        return this.dataMessage();\n    }\n    /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Function} cb Callback\n   * @private\n   */ decompress(data, cb) {\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        perMessageDeflate.decompress(data, this._fin, (err, buf)=>{\n            if (err) return cb(err);\n            if (buf.length) {\n                this._messageLength += buf.length;\n                if (this._messageLength > this._maxPayload && this._maxPayload > 0) {\n                    return cb(error(RangeError, \"Max payload size exceeded\", false, 1009, \"WS_ERR_UNSUPPORTED_MESSAGE_LENGTH\"));\n                }\n                this._fragments.push(buf);\n            }\n            const er = this.dataMessage();\n            if (er) return cb(er);\n            this.startLoop(cb);\n        });\n    }\n    /**\n   * Handles a data message.\n   *\n   * @return {(Error|undefined)} A possible error\n   * @private\n   */ dataMessage() {\n        if (this._fin) {\n            const messageLength = this._messageLength;\n            const fragments = this._fragments;\n            this._totalPayloadLength = 0;\n            this._messageLength = 0;\n            this._fragmented = 0;\n            this._fragments = [];\n            if (this._opcode === 2) {\n                let data;\n                if (this._binaryType === \"nodebuffer\") {\n                    data = concat(fragments, messageLength);\n                } else if (this._binaryType === \"arraybuffer\") {\n                    data = toArrayBuffer(concat(fragments, messageLength));\n                } else {\n                    data = fragments;\n                }\n                this.emit(\"message\", data);\n            } else {\n                const buf = concat(fragments, messageLength);\n                if (!isValidUTF8(buf)) {\n                    this._loop = false;\n                    return error(Error, \"invalid UTF-8 sequence\", true, 1007, \"WS_ERR_INVALID_UTF8\");\n                }\n                this.emit(\"message\", buf.toString());\n            }\n        }\n        this._state = GET_INFO;\n    }\n    /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @return {(Error|RangeError|undefined)} A possible error\n   * @private\n   */ controlMessage(data) {\n        if (this._opcode === 0x08) {\n            this._loop = false;\n            if (data.length === 0) {\n                this.emit(\"conclude\", 1005, \"\");\n                this.end();\n            } else if (data.length === 1) {\n                return error(RangeError, \"invalid payload length 1\", true, 1002, \"WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH\");\n            } else {\n                const code = data.readUInt16BE(0);\n                if (!isValidStatusCode(code)) {\n                    return error(RangeError, `invalid status code ${code}`, true, 1002, \"WS_ERR_INVALID_CLOSE_CODE\");\n                }\n                const buf = data.slice(2);\n                if (!isValidUTF8(buf)) {\n                    return error(Error, \"invalid UTF-8 sequence\", true, 1007, \"WS_ERR_INVALID_UTF8\");\n                }\n                this.emit(\"conclude\", code, buf.toString());\n                this.end();\n            }\n        } else if (this._opcode === 0x09) {\n            this.emit(\"ping\", data);\n        } else {\n            this.emit(\"pong\", data);\n        }\n        this._state = GET_INFO;\n    }\n}\nmodule.exports = Receiver;\n/**\n * Builds an error object.\n *\n * @param {function(new:Error|RangeError)} ErrorCtor The error constructor\n * @param {String} message The error message\n * @param {Boolean} prefix Specifies whether or not to add a default prefix to\n *     `message`\n * @param {Number} statusCode The status code\n * @param {String} errorCode The exposed error code\n * @return {(Error|RangeError)} The error\n * @private\n */ function error(ErrorCtor, message, prefix, statusCode, errorCode) {\n    const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);\n    Error.captureStackTrace(err, error);\n    err.code = errorCode;\n    err[kStatusCode] = statusCode;\n    return err;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls$\" }] */ \nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomFillSync } = __webpack_require__(/*! crypto */ \"crypto\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { isValidStatusCode } = __webpack_require__(/*! ./validation */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\");\nconst { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst mask = Buffer.alloc(4);\n/**\n * HyBi Sender implementation.\n */ class Sender {\n    /**\n   * Creates a Sender instance.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The connection socket\n   * @param {Object} [extensions] An object containing the negotiated extensions\n   */ constructor(socket, extensions){\n        this._extensions = extensions || {};\n        this._socket = socket;\n        this._firstFragment = true;\n        this._compress = false;\n        this._bufferedBytes = 0;\n        this._deflating = false;\n        this._queue = [];\n    }\n    /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */ static frame(data, options) {\n        const merge = options.mask && options.readOnly;\n        let offset = options.mask ? 6 : 2;\n        let payloadLength = data.length;\n        if (data.length >= 65536) {\n            offset += 8;\n            payloadLength = 127;\n        } else if (data.length > 125) {\n            offset += 2;\n            payloadLength = 126;\n        }\n        const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n        target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n        if (options.rsv1) target[0] |= 0x40;\n        target[1] = payloadLength;\n        if (payloadLength === 126) {\n            target.writeUInt16BE(data.length, 2);\n        } else if (payloadLength === 127) {\n            target.writeUInt32BE(0, 2);\n            target.writeUInt32BE(data.length, 6);\n        }\n        if (!options.mask) return [\n            target,\n            data\n        ];\n        randomFillSync(mask, 0, 4);\n        target[1] |= 0x80;\n        target[offset - 4] = mask[0];\n        target[offset - 3] = mask[1];\n        target[offset - 2] = mask[2];\n        target[offset - 1] = mask[3];\n        if (merge) {\n            applyMask(data, mask, target, offset, data.length);\n            return [\n                target\n            ];\n        }\n        applyMask(data, mask, data, 0, data.length);\n        return [\n            target,\n            data\n        ];\n    }\n    /**\n   * Sends a close message to the other peer.\n   *\n   * @param {Number} [code] The status code component of the body\n   * @param {String} [data] The message component of the body\n   * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n   * @param {Function} [cb] Callback\n   * @public\n   */ close(code, data, mask, cb) {\n        let buf;\n        if (code === undefined) {\n            buf = EMPTY_BUFFER;\n        } else if (typeof code !== \"number\" || !isValidStatusCode(code)) {\n            throw new TypeError(\"First argument must be a valid error code number\");\n        } else if (data === undefined || data === \"\") {\n            buf = Buffer.allocUnsafe(2);\n            buf.writeUInt16BE(code, 0);\n        } else {\n            const length = Buffer.byteLength(data);\n            if (length > 123) {\n                throw new RangeError(\"The message must not be greater than 123 bytes\");\n            }\n            buf = Buffer.allocUnsafe(2 + length);\n            buf.writeUInt16BE(code, 0);\n            buf.write(data, 2);\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doClose,\n                buf,\n                mask,\n                cb\n            ]);\n        } else {\n            this.doClose(buf, mask, cb);\n        }\n    }\n    /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @private\n   */ doClose(data, mask, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x08,\n            mask,\n            readOnly: false\n        }), cb);\n    }\n    /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ ping(data, mask, cb) {\n        const buf = toBuffer(data);\n        if (buf.length > 125) {\n            throw new RangeError(\"The data size must not be greater than 125 bytes\");\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doPing,\n                buf,\n                mask,\n                toBuffer.readOnly,\n                cb\n            ]);\n        } else {\n            this.doPing(buf, mask, toBuffer.readOnly, cb);\n        }\n    }\n    /**\n   * Frames and sends a ping message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */ doPing(data, mask, readOnly, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x09,\n            mask,\n            readOnly\n        }), cb);\n    }\n    /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ pong(data, mask, cb) {\n        const buf = toBuffer(data);\n        if (buf.length > 125) {\n            throw new RangeError(\"The data size must not be greater than 125 bytes\");\n        }\n        if (this._deflating) {\n            this.enqueue([\n                this.doPong,\n                buf,\n                mask,\n                toBuffer.readOnly,\n                cb\n            ]);\n        } else {\n            this.doPong(buf, mask, toBuffer.readOnly, cb);\n        }\n    }\n    /**\n   * Frames and sends a pong message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified\n   * @param {Function} [cb] Callback\n   * @private\n   */ doPong(data, mask, readOnly, cb) {\n        this.sendFrame(Sender.frame(data, {\n            fin: true,\n            rsv1: false,\n            opcode: 0x0a,\n            mask,\n            readOnly\n        }), cb);\n    }\n    /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} [options.compress=false] Specifies whether or not to\n   *     compress `data`\n   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n   *     or text\n   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Function} [cb] Callback\n   * @public\n   */ send(data, options, cb) {\n        const buf = toBuffer(data);\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        let opcode = options.binary ? 2 : 1;\n        let rsv1 = options.compress;\n        if (this._firstFragment) {\n            this._firstFragment = false;\n            if (rsv1 && perMessageDeflate) {\n                rsv1 = buf.length >= perMessageDeflate._threshold;\n            }\n            this._compress = rsv1;\n        } else {\n            rsv1 = false;\n            opcode = 0;\n        }\n        if (options.fin) this._firstFragment = true;\n        if (perMessageDeflate) {\n            const opts = {\n                fin: options.fin,\n                rsv1,\n                opcode,\n                mask: options.mask,\n                readOnly: toBuffer.readOnly\n            };\n            if (this._deflating) {\n                this.enqueue([\n                    this.dispatch,\n                    buf,\n                    this._compress,\n                    opts,\n                    cb\n                ]);\n            } else {\n                this.dispatch(buf, this._compress, opts, cb);\n            }\n        } else {\n            this.sendFrame(Sender.frame(buf, {\n                fin: options.fin,\n                rsv1: false,\n                opcode,\n                mask: options.mask,\n                readOnly: toBuffer.readOnly\n            }), cb);\n        }\n    }\n    /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} [compress=false] Specifies whether or not to compress\n   *     `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n   *     modified\n   * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n   *     FIN bit\n   * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n   *     `data`\n   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n   *     RSV1 bit\n   * @param {Function} [cb] Callback\n   * @private\n   */ dispatch(data, compress, options, cb) {\n        if (!compress) {\n            this.sendFrame(Sender.frame(data, options), cb);\n            return;\n        }\n        const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n        this._bufferedBytes += data.length;\n        this._deflating = true;\n        perMessageDeflate.compress(data, options.fin, (_, buf)=>{\n            if (this._socket.destroyed) {\n                const err = new Error(\"The socket was closed while data was being compressed\");\n                if (typeof cb === \"function\") cb(err);\n                for(let i = 0; i < this._queue.length; i++){\n                    const callback = this._queue[i][4];\n                    if (typeof callback === \"function\") callback(err);\n                }\n                return;\n            }\n            this._bufferedBytes -= data.length;\n            this._deflating = false;\n            options.readOnly = false;\n            this.sendFrame(Sender.frame(buf, options), cb);\n            this.dequeue();\n        });\n    }\n    /**\n   * Executes queued send operations.\n   *\n   * @private\n   */ dequeue() {\n        while(!this._deflating && this._queue.length){\n            const params = this._queue.shift();\n            this._bufferedBytes -= params[1].length;\n            Reflect.apply(params[0], this, params.slice(1));\n        }\n    }\n    /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */ enqueue(params) {\n        this._bufferedBytes += params[1].length;\n        this._queue.push(params);\n    }\n    /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} [cb] Callback\n   * @private\n   */ sendFrame(list, cb) {\n        if (list.length === 2) {\n            this._socket.cork();\n            this._socket.write(list[0]);\n            this._socket.write(list[1], cb);\n            this._socket.uncork();\n        } else {\n            this._socket.write(list[0], cb);\n        }\n    }\n}\nmodule.exports = Sender;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Duplex } = __webpack_require__(/*! stream */ \"stream\");\n/**\n * Emits the `'close'` event on a stream.\n *\n * @param {Duplex} stream The stream.\n * @private\n */ function emitClose(stream) {\n    stream.emit(\"close\");\n}\n/**\n * The listener of the `'end'` event.\n *\n * @private\n */ function duplexOnEnd() {\n    if (!this.destroyed && this._writableState.finished) {\n        this.destroy();\n    }\n}\n/**\n * The listener of the `'error'` event.\n *\n * @param {Error} err The error\n * @private\n */ function duplexOnError(err) {\n    this.removeListener(\"error\", duplexOnError);\n    this.destroy();\n    if (this.listenerCount(\"error\") === 0) {\n        // Do not suppress the throwing behavior.\n        this.emit(\"error\", err);\n    }\n}\n/**\n * Wraps a `WebSocket` in a duplex stream.\n *\n * @param {WebSocket} ws The `WebSocket` to wrap\n * @param {Object} [options] The options for the `Duplex` constructor\n * @return {Duplex} The duplex stream\n * @public\n */ function createWebSocketStream(ws, options) {\n    let resumeOnReceiverDrain = true;\n    let terminateOnDestroy = true;\n    function receiverOnDrain() {\n        if (resumeOnReceiverDrain) ws._socket.resume();\n    }\n    if (ws.readyState === ws.CONNECTING) {\n        ws.once(\"open\", function open() {\n            ws._receiver.removeAllListeners(\"drain\");\n            ws._receiver.on(\"drain\", receiverOnDrain);\n        });\n    } else {\n        ws._receiver.removeAllListeners(\"drain\");\n        ws._receiver.on(\"drain\", receiverOnDrain);\n    }\n    const duplex = new Duplex({\n        ...options,\n        autoDestroy: false,\n        emitClose: false,\n        objectMode: false,\n        writableObjectMode: false\n    });\n    ws.on(\"message\", function message(msg) {\n        if (!duplex.push(msg)) {\n            resumeOnReceiverDrain = false;\n            ws._socket.pause();\n        }\n    });\n    ws.once(\"error\", function error(err) {\n        if (duplex.destroyed) return;\n        // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n        //\n        // - If the `'error'` event is emitted before the `'open'` event, then\n        //   `ws.terminate()` is a noop as no socket is assigned.\n        // - Otherwise, the error is re-emitted by the listener of the `'error'`\n        //   event of the `Receiver` object. The listener already closes the\n        //   connection by calling `ws.close()`. This allows a close frame to be\n        //   sent to the other peer. If `ws.terminate()` is called right after this,\n        //   then the close frame might not be sent.\n        terminateOnDestroy = false;\n        duplex.destroy(err);\n    });\n    ws.once(\"close\", function close() {\n        if (duplex.destroyed) return;\n        duplex.push(null);\n    });\n    duplex._destroy = function(err, callback) {\n        if (ws.readyState === ws.CLOSED) {\n            callback(err);\n            process.nextTick(emitClose, duplex);\n            return;\n        }\n        let called = false;\n        ws.once(\"error\", function error(err) {\n            called = true;\n            callback(err);\n        });\n        ws.once(\"close\", function close() {\n            if (!called) callback(err);\n            process.nextTick(emitClose, duplex);\n        });\n        if (terminateOnDestroy) ws.terminate();\n    };\n    duplex._final = function(callback) {\n        if (ws.readyState === ws.CONNECTING) {\n            ws.once(\"open\", function open() {\n                duplex._final(callback);\n            });\n            return;\n        }\n        // If the value of the `_socket` property is `null` it means that `ws` is a\n        // client websocket and the handshake failed. In fact, when this happens, a\n        // socket is never assigned to the websocket. Wait for the `'error'` event\n        // that will be emitted by the websocket.\n        if (ws._socket === null) return;\n        if (ws._socket._writableState.finished) {\n            callback();\n            if (duplex._readableState.endEmitted) duplex.destroy();\n        } else {\n            ws._socket.once(\"finish\", function finish() {\n                // `duplex` is not destroyed here because the `'end'` event will be\n                // emitted on `duplex` after this `'finish'` event. The EOF signaling\n                // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n                callback();\n            });\n            ws.close();\n        }\n    };\n    duplex._read = function() {\n        if ((ws.readyState === ws.OPEN || ws.readyState === ws.CLOSING) && !resumeOnReceiverDrain) {\n            resumeOnReceiverDrain = true;\n            if (!ws._receiver._writableState.needDrain) ws._socket.resume();\n        }\n    };\n    duplex._write = function(chunk, encoding, callback) {\n        if (ws.readyState === ws.CONNECTING) {\n            ws.once(\"open\", function open() {\n                duplex._write(chunk, encoding, callback);\n            });\n            return;\n        }\n        ws.send(chunk, callback);\n    };\n    duplex.on(\"end\", duplexOnEnd);\n    duplex.on(\"error\", duplexOnError);\n    return duplex;\n}\nmodule.exports = createWebSocketStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */ function isValidStatusCode(code) {\n    return code >= 1000 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3000 && code <= 4999;\n}\n/**\n * Checks if a given buffer contains only correct UTF-8.\n * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by\n * Markus Kuhn.\n *\n * @param {Buffer} buf The buffer to check\n * @return {Boolean} `true` if `buf` contains only correct UTF-8, else `false`\n * @public\n */ function _isValidUTF8(buf) {\n    const len = buf.length;\n    let i = 0;\n    while(i < len){\n        if ((buf[i] & 0x80) === 0) {\n            // 0xxxxxxx\n            i++;\n        } else if ((buf[i] & 0xe0) === 0xc0) {\n            // 110xxxxx 10xxxxxx\n            if (i + 1 === len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i] & 0xfe) === 0xc0 // Overlong\n            ) {\n                return false;\n            }\n            i += 2;\n        } else if ((buf[i] & 0xf0) === 0xe0) {\n            // 1110xxxx 10xxxxxx 10xxxxxx\n            if (i + 2 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80 || // Overlong\n            buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0 // Surrogate (U+D800 - U+DFFF)\n            ) {\n                return false;\n            }\n            i += 3;\n        } else if ((buf[i] & 0xf8) === 0xf0) {\n            // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n            if (i + 3 >= len || (buf[i + 1] & 0xc0) !== 0x80 || (buf[i + 2] & 0xc0) !== 0x80 || (buf[i + 3] & 0xc0) !== 0x80 || buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80 || // Overlong\n            buf[i] === 0xf4 && buf[i + 1] > 0x8f || buf[i] > 0xf4 // > U+10FFFF\n            ) {\n                return false;\n            }\n            i += 4;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\ntry {\n    let isValidUTF8 = __webpack_require__(/*! utf-8-validate */ \"(ssr)/./node_modules/utf-8-validate/index.js\");\n    /* istanbul ignore if */ if (typeof isValidUTF8 === \"object\") {\n        isValidUTF8 = isValidUTF8.Validation.isValidUTF8; // utf-8-validate@<3.0.0\n    }\n    module.exports = {\n        isValidStatusCode,\n        isValidUTF8 (buf) {\n            return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);\n        }\n    };\n} catch (e) /* istanbul ignore next */ {\n    module.exports = {\n        isValidStatusCode,\n        isValidUTF8: _isValidUTF8\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvanNvbnJwYy13cy1jb25uZWN0aW9uL25vZGVfbW9kdWxlcy93cy9saWIvdmFsaWRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNBLGtCQUFrQkMsSUFBSTtJQUM3QixPQUNFLFFBQVMsUUFDUEEsUUFBUSxRQUNSQSxTQUFTLFFBQ1RBLFNBQVMsUUFDVEEsU0FBUyxRQUNWQSxRQUFRLFFBQVFBLFFBQVE7QUFFN0I7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNDLGFBQWFDLEdBQUc7SUFDdkIsTUFBTUMsTUFBTUQsSUFBSUUsTUFBTTtJQUN0QixJQUFJQyxJQUFJO0lBRVIsTUFBT0EsSUFBSUYsSUFBSztRQUNkLElBQUksQ0FBQ0QsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLEdBQUc7WUFDekIsV0FBVztZQUNYQTtRQUNGLE9BQU8sSUFBSSxDQUFDSCxHQUFHLENBQUNHLEVBQUUsR0FBRyxJQUFHLE1BQU8sTUFBTTtZQUNuQyxvQkFBb0I7WUFDcEIsSUFDRUEsSUFBSSxNQUFNRixPQUNWLENBQUNELEdBQUcsQ0FBQ0csSUFBSSxFQUFFLEdBQUcsSUFBRyxNQUFPLFFBQ3hCLENBQUNILEdBQUcsQ0FBQ0csRUFBRSxHQUFHLElBQUcsTUFBTyxLQUFLLFdBQVc7Y0FDcEM7Z0JBQ0EsT0FBTztZQUNUO1lBRUFBLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLE1BQU07WUFDbkMsNkJBQTZCO1lBQzdCLElBQ0VBLElBQUksS0FBS0YsT0FDVCxDQUFDRCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN2QkgsR0FBRyxDQUFDRyxFQUFFLEtBQUssUUFBUSxDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUFTLFdBQVc7WUFDL0RILEdBQUcsQ0FBQ0csRUFBRSxLQUFLLFFBQVEsQ0FBQ0gsR0FBRyxDQUFDRyxJQUFJLEVBQUUsR0FBRyxJQUFHLE1BQU8sS0FBTSw4QkFBOEI7Y0FDaEY7Z0JBQ0EsT0FBTztZQUNUO1lBRUFBLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDRyxFQUFFLEdBQUcsSUFBRyxNQUFPLE1BQU07WUFDbkMsc0NBQXNDO1lBQ3RDLElBQ0VBLElBQUksS0FBS0YsT0FDVCxDQUFDRCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN4QixDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUN2QkgsR0FBRyxDQUFDRyxFQUFFLEtBQUssUUFBUSxDQUFDSCxHQUFHLENBQUNHLElBQUksRUFBRSxHQUFHLElBQUcsTUFBTyxRQUFTLFdBQVc7WUFDL0RILEdBQUcsQ0FBQ0csRUFBRSxLQUFLLFFBQVFILEdBQUcsQ0FBQ0csSUFBSSxFQUFFLEdBQUcsUUFDakNILEdBQUcsQ0FBQ0csRUFBRSxHQUFHLEtBQUssYUFBYTtjQUMzQjtnQkFDQSxPQUFPO1lBQ1Q7WUFFQUEsS0FBSztRQUNQLE9BQU87WUFDTCxPQUFPO1FBQ1Q7SUFDRjtJQUVBLE9BQU87QUFDVDtBQUVBLElBQUk7SUFDRixJQUFJQyxjQUFjQyxtQkFBT0EsQ0FBQztJQUUxQixzQkFBc0IsR0FDdEIsSUFBSSxPQUFPRCxnQkFBZ0IsVUFBVTtRQUNuQ0EsY0FBY0EsWUFBWUUsVUFBVSxDQUFDRixXQUFXLEVBQUUsd0JBQXdCO0lBQzVFO0lBRUFHLE9BQU9DLE9BQU8sR0FBRztRQUNmWDtRQUNBTyxhQUFZSixHQUFHO1lBQ2IsT0FBT0EsSUFBSUUsTUFBTSxHQUFHLE1BQU1ILGFBQWFDLE9BQU9JLFlBQVlKO1FBQzVEO0lBQ0Y7QUFDRixFQUFFLE9BQU9TLEdBQUcsd0JBQXdCLEdBQUc7SUFDckNGLE9BQU9DLE9BQU8sR0FBRztRQUNmWDtRQUNBTyxhQUFhTDtJQUNmO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC9qc29ucnBjLXdzLWNvbm5lY3Rpb24vbm9kZV9tb2R1bGVzL3dzL2xpYi92YWxpZGF0aW9uLmpzPzExNzEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YXR1cyBjb2RlIGlzIGFsbG93ZWQgaW4gYSBjbG9zZSBmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gY29kZSBUaGUgc3RhdHVzIGNvZGVcbiAqIEByZXR1cm4ge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgc3RhdHVzIGNvZGUgaXMgdmFsaWQsIGVsc2UgYGZhbHNlYFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBpc1ZhbGlkU3RhdHVzQ29kZShjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMTAwMCAmJlxuICAgICAgY29kZSA8PSAxMDE0ICYmXG4gICAgICBjb2RlICE9PSAxMDA0ICYmXG4gICAgICBjb2RlICE9PSAxMDA1ICYmXG4gICAgICBjb2RlICE9PSAxMDA2KSB8fFxuICAgIChjb2RlID49IDMwMDAgJiYgY29kZSA8PSA0OTk5KVxuICApO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIGJ1ZmZlciBjb250YWlucyBvbmx5IGNvcnJlY3QgVVRGLTguXG4gKiBQb3J0ZWQgZnJvbSBodHRwczovL3d3dy5jbC5jYW0uYWMudWsvJTdFbWdrMjUvdWNzL3V0ZjhfY2hlY2suYyBieVxuICogTWFya3VzIEt1aG4uXG4gKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZiBUaGUgYnVmZmVyIHRvIGNoZWNrXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgYGJ1ZmAgY29udGFpbnMgb25seSBjb3JyZWN0IFVURi04LCBlbHNlIGBmYWxzZWBcbiAqIEBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gX2lzVmFsaWRVVEY4KGJ1Zikge1xuICBjb25zdCBsZW4gPSBidWYubGVuZ3RoO1xuICBsZXQgaSA9IDA7XG5cbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICBpZiAoKGJ1ZltpXSAmIDB4ODApID09PSAwKSB7XG4gICAgICAvLyAweHh4eHh4eFxuICAgICAgaSsrO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZTApID09PSAweGMwKSB7XG4gICAgICAvLyAxMTB4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMSA9PT0gbGVuIHx8XG4gICAgICAgIChidWZbaSArIDFdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSAmIDB4ZmUpID09PSAweGMwIC8vIE92ZXJsb25nXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDI7XG4gICAgfSBlbHNlIGlmICgoYnVmW2ldICYgMHhmMCkgPT09IDB4ZTApIHtcbiAgICAgIC8vIDExMTB4eHh4IDEweHh4eHh4IDEweHh4eHh4XG4gICAgICBpZiAoXG4gICAgICAgIGkgKyAyID49IGxlbiB8fFxuICAgICAgICAoYnVmW2kgKyAxXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaSArIDJdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhlMCAmJiAoYnVmW2kgKyAxXSAmIDB4ZTApID09PSAweDgwKSB8fCAvLyBPdmVybG9uZ1xuICAgICAgICAoYnVmW2ldID09PSAweGVkICYmIChidWZbaSArIDFdICYgMHhlMCkgPT09IDB4YTApIC8vIFN1cnJvZ2F0ZSAoVStEODAwIC0gVStERkZGKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaSArPSAzO1xuICAgIH0gZWxzZSBpZiAoKGJ1ZltpXSAmIDB4ZjgpID09PSAweGYwKSB7XG4gICAgICAvLyAxMTExMHh4eCAxMHh4eHh4eCAxMHh4eHh4eCAxMHh4eHh4eFxuICAgICAgaWYgKFxuICAgICAgICBpICsgMyA+PSBsZW4gfHxcbiAgICAgICAgKGJ1ZltpICsgMV0gJiAweGMwKSAhPT0gMHg4MCB8fFxuICAgICAgICAoYnVmW2kgKyAyXSAmIDB4YzApICE9PSAweDgwIHx8XG4gICAgICAgIChidWZbaSArIDNdICYgMHhjMCkgIT09IDB4ODAgfHxcbiAgICAgICAgKGJ1ZltpXSA9PT0gMHhmMCAmJiAoYnVmW2kgKyAxXSAmIDB4ZjApID09PSAweDgwKSB8fCAvLyBPdmVybG9uZ1xuICAgICAgICAoYnVmW2ldID09PSAweGY0ICYmIGJ1ZltpICsgMV0gPiAweDhmKSB8fFxuICAgICAgICBidWZbaV0gPiAweGY0IC8vID4gVSsxMEZGRkZcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gNDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG50cnkge1xuICBsZXQgaXNWYWxpZFVURjggPSByZXF1aXJlKCd1dGYtOC12YWxpZGF0ZScpO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlzVmFsaWRVVEY4ID09PSAnb2JqZWN0Jykge1xuICAgIGlzVmFsaWRVVEY4ID0gaXNWYWxpZFVURjguVmFsaWRhdGlvbi5pc1ZhbGlkVVRGODsgLy8gdXRmLTgtdmFsaWRhdGVAPDMuMC4wXG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpc1ZhbGlkU3RhdHVzQ29kZSxcbiAgICBpc1ZhbGlkVVRGOChidWYpIHtcbiAgICAgIHJldHVybiBidWYubGVuZ3RoIDwgMTUwID8gX2lzVmFsaWRVVEY4KGJ1ZikgOiBpc1ZhbGlkVVRGOChidWYpO1xuICAgIH1cbiAgfTtcbn0gY2F0Y2ggKGUpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNWYWxpZFN0YXR1c0NvZGUsXG4gICAgaXNWYWxpZFVURjg6IF9pc1ZhbGlkVVRGOFxuICB9O1xufVxuIl0sIm5hbWVzIjpbImlzVmFsaWRTdGF0dXNDb2RlIiwiY29kZSIsIl9pc1ZhbGlkVVRGOCIsImJ1ZiIsImxlbiIsImxlbmd0aCIsImkiLCJpc1ZhbGlkVVRGOCIsInJlcXVpcmUiLCJWYWxpZGF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/validation.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst WebSocket = __webpack_require__(/*! ./websocket */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\");\nconst { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */ class WebSocketServer extends EventEmitter {\n    /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [callback] A listener for the `listening` event\n   */ constructor(options, callback){\n        super();\n        options = {\n            maxPayload: 100 * 1024 * 1024,\n            perMessageDeflate: false,\n            handleProtocols: null,\n            clientTracking: true,\n            verifyClient: null,\n            noServer: false,\n            backlog: null,\n            server: null,\n            host: null,\n            path: null,\n            port: null,\n            ...options\n        };\n        if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n            throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + \"must be specified\");\n        }\n        if (options.port != null) {\n            this._server = http.createServer((req, res)=>{\n                const body = http.STATUS_CODES[426];\n                res.writeHead(426, {\n                    \"Content-Length\": body.length,\n                    \"Content-Type\": \"text/plain\"\n                });\n                res.end(body);\n            });\n            this._server.listen(options.port, options.host, options.backlog, callback);\n        } else if (options.server) {\n            this._server = options.server;\n        }\n        if (this._server) {\n            const emitConnection = this.emit.bind(this, \"connection\");\n            this._removeListeners = addListeners(this._server, {\n                listening: this.emit.bind(this, \"listening\"),\n                error: this.emit.bind(this, \"error\"),\n                upgrade: (req, socket, head)=>{\n                    this.handleUpgrade(req, socket, head, emitConnection);\n                }\n            });\n        }\n        if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n        if (options.clientTracking) this.clients = new Set();\n        this.options = options;\n        this._state = RUNNING;\n    }\n    /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */ address() {\n        if (this.options.noServer) {\n            throw new Error('The server is operating in \"noServer\" mode');\n        }\n        if (!this._server) return null;\n        return this._server.address();\n    }\n    /**\n   * Close the server.\n   *\n   * @param {Function} [cb] Callback\n   * @public\n   */ close(cb) {\n        if (cb) this.once(\"close\", cb);\n        if (this._state === CLOSED) {\n            process.nextTick(emitClose, this);\n            return;\n        }\n        if (this._state === CLOSING) return;\n        this._state = CLOSING;\n        //\n        // Terminate all associated clients.\n        //\n        if (this.clients) {\n            for (const client of this.clients)client.terminate();\n        }\n        const server = this._server;\n        if (server) {\n            this._removeListeners();\n            this._removeListeners = this._server = null;\n            //\n            // Close the http server if it was internally created.\n            //\n            if (this.options.port != null) {\n                server.close(emitClose.bind(undefined, this));\n                return;\n            }\n        }\n        process.nextTick(emitClose, this);\n    }\n    /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */ shouldHandle(req) {\n        if (this.options.path) {\n            const index = req.url.indexOf(\"?\");\n            const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n            if (pathname !== this.options.path) return false;\n        }\n        return true;\n    }\n    /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */ handleUpgrade(req, socket, head, cb) {\n        socket.on(\"error\", socketOnError);\n        const key = req.headers[\"sec-websocket-key\"] !== undefined ? req.headers[\"sec-websocket-key\"].trim() : false;\n        const upgrade = req.headers.upgrade;\n        const version = +req.headers[\"sec-websocket-version\"];\n        const extensions = {};\n        if (req.method !== \"GET\" || upgrade === undefined || upgrade.toLowerCase() !== \"websocket\" || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {\n            return abortHandshake(socket, 400);\n        }\n        if (this.options.perMessageDeflate) {\n            const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n            try {\n                const offers = parse(req.headers[\"sec-websocket-extensions\"]);\n                if (offers[PerMessageDeflate.extensionName]) {\n                    perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n                    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n                }\n            } catch (err) {\n                return abortHandshake(socket, 400);\n            }\n        }\n        //\n        // Optionally call external client verification handler.\n        //\n        if (this.options.verifyClient) {\n            const info = {\n                origin: req.headers[`${version === 8 ? \"sec-websocket-origin\" : \"origin\"}`],\n                secure: !!(req.socket.authorized || req.socket.encrypted),\n                req\n            };\n            if (this.options.verifyClient.length === 2) {\n                this.options.verifyClient(info, (verified, code, message, headers)=>{\n                    if (!verified) {\n                        return abortHandshake(socket, code || 401, message, headers);\n                    }\n                    this.completeUpgrade(key, extensions, req, socket, head, cb);\n                });\n                return;\n            }\n            if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n        }\n        this.completeUpgrade(key, extensions, req, socket, head, cb);\n    }\n    /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */ completeUpgrade(key, extensions, req, socket, head, cb) {\n        //\n        // Destroy the socket if the client has already sent a FIN packet.\n        //\n        if (!socket.readable || !socket.writable) return socket.destroy();\n        if (socket[kWebSocket]) {\n            throw new Error(\"server.handleUpgrade() was called more than once with the same \" + \"socket, possibly due to a misconfiguration\");\n        }\n        if (this._state > RUNNING) return abortHandshake(socket, 503);\n        const digest = createHash(\"sha1\").update(key + GUID).digest(\"base64\");\n        const headers = [\n            \"HTTP/1.1 101 Switching Protocols\",\n            \"Upgrade: websocket\",\n            \"Connection: Upgrade\",\n            `Sec-WebSocket-Accept: ${digest}`\n        ];\n        const ws = new WebSocket(null);\n        let protocol = req.headers[\"sec-websocket-protocol\"];\n        if (protocol) {\n            protocol = protocol.split(\",\").map(trim);\n            //\n            // Optionally call external protocol selection handler.\n            //\n            if (this.options.handleProtocols) {\n                protocol = this.options.handleProtocols(protocol, req);\n            } else {\n                protocol = protocol[0];\n            }\n            if (protocol) {\n                headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n                ws._protocol = protocol;\n            }\n        }\n        if (extensions[PerMessageDeflate.extensionName]) {\n            const params = extensions[PerMessageDeflate.extensionName].params;\n            const value = format({\n                [PerMessageDeflate.extensionName]: [\n                    params\n                ]\n            });\n            headers.push(`Sec-WebSocket-Extensions: ${value}`);\n            ws._extensions = extensions;\n        }\n        //\n        // Allow external modification/inspection of handshake headers.\n        //\n        this.emit(\"headers\", headers, req);\n        socket.write(headers.concat(\"\\r\\n\").join(\"\\r\\n\"));\n        socket.removeListener(\"error\", socketOnError);\n        ws.setSocket(socket, head, this.options.maxPayload);\n        if (this.clients) {\n            this.clients.add(ws);\n            ws.on(\"close\", ()=>this.clients.delete(ws));\n        }\n        cb(ws, req);\n    }\n}\nmodule.exports = WebSocketServer;\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */ function addListeners(server, map) {\n    for (const event of Object.keys(map))server.on(event, map[event]);\n    return function removeListeners() {\n        for (const event of Object.keys(map)){\n            server.removeListener(event, map[event]);\n        }\n    };\n}\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */ function emitClose(server) {\n    server._state = CLOSED;\n    server.emit(\"close\");\n}\n/**\n * Handle premature socket errors.\n *\n * @private\n */ function socketOnError() {\n    this.destroy();\n}\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */ function abortHandshake(socket, code, message, headers) {\n    if (socket.writable) {\n        message = message || http.STATUS_CODES[code];\n        headers = {\n            Connection: \"close\",\n            \"Content-Type\": \"text/html\",\n            \"Content-Length\": Buffer.byteLength(message),\n            ...headers\n        };\n        socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map((h)=>`${h}: ${headers[h]}`).join(\"\\r\\n\") + \"\\r\\n\\r\\n\" + message);\n    }\n    socket.removeListener(\"error\", socketOnError);\n    socket.destroy();\n}\n/**\n * Remove whitespace characters from both ends of a string.\n *\n * @param {String} str The string\n * @return {String} A new string representing `str` stripped of whitespace\n *     characters from both its beginning and end\n * @private\n */ function trim(str) {\n    return str.trim();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket-server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Readable$\" }] */ \nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst { randomBytes, createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { Readable } = __webpack_require__(/*! stream */ \"stream\");\nconst { URL } = __webpack_require__(/*! url */ \"url\");\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/permessage-deflate.js\");\nconst Receiver = __webpack_require__(/*! ./receiver */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/receiver.js\");\nconst Sender = __webpack_require__(/*! ./sender */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/sender.js\");\nconst { BINARY_TYPES, EMPTY_BUFFER, GUID, kStatusCode, kWebSocket, NOOP } = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/constants.js\");\nconst { addEventListener, removeEventListener } = __webpack_require__(/*! ./event-target */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/event-target.js\");\nconst { format, parse } = __webpack_require__(/*! ./extension */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/extension.js\");\nconst { toBuffer } = __webpack_require__(/*! ./buffer-util */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/buffer-util.js\");\nconst readyStates = [\n    \"CONNECTING\",\n    \"OPEN\",\n    \"CLOSING\",\n    \"CLOSED\"\n];\nconst protocolVersions = [\n    8,\n    13\n];\nconst closeTimeout = 30 * 1000;\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */ class WebSocket extends EventEmitter {\n    /**\n   * Create a new `WebSocket`.\n   *\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {(String|String[])} [protocols] The subprotocols\n   * @param {Object} [options] Connection options\n   */ constructor(address, protocols, options){\n        super();\n        this._binaryType = BINARY_TYPES[0];\n        this._closeCode = 1006;\n        this._closeFrameReceived = false;\n        this._closeFrameSent = false;\n        this._closeMessage = \"\";\n        this._closeTimer = null;\n        this._extensions = {};\n        this._protocol = \"\";\n        this._readyState = WebSocket.CONNECTING;\n        this._receiver = null;\n        this._sender = null;\n        this._socket = null;\n        if (address !== null) {\n            this._bufferedAmount = 0;\n            this._isServer = false;\n            this._redirects = 0;\n            if (Array.isArray(protocols)) {\n                protocols = protocols.join(\", \");\n            } else if (typeof protocols === \"object\" && protocols !== null) {\n                options = protocols;\n                protocols = undefined;\n            }\n            initAsClient(this, address, protocols, options);\n        } else {\n            this._isServer = true;\n        }\n    }\n    /**\n   * This deviates from the WHATWG interface since ws doesn't support the\n   * required default \"blob\" type (instead we define a custom \"nodebuffer\"\n   * type).\n   *\n   * @type {String}\n   */ get binaryType() {\n        return this._binaryType;\n    }\n    set binaryType(type) {\n        if (!BINARY_TYPES.includes(type)) return;\n        this._binaryType = type;\n        //\n        // Allow to change `binaryType` on the fly.\n        //\n        if (this._receiver) this._receiver._binaryType = type;\n    }\n    /**\n   * @type {Number}\n   */ get bufferedAmount() {\n        if (!this._socket) return this._bufferedAmount;\n        return this._socket._writableState.length + this._sender._bufferedBytes;\n    }\n    /**\n   * @type {String}\n   */ get extensions() {\n        return Object.keys(this._extensions).join();\n    }\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onclose() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onclose(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onerror() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onerror(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onopen() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onopen(listener) {}\n    /**\n   * @type {Function}\n   */ /* istanbul ignore next */ get onmessage() {\n        return undefined;\n    }\n    /* istanbul ignore next */ set onmessage(listener) {}\n    /**\n   * @type {String}\n   */ get protocol() {\n        return this._protocol;\n    }\n    /**\n   * @type {Number}\n   */ get readyState() {\n        return this._readyState;\n    }\n    /**\n   * @type {String}\n   */ get url() {\n        return this._url;\n    }\n    /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} [maxPayload=0] The maximum allowed message size\n   * @private\n   */ setSocket(socket, head, maxPayload) {\n        const receiver = new Receiver(this.binaryType, this._extensions, this._isServer, maxPayload);\n        this._sender = new Sender(socket, this._extensions);\n        this._receiver = receiver;\n        this._socket = socket;\n        receiver[kWebSocket] = this;\n        socket[kWebSocket] = this;\n        receiver.on(\"conclude\", receiverOnConclude);\n        receiver.on(\"drain\", receiverOnDrain);\n        receiver.on(\"error\", receiverOnError);\n        receiver.on(\"message\", receiverOnMessage);\n        receiver.on(\"ping\", receiverOnPing);\n        receiver.on(\"pong\", receiverOnPong);\n        socket.setTimeout(0);\n        socket.setNoDelay();\n        if (head.length > 0) socket.unshift(head);\n        socket.on(\"close\", socketOnClose);\n        socket.on(\"data\", socketOnData);\n        socket.on(\"end\", socketOnEnd);\n        socket.on(\"error\", socketOnError);\n        this._readyState = WebSocket.OPEN;\n        this.emit(\"open\");\n    }\n    /**\n   * Emit the `'close'` event.\n   *\n   * @private\n   */ emitClose() {\n        if (!this._socket) {\n            this._readyState = WebSocket.CLOSED;\n            this.emit(\"close\", this._closeCode, this._closeMessage);\n            return;\n        }\n        if (this._extensions[PerMessageDeflate.extensionName]) {\n            this._extensions[PerMessageDeflate.extensionName].cleanup();\n        }\n        this._receiver.removeAllListeners();\n        this._readyState = WebSocket.CLOSED;\n        this.emit(\"close\", this._closeCode, this._closeMessage);\n    }\n    /**\n   * Start a closing handshake.\n   *\n   *          +----------+   +-----------+   +----------+\n   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n   *    |     +----------+   +-----------+   +----------+     |\n   *          +----------+   +-----------+         |\n   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n   *          +----------+   +-----------+   |\n   *    |           |                        |   +---+        |\n   *                +------------------------+-->|fin| - - - -\n   *    |         +---+                      |   +---+\n   *     - - - - -|fin|<---------------------+\n   *              +---+\n   *\n   * @param {Number} [code] Status code explaining why the connection is closing\n   * @param {String} [data] A string explaining why the connection is closing\n   * @public\n   */ close(code, data) {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            const msg = \"WebSocket was closed before the connection was established\";\n            return abortHandshake(this, this._req, msg);\n        }\n        if (this.readyState === WebSocket.CLOSING) {\n            if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {\n                this._socket.end();\n            }\n            return;\n        }\n        this._readyState = WebSocket.CLOSING;\n        this._sender.close(code, data, !this._isServer, (err)=>{\n            //\n            // This error is handled by the `'error'` listener on the socket. We only\n            // want to know if the close frame has been sent here.\n            //\n            if (err) return;\n            this._closeFrameSent = true;\n            if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {\n                this._socket.end();\n            }\n        });\n        //\n        // Specify a timeout for the closing handshake to complete.\n        //\n        this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);\n    }\n    /**\n   * Send a ping.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the ping is sent\n   * @public\n   */ ping(data, mask, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof data === \"function\") {\n            cb = data;\n            data = mask = undefined;\n        } else if (typeof mask === \"function\") {\n            cb = mask;\n            mask = undefined;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n    }\n    /**\n   * Send a pong.\n   *\n   * @param {*} [data] The data to send\n   * @param {Boolean} [mask] Indicates whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when the pong is sent\n   * @public\n   */ pong(data, mask, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof data === \"function\") {\n            cb = data;\n            data = mask = undefined;\n        } else if (typeof mask === \"function\") {\n            cb = mask;\n            mask = undefined;\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        if (mask === undefined) mask = !this._isServer;\n        this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n    }\n    /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} [options] Options object\n   * @param {Boolean} [options.compress] Specifies whether or not to compress\n   *     `data`\n   * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n   *     text\n   * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n   *     last one\n   * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n   * @param {Function} [cb] Callback which is executed when data is written out\n   * @public\n   */ send(data, options, cb) {\n        if (this.readyState === WebSocket.CONNECTING) {\n            throw new Error(\"WebSocket is not open: readyState 0 (CONNECTING)\");\n        }\n        if (typeof options === \"function\") {\n            cb = options;\n            options = {};\n        }\n        if (typeof data === \"number\") data = data.toString();\n        if (this.readyState !== WebSocket.OPEN) {\n            sendAfterClose(this, data, cb);\n            return;\n        }\n        const opts = {\n            binary: typeof data !== \"string\",\n            mask: !this._isServer,\n            compress: true,\n            fin: true,\n            ...options\n        };\n        if (!this._extensions[PerMessageDeflate.extensionName]) {\n            opts.compress = false;\n        }\n        this._sender.send(data || EMPTY_BUFFER, opts, cb);\n    }\n    /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */ terminate() {\n        if (this.readyState === WebSocket.CLOSED) return;\n        if (this.readyState === WebSocket.CONNECTING) {\n            const msg = \"WebSocket was closed before the connection was established\";\n            return abortHandshake(this, this._req, msg);\n        }\n        if (this._socket) {\n            this._readyState = WebSocket.CLOSING;\n            this._socket.destroy();\n        }\n    }\n}\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CONNECTING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CONNECTING\")\n});\n/**\n * @constant {Number} CONNECTING\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CONNECTING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CONNECTING\")\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"OPEN\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"OPEN\")\n});\n/**\n * @constant {Number} OPEN\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"OPEN\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"OPEN\")\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CLOSING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSING\")\n});\n/**\n * @constant {Number} CLOSING\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CLOSING\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSING\")\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket\n */ Object.defineProperty(WebSocket, \"CLOSED\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSED\")\n});\n/**\n * @constant {Number} CLOSED\n * @memberof WebSocket.prototype\n */ Object.defineProperty(WebSocket.prototype, \"CLOSED\", {\n    enumerable: true,\n    value: readyStates.indexOf(\"CLOSED\")\n});\n[\n    \"binaryType\",\n    \"bufferedAmount\",\n    \"extensions\",\n    \"protocol\",\n    \"readyState\",\n    \"url\"\n].forEach((property)=>{\n    Object.defineProperty(WebSocket.prototype, property, {\n        enumerable: true\n    });\n});\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n[\n    \"open\",\n    \"error\",\n    \"close\",\n    \"message\"\n].forEach((method)=>{\n    Object.defineProperty(WebSocket.prototype, `on${method}`, {\n        enumerable: true,\n        get () {\n            const listeners = this.listeners(method);\n            for(let i = 0; i < listeners.length; i++){\n                if (listeners[i]._listener) return listeners[i]._listener;\n            }\n            return undefined;\n        },\n        set (listener) {\n            const listeners = this.listeners(method);\n            for(let i = 0; i < listeners.length; i++){\n                //\n                // Remove only the listeners added via `addEventListener`.\n                //\n                if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n            }\n            this.addEventListener(method, listener);\n        }\n    });\n});\nWebSocket.prototype.addEventListener = addEventListener;\nWebSocket.prototype.removeEventListener = removeEventListener;\nmodule.exports = WebSocket;\n/**\n * Initialize a WebSocket client.\n *\n * @param {WebSocket} websocket The client to initialize\n * @param {(String|URL)} address The URL to which to connect\n * @param {String} [protocols] The subprotocols\n * @param {Object} [options] Connection options\n * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n *     permessage-deflate\n * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n *     handshake request\n * @param {Number} [options.protocolVersion=13] Value of the\n *     `Sec-WebSocket-Version` header\n * @param {String} [options.origin] Value of the `Origin` or\n *     `Sec-WebSocket-Origin` header\n * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n *     size\n * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n *     redirects\n * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n *     allowed\n * @private\n */ function initAsClient(websocket, address, protocols, options) {\n    const opts = {\n        protocolVersion: protocolVersions[1],\n        maxPayload: 100 * 1024 * 1024,\n        perMessageDeflate: true,\n        followRedirects: false,\n        maxRedirects: 10,\n        ...options,\n        createConnection: undefined,\n        socketPath: undefined,\n        hostname: undefined,\n        protocol: undefined,\n        timeout: undefined,\n        method: undefined,\n        host: undefined,\n        path: undefined,\n        port: undefined\n    };\n    if (!protocolVersions.includes(opts.protocolVersion)) {\n        throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(\", \")})`);\n    }\n    let parsedUrl;\n    if (address instanceof URL) {\n        parsedUrl = address;\n        websocket._url = address.href;\n    } else {\n        parsedUrl = new URL(address);\n        websocket._url = address;\n    }\n    const isUnixSocket = parsedUrl.protocol === \"ws+unix:\";\n    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {\n        const err = new Error(`Invalid URL: ${websocket.url}`);\n        if (websocket._redirects === 0) {\n            throw err;\n        } else {\n            emitErrorAndClose(websocket, err);\n            return;\n        }\n    }\n    const isSecure = parsedUrl.protocol === \"wss:\" || parsedUrl.protocol === \"https:\";\n    const defaultPort = isSecure ? 443 : 80;\n    const key = randomBytes(16).toString(\"base64\");\n    const get = isSecure ? https.get : http.get;\n    let perMessageDeflate;\n    opts.createConnection = isSecure ? tlsConnect : netConnect;\n    opts.defaultPort = opts.defaultPort || defaultPort;\n    opts.port = parsedUrl.port || defaultPort;\n    opts.host = parsedUrl.hostname.startsWith(\"[\") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n    opts.headers = {\n        \"Sec-WebSocket-Version\": opts.protocolVersion,\n        \"Sec-WebSocket-Key\": key,\n        Connection: \"Upgrade\",\n        Upgrade: \"websocket\",\n        ...opts.headers\n    };\n    opts.path = parsedUrl.pathname + parsedUrl.search;\n    opts.timeout = opts.handshakeTimeout;\n    if (opts.perMessageDeflate) {\n        perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n        opts.headers[\"Sec-WebSocket-Extensions\"] = format({\n            [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n        });\n    }\n    if (protocols) {\n        opts.headers[\"Sec-WebSocket-Protocol\"] = protocols;\n    }\n    if (opts.origin) {\n        if (opts.protocolVersion < 13) {\n            opts.headers[\"Sec-WebSocket-Origin\"] = opts.origin;\n        } else {\n            opts.headers.Origin = opts.origin;\n        }\n    }\n    if (parsedUrl.username || parsedUrl.password) {\n        opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n    }\n    if (isUnixSocket) {\n        const parts = opts.path.split(\":\");\n        opts.socketPath = parts[0];\n        opts.path = parts[1];\n    }\n    if (opts.followRedirects) {\n        if (websocket._redirects === 0) {\n            websocket._originalUnixSocket = isUnixSocket;\n            websocket._originalSecure = isSecure;\n            websocket._originalHostOrSocketPath = isUnixSocket ? opts.socketPath : parsedUrl.host;\n            const headers = options && options.headers;\n            //\n            // Shallow copy the user provided options so that headers can be changed\n            // without mutating the original object.\n            //\n            options = {\n                ...options,\n                headers: {}\n            };\n            if (headers) {\n                for (const [key, value] of Object.entries(headers)){\n                    options.headers[key.toLowerCase()] = value;\n                }\n            }\n        } else {\n            const isSameHost = isUnixSocket ? websocket._originalUnixSocket ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalUnixSocket ? false : parsedUrl.host === websocket._originalHostOrSocketPath;\n            if (!isSameHost || websocket._originalSecure && !isSecure) {\n                //\n                // Match curl 7.77.0 behavior and drop the following headers. These\n                // headers are also dropped when following a redirect to a subdomain.\n                //\n                delete opts.headers.authorization;\n                delete opts.headers.cookie;\n                if (!isSameHost) delete opts.headers.host;\n                opts.auth = undefined;\n            }\n        }\n        //\n        // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n        // If the `Authorization` header is set, then there is nothing to do as it\n        // will take precedence.\n        //\n        if (opts.auth && !options.headers.authorization) {\n            options.headers.authorization = \"Basic \" + Buffer.from(opts.auth).toString(\"base64\");\n        }\n    }\n    let req = websocket._req = get(opts);\n    if (opts.timeout) {\n        req.on(\"timeout\", ()=>{\n            abortHandshake(websocket, req, \"Opening handshake has timed out\");\n        });\n    }\n    req.on(\"error\", (err)=>{\n        if (req === null || req.aborted) return;\n        req = websocket._req = null;\n        emitErrorAndClose(websocket, err);\n    });\n    req.on(\"response\", (res)=>{\n        const location = res.headers.location;\n        const statusCode = res.statusCode;\n        if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n            if (++websocket._redirects > opts.maxRedirects) {\n                abortHandshake(websocket, req, \"Maximum redirects exceeded\");\n                return;\n            }\n            req.abort();\n            let addr;\n            try {\n                addr = new URL(location, address);\n            } catch (err) {\n                emitErrorAndClose(websocket, err);\n                return;\n            }\n            initAsClient(websocket, addr, protocols, options);\n        } else if (!websocket.emit(\"unexpected-response\", req, res)) {\n            abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n        }\n    });\n    req.on(\"upgrade\", (res, socket, head)=>{\n        websocket.emit(\"upgrade\", res);\n        //\n        // The user may have closed the connection from a listener of the `upgrade`\n        // event.\n        //\n        if (websocket.readyState !== WebSocket.CONNECTING) return;\n        req = websocket._req = null;\n        const upgrade = res.headers.upgrade;\n        if (upgrade === undefined || upgrade.toLowerCase() !== \"websocket\") {\n            abortHandshake(websocket, socket, \"Invalid Upgrade header\");\n            return;\n        }\n        const digest = createHash(\"sha1\").update(key + GUID).digest(\"base64\");\n        if (res.headers[\"sec-websocket-accept\"] !== digest) {\n            abortHandshake(websocket, socket, \"Invalid Sec-WebSocket-Accept header\");\n            return;\n        }\n        const serverProt = res.headers[\"sec-websocket-protocol\"];\n        const protList = (protocols || \"\").split(/, */);\n        let protError;\n        if (!protocols && serverProt) {\n            protError = \"Server sent a subprotocol but none was requested\";\n        } else if (protocols && !serverProt) {\n            protError = \"Server sent no subprotocol\";\n        } else if (serverProt && !protList.includes(serverProt)) {\n            protError = \"Server sent an invalid subprotocol\";\n        }\n        if (protError) {\n            abortHandshake(websocket, socket, protError);\n            return;\n        }\n        if (serverProt) websocket._protocol = serverProt;\n        const secWebSocketExtensions = res.headers[\"sec-websocket-extensions\"];\n        if (secWebSocketExtensions !== undefined) {\n            if (!perMessageDeflate) {\n                const message = \"Server sent a Sec-WebSocket-Extensions header but no extension \" + \"was requested\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            let extensions;\n            try {\n                extensions = parse(secWebSocketExtensions);\n            } catch (err) {\n                const message = \"Invalid Sec-WebSocket-Extensions header\";\n                abortHandshake(websocket, socket, message);\n                return;\n            }\n            const extensionNames = Object.keys(extensions);\n            if (extensionNames.length) {\n                if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {\n                    const message = \"Server indicated an extension that was not requested\";\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                try {\n                    perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n                } catch (err) {\n                    const message = \"Invalid Sec-WebSocket-Extensions header\";\n                    abortHandshake(websocket, socket, message);\n                    return;\n                }\n                websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n            }\n        }\n        websocket.setSocket(socket, head, opts.maxPayload);\n    });\n}\n/**\n * Emit the `'error'` and `'close'` event.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {Error} The error to emit\n * @private\n */ function emitErrorAndClose(websocket, err) {\n    websocket._readyState = WebSocket.CLOSING;\n    websocket.emit(\"error\", err);\n    websocket.emitClose();\n}\n/**\n * Create a `net.Socket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {net.Socket} The newly created socket used to start the connection\n * @private\n */ function netConnect(options) {\n    options.path = options.socketPath;\n    return net.connect(options);\n}\n/**\n * Create a `tls.TLSSocket` and initiate a connection.\n *\n * @param {Object} options Connection options\n * @return {tls.TLSSocket} The newly created socket used to start the connection\n * @private\n */ function tlsConnect(options) {\n    options.path = undefined;\n    if (!options.servername && options.servername !== \"\") {\n        options.servername = net.isIP(options.host) ? \"\" : options.host;\n    }\n    return tls.connect(options);\n}\n/**\n * Abort the handshake and emit an error.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n *     abort or the socket to destroy\n * @param {String} message The error message\n * @private\n */ function abortHandshake(websocket, stream, message) {\n    websocket._readyState = WebSocket.CLOSING;\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshake);\n    if (stream.setHeader) {\n        stream.abort();\n        if (stream.socket && !stream.socket.destroyed) {\n            //\n            // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n            // called after the request completed. See\n            // https://github.com/websockets/ws/issues/1869.\n            //\n            stream.socket.destroy();\n        }\n        stream.once(\"abort\", websocket.emitClose.bind(websocket));\n        websocket.emit(\"error\", err);\n    } else {\n        stream.destroy(err);\n        stream.once(\"error\", websocket.emit.bind(websocket, \"error\"));\n        stream.once(\"close\", websocket.emitClose.bind(websocket));\n    }\n}\n/**\n * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n *\n * @param {WebSocket} websocket The WebSocket instance\n * @param {*} [data] The data to send\n * @param {Function} [cb] Callback\n * @private\n */ function sendAfterClose(websocket, data, cb) {\n    if (data) {\n        const length = toBuffer(data).length;\n        //\n        // The `_bufferedAmount` property is used only when the peer is a client and\n        // the opening handshake fails. Under these circumstances, in fact, the\n        // `setSocket()` method is not called, so the `_socket` and `_sender`\n        // properties are set to `null`.\n        //\n        if (websocket._socket) websocket._sender._bufferedBytes += length;\n        else websocket._bufferedAmount += length;\n    }\n    if (cb) {\n        const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);\n        cb(err);\n    }\n}\n/**\n * The listener of the `Receiver` `'conclude'` event.\n *\n * @param {Number} code The status code\n * @param {String} reason The reason for closing\n * @private\n */ function receiverOnConclude(code, reason) {\n    const websocket = this[kWebSocket];\n    websocket._closeFrameReceived = true;\n    websocket._closeMessage = reason;\n    websocket._closeCode = code;\n    if (websocket._socket[kWebSocket] === undefined) return;\n    websocket._socket.removeListener(\"data\", socketOnData);\n    process.nextTick(resume, websocket._socket);\n    if (code === 1005) websocket.close();\n    else websocket.close(code, reason);\n}\n/**\n * The listener of the `Receiver` `'drain'` event.\n *\n * @private\n */ function receiverOnDrain() {\n    this[kWebSocket]._socket.resume();\n}\n/**\n * The listener of the `Receiver` `'error'` event.\n *\n * @param {(RangeError|Error)} err The emitted error\n * @private\n */ function receiverOnError(err) {\n    const websocket = this[kWebSocket];\n    if (websocket._socket[kWebSocket] !== undefined) {\n        websocket._socket.removeListener(\"data\", socketOnData);\n        //\n        // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n        // https://github.com/websockets/ws/issues/1940.\n        //\n        process.nextTick(resume, websocket._socket);\n        websocket.close(err[kStatusCode]);\n    }\n    websocket.emit(\"error\", err);\n}\n/**\n * The listener of the `Receiver` `'finish'` event.\n *\n * @private\n */ function receiverOnFinish() {\n    this[kWebSocket].emitClose();\n}\n/**\n * The listener of the `Receiver` `'message'` event.\n *\n * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message\n * @private\n */ function receiverOnMessage(data) {\n    this[kWebSocket].emit(\"message\", data);\n}\n/**\n * The listener of the `Receiver` `'ping'` event.\n *\n * @param {Buffer} data The data included in the ping frame\n * @private\n */ function receiverOnPing(data) {\n    const websocket = this[kWebSocket];\n    websocket.pong(data, !websocket._isServer, NOOP);\n    websocket.emit(\"ping\", data);\n}\n/**\n * The listener of the `Receiver` `'pong'` event.\n *\n * @param {Buffer} data The data included in the pong frame\n * @private\n */ function receiverOnPong(data) {\n    this[kWebSocket].emit(\"pong\", data);\n}\n/**\n * Resume a readable stream\n *\n * @param {Readable} stream The readable stream\n * @private\n */ function resume(stream) {\n    stream.resume();\n}\n/**\n * The listener of the `net.Socket` `'close'` event.\n *\n * @private\n */ function socketOnClose() {\n    const websocket = this[kWebSocket];\n    this.removeListener(\"close\", socketOnClose);\n    this.removeListener(\"data\", socketOnData);\n    this.removeListener(\"end\", socketOnEnd);\n    websocket._readyState = WebSocket.CLOSING;\n    let chunk;\n    //\n    // The close frame might not have been received or the `'end'` event emitted,\n    // for example, if the socket was destroyed due to an error. Ensure that the\n    // `receiver` stream is closed after writing any remaining buffered data to\n    // it. If the readable side of the socket is in flowing mode then there is no\n    // buffered data as everything has been already written and `readable.read()`\n    // will return `null`. If instead, the socket is paused, any possible buffered\n    // data will be read as a single chunk.\n    //\n    if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {\n        websocket._receiver.write(chunk);\n    }\n    websocket._receiver.end();\n    this[kWebSocket] = undefined;\n    clearTimeout(websocket._closeTimer);\n    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n        websocket.emitClose();\n    } else {\n        websocket._receiver.on(\"error\", receiverOnFinish);\n        websocket._receiver.on(\"finish\", receiverOnFinish);\n    }\n}\n/**\n * The listener of the `net.Socket` `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */ function socketOnData(chunk) {\n    if (!this[kWebSocket]._receiver.write(chunk)) {\n        this.pause();\n    }\n}\n/**\n * The listener of the `net.Socket` `'end'` event.\n *\n * @private\n */ function socketOnEnd() {\n    const websocket = this[kWebSocket];\n    websocket._readyState = WebSocket.CLOSING;\n    websocket._receiver.end();\n    this.end();\n}\n/**\n * The listener of the `net.Socket` `'error'` event.\n *\n * @private\n */ function socketOnError() {\n    const websocket = this[kWebSocket];\n    this.removeListener(\"error\", socketOnError);\n    this.on(\"error\", NOOP);\n    if (websocket) {\n        websocket._readyState = WebSocket.CLOSING;\n        this.destroy();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/jsonrpc-ws-connection/node_modules/ws/lib/websocket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js":
/*!*************************************************************!*\
  !*** ./node_modules/@walletconnect/logger/dist/index.es.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_LOG_SIZE_IN_BYTES_DEFAULT: () => (/* binding */ l),\n/* harmony export */   PINO_CUSTOM_CONTEXT_KEY: () => (/* binding */ n),\n/* harmony export */   PINO_LOGGER_DEFAULTS: () => (/* binding */ c),\n/* harmony export */   formatChildLoggerContext: () => (/* binding */ w),\n/* harmony export */   generateChildLogger: () => (/* binding */ E),\n/* harmony export */   generateClientLogger: () => (/* binding */ C),\n/* harmony export */   generatePlatformLogger: () => (/* binding */ A),\n/* harmony export */   generateServerLogger: () => (/* binding */ I),\n/* harmony export */   getBrowserLoggerContext: () => (/* binding */ v),\n/* harmony export */   getDefaultLoggerOptions: () => (/* binding */ k),\n/* harmony export */   getLoggerContext: () => (/* binding */ y),\n/* harmony export */   pino: () => (/* reexport default from dynamic */ pino__WEBPACK_IMPORTED_MODULE_0___default.a),\n/* harmony export */   setBrowserLoggerContext: () => (/* binding */ b)\n/* harmony export */ });\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pino */ \"(ssr)/./node_modules/pino/pino.js\");\n/* harmony import */ var pino__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pino__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\n\nconst c = {\n    level: \"info\"\n}, n = \"custom_context\", l = 1e3 * 1024;\nclass O {\n    constructor(e){\n        this.nodeValue = e, this.sizeInBytes = new TextEncoder().encode(this.nodeValue).length, this.next = null;\n    }\n    get value() {\n        return this.nodeValue;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n}\nclass d {\n    constructor(e){\n        this.head = null, this.tail = null, this.lengthInNodes = 0, this.maxSizeInBytes = e, this.sizeInBytes = 0;\n    }\n    append(e) {\n        const t = new O(e);\n        if (t.size > this.maxSizeInBytes) throw new Error(`[LinkedList] Value too big to insert into list: ${e} with size ${t.size}`);\n        for(; this.size + t.size > this.maxSizeInBytes;)this.shift();\n        this.head ? (this.tail && (this.tail.next = t), this.tail = t) : (this.head = t, this.tail = t), this.lengthInNodes++, this.sizeInBytes += t.size;\n    }\n    shift() {\n        if (!this.head) return;\n        const e = this.head;\n        this.head = this.head.next, this.head || (this.tail = null), this.lengthInNodes--, this.sizeInBytes -= e.size;\n    }\n    toArray() {\n        const e = [];\n        let t = this.head;\n        for(; t !== null;)e.push(t.value), t = t.next;\n        return e;\n    }\n    get length() {\n        return this.lengthInNodes;\n    }\n    get size() {\n        return this.sizeInBytes;\n    }\n    toOrderedArray() {\n        return Array.from(this);\n    }\n    [Symbol.iterator]() {\n        let e = this.head;\n        return {\n            next: ()=>{\n                if (!e) return {\n                    done: !0,\n                    value: null\n                };\n                const t = e.value;\n                return e = e.next, {\n                    done: !1,\n                    value: t\n                };\n            }\n        };\n    }\n}\nclass L {\n    constructor(e, t = l){\n        this.level = e ?? \"error\", this.levelValue = pino__WEBPACK_IMPORTED_MODULE_0__.levels.values[this.level], this.MAX_LOG_SIZE_IN_BYTES = t, this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);\n    }\n    forwardToConsole(e, t) {\n        t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.error ? console.error(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.warn ? console.warn(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.debug ? console.debug(e) : t === pino__WEBPACK_IMPORTED_MODULE_0__.levels.values.trace ? console.trace(e) : console.log(e);\n    }\n    appendToLogs(e) {\n        this.logs.append((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)({\n            timestamp: new Date().toISOString(),\n            log: e\n        }));\n        const t = typeof e == \"string\" ? JSON.parse(e).level : e.level;\n        t >= this.levelValue && this.forwardToConsole(e, t);\n    }\n    getLogs() {\n        return this.logs;\n    }\n    clearLogs() {\n        this.logs = new d(this.MAX_LOG_SIZE_IN_BYTES);\n    }\n    getLogArray() {\n        return Array.from(this.logs);\n    }\n    logsToBlob(e) {\n        const t = this.getLogArray();\n        return t.push((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)({\n            extraMetadata: e\n        })), new Blob(t, {\n            type: \"application/json\"\n        });\n    }\n}\nclass m {\n    constructor(e, t = l){\n        this.baseChunkLogger = new L(e, t);\n    }\n    write(e) {\n        this.baseChunkLogger.appendToLogs(e);\n    }\n    getLogs() {\n        return this.baseChunkLogger.getLogs();\n    }\n    clearLogs() {\n        this.baseChunkLogger.clearLogs();\n    }\n    getLogArray() {\n        return this.baseChunkLogger.getLogArray();\n    }\n    logsToBlob(e) {\n        return this.baseChunkLogger.logsToBlob(e);\n    }\n    downloadLogsBlobInBrowser(e) {\n        const t = URL.createObjectURL(this.logsToBlob(e)), o = document.createElement(\"a\");\n        o.href = t, o.download = `walletconnect-logs-${new Date().toISOString()}.txt`, document.body.appendChild(o), o.click(), document.body.removeChild(o), URL.revokeObjectURL(t);\n    }\n}\nclass B {\n    constructor(e, t = l){\n        this.baseChunkLogger = new L(e, t);\n    }\n    write(e) {\n        this.baseChunkLogger.appendToLogs(e);\n    }\n    getLogs() {\n        return this.baseChunkLogger.getLogs();\n    }\n    clearLogs() {\n        this.baseChunkLogger.clearLogs();\n    }\n    getLogArray() {\n        return this.baseChunkLogger.getLogArray();\n    }\n    logsToBlob(e) {\n        return this.baseChunkLogger.logsToBlob(e);\n    }\n}\nvar x = Object.defineProperty, S = Object.defineProperties, _ = Object.getOwnPropertyDescriptors, p = Object.getOwnPropertySymbols, T = Object.prototype.hasOwnProperty, z = Object.prototype.propertyIsEnumerable, f = (r, e, t)=>e in r ? x(r, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: t\n    }) : r[e] = t, i = (r, e)=>{\n    for(var t in e || (e = {}))T.call(e, t) && f(r, t, e[t]);\n    if (p) for (var t of p(e))z.call(e, t) && f(r, t, e[t]);\n    return r;\n}, g = (r, e)=>S(r, _(e));\nfunction k(r) {\n    return g(i({}, r), {\n        level: r?.level || c.level\n    });\n}\nfunction v(r, e = n) {\n    return r[e] || \"\";\n}\nfunction b(r, e, t = n) {\n    return r[t] = e, r;\n}\nfunction y(r, e = n) {\n    let t = \"\";\n    return typeof r.bindings > \"u\" ? t = v(r, e) : t = r.bindings().context || \"\", t;\n}\nfunction w(r, e, t = n) {\n    const o = y(r, t);\n    return o.trim() ? `${o}/${e}` : e;\n}\nfunction E(r, e, t = n) {\n    const o = w(r, e, t), a = r.child({\n        context: o\n    });\n    return b(a, o, t);\n}\nfunction C(r) {\n    var e, t;\n    const o = new m((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);\n    return {\n        logger: pino__WEBPACK_IMPORTED_MODULE_0___default()(g(i({}, r.opts), {\n            level: \"trace\",\n            browser: g(i({}, (t = r.opts) == null ? void 0 : t.browser), {\n                write: (a)=>o.write(a)\n            })\n        })),\n        chunkLoggerController: o\n    };\n}\nfunction I(r) {\n    var e;\n    const t = new B((e = r.opts) == null ? void 0 : e.level, r.maxSizeInBytes);\n    return {\n        logger: pino__WEBPACK_IMPORTED_MODULE_0___default()(g(i({}, r.opts), {\n            level: \"trace\"\n        }), t),\n        chunkLoggerController: t\n    };\n}\nfunction A(r) {\n    return typeof r.loggerOverride < \"u\" && typeof r.loggerOverride != \"string\" ? {\n        logger: r.loggerOverride,\n        chunkLoggerController: null\n    } :  false ? 0 : I(r);\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js":
/*!****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-api/dist/index.es.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RELAY_JSONRPC: () => (/* binding */ C),\n/* harmony export */   isPublishMethod: () => (/* binding */ c),\n/* harmony export */   isPublishParams: () => (/* binding */ h),\n/* harmony export */   isPublishRequest: () => (/* binding */ P),\n/* harmony export */   isSubscribeMethod: () => (/* binding */ b),\n/* harmony export */   isSubscribeParams: () => (/* binding */ a),\n/* harmony export */   isSubscribeRequest: () => (/* binding */ R),\n/* harmony export */   isSubscriptionMethod: () => (/* binding */ m),\n/* harmony export */   isSubscriptionParams: () => (/* binding */ d),\n/* harmony export */   isSubscriptionRequest: () => (/* binding */ S),\n/* harmony export */   isUnsubscribeMethod: () => (/* binding */ o),\n/* harmony export */   isUnsubscribeParams: () => (/* binding */ p),\n/* harmony export */   isUnsubscribeRequest: () => (/* binding */ _),\n/* harmony export */   parsePublishRequest: () => (/* binding */ q),\n/* harmony export */   parseSubscribeRequest: () => (/* binding */ g),\n/* harmony export */   parseSubscriptionRequest: () => (/* binding */ k),\n/* harmony export */   parseUnsubscribeRequest: () => (/* binding */ E)\n/* harmony export */ });\nfunction e(s, r, i = \"string\") {\n    if (!s[r] || typeof s[r] !== i) throw new Error(`Missing or invalid \"${r}\" param`);\n}\nfunction l(s, r) {\n    let i = !0;\n    return r.forEach((t)=>{\n        t in s || (i = !1);\n    }), i;\n}\nfunction f(s, r) {\n    return Array.isArray(s) ? s.length === r : Object.keys(s).length === r;\n}\nfunction w(s, r) {\n    return Array.isArray(s) ? s.length >= r : Object.keys(s).length >= r;\n}\nfunction u(s, r, i) {\n    return (i.length ? w(s, r.length) : f(s, r.length)) ? l(s, r) : !1;\n}\nfunction n(s, r, i = \"_\") {\n    const t = s.split(i);\n    return t[t.length - 1].trim().toLowerCase() === r.trim().toLowerCase();\n}\nfunction R(s) {\n    return b(s.method) && a(s.params);\n}\nfunction b(s) {\n    return n(s, \"subscribe\");\n}\nfunction a(s) {\n    return u(s, [\n        \"topic\"\n    ], []);\n}\nfunction P(s) {\n    return c(s.method) && h(s.params);\n}\nfunction c(s) {\n    return n(s, \"publish\");\n}\nfunction h(s) {\n    return u(s, [\n        \"message\",\n        \"topic\",\n        \"ttl\"\n    ], [\n        \"prompt\",\n        \"tag\"\n    ]);\n}\nfunction _(s) {\n    return o(s.method) && p(s.params);\n}\nfunction o(s) {\n    return n(s, \"unsubscribe\");\n}\nfunction p(s) {\n    return u(s, [\n        \"id\",\n        \"topic\"\n    ], []);\n}\nfunction S(s) {\n    return m(s.method) && d(s.params);\n}\nfunction m(s) {\n    return n(s, \"subscription\");\n}\nfunction d(s) {\n    return u(s, [\n        \"id\",\n        \"data\"\n    ], []);\n}\nfunction g(s) {\n    if (!b(s.method)) throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n    if (!a(s.params)) throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n    const r = s.params;\n    return e(r, \"topic\"), r;\n}\nfunction q(s) {\n    if (!c(s.method)) throw new Error(\"JSON-RPC Request has invalid publish method\");\n    if (!h(s.params)) throw new Error(\"JSON-RPC Request has invalid publish params\");\n    const r = s.params;\n    return e(r, \"topic\"), e(r, \"message\"), e(r, \"ttl\", \"number\"), r;\n}\nfunction E(s) {\n    if (!o(s.method)) throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n    if (!p(s.params)) throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n    const r = s.params;\n    return e(r, \"id\"), r;\n}\nfunction k(s) {\n    if (!m(s.method)) throw new Error(\"JSON-RPC Request has invalid subscription method\");\n    if (!d(s.params)) throw new Error(\"JSON-RPC Request has invalid subscription params\");\n    const r = s.params;\n    return e(r, \"id\"), e(r, \"data\"), r;\n}\nconst C = {\n    waku: {\n        publish: \"waku_publish\",\n        batchPublish: \"waku_batchPublish\",\n        subscribe: \"waku_subscribe\",\n        batchSubscribe: \"waku_batchSubscribe\",\n        subscription: \"waku_subscription\",\n        unsubscribe: \"waku_unsubscribe\",\n        batchUnsubscribe: \"waku_batchUnsubscribe\",\n        batchFetchMessages: \"waku_batchFetchMessages\"\n    },\n    irn: {\n        publish: \"irn_publish\",\n        batchPublish: \"irn_batchPublish\",\n        subscribe: \"irn_subscribe\",\n        batchSubscribe: \"irn_batchSubscribe\",\n        subscription: \"irn_subscription\",\n        unsubscribe: \"irn_unsubscribe\",\n        batchUnsubscribe: \"irn_batchUnsubscribe\",\n        batchFetchMessages: \"irn_batchFetchMessages\"\n    },\n    iridium: {\n        publish: \"iridium_publish\",\n        batchPublish: \"iridium_batchPublish\",\n        subscribe: \"iridium_subscribe\",\n        batchSubscribe: \"iridium_batchSubscribe\",\n        subscription: \"iridium_subscription\",\n        unsubscribe: \"iridium_unsubscribe\",\n        batchUnsubscribe: \"iridium_batchUnsubscribe\",\n        batchFetchMessages: \"iridium_batchFetchMessages\"\n    }\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/relay-auth/dist/index.es.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/relay-auth/dist/index.es.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DATA_ENCODING: () => (/* binding */ xt),\n/* harmony export */   DID_DELIMITER: () => (/* binding */ Vt),\n/* harmony export */   DID_METHOD: () => (/* binding */ Jt),\n/* harmony export */   DID_PREFIX: () => (/* binding */ Yt),\n/* harmony export */   JSON_ENCODING: () => (/* binding */ Gt),\n/* harmony export */   JWT_DELIMITER: () => (/* binding */ ut),\n/* harmony export */   JWT_ENCODING: () => (/* binding */ Dt),\n/* harmony export */   JWT_IRIDIUM_ALG: () => (/* binding */ jt),\n/* harmony export */   JWT_IRIDIUM_TYP: () => (/* binding */ Zt),\n/* harmony export */   KEY_PAIR_SEED_LENGTH: () => (/* binding */ Ne),\n/* harmony export */   MULTICODEC_ED25519_BASE: () => (/* binding */ Kt),\n/* harmony export */   MULTICODEC_ED25519_ENCODING: () => (/* binding */ dt),\n/* harmony export */   MULTICODEC_ED25519_HEADER: () => (/* binding */ Wt),\n/* harmony export */   MULTICODEC_ED25519_LENGTH: () => (/* binding */ Fe),\n/* harmony export */   decodeData: () => (/* binding */ Xo),\n/* harmony export */   decodeIss: () => (/* binding */ tn),\n/* harmony export */   decodeJSON: () => (/* binding */ lt),\n/* harmony export */   decodeJWT: () => (/* binding */ sn),\n/* harmony export */   decodeSig: () => (/* binding */ nn),\n/* harmony export */   encodeData: () => (/* binding */ rn),\n/* harmony export */   encodeIss: () => (/* binding */ Qe),\n/* harmony export */   encodeJSON: () => (/* binding */ bt),\n/* harmony export */   encodeJWT: () => (/* binding */ on),\n/* harmony export */   encodeSig: () => (/* binding */ en),\n/* harmony export */   generateKeyPair: () => (/* binding */ Po),\n/* harmony export */   signJWT: () => (/* binding */ Qo),\n/* harmony export */   verifyJWT: () => (/* binding */ ts)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/safe-json */ \"(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\");\n\n\nfunction En(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction fe(t, ...e) {\n    if (!En(t)) throw new Error(\"Uint8Array expected\");\n    if (e.length > 0 && !e.includes(t.length)) throw new Error(\"Uint8Array expected of length \" + e + \", got length=\" + t.length);\n}\nfunction De(t, e = !0) {\n    if (t.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (e && t.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction gn(t, e) {\n    fe(t);\n    const n = e.outputLen;\n    if (t.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nconst it = typeof globalThis == \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0; /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nconst _t = (t)=>new DataView(t.buffer, t.byteOffset, t.byteLength);\nfunction yn(t) {\n    if (typeof t != \"string\") throw new Error(\"utf8ToBytes expected string, got \" + typeof t);\n    return new Uint8Array(new TextEncoder().encode(t));\n}\nfunction de(t) {\n    return typeof t == \"string\" && (t = yn(t)), fe(t), t;\n}\nclass xn {\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction Bn(t) {\n    const e = (r)=>t().update(de(r)).digest(), n = t();\n    return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = ()=>t(), e;\n}\nfunction he(t = 32) {\n    if (it && typeof it.getRandomValues == \"function\") return it.getRandomValues(new Uint8Array(t));\n    if (it && typeof it.randomBytes == \"function\") return it.randomBytes(t);\n    throw new Error(\"crypto.getRandomValues must be defined\");\n}\nfunction Cn(t, e, n, r) {\n    if (typeof t.setBigUint64 == \"function\") return t.setBigUint64(e, n, r);\n    const o = BigInt(32), s = BigInt(4294967295), a = Number(n >> o & s), u = Number(n & s), i = r ? 4 : 0, D = r ? 0 : 4;\n    t.setUint32(e + i, a, r), t.setUint32(e + D, u, r);\n}\nclass An extends xn {\n    constructor(e, n, r, o){\n        super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = _t(this.buffer);\n    }\n    update(e) {\n        De(this);\n        const { view: n, buffer: r, blockLen: o } = this;\n        e = de(e);\n        const s = e.length;\n        for(let a = 0; a < s;){\n            const u = Math.min(o - this.pos, s - a);\n            if (u === o) {\n                const i = _t(e);\n                for(; o <= s - a; a += o)this.process(i, a);\n                continue;\n            }\n            r.set(e.subarray(a, a + u), this.pos), this.pos += u, a += u, this.pos === o && (this.process(n, 0), this.pos = 0);\n        }\n        return this.length += e.length, this.roundClean(), this;\n    }\n    digestInto(e) {\n        De(this), gn(e, this), this.finished = !0;\n        const { buffer: n, view: r, blockLen: o, isLE: s } = this;\n        let { pos: a } = this;\n        n[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > o - a && (this.process(r, 0), a = 0);\n        for(let l = a; l < o; l++)n[l] = 0;\n        Cn(r, o - 8, BigInt(this.length * 8), s), this.process(r, 0);\n        const u = _t(e), i = this.outputLen;\n        if (i % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const D = i / 4, c = this.get();\n        if (D > c.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let l = 0; l < D; l++)u.setUint32(4 * l, c[l], s);\n    }\n    digest() {\n        const { buffer: e, outputLen: n } = this;\n        this.digestInto(e);\n        const r = e.slice(0, n);\n        return this.destroy(), r;\n    }\n    _cloneInto(e) {\n        e || (e = new this.constructor), e.set(...this.get());\n        const { blockLen: n, buffer: r, length: o, finished: s, destroyed: a, pos: u } = this;\n        return e.length = o, e.pos = u, e.finished = s, e.destroyed = a, o % n && e.buffer.set(r), e;\n    }\n}\nconst wt = BigInt(2 ** 32 - 1), St = BigInt(32);\nfunction le(t, e = !1) {\n    return e ? {\n        h: Number(t & wt),\n        l: Number(t >> St & wt)\n    } : {\n        h: Number(t >> St & wt) | 0,\n        l: Number(t & wt) | 0\n    };\n}\nfunction mn(t, e = !1) {\n    let n = new Uint32Array(t.length), r = new Uint32Array(t.length);\n    for(let o = 0; o < t.length; o++){\n        const { h: s, l: a } = le(t[o], e);\n        [n[o], r[o]] = [\n            s,\n            a\n        ];\n    }\n    return [\n        n,\n        r\n    ];\n}\nconst _n = (t, e)=>BigInt(t >>> 0) << St | BigInt(e >>> 0), Sn = (t, e, n)=>t >>> n, vn = (t, e, n)=>t << 32 - n | e >>> n, In = (t, e, n)=>t >>> n | e << 32 - n, Un = (t, e, n)=>t << 32 - n | e >>> n, Tn = (t, e, n)=>t << 64 - n | e >>> n - 32, Fn = (t, e, n)=>t >>> n - 32 | e << 64 - n, Nn = (t, e)=>e, Ln = (t, e)=>t, On = (t, e, n)=>t << n | e >>> 32 - n, Hn = (t, e, n)=>e << n | t >>> 32 - n, zn = (t, e, n)=>e << n - 32 | t >>> 64 - n, Mn = (t, e, n)=>t << n - 32 | e >>> 64 - n;\nfunction qn(t, e, n, r) {\n    const o = (e >>> 0) + (r >>> 0);\n    return {\n        h: t + n + (o / 2 ** 32 | 0) | 0,\n        l: o | 0\n    };\n}\nconst $n = (t, e, n)=>(t >>> 0) + (e >>> 0) + (n >>> 0), kn = (t, e, n, r)=>e + n + r + (t / 2 ** 32 | 0) | 0, Rn = (t, e, n, r)=>(t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0), jn = (t, e, n, r, o)=>e + n + r + o + (t / 2 ** 32 | 0) | 0, Zn = (t, e, n, r, o)=>(t >>> 0) + (e >>> 0) + (n >>> 0) + (r >>> 0) + (o >>> 0), Gn = (t, e, n, r, o, s)=>e + n + r + o + s + (t / 2 ** 32 | 0) | 0, x = {\n    fromBig: le,\n    split: mn,\n    toBig: _n,\n    shrSH: Sn,\n    shrSL: vn,\n    rotrSH: In,\n    rotrSL: Un,\n    rotrBH: Tn,\n    rotrBL: Fn,\n    rotr32H: Nn,\n    rotr32L: Ln,\n    rotlSH: On,\n    rotlSL: Hn,\n    rotlBH: zn,\n    rotlBL: Mn,\n    add: qn,\n    add3L: $n,\n    add3H: kn,\n    add4L: Rn,\n    add4H: jn,\n    add5H: Gn,\n    add5L: Zn\n}, [Vn, Yn] = (()=>x.split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n    ].map((t)=>BigInt(t))))(), P = new Uint32Array(80), Q = new Uint32Array(80);\nclass Jn extends An {\n    constructor(){\n        super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;\n    }\n    get() {\n        const { Ah: e, Al: n, Bh: r, Bl: o, Ch: s, Cl: a, Dh: u, Dl: i, Eh: D, El: c, Fh: l, Fl: p, Gh: w, Gl: h, Hh: g, Hl: S } = this;\n        return [\n            e,\n            n,\n            r,\n            o,\n            s,\n            a,\n            u,\n            i,\n            D,\n            c,\n            l,\n            p,\n            w,\n            h,\n            g,\n            S\n        ];\n    }\n    set(e, n, r, o, s, a, u, i, D, c, l, p, w, h, g, S) {\n        this.Ah = e | 0, this.Al = n | 0, this.Bh = r | 0, this.Bl = o | 0, this.Ch = s | 0, this.Cl = a | 0, this.Dh = u | 0, this.Dl = i | 0, this.Eh = D | 0, this.El = c | 0, this.Fh = l | 0, this.Fl = p | 0, this.Gh = w | 0, this.Gl = h | 0, this.Hh = g | 0, this.Hl = S | 0;\n    }\n    process(e, n) {\n        for(let d = 0; d < 16; d++, n += 4)P[d] = e.getUint32(n), Q[d] = e.getUint32(n += 4);\n        for(let d = 16; d < 80; d++){\n            const m = P[d - 15] | 0, F = Q[d - 15] | 0, q = x.rotrSH(m, F, 1) ^ x.rotrSH(m, F, 8) ^ x.shrSH(m, F, 7), z = x.rotrSL(m, F, 1) ^ x.rotrSL(m, F, 8) ^ x.shrSL(m, F, 7), I = P[d - 2] | 0, O = Q[d - 2] | 0, ot = x.rotrSH(I, O, 19) ^ x.rotrBH(I, O, 61) ^ x.shrSH(I, O, 6), tt = x.rotrSL(I, O, 19) ^ x.rotrBL(I, O, 61) ^ x.shrSL(I, O, 6), st = x.add4L(z, tt, Q[d - 7], Q[d - 16]), at = x.add4H(st, q, ot, P[d - 7], P[d - 16]);\n            P[d] = at | 0, Q[d] = st | 0;\n        }\n        let { Ah: r, Al: o, Bh: s, Bl: a, Ch: u, Cl: i, Dh: D, Dl: c, Eh: l, El: p, Fh: w, Fl: h, Gh: g, Gl: S, Hh: v, Hl: L } = this;\n        for(let d = 0; d < 80; d++){\n            const m = x.rotrSH(l, p, 14) ^ x.rotrSH(l, p, 18) ^ x.rotrBH(l, p, 41), F = x.rotrSL(l, p, 14) ^ x.rotrSL(l, p, 18) ^ x.rotrBL(l, p, 41), q = l & w ^ ~l & g, z = p & h ^ ~p & S, I = x.add5L(L, F, z, Yn[d], Q[d]), O = x.add5H(I, v, m, q, Vn[d], P[d]), ot = I | 0, tt = x.rotrSH(r, o, 28) ^ x.rotrBH(r, o, 34) ^ x.rotrBH(r, o, 39), st = x.rotrSL(r, o, 28) ^ x.rotrBL(r, o, 34) ^ x.rotrBL(r, o, 39), at = r & s ^ r & u ^ s & u, Ct = o & a ^ o & i ^ a & i;\n            v = g | 0, L = S | 0, g = w | 0, S = h | 0, w = l | 0, h = p | 0, ({ h: l, l: p } = x.add(D | 0, c | 0, O | 0, ot | 0)), D = u | 0, c = i | 0, u = s | 0, i = a | 0, s = r | 0, a = o | 0;\n            const At = x.add3L(ot, st, Ct);\n            r = x.add3H(At, O, tt, at), o = At | 0;\n        }\n        ({ h: r, l: o } = x.add(this.Ah | 0, this.Al | 0, r | 0, o | 0)), ({ h: s, l: a } = x.add(this.Bh | 0, this.Bl | 0, s | 0, a | 0)), ({ h: u, l: i } = x.add(this.Ch | 0, this.Cl | 0, u | 0, i | 0)), ({ h: D, l: c } = x.add(this.Dh | 0, this.Dl | 0, D | 0, c | 0)), ({ h: l, l: p } = x.add(this.Eh | 0, this.El | 0, l | 0, p | 0)), ({ h: w, l: h } = x.add(this.Fh | 0, this.Fl | 0, w | 0, h | 0)), ({ h: g, l: S } = x.add(this.Gh | 0, this.Gl | 0, g | 0, S | 0)), ({ h: v, l: L } = x.add(this.Hh | 0, this.Hl | 0, v | 0, L | 0)), this.set(r, o, s, a, u, i, D, c, l, p, w, h, g, S, v, L);\n    }\n    roundClean() {\n        P.fill(0), Q.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nconst Kn = Bn(()=>new Jn); /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nconst vt = BigInt(0), be = BigInt(1), Wn = BigInt(2);\nfunction It(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction Ut(t) {\n    if (!It(t)) throw new Error(\"Uint8Array expected\");\n}\nfunction Tt(t, e) {\n    if (typeof e != \"boolean\") throw new Error(t + \" boolean expected, got \" + e);\n}\nconst Xn = Array.from({\n    length: 256\n}, (t, e)=>e.toString(16).padStart(2, \"0\"));\nfunction Ft(t) {\n    Ut(t);\n    let e = \"\";\n    for(let n = 0; n < t.length; n++)e += Xn[t[n]];\n    return e;\n}\nfunction pe(t) {\n    if (typeof t != \"string\") throw new Error(\"hex string expected, got \" + typeof t);\n    return t === \"\" ? vt : BigInt(\"0x\" + t);\n}\nconst K = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction we(t) {\n    if (t >= K._0 && t <= K._9) return t - K._0;\n    if (t >= K.A && t <= K.F) return t - (K.A - 10);\n    if (t >= K.a && t <= K.f) return t - (K.a - 10);\n}\nfunction Ee(t) {\n    if (typeof t != \"string\") throw new Error(\"hex string expected, got \" + typeof t);\n    const e = t.length, n = e / 2;\n    if (e % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + e);\n    const r = new Uint8Array(n);\n    for(let o = 0, s = 0; o < n; o++, s += 2){\n        const a = we(t.charCodeAt(s)), u = we(t.charCodeAt(s + 1));\n        if (a === void 0 || u === void 0) {\n            const i = t[s] + t[s + 1];\n            throw new Error('hex string expected, got non-hex character \"' + i + '\" at index ' + s);\n        }\n        r[o] = a * 16 + u;\n    }\n    return r;\n}\nfunction Pn(t) {\n    return pe(Ft(t));\n}\nfunction Et(t) {\n    return Ut(t), pe(Ft(Uint8Array.from(t).reverse()));\n}\nfunction ge(t, e) {\n    return Ee(t.toString(16).padStart(e * 2, \"0\"));\n}\nfunction Nt(t, e) {\n    return ge(t, e).reverse();\n}\nfunction W(t, e, n) {\n    let r;\n    if (typeof e == \"string\") try {\n        r = Ee(e);\n    } catch (s) {\n        throw new Error(t + \" must be hex string or Uint8Array, cause: \" + s);\n    }\n    else if (It(e)) r = Uint8Array.from(e);\n    else throw new Error(t + \" must be hex string or Uint8Array\");\n    const o = r.length;\n    if (typeof n == \"number\" && o !== n) throw new Error(t + \" of length \" + n + \" expected, got \" + o);\n    return r;\n}\nfunction ye(...t) {\n    let e = 0;\n    for(let r = 0; r < t.length; r++){\n        const o = t[r];\n        Ut(o), e += o.length;\n    }\n    const n = new Uint8Array(e);\n    for(let r = 0, o = 0; r < t.length; r++){\n        const s = t[r];\n        n.set(s, o), o += s.length;\n    }\n    return n;\n}\nconst Lt = (t)=>typeof t == \"bigint\" && vt <= t;\nfunction Qn(t, e, n) {\n    return Lt(t) && Lt(e) && Lt(n) && e <= t && t < n;\n}\nfunction ft(t, e, n, r) {\n    if (!Qn(e, n, r)) throw new Error(\"expected valid \" + t + \": \" + n + \" <= n < \" + r + \", got \" + e);\n}\nfunction tr(t) {\n    let e;\n    for(e = 0; t > vt; t >>= be, e += 1);\n    return e;\n}\nconst er = (t)=>(Wn << BigInt(t - 1)) - be, nr = {\n    bigint: (t)=>typeof t == \"bigint\",\n    function: (t)=>typeof t == \"function\",\n    boolean: (t)=>typeof t == \"boolean\",\n    string: (t)=>typeof t == \"string\",\n    stringOrUint8Array: (t)=>typeof t == \"string\" || It(t),\n    isSafeInteger: (t)=>Number.isSafeInteger(t),\n    array: (t)=>Array.isArray(t),\n    field: (t, e)=>e.Fp.isValid(t),\n    hash: (t)=>typeof t == \"function\" && Number.isSafeInteger(t.outputLen)\n};\nfunction Ot(t, e, n = {}) {\n    const r = (o, s, a)=>{\n        const u = nr[s];\n        if (typeof u != \"function\") throw new Error(\"invalid validator function\");\n        const i = t[o];\n        if (!(a && i === void 0) && !u(i, t)) throw new Error(\"param \" + String(o) + \" is invalid. Expected \" + s + \", got \" + i);\n    };\n    for (const [o, s] of Object.entries(e))r(o, s, !1);\n    for (const [o, s] of Object.entries(n))r(o, s, !0);\n    return t;\n}\nfunction xe(t) {\n    const e = new WeakMap;\n    return (n, ...r)=>{\n        const o = e.get(n);\n        if (o !== void 0) return o;\n        const s = t(n, ...r);\n        return e.set(n, s), s;\n    };\n}\nconst M = BigInt(0), N = BigInt(1), nt = BigInt(2), rr = BigInt(3), Ht = BigInt(4), Be = BigInt(5), Ce = BigInt(8);\nfunction H(t, e) {\n    const n = t % e;\n    return n >= M ? n : e + n;\n}\nfunction or(t, e, n) {\n    if (e < M) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n <= M) throw new Error(\"invalid modulus\");\n    if (n === N) return M;\n    let r = N;\n    for(; e > M;)e & N && (r = r * t % n), t = t * t % n, e >>= N;\n    return r;\n}\nfunction J(t, e, n) {\n    let r = t;\n    for(; e-- > M;)r *= r, r %= n;\n    return r;\n}\nfunction Ae(t, e) {\n    if (t === M) throw new Error(\"invert: expected non-zero number\");\n    if (e <= M) throw new Error(\"invert: expected positive modulus, got \" + e);\n    let n = H(t, e), r = e, o = M, s = N;\n    for(; n !== M;){\n        const u = r / n, i = r % n, D = o - s * u;\n        r = n, n = i, o = s, s = D;\n    }\n    if (r !== N) throw new Error(\"invert: does not exist\");\n    return H(o, e);\n}\nfunction sr(t) {\n    const e = (t - N) / nt;\n    let n, r, o;\n    for(n = t - N, r = 0; n % nt === M; n /= nt, r++);\n    for(o = nt; o < t && or(o, e, t) !== t - N; o++)if (o > 1e3) throw new Error(\"Cannot find square root: likely non-prime P\");\n    if (r === 1) {\n        const a = (t + N) / Ht;\n        return function(i, D) {\n            const c = i.pow(D, a);\n            if (!i.eql(i.sqr(c), D)) throw new Error(\"Cannot find square root\");\n            return c;\n        };\n    }\n    const s = (n + N) / nt;\n    return function(u, i) {\n        if (u.pow(i, e) === u.neg(u.ONE)) throw new Error(\"Cannot find square root\");\n        let D = r, c = u.pow(u.mul(u.ONE, o), n), l = u.pow(i, s), p = u.pow(i, n);\n        for(; !u.eql(p, u.ONE);){\n            if (u.eql(p, u.ZERO)) return u.ZERO;\n            let w = 1;\n            for(let g = u.sqr(p); w < D && !u.eql(g, u.ONE); w++)g = u.sqr(g);\n            const h = u.pow(c, N << BigInt(D - w - 1));\n            c = u.sqr(h), l = u.mul(l, h), p = u.mul(p, c), D = w;\n        }\n        return l;\n    };\n}\nfunction ir(t) {\n    if (t % Ht === rr) {\n        const e = (t + N) / Ht;\n        return function(r, o) {\n            const s = r.pow(o, e);\n            if (!r.eql(r.sqr(s), o)) throw new Error(\"Cannot find square root\");\n            return s;\n        };\n    }\n    if (t % Ce === Be) {\n        const e = (t - Be) / Ce;\n        return function(r, o) {\n            const s = r.mul(o, nt), a = r.pow(s, e), u = r.mul(o, a), i = r.mul(r.mul(u, nt), a), D = r.mul(u, r.sub(i, r.ONE));\n            if (!r.eql(r.sqr(D), o)) throw new Error(\"Cannot find square root\");\n            return D;\n        };\n    }\n    return sr(t);\n}\nconst ur = (t, e)=>(H(t, e) & N) === N, cr = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction ar(t) {\n    const e = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    }, n = cr.reduce((r, o)=>(r[o] = \"function\", r), e);\n    return Ot(t, n);\n}\nfunction fr(t, e, n) {\n    if (n < M) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n === M) return t.ONE;\n    if (n === N) return e;\n    let r = t.ONE, o = e;\n    for(; n > M;)n & N && (r = t.mul(r, o)), o = t.sqr(o), n >>= N;\n    return r;\n}\nfunction Dr(t, e) {\n    const n = new Array(e.length), r = e.reduce((s, a, u)=>t.is0(a) ? s : (n[u] = s, t.mul(s, a)), t.ONE), o = t.inv(r);\n    return e.reduceRight((s, a, u)=>t.is0(a) ? s : (n[u] = t.mul(s, n[u]), t.mul(s, a)), o), n;\n}\nfunction me(t, e) {\n    const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);\n    return {\n        nBitLength: n,\n        nByteLength: r\n    };\n}\nfunction _e(t, e, n = !1, r = {}) {\n    if (t <= M) throw new Error(\"invalid field: expected ORDER > 0, got \" + t);\n    const { nBitLength: o, nByteLength: s } = me(t, e);\n    if (s > 2048) throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\n    let a;\n    const u = Object.freeze({\n        ORDER: t,\n        isLE: n,\n        BITS: o,\n        BYTES: s,\n        MASK: er(o),\n        ZERO: M,\n        ONE: N,\n        create: (i)=>H(i, t),\n        isValid: (i)=>{\n            if (typeof i != \"bigint\") throw new Error(\"invalid field element: expected bigint, got \" + typeof i);\n            return M <= i && i < t;\n        },\n        is0: (i)=>i === M,\n        isOdd: (i)=>(i & N) === N,\n        neg: (i)=>H(-i, t),\n        eql: (i, D)=>i === D,\n        sqr: (i)=>H(i * i, t),\n        add: (i, D)=>H(i + D, t),\n        sub: (i, D)=>H(i - D, t),\n        mul: (i, D)=>H(i * D, t),\n        pow: (i, D)=>fr(u, i, D),\n        div: (i, D)=>H(i * Ae(D, t), t),\n        sqrN: (i)=>i * i,\n        addN: (i, D)=>i + D,\n        subN: (i, D)=>i - D,\n        mulN: (i, D)=>i * D,\n        inv: (i)=>Ae(i, t),\n        sqrt: r.sqrt || ((i)=>(a || (a = ir(t)), a(u, i))),\n        invertBatch: (i)=>Dr(u, i),\n        cmov: (i, D, c)=>c ? D : i,\n        toBytes: (i)=>n ? Nt(i, s) : ge(i, s),\n        fromBytes: (i)=>{\n            if (i.length !== s) throw new Error(\"Field.fromBytes: expected \" + s + \" bytes, got \" + i.length);\n            return n ? Et(i) : Pn(i);\n        }\n    });\n    return Object.freeze(u);\n}\nconst Se = BigInt(0), gt = BigInt(1);\nfunction zt(t, e) {\n    const n = e.negate();\n    return t ? n : e;\n}\nfunction ve(t, e) {\n    if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error(\"invalid window size, expected [1..\" + e + \"], got W=\" + t);\n}\nfunction Mt(t, e) {\n    ve(t, e);\n    const n = Math.ceil(e / t) + 1, r = 2 ** (t - 1);\n    return {\n        windows: n,\n        windowSize: r\n    };\n}\nfunction dr(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"array expected\");\n    t.forEach((n, r)=>{\n        if (!(n instanceof e)) throw new Error(\"invalid point at index \" + r);\n    });\n}\nfunction hr(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"array of scalars expected\");\n    t.forEach((n, r)=>{\n        if (!e.isValid(n)) throw new Error(\"invalid scalar at index \" + r);\n    });\n}\nconst qt = new WeakMap, Ie = new WeakMap;\nfunction $t(t) {\n    return Ie.get(t) || 1;\n}\nfunction lr(t, e) {\n    return {\n        constTimeNegate: zt,\n        hasPrecomputes (n) {\n            return $t(n) !== 1;\n        },\n        unsafeLadder (n, r, o = t.ZERO) {\n            let s = n;\n            for(; r > Se;)r & gt && (o = o.add(s)), s = s.double(), r >>= gt;\n            return o;\n        },\n        precomputeWindow (n, r) {\n            const { windows: o, windowSize: s } = Mt(r, e), a = [];\n            let u = n, i = u;\n            for(let D = 0; D < o; D++){\n                i = u, a.push(i);\n                for(let c = 1; c < s; c++)i = i.add(u), a.push(i);\n                u = i.double();\n            }\n            return a;\n        },\n        wNAF (n, r, o) {\n            const { windows: s, windowSize: a } = Mt(n, e);\n            let u = t.ZERO, i = t.BASE;\n            const D = BigInt(2 ** n - 1), c = 2 ** n, l = BigInt(n);\n            for(let p = 0; p < s; p++){\n                const w = p * a;\n                let h = Number(o & D);\n                o >>= l, h > a && (h -= c, o += gt);\n                const g = w, S = w + Math.abs(h) - 1, v = p % 2 !== 0, L = h < 0;\n                h === 0 ? i = i.add(zt(v, r[g])) : u = u.add(zt(L, r[S]));\n            }\n            return {\n                p: u,\n                f: i\n            };\n        },\n        wNAFUnsafe (n, r, o, s = t.ZERO) {\n            const { windows: a, windowSize: u } = Mt(n, e), i = BigInt(2 ** n - 1), D = 2 ** n, c = BigInt(n);\n            for(let l = 0; l < a; l++){\n                const p = l * u;\n                if (o === Se) break;\n                let w = Number(o & i);\n                if (o >>= c, w > u && (w -= D, o += gt), w === 0) continue;\n                let h = r[p + Math.abs(w) - 1];\n                w < 0 && (h = h.negate()), s = s.add(h);\n            }\n            return s;\n        },\n        getPrecomputes (n, r, o) {\n            let s = qt.get(r);\n            return s || (s = this.precomputeWindow(r, n), n !== 1 && qt.set(r, o(s))), s;\n        },\n        wNAFCached (n, r, o) {\n            const s = $t(n);\n            return this.wNAF(s, this.getPrecomputes(s, n, o), r);\n        },\n        wNAFCachedUnsafe (n, r, o, s) {\n            const a = $t(n);\n            return a === 1 ? this.unsafeLadder(n, r, s) : this.wNAFUnsafe(a, this.getPrecomputes(a, n, o), r, s);\n        },\n        setWindowSize (n, r) {\n            ve(r, e), Ie.set(n, r), qt.delete(n);\n        }\n    };\n}\nfunction br(t, e, n, r) {\n    if (dr(n, t), hr(r, e), n.length !== r.length) throw new Error(\"arrays of points and scalars must have equal length\");\n    const o = t.ZERO, s = tr(BigInt(n.length)), a = s > 12 ? s - 3 : s > 4 ? s - 2 : s ? 2 : 1, u = (1 << a) - 1, i = new Array(u + 1).fill(o), D = Math.floor((e.BITS - 1) / a) * a;\n    let c = o;\n    for(let l = D; l >= 0; l -= a){\n        i.fill(o);\n        for(let w = 0; w < r.length; w++){\n            const h = r[w], g = Number(h >> BigInt(l) & BigInt(u));\n            i[g] = i[g].add(n[w]);\n        }\n        let p = o;\n        for(let w = i.length - 1, h = o; w > 0; w--)h = h.add(i[w]), p = p.add(h);\n        if (c = c.add(p), l !== 0) for(let w = 0; w < a; w++)c = c.double();\n    }\n    return c;\n}\nfunction pr(t) {\n    return ar(t.Fp), Ot(t, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    }), Object.freeze({\n        ...me(t.n, t.nBitLength),\n        ...t,\n        p: t.Fp.ORDER\n    });\n}\nconst G = BigInt(0), j = BigInt(1), yt = BigInt(2), wr = BigInt(8), Er = {\n    zip215: !0\n};\nfunction gr(t) {\n    const e = pr(t);\n    return Ot(t, {\n        hash: \"function\",\n        a: \"bigint\",\n        d: \"bigint\",\n        randomBytes: \"function\"\n    }, {\n        adjustScalarBytes: \"function\",\n        domain: \"function\",\n        uvRatio: \"function\",\n        mapToCurve: \"function\"\n    }), Object.freeze({\n        ...e\n    });\n}\nfunction yr(t) {\n    const e = gr(t), { Fp: n, n: r, prehash: o, hash: s, randomBytes: a, nByteLength: u, h: i } = e, D = yt << BigInt(u * 8) - j, c = n.create, l = _e(e.n, e.nBitLength), p = e.uvRatio || ((y, f)=>{\n        try {\n            return {\n                isValid: !0,\n                value: n.sqrt(y * n.inv(f))\n            };\n        } catch  {\n            return {\n                isValid: !1,\n                value: G\n            };\n        }\n    }), w = e.adjustScalarBytes || ((y)=>y), h = e.domain || ((y, f, b)=>{\n        if (Tt(\"phflag\", b), f.length || b) throw new Error(\"Contexts/pre-hash are not supported\");\n        return y;\n    });\n    function g(y, f) {\n        ft(\"coordinate \" + y, f, G, D);\n    }\n    function S(y) {\n        if (!(y instanceof d)) throw new Error(\"ExtendedPoint expected\");\n    }\n    const v = xe((y, f)=>{\n        const { ex: b, ey: E, ez: B } = y, C = y.is0();\n        f == null && (f = C ? wr : n.inv(B));\n        const A = c(b * f), U = c(E * f), _ = c(B * f);\n        if (C) return {\n            x: G,\n            y: j\n        };\n        if (_ !== j) throw new Error(\"invZ was invalid\");\n        return {\n            x: A,\n            y: U\n        };\n    }), L = xe((y)=>{\n        const { a: f, d: b } = e;\n        if (y.is0()) throw new Error(\"bad point: ZERO\");\n        const { ex: E, ey: B, ez: C, et: A } = y, U = c(E * E), _ = c(B * B), T = c(C * C), $ = c(T * T), R = c(U * f), V = c(T * c(R + _)), Y = c($ + c(b * c(U * _)));\n        if (V !== Y) throw new Error(\"bad point: equation left != right (1)\");\n        const Z = c(E * B), X = c(C * A);\n        if (Z !== X) throw new Error(\"bad point: equation left != right (2)\");\n        return !0;\n    });\n    class d {\n        constructor(f, b, E, B){\n            this.ex = f, this.ey = b, this.ez = E, this.et = B, g(\"x\", f), g(\"y\", b), g(\"z\", E), g(\"t\", B), Object.freeze(this);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static fromAffine(f) {\n            if (f instanceof d) throw new Error(\"extended point not allowed\");\n            const { x: b, y: E } = f || {};\n            return g(\"x\", b), g(\"y\", E), new d(b, E, j, c(b * E));\n        }\n        static normalizeZ(f) {\n            const b = n.invertBatch(f.map((E)=>E.ez));\n            return f.map((E, B)=>E.toAffine(b[B])).map(d.fromAffine);\n        }\n        static msm(f, b) {\n            return br(d, l, f, b);\n        }\n        _setWindowSize(f) {\n            q.setWindowSize(this, f);\n        }\n        assertValidity() {\n            L(this);\n        }\n        equals(f) {\n            S(f);\n            const { ex: b, ey: E, ez: B } = this, { ex: C, ey: A, ez: U } = f, _ = c(b * U), T = c(C * B), $ = c(E * U), R = c(A * B);\n            return _ === T && $ === R;\n        }\n        is0() {\n            return this.equals(d.ZERO);\n        }\n        negate() {\n            return new d(c(-this.ex), this.ey, this.ez, c(-this.et));\n        }\n        double() {\n            const { a: f } = e, { ex: b, ey: E, ez: B } = this, C = c(b * b), A = c(E * E), U = c(yt * c(B * B)), _ = c(f * C), T = b + E, $ = c(c(T * T) - C - A), R = _ + A, V = R - U, Y = _ - A, Z = c($ * V), X = c(R * Y), et = c($ * Y), pt = c(V * R);\n            return new d(Z, X, pt, et);\n        }\n        add(f) {\n            S(f);\n            const { a: b, d: E } = e, { ex: B, ey: C, ez: A, et: U } = this, { ex: _, ey: T, ez: $, et: R } = f;\n            if (b === BigInt(-1)) {\n                const re = c((C - B) * (T + _)), oe = c((C + B) * (T - _)), mt = c(oe - re);\n                if (mt === G) return this.double();\n                const se = c(A * yt * R), ie = c(U * yt * $), ue = ie + se, ce = oe + re, ae = ie - se, Dn = c(ue * mt), dn = c(ce * ae), hn = c(ue * ae), ln = c(mt * ce);\n                return new d(Dn, dn, ln, hn);\n            }\n            const V = c(B * _), Y = c(C * T), Z = c(U * E * R), X = c(A * $), et = c((B + C) * (_ + T) - V - Y), pt = X - Z, ee = X + Z, ne = c(Y - b * V), un = c(et * pt), cn = c(ee * ne), an = c(et * ne), fn = c(pt * ee);\n            return new d(un, cn, fn, an);\n        }\n        subtract(f) {\n            return this.add(f.negate());\n        }\n        wNAF(f) {\n            return q.wNAFCached(this, f, d.normalizeZ);\n        }\n        multiply(f) {\n            const b = f;\n            ft(\"scalar\", b, j, r);\n            const { p: E, f: B } = this.wNAF(b);\n            return d.normalizeZ([\n                E,\n                B\n            ])[0];\n        }\n        multiplyUnsafe(f, b = d.ZERO) {\n            const E = f;\n            return ft(\"scalar\", E, G, r), E === G ? F : this.is0() || E === j ? this : q.wNAFCachedUnsafe(this, E, d.normalizeZ, b);\n        }\n        isSmallOrder() {\n            return this.multiplyUnsafe(i).is0();\n        }\n        isTorsionFree() {\n            return q.unsafeLadder(this, r).is0();\n        }\n        toAffine(f) {\n            return v(this, f);\n        }\n        clearCofactor() {\n            const { h: f } = e;\n            return f === j ? this : this.multiplyUnsafe(f);\n        }\n        static fromHex(f, b = !1) {\n            const { d: E, a: B } = e, C = n.BYTES;\n            f = W(\"pointHex\", f, C), Tt(\"zip215\", b);\n            const A = f.slice(), U = f[C - 1];\n            A[C - 1] = U & -129;\n            const _ = Et(A), T = b ? D : n.ORDER;\n            ft(\"pointHex.y\", _, G, T);\n            const $ = c(_ * _), R = c($ - j), V = c(E * $ - B);\n            let { isValid: Y, value: Z } = p(R, V);\n            if (!Y) throw new Error(\"Point.fromHex: invalid y coordinate\");\n            const X = (Z & j) === j, et = (U & 128) !== 0;\n            if (!b && Z === G && et) throw new Error(\"Point.fromHex: x=0 and x_0=1\");\n            return et !== X && (Z = c(-Z)), d.fromAffine({\n                x: Z,\n                y: _\n            });\n        }\n        static fromPrivateKey(f) {\n            return O(f).point;\n        }\n        toRawBytes() {\n            const { x: f, y: b } = this.toAffine(), E = Nt(b, n.BYTES);\n            return E[E.length - 1] |= f & j ? 128 : 0, E;\n        }\n        toHex() {\n            return Ft(this.toRawBytes());\n        }\n    }\n    d.BASE = new d(e.Gx, e.Gy, j, c(e.Gx * e.Gy)), d.ZERO = new d(G, j, j, G);\n    const { BASE: m, ZERO: F } = d, q = lr(d, u * 8);\n    function z(y) {\n        return H(y, r);\n    }\n    function I(y) {\n        return z(Et(y));\n    }\n    function O(y) {\n        const f = n.BYTES;\n        y = W(\"private key\", y, f);\n        const b = W(\"hashed private key\", s(y), 2 * f), E = w(b.slice(0, f)), B = b.slice(f, 2 * f), C = I(E), A = m.multiply(C), U = A.toRawBytes();\n        return {\n            head: E,\n            prefix: B,\n            scalar: C,\n            point: A,\n            pointBytes: U\n        };\n    }\n    function ot(y) {\n        return O(y).pointBytes;\n    }\n    function tt(y = new Uint8Array, ...f) {\n        const b = ye(...f);\n        return I(s(h(b, W(\"context\", y), !!o)));\n    }\n    function st(y, f, b = {}) {\n        y = W(\"message\", y), o && (y = o(y));\n        const { prefix: E, scalar: B, pointBytes: C } = O(f), A = tt(b.context, E, y), U = m.multiply(A).toRawBytes(), _ = tt(b.context, U, C, y), T = z(A + _ * B);\n        ft(\"signature.s\", T, G, r);\n        const $ = ye(U, Nt(T, n.BYTES));\n        return W(\"result\", $, n.BYTES * 2);\n    }\n    const at = Er;\n    function Ct(y, f, b, E = at) {\n        const { context: B, zip215: C } = E, A = n.BYTES;\n        y = W(\"signature\", y, 2 * A), f = W(\"message\", f), b = W(\"publicKey\", b, A), C !== void 0 && Tt(\"zip215\", C), o && (f = o(f));\n        const U = Et(y.slice(A, 2 * A));\n        let _, T, $;\n        try {\n            _ = d.fromHex(b, C), T = d.fromHex(y.slice(0, A), C), $ = m.multiplyUnsafe(U);\n        } catch  {\n            return !1;\n        }\n        if (!C && _.isSmallOrder()) return !1;\n        const R = tt(B, T.toRawBytes(), _.toRawBytes(), f);\n        return T.add(_.multiplyUnsafe(R)).subtract($).clearCofactor().equals(d.ZERO);\n    }\n    return m._setWindowSize(8), {\n        CURVE: e,\n        getPublicKey: ot,\n        sign: st,\n        verify: Ct,\n        ExtendedPoint: d,\n        utils: {\n            getExtendedPublicKey: O,\n            randomPrivateKey: ()=>a(n.BYTES),\n            precompute (y = 8, f = d.BASE) {\n                return f._setWindowSize(y), f.multiply(BigInt(3)), f;\n            }\n        }\n    };\n}\nBigInt(0), BigInt(1);\nconst kt = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\"), Ue = BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\");\nBigInt(0);\nconst xr = BigInt(1), Te = BigInt(2);\nBigInt(3);\nconst Br = BigInt(5), Cr = BigInt(8);\nfunction Ar(t) {\n    const e = BigInt(10), n = BigInt(20), r = BigInt(40), o = BigInt(80), s = kt, u = t * t % s * t % s, i = J(u, Te, s) * u % s, D = J(i, xr, s) * t % s, c = J(D, Br, s) * D % s, l = J(c, e, s) * c % s, p = J(l, n, s) * l % s, w = J(p, r, s) * p % s, h = J(w, o, s) * w % s, g = J(h, o, s) * w % s, S = J(g, e, s) * c % s;\n    return {\n        pow_p_5_8: J(S, Te, s) * t % s,\n        b2: u\n    };\n}\nfunction mr(t) {\n    return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;\n}\nfunction _r(t, e) {\n    const n = kt, r = H(e * e * e, n), o = H(r * r * e, n), s = Ar(t * o).pow_p_5_8;\n    let a = H(t * r * s, n);\n    const u = H(e * a * a, n), i = a, D = H(a * Ue, n), c = u === t, l = u === H(-t, n), p = u === H(-t * Ue, n);\n    return c && (a = i), (l || p) && (a = D), ur(a, n) && (a = H(-a, n)), {\n        isValid: c || l,\n        value: a\n    };\n}\nconst Sr = (()=>_e(kt, void 0, !0))(), vr = (()=>({\n        a: BigInt(-1),\n        d: BigInt(\"37095705934669439343138083508754565189542113879843219016388785533085940283555\"),\n        Fp: Sr,\n        n: BigInt(\"7237005577332262213973186563042994240857116359379907606001950938285454250989\"),\n        h: Cr,\n        Gx: BigInt(\"15112221349535400772501151409588531511454012693041857206046113283949847762202\"),\n        Gy: BigInt(\"46316835694926478169428394003475163141307993866256225615783033603165251855960\"),\n        hash: Kn,\n        randomBytes: he,\n        adjustScalarBytes: mr,\n        uvRatio: _r\n    }))(), Rt = (()=>yr(vr))(), jt = \"EdDSA\", Zt = \"JWT\", ut = \".\", Dt = \"base64url\", Gt = \"utf8\", xt = \"utf8\", Vt = \":\", Yt = \"did\", Jt = \"key\", dt = \"base58btc\", Kt = \"z\", Wt = \"K36\", Fe = 32, Ne = 32;\nfunction Xt(t) {\n    return globalThis.Buffer != null ? new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t;\n}\nfunction Le(t = 0) {\n    return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Xt(globalThis.Buffer.allocUnsafe(t)) : new Uint8Array(t);\n}\nfunction Oe(t, e) {\n    e || (e = t.reduce((o, s)=>o + s.length, 0));\n    const n = Le(e);\n    let r = 0;\n    for (const o of t)n.set(o, r), r += o.length;\n    return Xt(n);\n}\nfunction Ir(t, e) {\n    if (t.length >= 255) throw new TypeError(\"Alphabet too long\");\n    for(var n = new Uint8Array(256), r = 0; r < n.length; r++)n[r] = 255;\n    for(var o = 0; o < t.length; o++){\n        var s = t.charAt(o), a = s.charCodeAt(0);\n        if (n[a] !== 255) throw new TypeError(s + \" is ambiguous\");\n        n[a] = o;\n    }\n    var u = t.length, i = t.charAt(0), D = Math.log(u) / Math.log(256), c = Math.log(256) / Math.log(u);\n    function l(h) {\n        if (h instanceof Uint8Array || (ArrayBuffer.isView(h) ? h = new Uint8Array(h.buffer, h.byteOffset, h.byteLength) : Array.isArray(h) && (h = Uint8Array.from(h))), !(h instanceof Uint8Array)) throw new TypeError(\"Expected Uint8Array\");\n        if (h.length === 0) return \"\";\n        for(var g = 0, S = 0, v = 0, L = h.length; v !== L && h[v] === 0;)v++, g++;\n        for(var d = (L - v) * c + 1 >>> 0, m = new Uint8Array(d); v !== L;){\n            for(var F = h[v], q = 0, z = d - 1; (F !== 0 || q < S) && z !== -1; z--, q++)F += 256 * m[z] >>> 0, m[z] = F % u >>> 0, F = F / u >>> 0;\n            if (F !== 0) throw new Error(\"Non-zero carry\");\n            S = q, v++;\n        }\n        for(var I = d - S; I !== d && m[I] === 0;)I++;\n        for(var O = i.repeat(g); I < d; ++I)O += t.charAt(m[I]);\n        return O;\n    }\n    function p(h) {\n        if (typeof h != \"string\") throw new TypeError(\"Expected String\");\n        if (h.length === 0) return new Uint8Array;\n        var g = 0;\n        if (h[g] !== \" \") {\n            for(var S = 0, v = 0; h[g] === i;)S++, g++;\n            for(var L = (h.length - g) * D + 1 >>> 0, d = new Uint8Array(L); h[g];){\n                var m = n[h.charCodeAt(g)];\n                if (m === 255) return;\n                for(var F = 0, q = L - 1; (m !== 0 || F < v) && q !== -1; q--, F++)m += u * d[q] >>> 0, d[q] = m % 256 >>> 0, m = m / 256 >>> 0;\n                if (m !== 0) throw new Error(\"Non-zero carry\");\n                v = F, g++;\n            }\n            if (h[g] !== \" \") {\n                for(var z = L - v; z !== L && d[z] === 0;)z++;\n                for(var I = new Uint8Array(S + (L - z)), O = S; z !== L;)I[O++] = d[z++];\n                return I;\n            }\n        }\n    }\n    function w(h) {\n        var g = p(h);\n        if (g) return g;\n        throw new Error(`Non-${e} character`);\n    }\n    return {\n        encode: l,\n        decodeUnsafe: p,\n        decode: w\n    };\n}\nvar Ur = Ir, Tr = Ur;\nconst He = (t)=>{\n    if (t instanceof Uint8Array && t.constructor.name === \"Uint8Array\") return t;\n    if (t instanceof ArrayBuffer) return new Uint8Array(t);\n    if (ArrayBuffer.isView(t)) return new Uint8Array(t.buffer, t.byteOffset, t.byteLength);\n    throw new Error(\"Unknown type, must be binary type\");\n}, Fr = (t)=>new TextEncoder().encode(t), Nr = (t)=>new TextDecoder().decode(t);\nclass Lr {\n    constructor(e, n, r){\n        this.name = e, this.prefix = n, this.baseEncode = r;\n    }\n    encode(e) {\n        if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;\n        throw Error(\"Unknown type, must be binary type\");\n    }\n}\nclass Or {\n    constructor(e, n, r){\n        if (this.name = e, this.prefix = n, n.codePointAt(0) === void 0) throw new Error(\"Invalid prefix character\");\n        this.prefixCodePoint = n.codePointAt(0), this.baseDecode = r;\n    }\n    decode(e) {\n        if (typeof e == \"string\") {\n            if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n            return this.baseDecode(e.slice(this.prefix.length));\n        } else throw Error(\"Can only multibase decode strings\");\n    }\n    or(e) {\n        return ze(this, e);\n    }\n}\nclass Hr {\n    constructor(e){\n        this.decoders = e;\n    }\n    or(e) {\n        return ze(this, e);\n    }\n    decode(e) {\n        const n = e[0], r = this.decoders[n];\n        if (r) return r.decode(e);\n        throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n}\nconst ze = (t, e)=>new Hr({\n        ...t.decoders || {\n            [t.prefix]: t\n        },\n        ...e.decoders || {\n            [e.prefix]: e\n        }\n    });\nclass zr {\n    constructor(e, n, r, o){\n        this.name = e, this.prefix = n, this.baseEncode = r, this.baseDecode = o, this.encoder = new Lr(e, n, r), this.decoder = new Or(e, n, o);\n    }\n    encode(e) {\n        return this.encoder.encode(e);\n    }\n    decode(e) {\n        return this.decoder.decode(e);\n    }\n}\nconst Bt = ({ name: t, prefix: e, encode: n, decode: r })=>new zr(t, e, n, r), ht = ({ prefix: t, name: e, alphabet: n })=>{\n    const { encode: r, decode: o } = Tr(n, e);\n    return Bt({\n        prefix: t,\n        name: e,\n        encode: r,\n        decode: (s)=>He(o(s))\n    });\n}, Mr = (t, e, n, r)=>{\n    const o = {};\n    for(let c = 0; c < e.length; ++c)o[e[c]] = c;\n    let s = t.length;\n    for(; t[s - 1] === \"=\";)--s;\n    const a = new Uint8Array(s * n / 8 | 0);\n    let u = 0, i = 0, D = 0;\n    for(let c = 0; c < s; ++c){\n        const l = o[t[c]];\n        if (l === void 0) throw new SyntaxError(`Non-${r} character`);\n        i = i << n | l, u += n, u >= 8 && (u -= 8, a[D++] = 255 & i >> u);\n    }\n    if (u >= n || 255 & i << 8 - u) throw new SyntaxError(\"Unexpected end of data\");\n    return a;\n}, qr = (t, e, n)=>{\n    const r = e[e.length - 1] === \"=\", o = (1 << n) - 1;\n    let s = \"\", a = 0, u = 0;\n    for(let i = 0; i < t.length; ++i)for(u = u << 8 | t[i], a += 8; a > n;)a -= n, s += e[o & u >> a];\n    if (a && (s += e[o & u << n - a]), r) for(; s.length * n & 7;)s += \"=\";\n    return s;\n}, k = ({ name: t, prefix: e, bitsPerChar: n, alphabet: r })=>Bt({\n        prefix: e,\n        name: t,\n        encode (o) {\n            return qr(o, r, n);\n        },\n        decode (o) {\n            return Mr(o, r, n, t);\n        }\n    }), $r = Bt({\n    prefix: \"\\x00\",\n    name: \"identity\",\n    encode: (t)=>Nr(t),\n    decode: (t)=>Fr(t)\n});\nvar kr = Object.freeze({\n    __proto__: null,\n    identity: $r\n});\nconst Rr = k({\n    prefix: \"0\",\n    name: \"base2\",\n    alphabet: \"01\",\n    bitsPerChar: 1\n});\nvar jr = Object.freeze({\n    __proto__: null,\n    base2: Rr\n});\nconst Zr = k({\n    prefix: \"7\",\n    name: \"base8\",\n    alphabet: \"01234567\",\n    bitsPerChar: 3\n});\nvar Gr = Object.freeze({\n    __proto__: null,\n    base8: Zr\n});\nconst Vr = ht({\n    prefix: \"9\",\n    name: \"base10\",\n    alphabet: \"0123456789\"\n});\nvar Yr = Object.freeze({\n    __proto__: null,\n    base10: Vr\n});\nconst Jr = k({\n    prefix: \"f\",\n    name: \"base16\",\n    alphabet: \"0123456789abcdef\",\n    bitsPerChar: 4\n}), Kr = k({\n    prefix: \"F\",\n    name: \"base16upper\",\n    alphabet: \"0123456789ABCDEF\",\n    bitsPerChar: 4\n});\nvar Wr = Object.freeze({\n    __proto__: null,\n    base16: Jr,\n    base16upper: Kr\n});\nconst Xr = k({\n    prefix: \"b\",\n    name: \"base32\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n    bitsPerChar: 5\n}), Pr = k({\n    prefix: \"B\",\n    name: \"base32upper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bitsPerChar: 5\n}), Qr = k({\n    prefix: \"c\",\n    name: \"base32pad\",\n    alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n    bitsPerChar: 5\n}), to = k({\n    prefix: \"C\",\n    name: \"base32padupper\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n    bitsPerChar: 5\n}), eo = k({\n    prefix: \"v\",\n    name: \"base32hex\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n    bitsPerChar: 5\n}), no = k({\n    prefix: \"V\",\n    name: \"base32hexupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bitsPerChar: 5\n}), ro = k({\n    prefix: \"t\",\n    name: \"base32hexpad\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n    bitsPerChar: 5\n}), oo = k({\n    prefix: \"T\",\n    name: \"base32hexpadupper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n    bitsPerChar: 5\n}), so = k({\n    prefix: \"h\",\n    name: \"base32z\",\n    alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n    bitsPerChar: 5\n});\nvar io = Object.freeze({\n    __proto__: null,\n    base32: Xr,\n    base32upper: Pr,\n    base32pad: Qr,\n    base32padupper: to,\n    base32hex: eo,\n    base32hexupper: no,\n    base32hexpad: ro,\n    base32hexpadupper: oo,\n    base32z: so\n});\nconst uo = ht({\n    prefix: \"k\",\n    name: \"base36\",\n    alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n}), co = ht({\n    prefix: \"K\",\n    name: \"base36upper\",\n    alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\nvar ao = Object.freeze({\n    __proto__: null,\n    base36: uo,\n    base36upper: co\n});\nconst fo = ht({\n    name: \"base58btc\",\n    prefix: \"z\",\n    alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n}), Do = ht({\n    name: \"base58flickr\",\n    prefix: \"Z\",\n    alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\nvar ho = Object.freeze({\n    __proto__: null,\n    base58btc: fo,\n    base58flickr: Do\n});\nconst lo = k({\n    prefix: \"m\",\n    name: \"base64\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bitsPerChar: 6\n}), bo = k({\n    prefix: \"M\",\n    name: \"base64pad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    bitsPerChar: 6\n}), po = k({\n    prefix: \"u\",\n    name: \"base64url\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bitsPerChar: 6\n}), wo = k({\n    prefix: \"U\",\n    name: \"base64urlpad\",\n    alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n    bitsPerChar: 6\n});\nvar Eo = Object.freeze({\n    __proto__: null,\n    base64: lo,\n    base64pad: bo,\n    base64url: po,\n    base64urlpad: wo\n});\nconst Me = Array.from(\"\\uD83D\\uDE80\\uD83E\\uDE90☄\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09☀\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02❤\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09☺\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E✌✨\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D❣\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33✋\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13⭐✅\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6✔\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90☹\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20☝\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B⚽\\uD83E\\uDD19☕\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81⚡\\uD83C\\uDF1E\\uD83C\\uDF88❌✊\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C✈\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74▶➡❓\\uD83D\\uDC8E\\uD83D\\uDCB8⬇\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A⚠\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37☎\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51❄\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42\"), go = Me.reduce((t, e, n)=>(t[n] = e, t), []), yo = Me.reduce((t, e, n)=>(t[e.codePointAt(0)] = n, t), []);\nfunction xo(t) {\n    return t.reduce((e, n)=>(e += go[n], e), \"\");\n}\nfunction Bo(t) {\n    const e = [];\n    for (const n of t){\n        const r = yo[n.codePointAt(0)];\n        if (r === void 0) throw new Error(`Non-base256emoji character: ${n}`);\n        e.push(r);\n    }\n    return new Uint8Array(e);\n}\nconst Co = Bt({\n    prefix: \"\\uD83D\\uDE80\",\n    name: \"base256emoji\",\n    encode: xo,\n    decode: Bo\n});\nvar Ao = Object.freeze({\n    __proto__: null,\n    base256emoji: Co\n}), mo = $e, qe = 128, _o = 127, So = ~_o, vo = Math.pow(2, 31);\nfunction $e(t, e, n) {\n    e = e || [], n = n || 0;\n    for(var r = n; t >= vo;)e[n++] = t & 255 | qe, t /= 128;\n    for(; t & So;)e[n++] = t & 255 | qe, t >>>= 7;\n    return e[n] = t | 0, $e.bytes = n - r + 1, e;\n}\nvar Io = Pt, Uo = 128, ke = 127;\nfunction Pt(t, r) {\n    var n = 0, r = r || 0, o = 0, s = r, a, u = t.length;\n    do {\n        if (s >= u) throw Pt.bytes = 0, new RangeError(\"Could not decode varint\");\n        a = t[s++], n += o < 28 ? (a & ke) << o : (a & ke) * Math.pow(2, o), o += 7;\n    }while (a >= Uo);\n    return Pt.bytes = s - r, n;\n}\nvar To = Math.pow(2, 7), Fo = Math.pow(2, 14), No = Math.pow(2, 21), Lo = Math.pow(2, 28), Oo = Math.pow(2, 35), Ho = Math.pow(2, 42), zo = Math.pow(2, 49), Mo = Math.pow(2, 56), qo = Math.pow(2, 63), $o = function(t) {\n    return t < To ? 1 : t < Fo ? 2 : t < No ? 3 : t < Lo ? 4 : t < Oo ? 5 : t < Ho ? 6 : t < zo ? 7 : t < Mo ? 8 : t < qo ? 9 : 10;\n}, ko = {\n    encode: mo,\n    decode: Io,\n    encodingLength: $o\n}, Re = ko;\nconst je = (t, e, n = 0)=>(Re.encode(t, e, n), e), Ze = (t)=>Re.encodingLength(t), Qt = (t, e)=>{\n    const n = e.byteLength, r = Ze(t), o = r + Ze(n), s = new Uint8Array(o + n);\n    return je(t, s, 0), je(n, s, r), s.set(e, o), new Ro(t, n, e, s);\n};\nclass Ro {\n    constructor(e, n, r, o){\n        this.code = e, this.size = n, this.digest = r, this.bytes = o;\n    }\n}\nconst Ge = ({ name: t, code: e, encode: n })=>new jo(t, e, n);\nclass jo {\n    constructor(e, n, r){\n        this.name = e, this.code = n, this.encode = r;\n    }\n    digest(e) {\n        if (e instanceof Uint8Array) {\n            const n = this.encode(e);\n            return n instanceof Uint8Array ? Qt(this.code, n) : n.then((r)=>Qt(this.code, r));\n        } else throw Error(\"Unknown type, must be binary type\");\n    }\n}\nconst Ve = (t)=>async (e)=>new Uint8Array(await crypto.subtle.digest(t, e)), Zo = Ge({\n    name: \"sha2-256\",\n    code: 18,\n    encode: Ve(\"SHA-256\")\n}), Go = Ge({\n    name: \"sha2-512\",\n    code: 19,\n    encode: Ve(\"SHA-512\")\n});\nvar Vo = Object.freeze({\n    __proto__: null,\n    sha256: Zo,\n    sha512: Go\n});\nconst Ye = 0, Yo = \"identity\", Je = He, Jo = (t)=>Qt(Ye, Je(t)), Ko = {\n    code: Ye,\n    name: Yo,\n    encode: Je,\n    digest: Jo\n};\nvar Wo = Object.freeze({\n    __proto__: null,\n    identity: Ko\n});\nnew TextEncoder, new TextDecoder;\nconst Ke = {\n    ...kr,\n    ...jr,\n    ...Gr,\n    ...Yr,\n    ...Wr,\n    ...io,\n    ...ao,\n    ...ho,\n    ...Eo,\n    ...Ao\n};\n({\n    ...Vo,\n    ...Wo\n});\nfunction We(t, e, n, r) {\n    return {\n        name: t,\n        prefix: e,\n        encoder: {\n            name: t,\n            prefix: e,\n            encode: n\n        },\n        decoder: {\n            decode: r\n        }\n    };\n}\nconst Xe = We(\"utf8\", \"u\", (t)=>\"u\" + new TextDecoder(\"utf8\").decode(t), (t)=>new TextEncoder().encode(t.substring(1))), te = We(\"ascii\", \"a\", (t)=>{\n    let e = \"a\";\n    for(let n = 0; n < t.length; n++)e += String.fromCharCode(t[n]);\n    return e;\n}, (t)=>{\n    t = t.substring(1);\n    const e = Le(t.length);\n    for(let n = 0; n < t.length; n++)e[n] = t.charCodeAt(n);\n    return e;\n}), Pe = {\n    utf8: Xe,\n    \"utf-8\": Xe,\n    hex: Ke.base16,\n    latin1: te,\n    ascii: te,\n    binary: te,\n    ...Ke\n};\nfunction ct(t, e = \"utf8\") {\n    const n = Pe[e];\n    if (!n) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(t.buffer, t.byteOffset, t.byteLength).toString(\"utf8\") : n.encoder.encode(t).substring(1);\n}\nfunction rt(t, e = \"utf8\") {\n    const n = Pe[e];\n    if (!n) throw new Error(`Unsupported encoding \"${e}\"`);\n    return (e === \"utf8\" || e === \"utf-8\") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Xt(globalThis.Buffer.from(t, \"utf-8\")) : n.decoder.decode(`${n.prefix}${t}`);\n}\nfunction lt(t) {\n    return (0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonParse)(ct(rt(t, Dt), Gt));\n}\nfunction bt(t) {\n    return ct(rt((0,_walletconnect_safe_json__WEBPACK_IMPORTED_MODULE_1__.safeJsonStringify)(t), Gt), Dt);\n}\nfunction Qe(t) {\n    const e = rt(Wt, dt), n = Kt + ct(Oe([\n        e,\n        t\n    ]), dt);\n    return [\n        Yt,\n        Jt,\n        n\n    ].join(Vt);\n}\nfunction tn(t) {\n    const [e, n, r] = t.split(Vt);\n    if (e !== Yt || n !== Jt) throw new Error('Issuer must be a DID with method \"key\"');\n    if (r.slice(0, 1) !== Kt) throw new Error(\"Issuer must be a key in mulicodec format\");\n    const o = rt(r.slice(1), dt);\n    if (ct(o.slice(0, 2), dt) !== Wt) throw new Error('Issuer must be a public key with type \"Ed25519\"');\n    const s = o.slice(2);\n    if (s.length !== Fe) throw new Error(\"Issuer must be a public key with length 32 bytes\");\n    return s;\n}\nfunction en(t) {\n    return ct(t, Dt);\n}\nfunction nn(t) {\n    return rt(t, Dt);\n}\nfunction rn(t) {\n    return rt([\n        bt(t.header),\n        bt(t.payload)\n    ].join(ut), xt);\n}\nfunction Xo(t) {\n    const e = ct(t, xt).split(ut), n = lt(e[0]), r = lt(e[1]);\n    return {\n        header: n,\n        payload: r\n    };\n}\nfunction on(t) {\n    return [\n        bt(t.header),\n        bt(t.payload),\n        en(t.signature)\n    ].join(ut);\n}\nfunction sn(t) {\n    const e = t.split(ut), n = lt(e[0]), r = lt(e[1]), o = nn(e[2]), s = rt(e.slice(0, 2).join(ut), xt);\n    return {\n        header: n,\n        payload: r,\n        signature: o,\n        data: s\n    };\n}\nfunction Po(t = he(Ne)) {\n    const e = Rt.getPublicKey(t);\n    return {\n        secretKey: Oe([\n            t,\n            e\n        ]),\n        publicKey: e\n    };\n}\nasync function Qo(t, e, n, r, o = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)(Date.now())) {\n    const s = {\n        alg: jt,\n        typ: Zt\n    }, a = Qe(r.publicKey), u = o + n, i = {\n        iss: a,\n        sub: t,\n        aud: e,\n        iat: o,\n        exp: u\n    }, D = rn({\n        header: s,\n        payload: i\n    }), c = Rt.sign(D, r.secretKey.slice(0, 32));\n    return on({\n        header: s,\n        payload: i,\n        signature: c\n    });\n}\nasync function ts(t) {\n    const { header: e, payload: n, data: r, signature: o } = sn(t);\n    if (e.alg !== jt || e.typ !== Zt) throw new Error(\"JWT must use EdDSA algorithm\");\n    const s = tn(n.iss);\n    return Rt.verify(o, r, s);\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@walletconnect/safe-json/dist/esm/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   safeJsonParse: () => (/* binding */ safeJsonParse),\n/* harmony export */   safeJsonStringify: () => (/* binding */ safeJsonStringify)\n/* harmony export */ });\nconst JSONStringify = (data)=>JSON.stringify(data, (_, value)=>typeof value === \"bigint\" ? value.toString() + \"n\" : value);\nconst JSONParse = (json)=>{\n    const numbersBiggerThanMaxInt = /([\\[:])?(\\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\\}\\]])/g;\n    const serializedData = json.replace(numbersBiggerThanMaxInt, '$1\"$2n\"$3');\n    return JSON.parse(serializedData, (_, value)=>{\n        const isCustomFormatBigInt = typeof value === \"string\" && value.match(/^\\d+n$/);\n        if (isCustomFormatBigInt) return BigInt(value.substring(0, value.length - 1));\n        return value;\n    });\n};\nfunction safeJsonParse(value) {\n    if (typeof value !== \"string\") {\n        throw new Error(`Cannot safe json parse value of type ${typeof value}`);\n    }\n    try {\n        return JSONParse(value);\n    } catch (_a) {\n        return value;\n    }\n}\nfunction safeJsonStringify(value) {\n    return typeof value === \"string\" ? value : JSONStringify(value) || \"\";\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uL2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTUEsZ0JBQWdCQyxDQUFBQSxPQUFRQyxLQUFLQyxTQUFTLENBQUNGLE1BQU0sQ0FBQ0csR0FBR0MsUUFBVSxPQUFPQSxVQUFVLFdBQVdBLE1BQU1DLFFBQVEsS0FBSyxNQUFNRDtBQUN0SCxNQUFNRSxZQUFZQyxDQUFBQTtJQUNkLE1BQU1DLDBCQUEwQjtJQUNoQyxNQUFNQyxpQkFBaUJGLEtBQUtHLE9BQU8sQ0FBQ0YseUJBQXlCO0lBQzdELE9BQU9QLEtBQUtVLEtBQUssQ0FBQ0YsZ0JBQWdCLENBQUNOLEdBQUdDO1FBQ2xDLE1BQU1RLHVCQUF1QixPQUFPUixVQUFVLFlBQVlBLE1BQU1TLEtBQUssQ0FBQztRQUN0RSxJQUFJRCxzQkFDQSxPQUFPRSxPQUFPVixNQUFNVyxTQUFTLENBQUMsR0FBR1gsTUFBTVksTUFBTSxHQUFHO1FBQ3BELE9BQU9aO0lBQ1g7QUFDSjtBQUNPLFNBQVNhLGNBQWNiLEtBQUs7SUFDL0IsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDM0IsTUFBTSxJQUFJYyxNQUFNLENBQUMscUNBQXFDLEVBQUUsT0FBT2QsTUFBTSxDQUFDO0lBQzFFO0lBQ0EsSUFBSTtRQUNBLE9BQU9FLFVBQVVGO0lBQ3JCLEVBQ0EsT0FBT2UsSUFBSTtRQUNQLE9BQU9mO0lBQ1g7QUFDSjtBQUNPLFNBQVNnQixrQkFBa0JoQixLQUFLO0lBQ25DLE9BQU8sT0FBT0EsVUFBVSxXQUFXQSxRQUFRTCxjQUFjSyxVQUFVO0FBQ3ZFLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvc2FmZS1qc29uL2Rpc3QvZXNtL2luZGV4LmpzP2UyZDkiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSlNPTlN0cmluZ2lmeSA9IGRhdGEgPT4gSlNPTi5zdHJpbmdpZnkoZGF0YSwgKF8sIHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09IFwiYmlnaW50XCIgPyB2YWx1ZS50b1N0cmluZygpICsgXCJuXCIgOiB2YWx1ZSk7XG5jb25zdCBKU09OUGFyc2UgPSBqc29uID0+IHtcbiAgICBjb25zdCBudW1iZXJzQmlnZ2VyVGhhbk1heEludCA9IC8oW1xcWzpdKT8oXFxkezE3LH18KD86WzldKD86WzEtOV0wNzE5OTI1NDc0MDk5MXwwWzEtOV03MTk5MjU0NzQwOTkxfDAwWzgtOV0xOTkyNTQ3NDA5OTF8MDA3WzItOV05OTI1NDc0MDk5MXwwMDcxOTlbMy05XTU0NzQwOTkxfDAwNzE5OTJbNi05XTQ3NDA5OTF8MDA3MTk5MjVbNS05XTc0MDk5MXwwMDcxOTkyNTRbOC05XTQwOTkxfDAwNzE5OTI1NDdbNS05XTA5OTF8MDA3MTk5MjU0NzRbMS05XTk5MXwwMDcxOTkyNTQ3NDA5OVsyLTldKSkpKFssXFx9XFxdXSkvZztcbiAgICBjb25zdCBzZXJpYWxpemVkRGF0YSA9IGpzb24ucmVwbGFjZShudW1iZXJzQmlnZ2VyVGhhbk1heEludCwgXCIkMVxcXCIkMm5cXFwiJDNcIik7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc2VyaWFsaXplZERhdGEsIChfLCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBpc0N1c3RvbUZvcm1hdEJpZ0ludCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZS5tYXRjaCgvXlxcZCtuJC8pO1xuICAgICAgICBpZiAoaXNDdXN0b21Gb3JtYXRCaWdJbnQpXG4gICAgICAgICAgICByZXR1cm4gQmlnSW50KHZhbHVlLnN1YnN0cmluZygwLCB2YWx1ZS5sZW5ndGggLSAxKSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbn07XG5leHBvcnQgZnVuY3Rpb24gc2FmZUpzb25QYXJzZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3Qgc2FmZSBqc29uIHBhcnNlIHZhbHVlIG9mIHR5cGUgJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OUGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzYWZlSnNvblN0cmluZ2lmeSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IEpTT05TdHJpbmdpZnkodmFsdWUpIHx8IFwiXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiSlNPTlN0cmluZ2lmeSIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwiXyIsInZhbHVlIiwidG9TdHJpbmciLCJKU09OUGFyc2UiLCJqc29uIiwibnVtYmVyc0JpZ2dlclRoYW5NYXhJbnQiLCJzZXJpYWxpemVkRGF0YSIsInJlcGxhY2UiLCJwYXJzZSIsImlzQ3VzdG9tRm9ybWF0QmlnSW50IiwibWF0Y2giLCJCaWdJbnQiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJzYWZlSnNvblBhcnNlIiwiRXJyb3IiLCJfYSIsInNhZmVKc29uU3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/safe-json/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/sign-client/dist/index.es.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AUTH_CONTEXT: () => (/* binding */ wt),\n/* harmony export */   AUTH_KEYS_CONTEXT: () => (/* binding */ mt),\n/* harmony export */   AUTH_PAIRING_TOPIC_CONTEXT: () => (/* binding */ _t),\n/* harmony export */   AUTH_PROTOCOL: () => (/* binding */ yt),\n/* harmony export */   AUTH_PUBLIC_KEY_NAME: () => (/* binding */ ce),\n/* harmony export */   AUTH_REQUEST_CONTEXT: () => (/* binding */ Et),\n/* harmony export */   AUTH_STORAGE_PREFIX: () => (/* binding */ ae),\n/* harmony export */   AUTH_VERSION: () => (/* binding */ Rs),\n/* harmony export */   ENGINE_CONTEXT: () => (/* binding */ dt),\n/* harmony export */   ENGINE_QUEUE_STATES: () => (/* binding */ $),\n/* harmony export */   ENGINE_RPC_OPTS: () => (/* binding */ N),\n/* harmony export */   HISTORY_CONTEXT: () => (/* binding */ Es),\n/* harmony export */   HISTORY_EVENTS: () => (/* binding */ _s),\n/* harmony export */   HISTORY_STORAGE_VERSION: () => (/* binding */ fs),\n/* harmony export */   METHODS_TO_VERIFY: () => (/* binding */ gt),\n/* harmony export */   PROPOSAL_CONTEXT: () => (/* binding */ pt),\n/* harmony export */   PROPOSAL_EXPIRY: () => (/* binding */ Ss),\n/* harmony export */   PROPOSAL_EXPIRY_MESSAGE: () => (/* binding */ $e),\n/* harmony export */   REQUEST_CONTEXT: () => (/* binding */ ut),\n/* harmony export */   SESSION_CONTEXT: () => (/* binding */ ht),\n/* harmony export */   SESSION_EXPIRY: () => (/* binding */ J),\n/* harmony export */   SESSION_REQUEST_EXPIRY_BOUNDARIES: () => (/* binding */ _e),\n/* harmony export */   SIGN_CLIENT_CONTEXT: () => (/* binding */ ke),\n/* harmony export */   SIGN_CLIENT_DEFAULT: () => (/* binding */ me),\n/* harmony export */   SIGN_CLIENT_EVENTS: () => (/* binding */ ws),\n/* harmony export */   SIGN_CLIENT_PROTOCOL: () => (/* binding */ De),\n/* harmony export */   SIGN_CLIENT_STORAGE_OPTIONS: () => (/* binding */ ms),\n/* harmony export */   SIGN_CLIENT_STORAGE_PREFIX: () => (/* binding */ we),\n/* harmony export */   SIGN_CLIENT_VERSION: () => (/* binding */ Le),\n/* harmony export */   SessionStore: () => (/* binding */ $s),\n/* harmony export */   SignClient: () => (/* binding */ Ks),\n/* harmony export */   TVF_METHODS: () => (/* binding */ Ke),\n/* harmony export */   WALLETCONNECT_DEEPLINK_CHOICE: () => (/* binding */ Me),\n/* harmony export */   \"default\": () => (/* binding */ Ee)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/core */ \"(ssr)/./node_modules/@walletconnect/core/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/types */ \"(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n\n\n\n\n\n\n\nconst De = \"wc\", Le = 2, ke = \"client\", we = `${De}@${Le}:${ke}:`, me = {\n    name: ke,\n    logger: \"error\",\n    controller: !1,\n    relayUrl: \"wss://relay.walletconnect.org\"\n}, ws = {\n    session_proposal: \"session_proposal\",\n    session_update: \"session_update\",\n    session_extend: \"session_extend\",\n    session_ping: \"session_ping\",\n    session_delete: \"session_delete\",\n    session_expire: \"session_expire\",\n    session_request: \"session_request\",\n    session_request_sent: \"session_request_sent\",\n    session_event: \"session_event\",\n    proposal_expire: \"proposal_expire\",\n    session_authenticate: \"session_authenticate\",\n    session_request_expire: \"session_request_expire\",\n    session_connect: \"session_connect\"\n}, ms = {\n    database: \":memory:\"\n}, Me = \"WALLETCONNECT_DEEPLINK_CHOICE\", _s = {\n    created: \"history_created\",\n    updated: \"history_updated\",\n    deleted: \"history_deleted\",\n    sync: \"history_sync\"\n}, Es = \"history\", fs = \"0.3\", pt = \"proposal\", Ss = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.THIRTY_DAYS, $e = \"Proposal expired\", ht = \"session\", J = _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.SEVEN_DAYS, dt = \"engine\", N = {\n    wc_sessionPropose: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1100\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1101\n        },\n        reject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1120\n        },\n        autoReject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1121\n        }\n    },\n    wc_sessionSettle: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1102\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1103\n        }\n    },\n    wc_sessionUpdate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1104\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1105\n        }\n    },\n    wc_sessionExtend: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1106\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1107\n        }\n    },\n    wc_sessionRequest: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1108\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1109\n        }\n    },\n    wc_sessionEvent: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !0,\n            tag: 1110\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1111\n        }\n    },\n    wc_sessionDelete: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1112\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1113\n        }\n    },\n    wc_sessionPing: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1114\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_DAY,\n            prompt: !1,\n            tag: 1115\n        }\n    },\n    wc_sessionAuthenticate: {\n        req: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_HOUR,\n            prompt: !0,\n            tag: 1116\n        },\n        res: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_HOUR,\n            prompt: !1,\n            tag: 1117\n        },\n        reject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1118\n        },\n        autoReject: {\n            ttl: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n            prompt: !1,\n            tag: 1119\n        }\n    }\n}, _e = {\n    min: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES,\n    max: _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.SEVEN_DAYS\n}, $ = {\n    idle: \"IDLE\",\n    active: \"ACTIVE\"\n}, Ke = {\n    eth_sendTransaction: {\n        key: \"\"\n    },\n    eth_sendRawTransaction: {\n        key: \"\"\n    },\n    wallet_sendCalls: {\n        key: \"\"\n    },\n    solana_signTransaction: {\n        key: \"signature\"\n    },\n    solana_signAllTransactions: {\n        key: \"transactions\"\n    },\n    solana_signAndSendTransaction: {\n        key: \"signature\"\n    }\n}, ut = \"request\", gt = [\n    \"wc_sessionPropose\",\n    \"wc_sessionRequest\",\n    \"wc_authRequest\",\n    \"wc_sessionAuthenticate\"\n], yt = \"wc\", Rs = 1.5, wt = \"auth\", mt = \"authKeys\", _t = \"pairingTopics\", Et = \"requests\", ae = `${yt}@${1.5}:${wt}:`, ce = `${ae}:PUB_KEY`;\nvar vs = Object.defineProperty, Is = Object.defineProperties, Ts = Object.getOwnPropertyDescriptors, ft = Object.getOwnPropertySymbols, qs = Object.prototype.hasOwnProperty, Ps = Object.prototype.propertyIsEnumerable, Ue = (S, n, e)=>n in S ? vs(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, v = (S, n)=>{\n    for(var e in n || (n = {}))qs.call(n, e) && Ue(S, e, n[e]);\n    if (ft) for (var e of ft(n))Ps.call(n, e) && Ue(S, e, n[e]);\n    return S;\n}, b = (S, n)=>Is(S, Ts(n)), c = (S, n, e)=>Ue(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Ns extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.IEngine {\n    constructor(n){\n        super(n), c(this, \"name\", dt), c(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_2___default())), c(this, \"initialized\", !1), c(this, \"requestQueue\", {\n            state: $.idle,\n            queue: []\n        }), c(this, \"sessionRequestQueue\", {\n            state: $.idle,\n            queue: []\n        }), c(this, \"requestQueueDelay\", _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_SECOND), c(this, \"expectedPairingMethodMap\", new Map), c(this, \"recentlyDeletedMap\", new Map), c(this, \"recentlyDeletedLimit\", 200), c(this, \"relayMessageCache\", []), c(this, \"pendingSessions\", new Map), c(this, \"init\", async ()=>{\n            this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({\n                methods: Object.keys(N)\n            }), this.initialized = !0, setTimeout(async ()=>{\n                await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.requestQueueDelay)));\n        }), c(this, \"connect\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            const t = b(v({}, e), {\n                requiredNamespaces: e.requiredNamespaces || {},\n                optionalNamespaces: e.optionalNamespaces || {}\n            });\n            await this.isValidConnect(t), t.optionalNamespaces = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeRequiredAndOptionalNamespaces)(t.requiredNamespaces, t.optionalNamespaces), t.requiredNamespaces = {};\n            const { pairingTopic: s, requiredNamespaces: i, optionalNamespaces: r, sessionProperties: o, scopedProperties: a, relays: l } = t;\n            let p = s, h, u = !1;\n            try {\n                if (p) {\n                    const T = this.client.core.pairing.pairings.get(p);\n                    this.client.logger.warn(\"connect() with existing pairing topic is deprecated and will be removed in the next major release.\"), u = T.active;\n                }\n            } catch (T) {\n                throw this.client.logger.error(`connect() -> pairing.get(${p}) failed`), T;\n            }\n            if (!p || !u) {\n                const { topic: T, uri: K } = await this.client.core.pairing.create();\n                p = T, h = K;\n            }\n            if (!p) {\n                const { message: T } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `connect() pairing topic: ${p}`);\n                throw new Error(T);\n            }\n            const d = await this.client.core.crypto.generateKeyPair(), w = N.wc_sessionPropose.req.ttl || _walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.FIVE_MINUTES, m = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(w), f = b(v(v({\n                requiredNamespaces: i,\n                optionalNamespaces: r,\n                relays: l ?? [\n                    {\n                        protocol: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_DEFAULT_PROTOCOL\n                    }\n                ],\n                proposer: {\n                    publicKey: d,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: m,\n                pairingTopic: p\n            }, o && {\n                sessionProperties: o\n            }), a && {\n                scopedProperties: a\n            }), {\n                id: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)()\n            }), _ = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", f.id), { reject: g, resolve: A, done: D } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(w, $e), I = ({ id: T })=>{\n                T === f.id && (this.client.events.off(\"proposal_expire\", I), this.pendingSessions.delete(f.id), this.events.emit(_, {\n                    error: {\n                        message: $e,\n                        code: 0\n                    }\n                }));\n            };\n            return this.client.events.on(\"proposal_expire\", I), this.events.once(_, ({ error: T, session: K })=>{\n                this.client.events.off(\"proposal_expire\", I), T ? g(T) : K && A(K);\n            }), await this.sendRequest({\n                topic: p,\n                method: \"wc_sessionPropose\",\n                params: f,\n                throwOnFailedPublish: !0,\n                clientRpcId: f.id\n            }), await this.setProposal(f.id, f), {\n                uri: h,\n                approval: D\n            };\n        }), c(this, \"pair\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                return await this.client.core.pairing.pair(e);\n            } catch (t) {\n                throw this.client.logger.error(\"pair() failed\"), t;\n            }\n        }), c(this, \"approve\", async (e)=>{\n            var t, s, i;\n            const r = this.client.core.eventClient.createEvent({\n                properties: {\n                    topic: (t = e?.id) == null ? void 0 : t.toString(),\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started\n                    ]\n                }\n            });\n            try {\n                this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            } catch (q) {\n                throw r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.no_internet_connection), q;\n            }\n            try {\n                await this.isValidProposalId(e?.id);\n            } catch (q) {\n                throw this.client.logger.error(`approve() -> proposal.get(${e?.id}) failed`), r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.proposal_not_found), q;\n            }\n            try {\n                await this.isValidApprove(e);\n            } catch (q) {\n                throw this.client.logger.error(\"approve() -> isValidApprove() failed\"), r.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_approve_namespace_validation_failure), q;\n            }\n            const { id: o, relayProtocol: a, namespaces: l, sessionProperties: p, scopedProperties: h, sessionConfig: u } = e, d = this.client.proposal.get(o);\n            this.client.core.eventClient.deleteEvent({\n                eventId: r.eventId\n            });\n            const { pairingTopic: w, proposer: m, requiredNamespaces: f, optionalNamespaces: _ } = d;\n            let g = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({\n                topic: w\n            });\n            g || (g = (i = this.client.core.eventClient) == null ? void 0 : i.createEvent({\n                type: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n                properties: {\n                    topic: w,\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_started,\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_namespaces_validation_success\n                    ]\n                }\n            }));\n            const A = await this.client.core.crypto.generateKeyPair(), D = m.publicKey, I = await this.client.core.crypto.generateSharedKey(A, D), T = v(v(v({\n                relay: {\n                    protocol: a ?? \"irn\"\n                },\n                namespaces: l,\n                controller: {\n                    publicKey: A,\n                    metadata: this.client.metadata\n                },\n                expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(J)\n            }, p && {\n                sessionProperties: p\n            }), h && {\n                scopedProperties: h\n            }), u && {\n                sessionConfig: u\n            }), K = _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            g.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.subscribing_session_topic);\n            try {\n                await this.client.core.relayer.subscribe(I, {\n                    transportType: K\n                });\n            } catch (q) {\n                throw g.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.subscribe_session_topic_failure), q;\n            }\n            g.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.subscribe_session_topic_success);\n            const fe = b(v({}, T), {\n                topic: I,\n                requiredNamespaces: f,\n                optionalNamespaces: _,\n                pairingTopic: w,\n                acknowledged: !1,\n                self: T.controller,\n                peer: {\n                    publicKey: m.publicKey,\n                    metadata: m.metadata\n                },\n                controller: A,\n                transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay\n            });\n            await this.client.session.set(I, fe), g.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.store_session);\n            try {\n                g.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.publishing_session_settle), await this.sendRequest({\n                    topic: I,\n                    method: \"wc_sessionSettle\",\n                    params: T,\n                    throwOnFailedPublish: !0\n                }).catch((q)=>{\n                    throw g?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_settle_publish_failure), q;\n                }), g.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_settle_publish_success), g.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.publishing_session_approve), await this.sendResult({\n                    id: o,\n                    topic: w,\n                    result: {\n                        relay: {\n                            protocol: a ?? \"irn\"\n                        },\n                        responderPublicKey: A\n                    },\n                    throwOnFailedPublish: !0\n                }).catch((q)=>{\n                    throw g?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.session_approve_publish_failure), q;\n                }), g.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_TRACES.session_approve_publish_success);\n            } catch (q) {\n                throw this.client.logger.error(q), this.client.session.delete(I, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.relayer.unsubscribe(I), q;\n            }\n            return this.client.core.eventClient.deleteEvent({\n                eventId: g.eventId\n            }), await this.client.core.pairing.updateMetadata({\n                topic: w,\n                metadata: m.metadata\n            }), await this.client.proposal.delete(o, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), await this.client.core.pairing.activate({\n                topic: w\n            }), await this.setExpiry(I, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(J)), {\n                topic: I,\n                acknowledged: ()=>Promise.resolve(this.client.session.get(I))\n            };\n        }), c(this, \"reject\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidReject(e);\n            } catch (r) {\n                throw this.client.logger.error(\"reject() -> isValidReject() failed\"), r;\n            }\n            const { id: t, reason: s } = e;\n            let i;\n            try {\n                i = this.client.proposal.get(t).pairingTopic;\n            } catch (r) {\n                throw this.client.logger.error(`reject() -> proposal.get(${t}) failed`), r;\n            }\n            i && (await this.sendError({\n                id: t,\n                topic: i,\n                error: s,\n                rpcOpts: N.wc_sessionPropose.reject\n            }), await this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")));\n        }), c(this, \"update\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidUpdate(e);\n            } catch (h) {\n                throw this.client.logger.error(\"update() -> isValidUpdate() failed\"), h;\n            }\n            const { topic: t, namespaces: s } = e, { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(), a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), p = this.client.session.get(t).namespaces;\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", a), ({ error: h })=>{\n                h ? o(h) : r();\n            }), await this.client.session.update(t, {\n                namespaces: s\n            }), await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionUpdate\",\n                params: {\n                    namespaces: s\n                },\n                throwOnFailedPublish: !0,\n                clientRpcId: a,\n                relayRpcId: l\n            }).catch((h)=>{\n                this.client.logger.error(h), this.client.session.update(t, {\n                    namespaces: p\n                }), o(h);\n            }), {\n                acknowledged: i\n            };\n        }), c(this, \"extend\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidExtend(e);\n            } catch (a) {\n                throw this.client.logger.error(\"extend() -> isValidExtend() failed\"), a;\n            }\n            const { topic: t } = e, s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), { done: i, resolve: r, reject: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n            return this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), ({ error: a })=>{\n                a ? o(a) : r();\n            }), await this.setExpiry(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(J)), this.sendRequest({\n                topic: t,\n                method: \"wc_sessionExtend\",\n                params: {},\n                clientRpcId: s,\n                throwOnFailedPublish: !0\n            }).catch((a)=>{\n                o(a);\n            }), {\n                acknowledged: i\n            };\n        }), c(this, \"request\", async (e)=>{\n            this.isInitialized();\n            try {\n                await this.isValidRequest(e);\n            } catch (_) {\n                throw this.client.logger.error(\"request() -> isValidRequest() failed\"), _;\n            }\n            const { chainId: t, request: s, topic: i, expiry: r = N.wc_sessionRequest.req.ttl } = e, o = this.client.session.get(i);\n            o?.transportType === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const a = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: p, resolve: h, reject: u } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(r, \"Request expired. Please try again.\");\n            this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", a), ({ error: _, result: g })=>{\n                _ ? u(_) : h(g);\n            });\n            const d = \"wc_sessionRequest\", w = this.getAppLinkIfEnabled(o.peer.metadata, o.transportType);\n            if (w) return await this.sendRequest({\n                clientRpcId: a,\n                relayRpcId: l,\n                topic: i,\n                method: d,\n                params: {\n                    request: b(v({}, s), {\n                        expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(r)\n                    }),\n                    chainId: t\n                },\n                expiry: r,\n                throwOnFailedPublish: !0,\n                appLink: w\n            }).catch((_)=>u(_)), this.client.events.emit(\"session_request_sent\", {\n                topic: i,\n                request: s,\n                chainId: t,\n                id: a\n            }), await p();\n            const m = {\n                request: b(v({}, s), {\n                    expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(r)\n                }),\n                chainId: t\n            }, f = this.shouldSetTVF(d, m);\n            return await Promise.all([\n                new Promise(async (_)=>{\n                    await this.sendRequest(v({\n                        clientRpcId: a,\n                        relayRpcId: l,\n                        topic: i,\n                        method: d,\n                        params: m,\n                        expiry: r,\n                        throwOnFailedPublish: !0\n                    }, f && {\n                        tvf: this.getTVFParams(a, m)\n                    })).catch((g)=>u(g)), this.client.events.emit(\"session_request_sent\", {\n                        topic: i,\n                        request: s,\n                        chainId: t,\n                        id: a\n                    }), _();\n                }),\n                new Promise(async (_)=>{\n                    var g;\n                    if (!((g = o.sessionConfig) != null && g.disableDeepLink)) {\n                        const A = await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDeepLink)(this.client.core.storage, Me);\n                        await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.handleDeeplinkRedirect)({\n                            id: a,\n                            topic: i,\n                            wcDeepLink: A\n                        });\n                    }\n                    _();\n                }),\n                p()\n            ]).then((_)=>_[2]);\n        }), c(this, \"respond\", async (e)=>{\n            this.isInitialized(), await this.isValidRespond(e);\n            const { topic: t, response: s } = e, { id: i } = s, r = this.client.session.get(t);\n            r.transportType === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const o = this.getAppLinkIfEnabled(r.peer.metadata, r.transportType);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(s) ? await this.sendResult({\n                id: i,\n                topic: t,\n                result: s.result,\n                throwOnFailedPublish: !0,\n                appLink: o\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(s) && await this.sendError({\n                id: i,\n                topic: t,\n                error: s.error,\n                appLink: o\n            }), this.cleanupAfterResponse(e);\n        }), c(this, \"ping\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow();\n            try {\n                await this.isValidPing(e);\n            } catch (s) {\n                throw this.client.logger.error(\"ping() -> isValidPing() failed\"), s;\n            }\n            const { topic: t } = e;\n            if (this.client.session.keys.includes(t)) {\n                const s = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), i = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), { done: r, resolve: o, reject: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)();\n                this.events.once((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), ({ error: l })=>{\n                    l ? a(l) : o();\n                }), await Promise.all([\n                    this.sendRequest({\n                        topic: t,\n                        method: \"wc_sessionPing\",\n                        params: {},\n                        throwOnFailedPublish: !0,\n                        clientRpcId: s,\n                        relayRpcId: i\n                    }),\n                    r()\n                ]);\n            } else this.client.core.pairing.pairings.keys.includes(t) && (this.client.logger.warn(\"ping() on pairing topic is deprecated and will be removed in the next major release.\"), await this.client.core.pairing.ping({\n                topic: t\n            }));\n        }), c(this, \"emit\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e);\n            const { topic: t, event: s, chainId: i } = e, r = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.getBigIntRpcId)().toString(), o = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)();\n            await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionEvent\",\n                params: {\n                    event: s,\n                    chainId: i\n                },\n                throwOnFailedPublish: !0,\n                relayRpcId: r,\n                clientRpcId: o\n            });\n        }), c(this, \"disconnect\", async (e)=>{\n            this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e);\n            const { topic: t } = e;\n            if (this.client.session.keys.includes(t)) await this.sendRequest({\n                topic: t,\n                method: \"wc_sessionDelete\",\n                params: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"),\n                throwOnFailedPublish: !0\n            }), await this.deleteSession({\n                topic: t,\n                emitEvent: !1\n            });\n            else if (this.client.core.pairing.pairings.keys.includes(t)) await this.client.core.pairing.disconnect({\n                topic: t\n            });\n            else {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISMATCHED_TOPIC\", `Session or pairing topic not found: ${t}`);\n                throw new Error(s);\n            }\n        }), c(this, \"find\", (e)=>(this.isInitialized(), this.client.session.getAll().filter((t)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isSessionCompatible)(t, e)))), c(this, \"getPendingSessionRequests\", ()=>this.client.pendingRequest.getAll()), c(this, \"authenticate\", async (e, t)=>{\n            var s;\n            this.isInitialized(), this.isValidAuthenticate(e);\n            const i = t && this.client.core.linkModeSupportedApps.includes(t) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode), r = i ? _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode : _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            r === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const { chains: o, statement: a = \"\", uri: l, domain: p, nonce: h, type: u, exp: d, nbf: w, methods: m = [], expiry: f } = e, _ = [\n                ...e.resources || []\n            ], { topic: g, uri: A } = await this.client.core.pairing.create({\n                methods: [\n                    \"wc_sessionAuthenticate\"\n                ],\n                transportType: r\n            });\n            this.client.logger.info({\n                message: \"Generated new pairing\",\n                pairing: {\n                    topic: g,\n                    uri: A\n                }\n            });\n            const D = await this.client.core.crypto.generateKeyPair(), I = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(D);\n            if (await Promise.all([\n                this.client.auth.authKeys.set(ce, {\n                    responseTopic: I,\n                    publicKey: D\n                }),\n                this.client.auth.pairingTopics.set(I, {\n                    topic: I,\n                    pairingTopic: g\n                })\n            ]), await this.client.core.relayer.subscribe(I, {\n                transportType: r\n            }), this.client.logger.info(`sending request to new pairing topic: ${g}`), m.length > 0) {\n                const { namespace: x } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(o[0]);\n                let L = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createEncodedRecap)(x, \"request\", m);\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(_) && (L = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeEncodedRecaps)(L, _.pop())), _.push(L);\n            }\n            const T = f && f > N.wc_sessionAuthenticate.req.ttl ? f : N.wc_sessionAuthenticate.req.ttl, K = {\n                authPayload: {\n                    type: u ?? \"caip122\",\n                    chains: o,\n                    statement: a,\n                    aud: l,\n                    domain: p,\n                    version: \"1\",\n                    nonce: h,\n                    iat: new Date().toISOString(),\n                    exp: d,\n                    nbf: w,\n                    resources: _\n                },\n                requester: {\n                    publicKey: D,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(T)\n            }, fe = {\n                eip155: {\n                    chains: o,\n                    methods: [\n                        ...new Set([\n                            \"personal_sign\",\n                            ...m\n                        ])\n                    ],\n                    events: [\n                        \"chainChanged\",\n                        \"accountsChanged\"\n                    ]\n                }\n            }, q = {\n                requiredNamespaces: {},\n                optionalNamespaces: fe,\n                relays: [\n                    {\n                        protocol: \"irn\"\n                    }\n                ],\n                pairingTopic: g,\n                proposer: {\n                    publicKey: D,\n                    metadata: this.client.metadata\n                },\n                expiryTimestamp: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl),\n                id: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)()\n            }, { done: Rt, resolve: je, reject: Se } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.createDelayedPromise)(T, \"Request expired\"), te = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.payloadId)(), le = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", q.id), Re = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", te), pe = async ({ error: x, session: L })=>{\n                this.events.off(Re, ve), x ? Se(x) : L && je({\n                    session: L\n                });\n            }, ve = async (x)=>{\n                var L, Fe, Qe;\n                if (await this.deletePendingAuthRequest(te, {\n                    message: \"fulfilled\",\n                    code: 0\n                }), x.error) {\n                    const ie = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n                    return x.error.code === ie.code ? void 0 : (this.events.off(le, pe), Se(x.error.message));\n                }\n                await this.deleteProposal(q.id), this.events.off(le, pe);\n                const { cacaos: He, responder: Q } = x.result, Te = [], ze = [];\n                for (const ie of He){\n                    await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                        cacao: ie,\n                        projectId: this.client.core.projectId\n                    }) || (this.client.logger.error(ie, \"Signature verification failed\"), Se((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\")));\n                    const { p: qe } = ie, Pe = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(qe.resources), Ye = [\n                        (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(qe.iss)\n                    ], vt = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(qe.iss);\n                    if (Pe) {\n                        const Ne = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(Pe), It = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(Pe);\n                        Te.push(...Ne), Ye.push(...It);\n                    }\n                    for (const Ne of Ye)ze.push(`${Ne}:${vt}`);\n                }\n                const se = await this.client.core.crypto.generateSharedKey(D, Q.publicKey);\n                let he;\n                Te.length > 0 && (he = {\n                    topic: se,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: D,\n                        metadata: this.client.metadata\n                    },\n                    peer: Q,\n                    controller: Q.publicKey,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(J),\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: g,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(Te)\n                    ], [\n                        ...new Set(ze)\n                    ]),\n                    transportType: r\n                }, await this.client.core.relayer.subscribe(se, {\n                    transportType: r\n                }), await this.client.session.set(se, he), g && await this.client.core.pairing.updateMetadata({\n                    topic: g,\n                    metadata: Q.metadata\n                }), he = this.client.session.get(se)), (L = this.client.metadata.redirect) != null && L.linkMode && (Fe = Q.metadata.redirect) != null && Fe.linkMode && (Qe = Q.metadata.redirect) != null && Qe.universal && t && (this.client.core.addLinkModeSupportedApp(Q.metadata.redirect.universal), this.client.session.update(se, {\n                    transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode\n                })), je({\n                    auths: He,\n                    session: he\n                });\n            };\n            this.events.once(le, pe), this.events.once(Re, ve);\n            let Ie;\n            try {\n                if (i) {\n                    const x = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionAuthenticate\", K, te);\n                    this.client.core.history.set(g, x);\n                    const L = await this.client.core.crypto.encode(\"\", x, {\n                        type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_2,\n                        encoding: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL\n                    });\n                    Ie = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(t, g, L);\n                } else await Promise.all([\n                    this.sendRequest({\n                        topic: g,\n                        method: \"wc_sessionAuthenticate\",\n                        params: K,\n                        expiry: e.expiry,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: te\n                    }),\n                    this.sendRequest({\n                        topic: g,\n                        method: \"wc_sessionPropose\",\n                        params: q,\n                        expiry: N.wc_sessionPropose.req.ttl,\n                        throwOnFailedPublish: !0,\n                        clientRpcId: q.id\n                    })\n                ]);\n            } catch (x) {\n                throw this.events.off(le, pe), this.events.off(Re, ve), x;\n            }\n            return await this.setProposal(q.id, q), await this.setAuthRequest(te, {\n                request: b(v({}, K), {\n                    verifyContext: {}\n                }),\n                pairingTopic: g,\n                transportType: r\n            }), {\n                uri: Ie ?? A,\n                response: Rt\n            };\n        }), c(this, \"approveSessionAuthenticate\", async (e)=>{\n            const { id: t, auths: s } = e, i = this.client.core.eventClient.createEvent({\n                properties: {\n                    topic: t.toString(),\n                    trace: [\n                        _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.authenticated_session_approve_started\n                    ]\n                }\n            });\n            try {\n                this.isInitialized();\n            } catch (f) {\n                throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.no_internet_connection), f;\n            }\n            const r = this.getPendingAuthRequest(t);\n            if (!r) throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t}`);\n            const o = r.transportType || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay;\n            o === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const a = r.requester.publicKey, l = await this.client.core.crypto.generateKeyPair(), p = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(a), h = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: a,\n                senderPublicKey: l\n            }, u = [], d = [];\n            for (const f of s){\n                if (!await (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.validateSignedCacao)({\n                    cacao: f,\n                    projectId: this.client.core.projectId\n                })) {\n                    i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.invalid_cacao);\n                    const I = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\");\n                    throw await this.sendError({\n                        id: t,\n                        topic: p,\n                        error: I,\n                        encodeOpts: h\n                    }), new Error(I.message);\n                }\n                i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.cacaos_verified);\n                const { p: _ } = f, g = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getRecapFromResources)(_.resources), A = [\n                    (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getNamespacedDidChainId)(_.iss)\n                ], D = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getDidAddress)(_.iss);\n                if (g) {\n                    const I = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getMethodsFromRecap)(g), T = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getChainsFromRecap)(g);\n                    u.push(...I), A.push(...T);\n                }\n                for (const I of A)d.push(`${I}:${D}`);\n            }\n            const w = await this.client.core.crypto.generateSharedKey(l, a);\n            i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.create_authenticated_session_topic);\n            let m;\n            if (u?.length > 0) {\n                m = {\n                    topic: w,\n                    acknowledged: !0,\n                    self: {\n                        publicKey: l,\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: a,\n                        metadata: r.requester.metadata\n                    },\n                    controller: a,\n                    expiry: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(J),\n                    authentication: s,\n                    requiredNamespaces: {},\n                    optionalNamespaces: {},\n                    relay: {\n                        protocol: \"irn\"\n                    },\n                    pairingTopic: r.pairingTopic,\n                    namespaces: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.buildNamespacesFromAuth)([\n                        ...new Set(u)\n                    ], [\n                        ...new Set(d)\n                    ]),\n                    transportType: o\n                }, i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribing_authenticated_session_topic);\n                try {\n                    await this.client.core.relayer.subscribe(w, {\n                        transportType: o\n                    });\n                } catch (f) {\n                    throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.subscribe_authenticated_session_topic_failure), f;\n                }\n                i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.subscribe_authenticated_session_topic_success), await this.client.session.set(w, m), i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.store_authenticated_session), await this.client.core.pairing.updateMetadata({\n                    topic: r.pairingTopic,\n                    metadata: r.requester.metadata\n                });\n            }\n            i.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_TRACES.publishing_authenticated_session_approve);\n            try {\n                await this.sendResult({\n                    topic: p,\n                    id: t,\n                    result: {\n                        cacaos: s,\n                        responder: {\n                            publicKey: l,\n                            metadata: this.client.metadata\n                        }\n                    },\n                    encodeOpts: h,\n                    throwOnFailedPublish: !0,\n                    appLink: this.getAppLinkIfEnabled(r.requester.metadata, o)\n                });\n            } catch (f) {\n                throw i.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_AUTHENTICATE_ERRORS.authenticated_session_approve_publish_failure), f;\n            }\n            return await this.client.auth.requests.delete(t, {\n                message: \"fulfilled\",\n                code: 0\n            }), await this.client.core.pairing.activate({\n                topic: r.pairingTopic\n            }), this.client.core.eventClient.deleteEvent({\n                eventId: i.eventId\n            }), {\n                session: m\n            };\n        }), c(this, \"rejectSessionAuthenticate\", async (e)=>{\n            this.isInitialized();\n            const { id: t, reason: s } = e, i = this.getPendingAuthRequest(t);\n            if (!i) throw new Error(`Could not find pending auth request with id ${t}`);\n            i.transportType === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay && await this.confirmOnlineStateOrThrow();\n            const r = i.requester.publicKey, o = await this.client.core.crypto.generateKeyPair(), a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashKey)(r), l = {\n                type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                receiverPublicKey: r,\n                senderPublicKey: o\n            };\n            await this.sendError({\n                id: t,\n                topic: a,\n                error: s,\n                encodeOpts: l,\n                rpcOpts: N.wc_sessionAuthenticate.reject,\n                appLink: this.getAppLinkIfEnabled(i.requester.metadata, i.transportType)\n            }), await this.client.auth.requests.delete(t, {\n                message: \"rejected\",\n                code: 0\n            }), await this.client.proposal.delete(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n        }), c(this, \"formatAuthMessage\", (e)=>{\n            this.isInitialized();\n            const { request: t, iss: s } = e;\n            return (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.formatMessage)(t, s);\n        }), c(this, \"processRelayMessageCache\", ()=>{\n            setTimeout(async ()=>{\n                if (this.relayMessageCache.length !== 0) for(; this.relayMessageCache.length > 0;)try {\n                    const e = this.relayMessageCache.shift();\n                    e && await this.onRelayMessage(e);\n                } catch (e) {\n                    this.client.logger.error(e);\n                }\n            }, 50);\n        }), c(this, \"cleanupDuplicatePairings\", async (e)=>{\n            if (e.pairingTopic) try {\n                const t = this.client.core.pairing.pairings.get(e.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i)=>{\n                    var r, o;\n                    return ((r = i.peerMetadata) == null ? void 0 : r.url) && ((o = i.peerMetadata) == null ? void 0 : o.url) === e.peer.metadata.url && i.topic && i.topic !== t.topic;\n                });\n                if (s.length === 0) return;\n                this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`), await Promise.all(s.map((i)=>this.client.core.pairing.disconnect({\n                        topic: i.topic\n                    }))), this.client.logger.info(\"Duplicate pairings clean up finished\");\n            } catch (t) {\n                this.client.logger.error(t);\n            }\n        }), c(this, \"deleteSession\", async (e)=>{\n            var t;\n            const { topic: s, expirerHasDeleted: i = !1, emitEvent: r = !0, id: o = 0 } = e, { self: a } = this.client.session.get(s);\n            await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.addToRecentlyDeleted(s, \"session\"), this.client.core.crypto.keychain.has(a.publicKey) && await this.client.core.crypto.deleteKeyPair(a.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i || this.client.core.expirer.del(s), this.client.core.storage.removeItem(Me).catch((l)=>this.client.logger.warn(l)), this.getPendingSessionRequests().forEach((l)=>{\n                l.topic === s && this.deletePendingSessionRequest(l.id, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n            }), s === ((t = this.sessionRequestQueue.queue[0]) == null ? void 0 : t.topic) && (this.sessionRequestQueue.state = $.idle), r && this.client.events.emit(\"session_delete\", {\n                id: o,\n                topic: s\n            });\n        }), c(this, \"deleteProposal\", async (e, t)=>{\n            if (t) try {\n                const s = this.client.proposal.get(e), i = this.client.core.eventClient.getEvent({\n                    topic: s.pairingTopic\n                });\n                i?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_SESSION_ERRORS.proposal_expired);\n            } catch  {}\n            await Promise.all([\n                this.client.proposal.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")),\n                t ? Promise.resolve() : this.client.core.expirer.del(e)\n            ]), this.addToRecentlyDeleted(e, \"proposal\");\n        }), c(this, \"deletePendingSessionRequest\", async (e, t, s = !1)=>{\n            await Promise.all([\n                this.client.pendingRequest.delete(e, t),\n                s ? Promise.resolve() : this.client.core.expirer.del(e)\n            ]), this.addToRecentlyDeleted(e, \"request\"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i)=>i.id !== e), s && (this.sessionRequestQueue.state = $.idle, this.client.events.emit(\"session_request_expire\", {\n                id: e\n            }));\n        }), c(this, \"deletePendingAuthRequest\", async (e, t, s = !1)=>{\n            await Promise.all([\n                this.client.auth.requests.delete(e, t),\n                s ? Promise.resolve() : this.client.core.expirer.del(e)\n            ]);\n        }), c(this, \"setExpiry\", async (e, t)=>{\n            this.client.session.keys.includes(e) && (this.client.core.expirer.set(e, t), await this.client.session.update(e, {\n                expiry: t\n            }));\n        }), c(this, \"setProposal\", async (e, t)=>{\n            this.client.core.expirer.set(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e, t);\n        }), c(this, \"setAuthRequest\", async (e, t)=>{\n            const { request: s, pairingTopic: i, transportType: r = _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay } = t;\n            this.client.core.expirer.set(e, s.expiryTimestamp), await this.client.auth.requests.set(e, {\n                authPayload: s.authPayload,\n                requester: s.requester,\n                expiryTimestamp: s.expiryTimestamp,\n                id: e,\n                pairingTopic: i,\n                verifyContext: s.verifyContext,\n                transportType: r\n            });\n        }), c(this, \"setPendingSessionRequest\", async (e)=>{\n            const { id: t, topic: s, params: i, verifyContext: r } = e, o = i.request.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionRequest.req.ttl);\n            this.client.core.expirer.set(t, o), await this.client.pendingRequest.set(t, {\n                id: t,\n                topic: s,\n                params: i,\n                verifyContext: r\n            });\n        }), c(this, \"sendRequest\", async (e)=>{\n            const { topic: t, method: s, params: i, expiry: r, relayRpcId: o, clientRpcId: a, throwOnFailedPublish: l, appLink: p, tvf: h } = e, u = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(s, i, a);\n            let d;\n            const w = !!p;\n            try {\n                const _ = w ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                d = await this.client.core.crypto.encode(t, u, {\n                    encoding: _\n                });\n            } catch (_) {\n                throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`), _;\n            }\n            let m;\n            if (gt.includes(s)) {\n                const _ = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(u)), g = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(d);\n                m = await this.client.core.verify.register({\n                    id: g,\n                    decryptedId: _\n                });\n            }\n            const f = N[s].req;\n            if (f.attestation = m, r && (f.ttl = r), o && (f.id = o), this.client.core.history.set(t, u), w) {\n                const _ = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(p, t, d);\n                await global.Linking.openURL(_, this.client.name);\n            } else {\n                const _ = N[s].req;\n                r && (_.ttl = r), o && (_.id = o), _.tvf = b(v({}, h), {\n                    correlationId: u.id\n                }), l ? (_.internal = b(v({}, _.internal), {\n                    throwOnFailedPublish: !0\n                }), await this.client.core.relayer.publish(t, d, _)) : this.client.core.relayer.publish(t, d, _).catch((g)=>this.client.logger.error(g));\n            }\n            return u.id;\n        }), c(this, \"sendResult\", async (e)=>{\n            const { id: t, topic: s, result: i, throwOnFailedPublish: r, encodeOpts: o, appLink: a } = e, l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(t, i);\n            let p;\n            const h = a && typeof (global == null ? void 0 : global.Linking) < \"u\";\n            try {\n                const w = h ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                p = await this.client.core.crypto.encode(s, l, b(v({}, o || {}), {\n                    encoding: w\n                }));\n            } catch (w) {\n                throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), w;\n            }\n            let u, d;\n            try {\n                u = await this.client.core.history.get(s, t);\n                const w = u.request;\n                try {\n                    this.shouldSetTVF(w.method, w.params) && (d = this.getTVFParams(t, w.params, i));\n                } catch (m) {\n                    this.client.logger.warn(\"sendResult() -> getTVFParams() failed\", m);\n                }\n            } catch (w) {\n                throw this.client.logger.error(`sendResult() -> history.get(${s}, ${t}) failed`), w;\n            }\n            if (h) {\n                const w = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(a, s, p);\n                await global.Linking.openURL(w, this.client.name);\n            } else {\n                const w = u.request.method, m = N[w].res;\n                m.tvf = b(v({}, d), {\n                    correlationId: t\n                }), r ? (m.internal = b(v({}, m.internal), {\n                    throwOnFailedPublish: !0\n                }), await this.client.core.relayer.publish(s, p, m)) : this.client.core.relayer.publish(s, p, m).catch((f)=>this.client.logger.error(f));\n            }\n            await this.client.core.history.resolve(l);\n        }), c(this, \"sendError\", async (e)=>{\n            const { id: t, topic: s, error: i, encodeOpts: r, rpcOpts: o, appLink: a } = e, l = (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcError)(t, i);\n            let p;\n            const h = a && typeof (global == null ? void 0 : global.Linking) < \"u\";\n            try {\n                const d = h ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64;\n                p = await this.client.core.crypto.encode(s, l, b(v({}, r || {}), {\n                    encoding: d\n                }));\n            } catch (d) {\n                throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), d;\n            }\n            let u;\n            try {\n                u = await this.client.core.history.get(s, t);\n            } catch (d) {\n                throw this.client.logger.error(`sendError() -> history.get(${s}, ${t}) failed`), d;\n            }\n            if (h) {\n                const d = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getLinkModeURL)(a, s, p);\n                await global.Linking.openURL(d, this.client.name);\n            } else {\n                const d = u.request.method, w = o || N[d].res;\n                this.client.core.relayer.publish(s, p, w);\n            }\n            await this.client.core.history.resolve(l);\n        }), c(this, \"cleanup\", async ()=>{\n            const e = [], t = [];\n            this.client.session.getAll().forEach((s)=>{\n                let i = !1;\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiry) && (i = !0), this.client.core.crypto.keychain.has(s.topic) || (i = !0), i && e.push(s.topic);\n            }), this.client.proposal.getAll().forEach((s)=>{\n                (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(s.expiryTimestamp) && t.push(s.id);\n            }), await Promise.all([\n                ...e.map((s)=>this.deleteSession({\n                        topic: s\n                    })),\n                ...t.map((s)=>this.deleteProposal(s))\n            ]);\n        }), c(this, \"onProviderMessageEvent\", async (e)=>{\n            !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(e) : await this.onRelayMessage(e);\n        }), c(this, \"onRelayEventRequest\", async (e)=>{\n            this.requestQueue.queue.push(e), await this.processRequestsQueue();\n        }), c(this, \"processRequestsQueue\", async ()=>{\n            if (this.requestQueue.state === $.active) {\n                this.client.logger.info(\"Request queue already active, skipping...\");\n                return;\n            }\n            for(this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0;){\n                this.requestQueue.state = $.active;\n                const e = this.requestQueue.queue.shift();\n                if (e) try {\n                    await this.processRequest(e);\n                } catch (t) {\n                    this.client.logger.warn(t);\n                }\n            }\n            this.requestQueue.state = $.idle;\n        }), c(this, \"processRequest\", async (e)=>{\n            const { topic: t, payload: s, attestation: i, transportType: r, encryptedId: o } = e, a = s.method;\n            if (!this.shouldIgnorePairingRequest({\n                topic: t,\n                requestMethod: a\n            })) switch(a){\n                case \"wc_sessionPropose\":\n                    return await this.onSessionProposeRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o\n                    });\n                case \"wc_sessionSettle\":\n                    return await this.onSessionSettleRequest(t, s);\n                case \"wc_sessionUpdate\":\n                    return await this.onSessionUpdateRequest(t, s);\n                case \"wc_sessionExtend\":\n                    return await this.onSessionExtendRequest(t, s);\n                case \"wc_sessionPing\":\n                    return await this.onSessionPingRequest(t, s);\n                case \"wc_sessionDelete\":\n                    return await this.onSessionDeleteRequest(t, s);\n                case \"wc_sessionRequest\":\n                    return await this.onSessionRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o,\n                        transportType: r\n                    });\n                case \"wc_sessionEvent\":\n                    return await this.onSessionEventRequest(t, s);\n                case \"wc_sessionAuthenticate\":\n                    return await this.onSessionAuthenticateRequest({\n                        topic: t,\n                        payload: s,\n                        attestation: i,\n                        encryptedId: o,\n                        transportType: r\n                    });\n                default:\n                    return this.client.logger.info(`Unsupported request method ${a}`);\n            }\n        }), c(this, \"onRelayEventResponse\", async (e)=>{\n            const { topic: t, payload: s, transportType: i } = e, r = (await this.client.core.history.get(t, s.id)).request.method;\n            switch(r){\n                case \"wc_sessionPropose\":\n                    return this.onSessionProposeResponse(t, s, i);\n                case \"wc_sessionSettle\":\n                    return this.onSessionSettleResponse(t, s);\n                case \"wc_sessionUpdate\":\n                    return this.onSessionUpdateResponse(t, s);\n                case \"wc_sessionExtend\":\n                    return this.onSessionExtendResponse(t, s);\n                case \"wc_sessionPing\":\n                    return this.onSessionPingResponse(t, s);\n                case \"wc_sessionRequest\":\n                    return this.onSessionRequestResponse(t, s);\n                case \"wc_sessionAuthenticate\":\n                    return this.onSessionAuthenticateResponse(t, s);\n                default:\n                    return this.client.logger.info(`Unsupported response method ${r}`);\n            }\n        }), c(this, \"onRelayEventUnknownPayload\", (e)=>{\n            const { topic: t } = e, { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);\n            throw new Error(s);\n        }), c(this, \"shouldIgnorePairingRequest\", (e)=>{\n            const { topic: t, requestMethod: s } = e, i = this.expectedPairingMethodMap.get(t);\n            return !i || i.includes(s) ? !1 : !!(i.includes(\"wc_sessionAuthenticate\") && this.client.events.listenerCount(\"session_authenticate\") > 0);\n        }), c(this, \"onSessionProposeRequest\", async (e)=>{\n            const { topic: t, payload: s, attestation: i, encryptedId: r } = e, { params: o, id: a } = s;\n            try {\n                const l = this.client.core.eventClient.getEvent({\n                    topic: t\n                });\n                this.client.events.listenerCount(\"session_proposal\") === 0 && (console.warn(\"No listener for session_proposal event\"), l?.setError(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_PAIRING_ERRORS.proposal_listener_not_found)), this.isValidConnect(v({}, s.params));\n                const p = o.expiryTimestamp || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(N.wc_sessionPropose.req.ttl), h = v({\n                    id: a,\n                    pairingTopic: t,\n                    expiryTimestamp: p\n                }, o);\n                await this.setProposal(a, h);\n                const u = await this.getVerifyContext({\n                    attestationId: i,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(s)),\n                    encryptedId: r,\n                    metadata: h.proposer.metadata\n                });\n                l?.addTrace(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EVENT_CLIENT_PAIRING_TRACES.emit_session_proposal), this.client.events.emit(\"session_proposal\", {\n                    id: a,\n                    params: h,\n                    verifyContext: u\n                });\n            } catch (l) {\n                await this.sendError({\n                    id: a,\n                    topic: t,\n                    error: l,\n                    rpcOpts: N.wc_sessionPropose.autoReject\n                }), this.client.logger.error(l);\n            }\n        }), c(this, \"onSessionProposeResponse\", async (e, t, s)=>{\n            const { id: i } = t;\n            if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t)) {\n                const { result: r } = t;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    result: r\n                });\n                const o = this.client.proposal.get(i);\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    proposal: o\n                });\n                const a = o.proposer.publicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    selfPublicKey: a\n                });\n                const l = r.responderPublicKey;\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    peerPublicKey: l\n                });\n                const p = await this.client.core.crypto.generateSharedKey(a, l);\n                this.pendingSessions.set(i, {\n                    sessionTopic: p,\n                    pairingTopic: e,\n                    proposalId: i,\n                    publicKey: a\n                });\n                const h = await this.client.core.relayer.subscribe(p, {\n                    transportType: s\n                });\n                this.client.logger.trace({\n                    type: \"method\",\n                    method: \"onSessionProposeResponse\",\n                    subscriptionId: h\n                }), await this.client.core.pairing.activate({\n                    topic: e\n                });\n            } else if ((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t)) {\n                await this.client.proposal.delete(i, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\"));\n                const r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", i);\n                if (this.events.listenerCount(r) === 0) throw new Error(`emitting ${r} without any listeners, 954`);\n                this.events.emit(r, {\n                    error: t.error\n                });\n            }\n        }), c(this, \"onSessionSettleRequest\", async (e, t)=>{\n            const { id: s, params: i } = t;\n            try {\n                this.isValidSessionSettleRequest(i);\n                const { relay: r, controller: o, expiry: a, namespaces: l, sessionProperties: p, scopedProperties: h, sessionConfig: u } = t.params, d = [\n                    ...this.pendingSessions.values()\n                ].find((f)=>f.sessionTopic === e);\n                if (!d) return this.client.logger.error(`Pending session not found for topic ${e}`);\n                const w = this.client.proposal.get(d.proposalId), m = b(v(v(v({\n                    topic: e,\n                    relay: r,\n                    expiry: a,\n                    namespaces: l,\n                    acknowledged: !0,\n                    pairingTopic: d.pairingTopic,\n                    requiredNamespaces: w.requiredNamespaces,\n                    optionalNamespaces: w.optionalNamespaces,\n                    controller: o.publicKey,\n                    self: {\n                        publicKey: d.publicKey,\n                        metadata: this.client.metadata\n                    },\n                    peer: {\n                        publicKey: o.publicKey,\n                        metadata: o.metadata\n                    }\n                }, p && {\n                    sessionProperties: p\n                }), h && {\n                    scopedProperties: h\n                }), u && {\n                    sessionConfig: u\n                }), {\n                    transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.relay\n                });\n                await this.client.session.set(m.topic, m), await this.setExpiry(m.topic, m.expiry), await this.client.core.pairing.updateMetadata({\n                    topic: d.pairingTopic,\n                    metadata: m.peer.metadata\n                }), this.client.events.emit(\"session_connect\", {\n                    session: m\n                }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_connect\", d.proposalId), {\n                    session: m\n                }), this.pendingSessions.delete(d.proposalId), this.deleteProposal(d.proposalId, !1), this.cleanupDuplicatePairings(m), await this.sendResult({\n                    id: t.id,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"onSessionSettleResponse\", async (e, t)=>{\n            const { id: s } = t;\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? (await this.client.session.update(e, {\n                acknowledged: !0\n            }), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {})) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && (await this.client.session.delete(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_approve\", s), {\n                error: t.error\n            }));\n        }), c(this, \"onSessionUpdateRequest\", async (e, t)=>{\n            const { params: s, id: i } = t;\n            try {\n                const r = `${e}_session_update`, o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, i)) {\n                    this.client.logger.warn(`Discarding out of sync request - ${i}`), this.sendError({\n                        id: i,\n                        topic: e,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"INVALID_UPDATE_REQUEST\")\n                    });\n                    return;\n                }\n                this.isValidUpdate(v({\n                    topic: e\n                }, s));\n                try {\n                    _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, i), await this.client.session.update(e, {\n                        namespaces: s.namespaces\n                    }), await this.sendResult({\n                        id: i,\n                        topic: e,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    });\n                } catch (a) {\n                    throw _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.delete(r), a;\n                }\n                this.client.events.emit(\"session_update\", {\n                    id: i,\n                    topic: e,\n                    params: s\n                });\n            } catch (r) {\n                await this.sendError({\n                    id: i,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"isRequestOutOfSync\", (e, t)=>t.toString().slice(0, -3) < e.toString().slice(0, -3)), c(this, \"onSessionUpdateResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_update\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionExtendRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidExtend({\n                    topic: e\n                }), await this.setExpiry(e, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.calcExpiry)(J)), await this.sendResult({\n                    id: s,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_extend\", {\n                    id: s,\n                    topic: e\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionExtendResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_extend\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionPingRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidPing({\n                    topic: e\n                }), await this.sendResult({\n                    id: s,\n                    topic: e,\n                    result: !0,\n                    throwOnFailedPublish: !0\n                }), this.client.events.emit(\"session_ping\", {\n                    id: s,\n                    topic: e\n                });\n            } catch (i) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: i\n                }), this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionPingResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s);\n            setTimeout(()=>{\n                if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners 2176`);\n                (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {}) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_ping\", s), {\n                    error: t.error\n                });\n            }, 500);\n        }), c(this, \"onSessionDeleteRequest\", async (e, t)=>{\n            const { id: s } = t;\n            try {\n                this.isValidDisconnect({\n                    topic: e,\n                    reason: t.params\n                }), Promise.all([\n                    new Promise((i)=>{\n                        this.client.core.relayer.once(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.publish, async ()=>{\n                            i(await this.deleteSession({\n                                topic: e,\n                                id: s\n                            }));\n                        });\n                    }),\n                    this.sendResult({\n                        id: s,\n                        topic: e,\n                        result: !0,\n                        throwOnFailedPublish: !0\n                    }),\n                    this.cleanupPendingSentRequestsForTopic({\n                        topic: e,\n                        error: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n                    })\n                ]).catch((i)=>this.client.logger.error(i));\n            } catch (i) {\n                this.client.logger.error(i);\n            }\n        }), c(this, \"onSessionRequest\", async (e)=>{\n            var t, s, i;\n            const { topic: r, payload: o, attestation: a, encryptedId: l, transportType: p } = e, { id: h, params: u } = o;\n            try {\n                await this.isValidRequest(v({\n                    topic: r\n                }, u));\n                const d = this.client.session.get(r), w = await this.getVerifyContext({\n                    attestationId: a,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionRequest\", u, h))),\n                    encryptedId: l,\n                    metadata: d.peer.metadata,\n                    transportType: p\n                }), m = {\n                    id: h,\n                    topic: r,\n                    params: u,\n                    verifyContext: w\n                };\n                await this.setPendingSessionRequest(m), p === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode && (t = d.peer.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp((s = d.peer.metadata.redirect) == null ? void 0 : s.universal), (i = this.client.signConfig) != null && i.disableRequestQueue ? this.emitSessionRequest(m) : (this.addSessionRequestToSessionRequestQueue(m), this.processSessionRequestQueue());\n            } catch (d) {\n                await this.sendError({\n                    id: h,\n                    topic: r,\n                    error: d\n                }), this.client.logger.error(d);\n            }\n        }), c(this, \"onSessionRequestResponse\", (e, t)=>{\n            const { id: s } = t, i = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s);\n            if (this.events.listenerCount(i) === 0) throw new Error(`emitting ${i} without any listeners`);\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: t.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionEventRequest\", async (e, t)=>{\n            const { id: s, params: i } = t;\n            try {\n                const r = `${e}_session_event_${i.event.name}`, o = _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.get(r);\n                if (o && this.isRequestOutOfSync(o, s)) {\n                    this.client.logger.info(`Discarding out of sync request - ${s}`);\n                    return;\n                }\n                this.isValidEmit(v({\n                    topic: e\n                }, i)), this.client.events.emit(\"session_event\", {\n                    id: s,\n                    topic: e,\n                    params: i\n                }), _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.MemoryStore.set(r, s);\n            } catch (r) {\n                await this.sendError({\n                    id: s,\n                    topic: e,\n                    error: r\n                }), this.client.logger.error(r);\n            }\n        }), c(this, \"onSessionAuthenticateResponse\", (e, t)=>{\n            const { id: s } = t;\n            this.client.logger.trace({\n                type: \"method\",\n                method: \"onSessionAuthenticateResponse\",\n                topic: e,\n                payload: t\n            }), (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResult)(t) ? this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                result: t.result\n            }) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcError)(t) && this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", s), {\n                error: t.error\n            });\n        }), c(this, \"onSessionAuthenticateRequest\", async (e)=>{\n            var t;\n            const { topic: s, payload: i, attestation: r, encryptedId: o, transportType: a } = e;\n            try {\n                const { requester: l, authPayload: p, expiryTimestamp: h } = i.params, u = await this.getVerifyContext({\n                    attestationId: r,\n                    hash: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(JSON.stringify(i)),\n                    encryptedId: o,\n                    metadata: l.metadata,\n                    transportType: a\n                }), d = {\n                    requester: l,\n                    pairingTopic: s,\n                    id: i.id,\n                    authPayload: p,\n                    verifyContext: u,\n                    expiryTimestamp: h\n                };\n                await this.setAuthRequest(i.id, {\n                    request: d,\n                    pairingTopic: s,\n                    transportType: a\n                }), a === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode && (t = l.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp(l.metadata.redirect.universal), this.client.events.emit(\"session_authenticate\", {\n                    topic: s,\n                    params: i.params,\n                    id: i.id,\n                    verifyContext: u\n                });\n            } catch (l) {\n                this.client.logger.error(l);\n                const p = i.params.requester.publicKey, h = await this.client.core.crypto.generateKeyPair(), u = this.getAppLinkIfEnabled(i.params.requester.metadata, a), d = {\n                    type: _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.TYPE_1,\n                    receiverPublicKey: p,\n                    senderPublicKey: h\n                };\n                await this.sendError({\n                    id: i.id,\n                    topic: s,\n                    error: l,\n                    encodeOpts: d,\n                    rpcOpts: N.wc_sessionAuthenticate.autoReject,\n                    appLink: u\n                });\n            }\n        }), c(this, \"addSessionRequestToSessionRequestQueue\", (e)=>{\n            this.sessionRequestQueue.queue.push(e);\n        }), c(this, \"cleanupAfterResponse\", (e)=>{\n            this.deletePendingSessionRequest(e.response.id, {\n                message: \"fulfilled\",\n                code: 0\n            }), setTimeout(()=>{\n                this.sessionRequestQueue.state = $.idle, this.processSessionRequestQueue();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(this.requestQueueDelay));\n        }), c(this, \"cleanupPendingSentRequestsForTopic\", ({ topic: e, error: t })=>{\n            const s = this.client.core.history.pending;\n            s.length > 0 && s.filter((i)=>i.topic === e && i.request.method === \"wc_sessionRequest\").forEach((i)=>{\n                const r = i.request.id, o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", r);\n                if (this.events.listenerCount(o) === 0) throw new Error(`emitting ${o} without any listeners`);\n                this.events.emit((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.engineEvent)(\"session_request\", i.request.id), {\n                    error: t\n                });\n            });\n        }), c(this, \"processSessionRequestQueue\", ()=>{\n            if (this.sessionRequestQueue.state === $.active) {\n                this.client.logger.info(\"session request queue is already active.\");\n                return;\n            }\n            const e = this.sessionRequestQueue.queue[0];\n            if (!e) {\n                this.client.logger.info(\"session request queue is empty.\");\n                return;\n            }\n            try {\n                this.sessionRequestQueue.state = $.active, this.emitSessionRequest(e);\n            } catch (t) {\n                this.client.logger.error(t);\n            }\n        }), c(this, \"emitSessionRequest\", (e)=>{\n            this.client.events.emit(\"session_request\", e);\n        }), c(this, \"onPairingCreated\", (e)=>{\n            if (e.methods && this.expectedPairingMethodMap.set(e.topic, e.methods), e.active) return;\n            const t = this.client.proposal.getAll().find((s)=>s.pairingTopic === e.topic);\n            t && this.onSessionProposeRequest({\n                topic: e.topic,\n                payload: (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"wc_sessionPropose\", b(v({}, t), {\n                    requiredNamespaces: t.requiredNamespaces,\n                    optionalNamespaces: t.optionalNamespaces,\n                    relays: t.relays,\n                    proposer: t.proposer,\n                    sessionProperties: t.sessionProperties,\n                    scopedProperties: t.scopedProperties\n                }), t.id)\n            });\n        }), c(this, \"isValidConnect\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `connect() params: ${JSON.stringify(e)}`);\n                throw new Error(l);\n            }\n            const { pairingTopic: t, requiredNamespaces: s, optionalNamespaces: i, sessionProperties: r, scopedProperties: o, relays: a } = e;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(t) || await this.isValidPairingTopic(t), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelays)(a, !0)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `connect() relays: ${a}`);\n                throw new Error(l);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(s) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(s) !== 0) {\n                const l = \"requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces\";\n                [\n                    \"fatal\",\n                    \"error\",\n                    \"silent\"\n                ].includes(this.client.logger.level) ? console.warn(l) : this.client.logger.warn(l), this.validateNamespaces(s, \"requiredNamespaces\");\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(i) && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(i) !== 0 && this.validateNamespaces(i, \"optionalNamespaces\"), (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\"), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(o)) {\n                this.validateSessionProps(o, \"scopedProperties\");\n                const l = Object.keys(s || {}).concat(Object.keys(i || {}));\n                if (!Object.keys(o).every((p)=>l.includes(p))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(o)}, required/optional namespaces: ${JSON.stringify(l)}`);\n            }\n        }), c(this, \"validateNamespaces\", (e, t)=>{\n            const s = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequiredNamespaces)(e, \"connect()\", t);\n            if (s) throw new Error(s.message);\n        }), c(this, \"isValidApprove\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `approve() params: ${e}`).message);\n            const { id: t, namespaces: s, relayProtocol: i, sessionProperties: r, scopedProperties: o } = e;\n            this.checkRecentlyDeleted(t), await this.isValidProposalId(t);\n            const a = this.client.proposal.get(t), l = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"approve()\");\n            if (l) throw new Error(l.message);\n            const p = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(a.requiredNamespaces, s, \"approve()\");\n            if (p) throw new Error(p.message);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !0)) {\n                const { message: h } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `approve() relayProtocol: ${i}`);\n                throw new Error(h);\n            }\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(r) || this.validateSessionProps(r, \"sessionProperties\"), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isUndefined)(o)) {\n                this.validateSessionProps(o, \"scopedProperties\");\n                const h = new Set(Object.keys(s));\n                if (!Object.keys(o).every((u)=>h.has(u))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(o)}, approved namespaces: ${Array.from(h).join(\", \")}`);\n            }\n        }), c(this, \"isValidReject\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `reject() params: ${e}`);\n                throw new Error(i);\n            }\n            const { id: t, reason: s } = e;\n            if (this.checkRecentlyDeleted(t), await this.isValidProposalId(t), !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidErrorReason)(s)) {\n                const { message: i } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `reject() reason: ${JSON.stringify(s)}`);\n                throw new Error(i);\n            }\n        }), c(this, \"isValidSessionSettleRequest\", (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `onSessionSettleRequest() params: ${e}`);\n                throw new Error(l);\n            }\n            const { relay: t, controller: s, namespaces: i, expiry: r } = e;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRelay)(t)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", \"onSessionSettleRequest() relay protocol should be a string\");\n                throw new Error(l);\n            }\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidController)(s, \"onSessionSettleRequest()\");\n            if (o) throw new Error(o.message);\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(i, \"onSessionSettleRequest()\");\n            if (a) throw new Error(a.message);\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(r)) {\n                const { message: l } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", \"onSessionSettleRequest()\");\n                throw new Error(l);\n            }\n        }), c(this, \"isValidUpdate\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `update() params: ${e}`);\n                throw new Error(a);\n            }\n            const { topic: t, namespaces: s } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n            const i = this.client.session.get(t), r = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespaces)(s, \"update()\");\n            if (r) throw new Error(r.message);\n            const o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isConformingNamespaces)(i.requiredNamespaces, s, \"update()\");\n            if (o) throw new Error(o.message);\n        }), c(this, \"isValidExtend\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `extend() params: ${e}`);\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n        }), c(this, \"isValidRequest\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() params: ${e}`);\n                throw new Error(a);\n            }\n            const { topic: t, request: s, chainId: i, expiry: r } = e;\n            this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);\n            const { namespaces: o } = this.client.session.get(t);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(o, i)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() chainId: ${i}`);\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequest)(s)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() ${JSON.stringify(s)}`);\n                throw new Error(a);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesRequest)(o, i, s.method)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() method: ${s.method}`);\n                throw new Error(a);\n            }\n            if (r && !(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidRequestExpiry)(r, _e)) {\n                const { message: a } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `request() expiry: ${r}. Expiry must be a number (in seconds) between ${_e.min} and ${_e.max}`);\n                throw new Error(a);\n            }\n        }), c(this, \"isValidRespond\", async (e)=>{\n            var t;\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `respond() params: ${e}`);\n                throw new Error(r);\n            }\n            const { topic: s, response: i } = e;\n            try {\n                await this.isValidSessionTopic(s);\n            } catch (r) {\n                throw (t = e?.response) != null && t.id && this.cleanupAfterResponse(e), r;\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidResponse)(i)) {\n                const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `respond() response: ${JSON.stringify(i)}`);\n                throw new Error(r);\n            }\n        }), c(this, \"isValidPing\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `ping() params: ${e}`);\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            await this.isValidSessionOrPairingTopic(t);\n        }), c(this, \"isValidEmit\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() params: ${e}`);\n                throw new Error(o);\n            }\n            const { topic: t, event: s, chainId: i } = e;\n            await this.isValidSessionTopic(t);\n            const { namespaces: r } = this.client.session.get(t);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesChainId)(r, i)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() chainId: ${i}`);\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidEvent)(s)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(s)}`);\n                throw new Error(o);\n            }\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidNamespacesEvent)(r, i, s.name)) {\n                const { message: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `emit() event: ${JSON.stringify(s)}`);\n                throw new Error(o);\n            }\n        }), c(this, \"isValidDisconnect\", async (e)=>{\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidParams)(e)) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `disconnect() params: ${e}`);\n                throw new Error(s);\n            }\n            const { topic: t } = e;\n            await this.isValidSessionOrPairingTopic(t);\n        }), c(this, \"isValidAuthenticate\", (e)=>{\n            const { chains: t, uri: s, domain: i, nonce: r } = e;\n            if (!Array.isArray(t) || t.length === 0) throw new Error(\"chains is required and must be a non-empty array\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(s, !1)) throw new Error(\"uri is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(i, !1)) throw new Error(\"domain is required parameter\");\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(r, !1)) throw new Error(\"nonce is required parameter\");\n            if ([\n                ...new Set(t.map((a)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(a).namespace))\n            ].length > 1) throw new Error(\"Multi-namespace requests are not supported. Please request single namespace only.\");\n            const { namespace: o } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(t[0]);\n            if (o !== \"eip155\") throw new Error(\"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\");\n        }), c(this, \"getVerifyContext\", async (e)=>{\n            const { attestationId: t, hash: s, encryptedId: i, metadata: r, transportType: o } = e, a = {\n                verified: {\n                    verifyUrl: r.verifyUrl || _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.VERIFY_SERVER,\n                    validation: \"UNKNOWN\",\n                    origin: r.url || \"\"\n                }\n            };\n            try {\n                if (o === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode) {\n                    const p = this.getAppLinkIfEnabled(r, o);\n                    return a.verified.validation = p && new URL(p).origin === new URL(r.url).origin ? \"VALID\" : \"INVALID\", a;\n                }\n                const l = await this.client.core.verify.resolve({\n                    attestationId: t,\n                    hash: s,\n                    encryptedId: i,\n                    verifyUrl: r.verifyUrl\n                });\n                l && (a.verified.origin = l.origin, a.verified.isScam = l.isScam, a.verified.validation = l.origin === new URL(r.url).origin ? \"VALID\" : \"INVALID\");\n            } catch (l) {\n                this.client.logger.warn(l);\n            }\n            return this.client.logger.debug(`Verify context: ${JSON.stringify(a)}`), a;\n        }), c(this, \"validateSessionProps\", (e, t)=>{\n            Object.values(e).forEach((s, i)=>{\n                if (s == null) {\n                    const { message: r } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `${t} must contain an existing value for each key. Received: ${s} for key ${Object.keys(e)[i]}`);\n                    throw new Error(r);\n                }\n            });\n        }), c(this, \"getPendingAuthRequest\", (e)=>{\n            const t = this.client.auth.requests.get(e);\n            return typeof t == \"object\" ? t : void 0;\n        }), c(this, \"addToRecentlyDeleted\", (e, t)=>{\n            if (this.recentlyDeletedMap.set(e, t), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n                let s = 0;\n                const i = this.recentlyDeletedLimit / 2;\n                for (const r of this.recentlyDeletedMap.keys()){\n                    if (s++ >= i) break;\n                    this.recentlyDeletedMap.delete(r);\n                }\n            }\n        }), c(this, \"checkRecentlyDeleted\", (e)=>{\n            const t = this.recentlyDeletedMap.get(e);\n            if (t) {\n                const { message: s } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `Record was recently deleted - ${t}: ${e}`);\n                throw new Error(s);\n            }\n        }), c(this, \"isLinkModeEnabled\", (e, t)=>{\n            var s, i, r, o, a, l, p, h, u;\n            return !e || t !== _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode ? !1 : ((i = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i.linkMode) === !0 && ((o = (r = this.client.metadata) == null ? void 0 : r.redirect) == null ? void 0 : o.universal) !== void 0 && ((l = (a = this.client.metadata) == null ? void 0 : a.redirect) == null ? void 0 : l.universal) !== \"\" && ((p = e?.redirect) == null ? void 0 : p.universal) !== void 0 && ((h = e?.redirect) == null ? void 0 : h.universal) !== \"\" && ((u = e?.redirect) == null ? void 0 : u.linkMode) === !0 && this.client.core.linkModeSupportedApps.includes(e.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < \"u\";\n        }), c(this, \"getAppLinkIfEnabled\", (e, t)=>{\n            var s;\n            return this.isLinkModeEnabled(e, t) ? (s = e?.redirect) == null ? void 0 : s.universal : void 0;\n        }), c(this, \"handleLinkModeMessage\", ({ url: e })=>{\n            if (!e || !e.includes(\"wc_ev\") || !e.includes(\"topic\")) return;\n            const t = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSearchParamFromURL)(e, \"topic\") || \"\", s = decodeURIComponent((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSearchParamFromURL)(e, \"wc_ev\") || \"\"), i = this.client.session.keys.includes(t);\n            i && this.client.session.update(t, {\n                transportType: _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode\n            }), this.client.core.dispatchEnvelope({\n                topic: t,\n                message: s,\n                sessionExists: i\n            });\n        }), c(this, \"registerLinkModeListeners\", async ()=>{\n            var e;\n            if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isTestRun)() || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isReactNative)() && (e = this.client.metadata.redirect) != null && e.linkMode) {\n                const t = global == null ? void 0 : global.Linking;\n                if (typeof t < \"u\") {\n                    t.addEventListener(\"url\", this.handleLinkModeMessage, this.client.name);\n                    const s = await t.getInitialURL();\n                    s && setTimeout(()=>{\n                        this.handleLinkModeMessage({\n                            url: s\n                        });\n                    }, 50);\n                }\n            }\n        }), c(this, \"shouldSetTVF\", (e, t)=>{\n            if (!t || e !== \"wc_sessionRequest\") return !1;\n            const { request: s } = t;\n            return Object.keys(Ke).includes(s.method);\n        }), c(this, \"getTVFParams\", (e, t, s)=>{\n            var i, r;\n            try {\n                const o = t.request.method, a = this.extractTxHashesFromResult(o, s);\n                return b(v({\n                    correlationId: e,\n                    rpcMethods: [\n                        o\n                    ],\n                    chainId: t.chainId\n                }, this.isValidContractData(t.request.params) && {\n                    contractAddresses: [\n                        (r = (i = t.request.params) == null ? void 0 : i[0]) == null ? void 0 : r.to\n                    ]\n                }), {\n                    txHashes: a\n                });\n            } catch (o) {\n                this.client.logger.warn(\"Error getting TVF params\", o);\n            }\n            return {};\n        }), c(this, \"isValidContractData\", (e)=>{\n            var t;\n            if (!e) return !1;\n            try {\n                const s = e?.data || ((t = e?.[0]) == null ? void 0 : t.data);\n                if (!s.startsWith(\"0x\")) return !1;\n                const i = s.slice(2);\n                return /^[0-9a-fA-F]*$/.test(i) ? i.length % 2 === 0 : !1;\n            } catch  {}\n            return !1;\n        }), c(this, \"extractTxHashesFromResult\", (e, t)=>{\n            try {\n                const s = Ke[e];\n                if (typeof t == \"string\") return [\n                    t\n                ];\n                const i = t[s.key];\n                if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(i)) return e === \"solana_signAllTransactions\" ? i.map((r)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.extractSolanaTransactionId)(r)) : i;\n                if (typeof i == \"string\") return [\n                    i\n                ];\n            } catch (s) {\n                this.client.logger.warn(\"Error extracting tx hashes from result\", s);\n            }\n            return [];\n        });\n    }\n    async processPendingMessageEvents() {\n        try {\n            const n = this.client.session.keys, e = this.client.core.relayer.messages.getWithoutAck(n);\n            for (const [t, s] of Object.entries(e))for (const i of s)try {\n                await this.onProviderMessageEvent({\n                    topic: t,\n                    message: i,\n                    publishedAt: Date.now()\n                });\n            } catch  {\n                this.client.logger.warn(`Error processing pending message event for topic: ${t}, message: ${i}`);\n            }\n        } catch (n) {\n            this.client.logger.warn(\"processPendingMessageEvents failed\", n);\n        }\n    }\n    isInitialized() {\n        if (!this.initialized) {\n            const { message: n } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NOT_INITIALIZED\", this.name);\n            throw new Error(n);\n        }\n    }\n    async confirmOnlineStateOrThrow() {\n        await this.client.core.relayer.confirmOnlineStateOrThrow();\n    }\n    registerRelayerEvents() {\n        this.client.core.relayer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.RELAYER_EVENTS.message, (n)=>{\n            this.onProviderMessageEvent(n);\n        });\n    }\n    async onRelayMessage(n) {\n        const { topic: e, message: t, attestation: s, transportType: i } = n, { publicKey: r } = this.client.auth.authKeys.keys.includes(ce) ? this.client.auth.authKeys.get(ce) : {\n            responseTopic: void 0,\n            publicKey: void 0\n        };\n        try {\n            const o = await this.client.core.crypto.decode(e, t, {\n                receiverPublicKey: r,\n                encoding: i === _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.TRANSPORT_TYPES.link_mode ? _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64URL : _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.BASE64\n            });\n            (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcRequest)(o) ? (this.client.core.history.set(e, o), await this.onRelayEventRequest({\n                topic: e,\n                payload: o,\n                attestation: s,\n                transportType: i,\n                encryptedId: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.hashMessage)(t)\n            })) : (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.isJsonRpcResponse)(o) ? (await this.client.core.history.resolve(o), await this.onRelayEventResponse({\n                topic: e,\n                payload: o,\n                transportType: i\n            }), this.client.core.history.delete(e, o.id)) : await this.onRelayEventUnknownPayload({\n                topic: e,\n                payload: o,\n                transportType: i\n            }), await this.client.core.relayer.messages.ack(e, t);\n        } catch (o) {\n            this.client.logger.error(o);\n        }\n    }\n    registerExpirerEvents() {\n        this.client.core.expirer.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.EXPIRER_EVENTS.expired, async (n)=>{\n            const { topic: e, id: t } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseExpirerTarget)(n.target);\n            if (t && this.client.pendingRequest.keys.includes(t)) return await this.deletePendingSessionRequest(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            if (t && this.client.auth.requests.keys.includes(t)) return await this.deletePendingAuthRequest(t, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\"), !0);\n            e ? this.client.session.keys.includes(e) && (await this.deleteSession({\n                topic: e,\n                expirerHasDeleted: !0\n            }), this.client.events.emit(\"session_expire\", {\n                topic: e\n            })) : t && (await this.deleteProposal(t, !0), this.client.events.emit(\"proposal_expire\", {\n                id: t\n            }));\n        });\n    }\n    registerPairingEvents() {\n        this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.create, (n)=>this.onPairingCreated(n)), this.client.core.pairing.events.on(_walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.PAIRING_EVENTS.delete, (n)=>{\n            this.addToRecentlyDeleted(n.topic, \"pairing\");\n        });\n    }\n    isValidPairingTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `pairing topic should be a string: ${n}`);\n            throw new Error(e);\n        }\n        if (!this.client.core.pairing.pairings.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `pairing topic doesn't exist: ${n}`);\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.core.pairing.pairings.get(n).expiry)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `pairing topic: ${n}`);\n            throw new Error(e);\n        }\n    }\n    async isValidSessionTopic(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session topic should be a string: ${n}`);\n            throw new Error(e);\n        }\n        if (this.checkRecentlyDeleted(n), !this.client.session.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `session topic doesn't exist: ${n}`);\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.session.get(n).expiry)) {\n            await this.deleteSession({\n                topic: n\n            });\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `session topic: ${n}`);\n            throw new Error(e);\n        }\n        if (!this.client.core.crypto.keychain.has(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session topic does not exist in keychain: ${n}`);\n            throw await this.deleteSession({\n                topic: n\n            }), new Error(e);\n        }\n    }\n    async isValidSessionOrPairingTopic(n) {\n        if (this.checkRecentlyDeleted(n), this.client.session.keys.includes(n)) await this.isValidSessionTopic(n);\n        else if (this.client.core.pairing.pairings.keys.includes(n)) this.isValidPairingTopic(n);\n        else if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidString)(n, !1)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `session or pairing topic doesn't exist: ${n}`);\n            throw new Error(e);\n        } else {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `session or pairing topic should be a string: ${n}`);\n            throw new Error(e);\n        }\n    }\n    async isValidProposalId(n) {\n        if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidId)(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"MISSING_OR_INVALID\", `proposal id should be a number: ${n}`);\n            throw new Error(e);\n        }\n        if (!this.client.proposal.keys.includes(n)) {\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${n}`);\n            throw new Error(e);\n        }\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isExpired)(this.client.proposal.get(n).expiryTimestamp)) {\n            await this.deleteProposal(n);\n            const { message: e } = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getInternalError)(\"EXPIRED\", `proposal id: ${n}`);\n            throw new Error(e);\n        }\n    }\n}\nclass Os extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, pt, we), this.core = n, this.logger = e;\n    }\n}\nclass St extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, ht, we), this.core = n, this.logger = e;\n    }\n}\nclass bs extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, ut, we, (t)=>t.id), this.core = n, this.logger = e;\n    }\n}\nclass As extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, mt, ae, ()=>ce), this.core = n, this.logger = e;\n    }\n}\nclass xs extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, _t, ae), this.core = n, this.logger = e;\n    }\n}\nclass Cs extends _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Store {\n    constructor(n, e){\n        super(n, e, Et, ae, (t)=>t.id), this.core = n, this.logger = e;\n    }\n}\nvar Vs = Object.defineProperty, Ds = (S, n, e)=>n in S ? Vs(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, Ge = (S, n, e)=>Ds(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Ls {\n    constructor(n, e){\n        this.core = n, this.logger = e, Ge(this, \"authKeys\"), Ge(this, \"pairingTopics\"), Ge(this, \"requests\"), this.authKeys = new As(this.core, this.logger), this.pairingTopics = new xs(this.core, this.logger), this.requests = new Cs(this.core, this.logger);\n    }\n    async init() {\n        await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();\n    }\n}\nvar ks = Object.defineProperty, Ms = (S, n, e)=>n in S ? ks(S, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : S[n] = e, E = (S, n, e)=>Ms(S, typeof n != \"symbol\" ? n + \"\" : n, e);\nclass Ee extends _walletconnect_types__WEBPACK_IMPORTED_MODULE_4__.ISignClient {\n    constructor(n){\n        super(n), E(this, \"protocol\", De), E(this, \"version\", Le), E(this, \"name\", me.name), E(this, \"metadata\"), E(this, \"core\"), E(this, \"logger\"), E(this, \"events\", new events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter), E(this, \"engine\"), E(this, \"session\"), E(this, \"proposal\"), E(this, \"pendingRequest\"), E(this, \"auth\"), E(this, \"signConfig\"), E(this, \"on\", (t, s)=>this.events.on(t, s)), E(this, \"once\", (t, s)=>this.events.once(t, s)), E(this, \"off\", (t, s)=>this.events.off(t, s)), E(this, \"removeListener\", (t, s)=>this.events.removeListener(t, s)), E(this, \"removeAllListeners\", (t)=>this.events.removeAllListeners(t)), E(this, \"connect\", async (t)=>{\n            try {\n                return await this.engine.connect(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"pair\", async (t)=>{\n            try {\n                return await this.engine.pair(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"approve\", async (t)=>{\n            try {\n                return await this.engine.approve(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"reject\", async (t)=>{\n            try {\n                return await this.engine.reject(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"update\", async (t)=>{\n            try {\n                return await this.engine.update(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"extend\", async (t)=>{\n            try {\n                return await this.engine.extend(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"request\", async (t)=>{\n            try {\n                return await this.engine.request(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"respond\", async (t)=>{\n            try {\n                return await this.engine.respond(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"ping\", async (t)=>{\n            try {\n                return await this.engine.ping(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"emit\", async (t)=>{\n            try {\n                return await this.engine.emit(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"disconnect\", async (t)=>{\n            try {\n                return await this.engine.disconnect(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"find\", (t)=>{\n            try {\n                return this.engine.find(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"getPendingSessionRequests\", ()=>{\n            try {\n                return this.engine.getPendingSessionRequests();\n            } catch (t) {\n                throw this.logger.error(t.message), t;\n            }\n        }), E(this, \"authenticate\", async (t, s)=>{\n            try {\n                return await this.engine.authenticate(t, s);\n            } catch (i) {\n                throw this.logger.error(i.message), i;\n            }\n        }), E(this, \"formatAuthMessage\", (t)=>{\n            try {\n                return this.engine.formatAuthMessage(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"approveSessionAuthenticate\", async (t)=>{\n            try {\n                return await this.engine.approveSessionAuthenticate(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), E(this, \"rejectSessionAuthenticate\", async (t)=>{\n            try {\n                return await this.engine.rejectSessionAuthenticate(t);\n            } catch (s) {\n                throw this.logger.error(s.message), s;\n            }\n        }), this.name = n?.name || me.name, this.metadata = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.populateAppMetadata)(n?.metadata), this.signConfig = n?.signConfig;\n        const e = typeof n?.logger < \"u\" && typeof n?.logger != \"string\" ? n.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: n?.logger || me.logger\n        }));\n        this.core = n?.core || new _walletconnect_core__WEBPACK_IMPORTED_MODULE_6__.Core(n), this.logger = (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.generateChildLogger)(e, this.name), this.session = new St(this.core, this.logger), this.proposal = new Os(this.core, this.logger), this.pendingRequest = new bs(this.core, this.logger), this.engine = new Ns(this), this.auth = new Ls(this.core, this.logger);\n    }\n    static async init(n) {\n        const e = new Ee(n);\n        return await e.initialize(), e;\n    }\n    get context() {\n        return (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getLoggerContext)(this.logger);\n    }\n    get pairing() {\n        return this.core.pairing.pairings;\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\");\n        try {\n            await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info(\"SignClient Initialization Success\"), setTimeout(()=>{\n                this.engine.processRelayMessageCache();\n            }, (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.toMiliseconds)(_walletconnect_time__WEBPACK_IMPORTED_MODULE_1__.ONE_SECOND));\n        } catch (n) {\n            throw this.logger.info(\"SignClient Initialization Failure\"), this.logger.error(n.message), n;\n        }\n    }\n}\nconst $s = St, Ks = Ee;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./misc */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsdUZBQU87QUFDL0JELFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsbUZBQVEsR0FBR0g7QUFDeENFLFFBQVFFLFlBQVksQ0FBQ0QsbUJBQU9BLENBQUMsbUZBQVEsR0FBR0gsVUFDeEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvaW5kZXguanM/MmVlMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9taXNjXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RpbWVcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/misc.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ONE_THOUSAND = exports.ONE_HUNDRED = void 0;\nexports.ONE_HUNDRED = 100;\nexports.ONE_THOUSAND = 1000; //# sourceMappingURL=misc.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvbWlzYy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsb0JBQW9CLEdBQUdBLG1CQUFtQixHQUFHLEtBQUs7QUFDbERBLG1CQUFtQixHQUFHO0FBQ3RCQSxvQkFBb0IsR0FBRyxNQUN2QixnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL2NvbnN0YW50cy9taXNjLmpzP2I0MzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9ORV9USE9VU0FORCA9IGV4cG9ydHMuT05FX0hVTkRSRUQgPSB2b2lkIDA7XG5leHBvcnRzLk9ORV9IVU5EUkVEID0gMTAwO1xuZXhwb3J0cy5PTkVfVEhPVVNBTkQgPSAxMDAwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlzYy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJPTkVfVEhPVVNBTkQiLCJPTkVfSFVORFJFRCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/misc.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/constants/time.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ONE_YEAR = exports.FOUR_WEEKS = exports.THREE_WEEKS = exports.TWO_WEEKS = exports.ONE_WEEK = exports.THIRTY_DAYS = exports.SEVEN_DAYS = exports.FIVE_DAYS = exports.THREE_DAYS = exports.ONE_DAY = exports.TWENTY_FOUR_HOURS = exports.TWELVE_HOURS = exports.SIX_HOURS = exports.THREE_HOURS = exports.ONE_HOUR = exports.SIXTY_MINUTES = exports.THIRTY_MINUTES = exports.TEN_MINUTES = exports.FIVE_MINUTES = exports.ONE_MINUTE = exports.SIXTY_SECONDS = exports.THIRTY_SECONDS = exports.TEN_SECONDS = exports.FIVE_SECONDS = exports.ONE_SECOND = void 0;\nexports.ONE_SECOND = 1;\nexports.FIVE_SECONDS = 5;\nexports.TEN_SECONDS = 10;\nexports.THIRTY_SECONDS = 30;\nexports.SIXTY_SECONDS = 60;\nexports.ONE_MINUTE = exports.SIXTY_SECONDS;\nexports.FIVE_MINUTES = exports.ONE_MINUTE * 5;\nexports.TEN_MINUTES = exports.ONE_MINUTE * 10;\nexports.THIRTY_MINUTES = exports.ONE_MINUTE * 30;\nexports.SIXTY_MINUTES = exports.ONE_MINUTE * 60;\nexports.ONE_HOUR = exports.SIXTY_MINUTES;\nexports.THREE_HOURS = exports.ONE_HOUR * 3;\nexports.SIX_HOURS = exports.ONE_HOUR * 6;\nexports.TWELVE_HOURS = exports.ONE_HOUR * 12;\nexports.TWENTY_FOUR_HOURS = exports.ONE_HOUR * 24;\nexports.ONE_DAY = exports.TWENTY_FOUR_HOURS;\nexports.THREE_DAYS = exports.ONE_DAY * 3;\nexports.FIVE_DAYS = exports.ONE_DAY * 5;\nexports.SEVEN_DAYS = exports.ONE_DAY * 7;\nexports.THIRTY_DAYS = exports.ONE_DAY * 30;\nexports.ONE_WEEK = exports.SEVEN_DAYS;\nexports.TWO_WEEKS = exports.ONE_WEEK * 2;\nexports.THREE_WEEKS = exports.ONE_WEEK * 3;\nexports.FOUR_WEEKS = exports.ONE_WEEK * 4;\nexports.ONE_YEAR = exports.ONE_DAY * 365; //# sourceMappingURL=time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvdGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUdBLGtCQUFrQixHQUFHQSxtQkFBbUIsR0FBR0EsaUJBQWlCLEdBQUdBLGdCQUFnQixHQUFHQSxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUdBLGlCQUFpQixHQUFHQSxrQkFBa0IsR0FBR0EsZUFBZSxHQUFHQSx5QkFBeUIsR0FBR0Esb0JBQW9CLEdBQUdBLGlCQUFpQixHQUFHQSxtQkFBbUIsR0FBR0EsZ0JBQWdCLEdBQUdBLHFCQUFxQixHQUFHQSxzQkFBc0IsR0FBR0EsbUJBQW1CLEdBQUdBLG9CQUFvQixHQUFHQSxrQkFBa0IsR0FBR0EscUJBQXFCLEdBQUdBLHNCQUFzQixHQUFHQSxtQkFBbUIsR0FBR0Esb0JBQW9CLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDdGlCQSxrQkFBa0IsR0FBRztBQUNyQkEsb0JBQW9CLEdBQUc7QUFDdkJBLG1CQUFtQixHQUFHO0FBQ3RCQSxzQkFBc0IsR0FBRztBQUN6QkEscUJBQXFCLEdBQUc7QUFDeEJBLGtCQUFrQixHQUFHQSxRQUFRc0IsYUFBYTtBQUMxQ3RCLG9CQUFvQixHQUFHQSxRQUFRcUIsVUFBVSxHQUFHO0FBQzVDckIsbUJBQW1CLEdBQUdBLFFBQVFxQixVQUFVLEdBQUc7QUFDM0NyQixzQkFBc0IsR0FBR0EsUUFBUXFCLFVBQVUsR0FBRztBQUM5Q3JCLHFCQUFxQixHQUFHQSxRQUFRcUIsVUFBVSxHQUFHO0FBQzdDckIsZ0JBQWdCLEdBQUdBLFFBQVFpQixhQUFhO0FBQ3hDakIsbUJBQW1CLEdBQUdBLFFBQVFnQixRQUFRLEdBQUc7QUFDekNoQixpQkFBaUIsR0FBR0EsUUFBUWdCLFFBQVEsR0FBRztBQUN2Q2hCLG9CQUFvQixHQUFHQSxRQUFRZ0IsUUFBUSxHQUFHO0FBQzFDaEIseUJBQXlCLEdBQUdBLFFBQVFnQixRQUFRLEdBQUc7QUFDL0NoQixlQUFlLEdBQUdBLFFBQVFZLGlCQUFpQjtBQUMzQ1osa0JBQWtCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN2Q1gsaUJBQWlCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN0Q1gsa0JBQWtCLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN2Q1gsbUJBQW1CLEdBQUdBLFFBQVFXLE9BQU8sR0FBRztBQUN4Q1gsZ0JBQWdCLEdBQUdBLFFBQVFRLFVBQVU7QUFDckNSLGlCQUFpQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDdkNOLG1CQUFtQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDekNOLGtCQUFrQixHQUFHQSxRQUFRTSxRQUFRLEdBQUc7QUFDeENOLGdCQUFnQixHQUFHQSxRQUFRVyxPQUFPLEdBQUcsS0FDckMsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9jb25zdGFudHMvdGltZS5qcz9kZGQzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PTkVfWUVBUiA9IGV4cG9ydHMuRk9VUl9XRUVLUyA9IGV4cG9ydHMuVEhSRUVfV0VFS1MgPSBleHBvcnRzLlRXT19XRUVLUyA9IGV4cG9ydHMuT05FX1dFRUsgPSBleHBvcnRzLlRISVJUWV9EQVlTID0gZXhwb3J0cy5TRVZFTl9EQVlTID0gZXhwb3J0cy5GSVZFX0RBWVMgPSBleHBvcnRzLlRIUkVFX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgPSBleHBvcnRzLlRXRU5UWV9GT1VSX0hPVVJTID0gZXhwb3J0cy5UV0VMVkVfSE9VUlMgPSBleHBvcnRzLlNJWF9IT1VSUyA9IGV4cG9ydHMuVEhSRUVfSE9VUlMgPSBleHBvcnRzLk9ORV9IT1VSID0gZXhwb3J0cy5TSVhUWV9NSU5VVEVTID0gZXhwb3J0cy5USElSVFlfTUlOVVRFUyA9IGV4cG9ydHMuVEVOX01JTlVURVMgPSBleHBvcnRzLkZJVkVfTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSA9IGV4cG9ydHMuU0lYVFlfU0VDT05EUyA9IGV4cG9ydHMuVEhJUlRZX1NFQ09ORFMgPSBleHBvcnRzLlRFTl9TRUNPTkRTID0gZXhwb3J0cy5GSVZFX1NFQ09ORFMgPSBleHBvcnRzLk9ORV9TRUNPTkQgPSB2b2lkIDA7XG5leHBvcnRzLk9ORV9TRUNPTkQgPSAxO1xuZXhwb3J0cy5GSVZFX1NFQ09ORFMgPSA1O1xuZXhwb3J0cy5URU5fU0VDT05EUyA9IDEwO1xuZXhwb3J0cy5USElSVFlfU0VDT05EUyA9IDMwO1xuZXhwb3J0cy5TSVhUWV9TRUNPTkRTID0gNjA7XG5leHBvcnRzLk9ORV9NSU5VVEUgPSBleHBvcnRzLlNJWFRZX1NFQ09ORFM7XG5leHBvcnRzLkZJVkVfTUlOVVRFUyA9IGV4cG9ydHMuT05FX01JTlVURSAqIDU7XG5leHBvcnRzLlRFTl9NSU5VVEVTID0gZXhwb3J0cy5PTkVfTUlOVVRFICogMTA7XG5leHBvcnRzLlRISVJUWV9NSU5VVEVTID0gZXhwb3J0cy5PTkVfTUlOVVRFICogMzA7XG5leHBvcnRzLlNJWFRZX01JTlVURVMgPSBleHBvcnRzLk9ORV9NSU5VVEUgKiA2MDtcbmV4cG9ydHMuT05FX0hPVVIgPSBleHBvcnRzLlNJWFRZX01JTlVURVM7XG5leHBvcnRzLlRIUkVFX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiAqIDM7XG5leHBvcnRzLlNJWF9IT1VSUyA9IGV4cG9ydHMuT05FX0hPVVIgKiA2O1xuZXhwb3J0cy5UV0VMVkVfSE9VUlMgPSBleHBvcnRzLk9ORV9IT1VSICogMTI7XG5leHBvcnRzLlRXRU5UWV9GT1VSX0hPVVJTID0gZXhwb3J0cy5PTkVfSE9VUiAqIDI0O1xuZXhwb3J0cy5PTkVfREFZID0gZXhwb3J0cy5UV0VOVFlfRk9VUl9IT1VSUztcbmV4cG9ydHMuVEhSRUVfREFZUyA9IGV4cG9ydHMuT05FX0RBWSAqIDM7XG5leHBvcnRzLkZJVkVfREFZUyA9IGV4cG9ydHMuT05FX0RBWSAqIDU7XG5leHBvcnRzLlNFVkVOX0RBWVMgPSBleHBvcnRzLk9ORV9EQVkgKiA3O1xuZXhwb3J0cy5USElSVFlfREFZUyA9IGV4cG9ydHMuT05FX0RBWSAqIDMwO1xuZXhwb3J0cy5PTkVfV0VFSyA9IGV4cG9ydHMuU0VWRU5fREFZUztcbmV4cG9ydHMuVFdPX1dFRUtTID0gZXhwb3J0cy5PTkVfV0VFSyAqIDI7XG5leHBvcnRzLlRIUkVFX1dFRUtTID0gZXhwb3J0cy5PTkVfV0VFSyAqIDM7XG5leHBvcnRzLkZPVVJfV0VFS1MgPSBleHBvcnRzLk9ORV9XRUVLICogNDtcbmV4cG9ydHMuT05FX1lFQVIgPSBleHBvcnRzLk9ORV9EQVkgKiAzNjU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIk9ORV9ZRUFSIiwiRk9VUl9XRUVLUyIsIlRIUkVFX1dFRUtTIiwiVFdPX1dFRUtTIiwiT05FX1dFRUsiLCJUSElSVFlfREFZUyIsIlNFVkVOX0RBWVMiLCJGSVZFX0RBWVMiLCJUSFJFRV9EQVlTIiwiT05FX0RBWSIsIlRXRU5UWV9GT1VSX0hPVVJTIiwiVFdFTFZFX0hPVVJTIiwiU0lYX0hPVVJTIiwiVEhSRUVfSE9VUlMiLCJPTkVfSE9VUiIsIlNJWFRZX01JTlVURVMiLCJUSElSVFlfTUlOVVRFUyIsIlRFTl9NSU5VVEVTIiwiRklWRV9NSU5VVEVTIiwiT05FX01JTlVURSIsIlNJWFRZX1NFQ09ORFMiLCJUSElSVFlfU0VDT05EUyIsIlRFTl9TRUNPTkRTIiwiRklWRV9TRUNPTkRTIiwiT05FX1NFQ09ORCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/time.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQywyRUFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyx5RkFBYSxHQUFHSCxVQUM3QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL2luZGV4LmpzPzI5YjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2F0Y2hcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uc3RhbnRzXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRzbGliXzEiLCJyZXF1aXJlIiwiX19leHBvcnRTdGFyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./watch */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSCxVQUN6QyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3R5cGVzL2luZGV4LmpzPzM2MjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vd2F0Y2hcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidHNsaWJfMSIsInJlcXVpcmUiLCJfX2V4cG9ydFN0YXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/types/watch.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.IWatch = void 0;\nclass IWatch {\n}\nexports.IWatch = IWatch; //# sourceMappingURL=watch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy90eXBlcy93YXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUU7QUFDTjtBQUNBRixjQUFjLEdBQUdFLFFBQ2pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvdHlwZXMvd2F0Y2guanM/NGJjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSVdhdGNoID0gdm9pZCAwO1xuY2xhc3MgSVdhdGNoIHtcbn1cbmV4cG9ydHMuSVdhdGNoID0gSVdhdGNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2F0Y2guanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSVdhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/types/watch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js":
/*!********************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/convert.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromMiliseconds = exports.toMiliseconds = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/constants/index.js\");\nfunction toMiliseconds(seconds) {\n    return seconds * constants_1.ONE_THOUSAND;\n}\nexports.toMiliseconds = toMiliseconds;\nfunction fromMiliseconds(miliseconds) {\n    return Math.floor(miliseconds / constants_1.ONE_THOUSAND);\n}\nexports.fromMiliseconds = fromMiliseconds; //# sourceMappingURL=convert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9jb252ZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx1QkFBdUIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUN2RCxNQUFNSSxjQUFjQyxtQkFBT0EsQ0FBQywwRkFBYztBQUMxQyxTQUFTRixjQUFjRyxPQUFPO0lBQzFCLE9BQU9BLFVBQVVGLFlBQVlHLFlBQVk7QUFDN0M7QUFDQVAscUJBQXFCLEdBQUdHO0FBQ3hCLFNBQVNELGdCQUFnQk0sV0FBVztJQUNoQyxPQUFPQyxLQUFLQyxLQUFLLENBQUNGLGNBQWNKLFlBQVlHLFlBQVk7QUFDNUQ7QUFDQVAsdUJBQXVCLEdBQUdFLGlCQUMxQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2NvbnZlcnQuanM/OTkxZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbU1pbGlzZWNvbmRzID0gZXhwb3J0cy50b01pbGlzZWNvbmRzID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuZnVuY3Rpb24gdG9NaWxpc2Vjb25kcyhzZWNvbmRzKSB7XG4gICAgcmV0dXJuIHNlY29uZHMgKiBjb25zdGFudHNfMS5PTkVfVEhPVVNBTkQ7XG59XG5leHBvcnRzLnRvTWlsaXNlY29uZHMgPSB0b01pbGlzZWNvbmRzO1xuZnVuY3Rpb24gZnJvbU1pbGlzZWNvbmRzKG1pbGlzZWNvbmRzKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IobWlsaXNlY29uZHMgLyBjb25zdGFudHNfMS5PTkVfVEhPVVNBTkQpO1xufVxuZXhwb3J0cy5mcm9tTWlsaXNlY29uZHMgPSBmcm9tTWlsaXNlY29uZHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb252ZXJ0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZyb21NaWxpc2Vjb25kcyIsInRvTWlsaXNlY29uZHMiLCJjb25zdGFudHNfMSIsInJlcXVpcmUiLCJzZWNvbmRzIiwiT05FX1RIT1VTQU5EIiwibWlsaXNlY29uZHMiLCJNYXRoIiwiZmxvb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/delay.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.delay = void 0;\nfunction delay(timeout) {\n    return new Promise((resolve)=>{\n        setTimeout(()=>{\n            resolve(true);\n        }, timeout);\n    });\n}\nexports.delay = delay; //# sourceMappingURL=delay.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9kZWxheS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHLEtBQUs7QUFDckIsU0FBU0UsTUFBTUMsT0FBTztJQUNsQixPQUFPLElBQUlDLFFBQVFDLENBQUFBO1FBQ2ZDLFdBQVc7WUFDUEQsUUFBUTtRQUNaLEdBQUdGO0lBQ1A7QUFDSjtBQUNBSCxhQUFhLEdBQUdFLE9BQ2hCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3RpbWUvZGlzdC9janMvdXRpbHMvZGVsYXkuanM/OWI5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVsYXkgPSB2b2lkIDA7XG5mdW5jdGlvbiBkZWxheSh0aW1lb3V0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZWxheSA9IGRlbGF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsYXkuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVsYXkiLCJ0aW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/utils/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\");\ntslib_1.__exportStar(__webpack_require__(/*! ./delay */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/delay.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./convert */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/convert.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy91dGlscy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVQyxtQkFBT0EsQ0FBQyx1RkFBTztBQUMvQkQsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxpRkFBUyxHQUFHSDtBQUN6Q0UsUUFBUUUsWUFBWSxDQUFDRCxtQkFBT0EsQ0FBQyxxRkFBVyxHQUFHSCxVQUMzQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3V0aWxzL2luZGV4LmpzP2I3Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZGVsYXlcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29udmVydFwiKSwgZXhwb3J0cyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0c2xpYl8xIiwicmVxdWlyZSIsIl9fZXhwb3J0U3RhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/time/dist/cjs/watch.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Watch = void 0;\nclass Watch {\n    constructor(){\n        this.timestamps = new Map();\n    }\n    start(label) {\n        if (this.timestamps.has(label)) {\n            throw new Error(`Watch already started for label: ${label}`);\n        }\n        this.timestamps.set(label, {\n            started: Date.now()\n        });\n    }\n    stop(label) {\n        const timestamp = this.get(label);\n        if (typeof timestamp.elapsed !== \"undefined\") {\n            throw new Error(`Watch already stopped for label: ${label}`);\n        }\n        const elapsed = Date.now() - timestamp.started;\n        this.timestamps.set(label, {\n            started: timestamp.started,\n            elapsed\n        });\n    }\n    get(label) {\n        const timestamp = this.timestamps.get(label);\n        if (typeof timestamp === \"undefined\") {\n            throw new Error(`No timestamp found for label: ${label}`);\n        }\n        return timestamp;\n    }\n    elapsed(label) {\n        const timestamp = this.get(label);\n        const elapsed = timestamp.elapsed || Date.now() - timestamp.started;\n        return elapsed;\n    }\n}\nexports.Watch = Watch;\nexports[\"default\"] = Watch; //# sourceMappingURL=watch.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdGltZS9kaXN0L2Nqcy93YXRjaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsYUFBYSxHQUFHLEtBQUs7QUFDckIsTUFBTUU7SUFDRkMsYUFBYztRQUNWLElBQUksQ0FBQ0MsVUFBVSxHQUFHLElBQUlDO0lBQzFCO0lBQ0FDLE1BQU1DLEtBQUssRUFBRTtRQUNULElBQUksSUFBSSxDQUFDSCxVQUFVLENBQUNJLEdBQUcsQ0FBQ0QsUUFBUTtZQUM1QixNQUFNLElBQUlFLE1BQU0sQ0FBQyxpQ0FBaUMsRUFBRUYsTUFBTSxDQUFDO1FBQy9EO1FBQ0EsSUFBSSxDQUFDSCxVQUFVLENBQUNNLEdBQUcsQ0FBQ0gsT0FBTztZQUFFSSxTQUFTQyxLQUFLQyxHQUFHO1FBQUc7SUFDckQ7SUFDQUMsS0FBS1AsS0FBSyxFQUFFO1FBQ1IsTUFBTVEsWUFBWSxJQUFJLENBQUNDLEdBQUcsQ0FBQ1Q7UUFDM0IsSUFBSSxPQUFPUSxVQUFVRSxPQUFPLEtBQUssYUFBYTtZQUMxQyxNQUFNLElBQUlSLE1BQU0sQ0FBQyxpQ0FBaUMsRUFBRUYsTUFBTSxDQUFDO1FBQy9EO1FBQ0EsTUFBTVUsVUFBVUwsS0FBS0MsR0FBRyxLQUFLRSxVQUFVSixPQUFPO1FBQzlDLElBQUksQ0FBQ1AsVUFBVSxDQUFDTSxHQUFHLENBQUNILE9BQU87WUFBRUksU0FBU0ksVUFBVUosT0FBTztZQUFFTTtRQUFRO0lBQ3JFO0lBQ0FELElBQUlULEtBQUssRUFBRTtRQUNQLE1BQU1RLFlBQVksSUFBSSxDQUFDWCxVQUFVLENBQUNZLEdBQUcsQ0FBQ1Q7UUFDdEMsSUFBSSxPQUFPUSxjQUFjLGFBQWE7WUFDbEMsTUFBTSxJQUFJTixNQUFNLENBQUMsOEJBQThCLEVBQUVGLE1BQU0sQ0FBQztRQUM1RDtRQUNBLE9BQU9RO0lBQ1g7SUFDQUUsUUFBUVYsS0FBSyxFQUFFO1FBQ1gsTUFBTVEsWUFBWSxJQUFJLENBQUNDLEdBQUcsQ0FBQ1Q7UUFDM0IsTUFBTVUsVUFBVUYsVUFBVUUsT0FBTyxJQUFJTCxLQUFLQyxHQUFHLEtBQUtFLFVBQVVKLE9BQU87UUFDbkUsT0FBT007SUFDWDtBQUNKO0FBQ0FqQixhQUFhLEdBQUdFO0FBQ2hCRixrQkFBZSxHQUFHRSxPQUNsQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC90aW1lL2Rpc3QvY2pzL3dhdGNoLmpzPzJkYzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldhdGNoID0gdm9pZCAwO1xuY2xhc3MgV2F0Y2gge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRpbWVzdGFtcHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIHN0YXJ0KGxhYmVsKSB7XG4gICAgICAgIGlmICh0aGlzLnRpbWVzdGFtcHMuaGFzKGxhYmVsKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXYXRjaCBhbHJlYWR5IHN0YXJ0ZWQgZm9yIGxhYmVsOiAke2xhYmVsfWApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGltZXN0YW1wcy5zZXQobGFiZWwsIHsgc3RhcnRlZDogRGF0ZS5ub3coKSB9KTtcbiAgICB9XG4gICAgc3RvcChsYWJlbCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLmdldChsYWJlbCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGltZXN0YW1wLmVsYXBzZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV2F0Y2ggYWxyZWFkeSBzdG9wcGVkIGZvciBsYWJlbDogJHtsYWJlbH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbGFwc2VkID0gRGF0ZS5ub3coKSAtIHRpbWVzdGFtcC5zdGFydGVkO1xuICAgICAgICB0aGlzLnRpbWVzdGFtcHMuc2V0KGxhYmVsLCB7IHN0YXJ0ZWQ6IHRpbWVzdGFtcC5zdGFydGVkLCBlbGFwc2VkIH0pO1xuICAgIH1cbiAgICBnZXQobGFiZWwpIHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gdGhpcy50aW1lc3RhbXBzLmdldChsYWJlbCk7XG4gICAgICAgIGlmICh0eXBlb2YgdGltZXN0YW1wID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIHRpbWVzdGFtcCBmb3VuZCBmb3IgbGFiZWw6ICR7bGFiZWx9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpbWVzdGFtcDtcbiAgICB9XG4gICAgZWxhcHNlZChsYWJlbCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLmdldChsYWJlbCk7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSB0aW1lc3RhbXAuZWxhcHNlZCB8fCBEYXRlLm5vdygpIC0gdGltZXN0YW1wLnN0YXJ0ZWQ7XG4gICAgICAgIHJldHVybiBlbGFwc2VkO1xuICAgIH1cbn1cbmV4cG9ydHMuV2F0Y2ggPSBXYXRjaDtcbmV4cG9ydHMuZGVmYXVsdCA9IFdhdGNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2F0Y2guanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiV2F0Y2giLCJjb25zdHJ1Y3RvciIsInRpbWVzdGFtcHMiLCJNYXAiLCJzdGFydCIsImxhYmVsIiwiaGFzIiwiRXJyb3IiLCJzZXQiLCJzdGFydGVkIiwiRGF0ZSIsIm5vdyIsInN0b3AiLCJ0aW1lc3RhbXAiLCJnZXQiLCJlbGFwc2VkIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/dist/cjs/watch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values)\n/* harmony export */ });\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __decorate(decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\nfunction __param(paramIndex, decorator) {\n    return function(target, key) {\n        decorator(target, key, paramIndex);\n    };\n}\nfunction __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\nfunction __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n}\nfunction __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nfunction __createBinding(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}\nfunction __exportStar(m, exports) {\n    for(var p in m)if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nfunction __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function() {\n            if (o && i >= o.length) o = void 0;\n            return {\n                value: o && o[i++],\n                done: !o\n            };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);\n    } catch (error) {\n        e = {\n            error: error\n        };\n    } finally{\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        } finally{\n            if (e) throw e.error;\n        }\n    }\n    return ar;\n}\nfunction __spread() {\n    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));\n    return ar;\n}\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n;\nfunction __await(v) {\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function verb(n) {\n        if (g[n]) i[n] = function(v) {\n            return new Promise(function(a, b) {\n                q.push([\n                    n,\n                    v,\n                    a,\n                    b\n                ]) > 1 || resume(n, v);\n            });\n        };\n    }\n    function resume(n, v) {\n        try {\n            step(g[n](v));\n        } catch (e) {\n            settle(q[0][3], e);\n        }\n    }\n    function step(r) {\n        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n    }\n    function fulfill(value) {\n        resume(\"next\", value);\n    }\n    function reject(value) {\n        resume(\"throw\", value);\n    }\n    function settle(f, v) {\n        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n    }\n}\nfunction __asyncDelegator(o) {\n    var i, p;\n    return i = {}, verb(\"next\"), verb(\"throw\", function(e) {\n        throw e;\n    }), verb(\"return\"), i[Symbol.iterator] = function() {\n        return this;\n    }, i;\n    function verb(n, f) {\n        i[n] = o[n] ? function(v) {\n            return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: n === \"return\"\n            } : f ? f(v) : v;\n        } : f;\n    }\n}\nfunction __asyncValues(o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i);\n    function verb(n) {\n        i[n] = o[n] && function(v) {\n            return new Promise(function(resolve, reject) {\n                v = o[n](v), settle(resolve, reject, v.done, v.value);\n            });\n        };\n    }\n    function settle(resolve, reject, d, v) {\n        Promise.resolve(v).then(function(v) {\n            resolve({\n                value: v,\n                done: d\n            });\n        }, reject);\n    }\n}\nfunction __makeTemplateObject(cooked, raw) {\n    if (Object.defineProperty) {\n        Object.defineProperty(cooked, \"raw\", {\n            value: raw\n        });\n    } else {\n        cooked.raw = raw;\n    }\n    return cooked;\n}\n;\nfunction __importStar(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    }\n    result.default = mod;\n    return result;\n}\nfunction __importDefault(mod) {\n    return mod && mod.__esModule ? mod : {\n        default: mod\n    };\n}\nfunction __classPrivateFieldGet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n}\nfunction __classPrivateFieldSet(receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/time/node_modules/tslib/tslib.es6.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/types/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/types/dist/index.es.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICore: () => (/* binding */ h),\n/* harmony export */   ICrypto: () => (/* binding */ g),\n/* harmony export */   IEchoClient: () => (/* binding */ O),\n/* harmony export */   IEngine: () => (/* binding */ V),\n/* harmony export */   IEngineEvents: () => (/* binding */ K),\n/* harmony export */   IEventClient: () => (/* binding */ R),\n/* harmony export */   IExpirer: () => (/* binding */ S),\n/* harmony export */   IJsonRpcHistory: () => (/* binding */ I),\n/* harmony export */   IKeyChain: () => (/* binding */ j),\n/* harmony export */   IMessageTracker: () => (/* binding */ y),\n/* harmony export */   IPairing: () => (/* binding */ $),\n/* harmony export */   IPublisher: () => (/* binding */ m),\n/* harmony export */   IRelayer: () => (/* binding */ d),\n/* harmony export */   ISignClient: () => (/* binding */ J),\n/* harmony export */   ISignClientEvents: () => (/* binding */ H),\n/* harmony export */   IStore: () => (/* binding */ f),\n/* harmony export */   ISubscriber: () => (/* binding */ P),\n/* harmony export */   ISubscriberTopicMap: () => (/* binding */ C),\n/* harmony export */   IVerify: () => (/* binding */ M)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/events */ \"(ssr)/./node_modules/@walletconnect/events/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar a = Object.defineProperty, u = (e, s, r)=>s in e ? a(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, c = (e, s, r)=>u(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass h extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super(), this.opts = s, c(this, \"protocol\", \"wc\"), c(this, \"version\", 2);\n    }\n}\nclass g {\n    constructor(s, r, t){\n        this.core = s, this.logger = r;\n    }\n}\nvar p = Object.defineProperty, b = (e, s, r)=>s in e ? p(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, v = (e, s, r)=>b(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass I extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.core = s, this.logger = r, v(this, \"records\", new Map);\n    }\n}\nclass y {\n    constructor(s, r){\n        this.logger = s, this.core = r;\n    }\n}\nclass m extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.relayer = s, this.logger = r;\n    }\n}\nclass d extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s){\n        super();\n    }\n}\nclass f {\n    constructor(s, r, t, q){\n        this.core = s, this.logger = r, this.name = t;\n    }\n}\nvar E = Object.defineProperty, x = (e, s, r)=>s in e ? E(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, w = (e, s, r)=>x(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass C {\n    constructor(){\n        w(this, \"map\", new Map);\n    }\n}\nclass P extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.relayer = s, this.logger = r;\n    }\n}\nclass j {\n    constructor(s, r){\n        this.core = s, this.logger = r;\n    }\n}\nclass S extends _walletconnect_events__WEBPACK_IMPORTED_MODULE_0__.IEvents {\n    constructor(s, r){\n        super(), this.core = s, this.logger = r;\n    }\n}\nclass $ {\n    constructor(s, r){\n        this.logger = s, this.core = r;\n    }\n}\nclass M {\n    constructor(s, r, t){\n        this.core = s, this.logger = r, this.store = t;\n    }\n}\nclass O {\n    constructor(s, r){\n        this.projectId = s, this.logger = r;\n    }\n}\nclass R {\n    constructor(s, r, t){\n        this.core = s, this.logger = r, this.telemetryEnabled = t;\n    }\n}\nvar T = Object.defineProperty, k = (e, s, r)=>s in e ? T(e, s, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : e[s] = r, i = (e, s, r)=>k(e, typeof s != \"symbol\" ? s + \"\" : s, r);\nclass H extends (events__WEBPACK_IMPORTED_MODULE_1___default()) {\n    constructor(){\n        super();\n    }\n}\nclass J {\n    constructor(s){\n        this.opts = s, i(this, \"protocol\", \"wc\"), i(this, \"version\", 2);\n    }\n}\nclass K extends events__WEBPACK_IMPORTED_MODULE_1__.EventEmitter {\n    constructor(){\n        super();\n    }\n}\nclass V {\n    constructor(s){\n        this.client = s;\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/types/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@walletconnect/universal-provider/dist/index.es.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UniversalProvider: () => (/* binding */ es),\n/* harmony export */   \"default\": () => (/* binding */ B)\n/* harmony export */ });\n/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/sign-client */ \"(ssr)/./node_modules/@walletconnect/sign-client/dist/index.es.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var _walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/logger */ \"(ssr)/./node_modules/@walletconnect/logger/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/jsonrpc-http-connection */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-http-connection/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/jsonrpc-provider */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-provider/dist/index.es.js\");\n/* harmony import */ var _walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/jsonrpc-utils */ \"(ssr)/./node_modules/@walletconnect/jsonrpc-utils/dist/esm/index.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n\n\nconst et = \"error\", St = \"wss://relay.walletconnect.org\", Dt = \"wc\", qt = \"universal_provider\", U = `${Dt}@2:${qt}:`, st = \"https://rpc.walletconnect.org/v1/\", I = \"generic\", jt = `${st}bundler`, u = {\n    DEFAULT_CHAIN_CHANGED: \"default_chain_changed\"\n};\nfunction Rt() {}\nfunction k(s) {\n    return s == null || typeof s != \"object\" && typeof s != \"function\";\n}\nfunction W(s) {\n    return ArrayBuffer.isView(s) && !(s instanceof DataView);\n}\nfunction _t(s) {\n    if (k(s)) return s;\n    if (Array.isArray(s) || W(s) || s instanceof ArrayBuffer || typeof SharedArrayBuffer < \"u\" && s instanceof SharedArrayBuffer) return s.slice(0);\n    const t = Object.getPrototypeOf(s), e = t.constructor;\n    if (s instanceof Date || s instanceof Map || s instanceof Set) return new e(s);\n    if (s instanceof RegExp) {\n        const i = new e(s);\n        return i.lastIndex = s.lastIndex, i;\n    }\n    if (s instanceof DataView) return new e(s.buffer.slice(0));\n    if (s instanceof Error) {\n        const i = new e(s.message);\n        return i.stack = s.stack, i.name = s.name, i.cause = s.cause, i;\n    }\n    if (typeof File < \"u\" && s instanceof File) return new e([\n        s\n    ], s.name, {\n        type: s.type,\n        lastModified: s.lastModified\n    });\n    if (typeof s == \"object\") {\n        const i = Object.create(t);\n        return Object.assign(i, s);\n    }\n    return s;\n}\nfunction it(s) {\n    return typeof s == \"object\" && s !== null;\n}\nfunction rt(s) {\n    return Object.getOwnPropertySymbols(s).filter((t)=>Object.prototype.propertyIsEnumerable.call(s, t));\n}\nfunction nt(s) {\n    return s == null ? s === void 0 ? \"[object Undefined]\" : \"[object Null]\" : Object.prototype.toString.call(s);\n}\nconst Ut = \"[object RegExp]\", at = \"[object String]\", ct = \"[object Number]\", ot = \"[object Boolean]\", ht = \"[object Arguments]\", Ft = \"[object Symbol]\", Lt = \"[object Date]\", Mt = \"[object Map]\", xt = \"[object Set]\", Bt = \"[object Array]\", Gt = \"[object ArrayBuffer]\", Jt = \"[object Object]\", zt = \"[object DataView]\", kt = \"[object Uint8Array]\", Wt = \"[object Uint8ClampedArray]\", Kt = \"[object Uint16Array]\", Vt = \"[object Uint32Array]\", Xt = \"[object Int8Array]\", Yt = \"[object Int16Array]\", Qt = \"[object Int32Array]\", Zt = \"[object Float32Array]\", Tt = \"[object Float64Array]\";\nfunction te(s, t) {\n    return $(s, void 0, s, new Map, t);\n}\nfunction $(s, t, e, i = new Map, n = void 0) {\n    const a = n?.(s, t, e, i);\n    if (a != null) return a;\n    if (k(s)) return s;\n    if (i.has(s)) return i.get(s);\n    if (Array.isArray(s)) {\n        const r = new Array(s.length);\n        i.set(s, r);\n        for(let c = 0; c < s.length; c++)r[c] = $(s[c], c, e, i, n);\n        return Object.hasOwn(s, \"index\") && (r.index = s.index), Object.hasOwn(s, \"input\") && (r.input = s.input), r;\n    }\n    if (s instanceof Date) return new Date(s.getTime());\n    if (s instanceof RegExp) {\n        const r = new RegExp(s.source, s.flags);\n        return r.lastIndex = s.lastIndex, r;\n    }\n    if (s instanceof Map) {\n        const r = new Map;\n        i.set(s, r);\n        for (const [c, o] of s)r.set(c, $(o, c, e, i, n));\n        return r;\n    }\n    if (s instanceof Set) {\n        const r = new Set;\n        i.set(s, r);\n        for (const c of s)r.add($(c, void 0, e, i, n));\n        return r;\n    }\n    if (typeof Buffer < \"u\" && Buffer.isBuffer(s)) return s.subarray();\n    if (W(s)) {\n        const r = new (Object.getPrototypeOf(s)).constructor(s.length);\n        i.set(s, r);\n        for(let c = 0; c < s.length; c++)r[c] = $(s[c], c, e, i, n);\n        return r;\n    }\n    if (s instanceof ArrayBuffer || typeof SharedArrayBuffer < \"u\" && s instanceof SharedArrayBuffer) return s.slice(0);\n    if (s instanceof DataView) {\n        const r = new DataView(s.buffer.slice(0), s.byteOffset, s.byteLength);\n        return i.set(s, r), y(r, s, e, i, n), r;\n    }\n    if (typeof File < \"u\" && s instanceof File) {\n        const r = new File([\n            s\n        ], s.name, {\n            type: s.type\n        });\n        return i.set(s, r), y(r, s, e, i, n), r;\n    }\n    if (s instanceof Blob) {\n        const r = new Blob([\n            s\n        ], {\n            type: s.type\n        });\n        return i.set(s, r), y(r, s, e, i, n), r;\n    }\n    if (s instanceof Error) {\n        const r = new s.constructor;\n        return i.set(s, r), r.message = s.message, r.name = s.name, r.stack = s.stack, r.cause = s.cause, y(r, s, e, i, n), r;\n    }\n    if (typeof s == \"object\" && ee(s)) {\n        const r = Object.create(Object.getPrototypeOf(s));\n        return i.set(s, r), y(r, s, e, i, n), r;\n    }\n    return s;\n}\nfunction y(s, t, e = s, i, n) {\n    const a = [\n        ...Object.keys(t),\n        ...rt(t)\n    ];\n    for(let r = 0; r < a.length; r++){\n        const c = a[r], o = Object.getOwnPropertyDescriptor(s, c);\n        (o == null || o.writable) && (s[c] = $(t[c], c, e, i, n));\n    }\n}\nfunction ee(s) {\n    switch(nt(s)){\n        case ht:\n        case Bt:\n        case Gt:\n        case zt:\n        case ot:\n        case Lt:\n        case Zt:\n        case Tt:\n        case Xt:\n        case Yt:\n        case Qt:\n        case Mt:\n        case ct:\n        case Jt:\n        case Ut:\n        case xt:\n        case at:\n        case Ft:\n        case kt:\n        case Wt:\n        case Kt:\n        case Vt:\n            return !0;\n        default:\n            return !1;\n    }\n}\nfunction se(s, t) {\n    return te(s, (e, i, n, a)=>{\n        const r = t?.(e, i, n, a);\n        if (r != null) return r;\n        if (typeof s == \"object\") switch(Object.prototype.toString.call(s)){\n            case ct:\n            case at:\n            case ot:\n                {\n                    const c = new s.constructor(s?.valueOf());\n                    return y(c, s), c;\n                }\n            case ht:\n                {\n                    const c = {};\n                    return y(c, s), c.length = s.length, c[Symbol.iterator] = s[Symbol.iterator], c;\n                }\n            default:\n                return;\n        }\n    });\n}\nfunction pt(s) {\n    return se(s);\n}\nfunction dt(s) {\n    return s !== null && typeof s == \"object\" && nt(s) === \"[object Arguments]\";\n}\nfunction ie(s) {\n    return W(s);\n}\nfunction re(s) {\n    if (typeof s != \"object\" || s == null) return !1;\n    if (Object.getPrototypeOf(s) === null) return !0;\n    if (Object.prototype.toString.call(s) !== \"[object Object]\") {\n        const e = s[Symbol.toStringTag];\n        return e == null || !Object.getOwnPropertyDescriptor(s, Symbol.toStringTag)?.writable ? !1 : s.toString() === `[object ${e}]`;\n    }\n    let t = s;\n    for(; Object.getPrototypeOf(t) !== null;)t = Object.getPrototypeOf(t);\n    return Object.getPrototypeOf(s) === t;\n}\nfunction ne(s, ...t) {\n    const e = t.slice(0, -1), i = t[t.length - 1];\n    let n = s;\n    for(let a = 0; a < e.length; a++){\n        const r = e[a];\n        n = F(n, r, i, new Map);\n    }\n    return n;\n}\nfunction F(s, t, e, i) {\n    if (k(s) && (s = Object(s)), t == null || typeof t != \"object\") return s;\n    if (i.has(t)) return _t(i.get(t));\n    if (i.set(t, s), Array.isArray(t)) {\n        t = t.slice();\n        for(let a = 0; a < t.length; a++)t[a] = t[a] ?? void 0;\n    }\n    const n = [\n        ...Object.keys(t),\n        ...rt(t)\n    ];\n    for(let a = 0; a < n.length; a++){\n        const r = n[a];\n        let c = t[r], o = s[r];\n        if (dt(c) && (c = {\n            ...c\n        }), dt(o) && (o = {\n            ...o\n        }), typeof Buffer < \"u\" && Buffer.isBuffer(c) && (c = pt(c)), Array.isArray(c)) if (typeof o == \"object\" && o != null) {\n            const w = [], v = Reflect.ownKeys(o);\n            for(let P = 0; P < v.length; P++){\n                const p = v[P];\n                w[p] = o[p];\n            }\n            o = w;\n        } else o = [];\n        const m = e(o, c, r, s, t, i);\n        m != null ? s[r] = m : Array.isArray(c) || it(o) && it(c) ? s[r] = F(o, c, e, i) : o == null && re(c) ? s[r] = F({}, c, e, i) : o == null && ie(c) ? s[r] = pt(c) : (o === void 0 || c !== void 0) && (s[r] = c);\n    }\n    return s;\n}\nfunction ae(s, ...t) {\n    return ne(s, ...t, Rt);\n}\nvar ce = Object.defineProperty, oe = Object.defineProperties, he = Object.getOwnPropertyDescriptors, ut = Object.getOwnPropertySymbols, pe = Object.prototype.hasOwnProperty, de = Object.prototype.propertyIsEnumerable, lt = (s, t, e)=>t in s ? ce(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, L = (s, t)=>{\n    for(var e in t || (t = {}))pe.call(t, e) && lt(s, e, t[e]);\n    if (ut) for (var e of ut(t))de.call(t, e) && lt(s, e, t[e]);\n    return s;\n}, ue = (s, t)=>oe(s, he(t));\nfunction d(s, t, e) {\n    var i;\n    const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(s);\n    return ((i = t.rpcMap) == null ? void 0 : i[n.reference]) || `${st}?chainId=${n.namespace}:${n.reference}&projectId=${e}`;\n}\nfunction b(s) {\n    return s.includes(\":\") ? s.split(\":\")[1] : s;\n}\nfunction ft(s) {\n    return s.map((t)=>`${t.split(\":\")[0]}:${t.split(\":\")[1]}`);\n}\nfunction le(s, t) {\n    const e = Object.keys(t.namespaces).filter((n)=>n.includes(s));\n    if (!e.length) return [];\n    const i = [];\n    return e.forEach((n)=>{\n        const a = t.namespaces[n].accounts;\n        i.push(...a);\n    }), i;\n}\nfunction M(s = {}, t = {}) {\n    const e = mt(s), i = mt(t);\n    return ae(e, i);\n}\nfunction mt(s) {\n    var t, e, i, n, a;\n    const r = {};\n    if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(s)) return r;\n    for (const [c, o] of Object.entries(s)){\n        const m = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(c) ? [\n            c\n        ] : o.chains, w = o.methods || [], v = o.events || [], P = o.rpcMap || {}, p = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(c);\n        r[p] = ue(L(L({}, r[p]), o), {\n            chains: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(m, (t = r[p]) == null ? void 0 : t.chains),\n            methods: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(w, (e = r[p]) == null ? void 0 : e.methods),\n            events: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.mergeArrays)(v, (i = r[p]) == null ? void 0 : i.events)\n        }), ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(P) || (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidObject)(((n = r[p]) == null ? void 0 : n.rpcMap) || {})) && (r[p].rpcMap = L(L({}, P), (a = r[p]) == null ? void 0 : a.rpcMap));\n    }\n    return r;\n}\nfunction vt(s) {\n    return s.includes(\":\") ? s.split(\":\")[2] : s;\n}\nfunction gt(s) {\n    const t = {};\n    for (const [e, i] of Object.entries(s)){\n        const n = i.methods || [], a = i.events || [], r = i.accounts || [], c = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isCaipNamespace)(e) ? [\n            e\n        ] : i.chains ? i.chains : ft(i.accounts);\n        t[e] = {\n            chains: c,\n            methods: n,\n            events: a,\n            accounts: r\n        };\n    }\n    return t;\n}\nfunction K(s) {\n    return typeof s == \"number\" ? s : s.includes(\"0x\") ? parseInt(s, 16) : (s = s.includes(\":\") ? s.split(\":\")[1] : s, isNaN(Number(s)) ? s : Number(s));\n}\nconst Pt = {}, h = (s)=>Pt[s], V = (s, t)=>{\n    Pt[s] = t;\n};\nvar fe = Object.defineProperty, me = (s, t, e)=>t in s ? fe(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, O = (s, t, e)=>me(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass ve {\n    constructor(t){\n        O(this, \"name\", \"polkadot\"), O(this, \"client\"), O(this, \"httpProviders\"), O(this, \"events\"), O(this, \"namespace\"), O(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            var i;\n            const n = b(e);\n            t[n] = this.createHttpProvider(n, (i = this.namespace.rpcMap) == null ? void 0 : i[e]);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar ge = Object.defineProperty, Pe = Object.defineProperties, we = Object.getOwnPropertyDescriptors, wt = Object.getOwnPropertySymbols, ye = Object.prototype.hasOwnProperty, be = Object.prototype.propertyIsEnumerable, X = (s, t, e)=>t in s ? ge(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, yt = (s, t)=>{\n    for(var e in t || (t = {}))ye.call(t, e) && X(s, e, t[e]);\n    if (wt) for (var e of wt(t))be.call(t, e) && X(s, e, t[e]);\n    return s;\n}, bt = (s, t)=>Pe(s, we(t)), A = (s, t, e)=>X(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass Ie {\n    constructor(t){\n        A(this, \"name\", \"eip155\"), A(this, \"client\"), A(this, \"chainId\"), A(this, \"namespace\"), A(this, \"httpProviders\"), A(this, \"events\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());\n    }\n    async request(t) {\n        switch(t.request.method){\n            case \"eth_requestAccounts\":\n                return this.getAccounts();\n            case \"eth_accounts\":\n                return this.getAccounts();\n            case \"wallet_switchEthereumChain\":\n                return await this.handleSwitchChain(t);\n            case \"eth_chainId\":\n                return parseInt(this.getDefaultChain());\n            case \"wallet_getCapabilities\":\n                return await this.getCapabilities(t);\n            case \"wallet_getCallsStatus\":\n                return await this.getCallStatus(t);\n        }\n        return this.namespace.methods.includes(t.request.method) ? await this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    setDefaultChain(t, e) {\n        this.httpProviders[t] || this.setHttpProvider(parseInt(t), e), this.chainId = parseInt(t), this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId.toString();\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(`${this.name}:${t}`, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__.HttpConnection(i, h(\"disableProviderPing\")));\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            var i;\n            const n = parseInt(b(e));\n            t[n] = this.createHttpProvider(n, (i = this.namespace.rpcMap) == null ? void 0 : i[e]);\n        }), t;\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? [\n            ...new Set(t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]))\n        ] : [];\n    }\n    getHttpProvider() {\n        const t = this.chainId, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    async handleSwitchChain(t) {\n        var e, i;\n        let n = t.request.params ? (e = t.request.params[0]) == null ? void 0 : e.chainId : \"0x0\";\n        n = n.startsWith(\"0x\") ? n : `0x${n}`;\n        const a = parseInt(n, 16);\n        if (this.isChainApproved(a)) this.setDefaultChain(`${a}`);\n        else if (this.namespace.methods.includes(\"wallet_switchEthereumChain\")) await this.client.request({\n            topic: t.topic,\n            request: {\n                method: t.request.method,\n                params: [\n                    {\n                        chainId: n\n                    }\n                ]\n            },\n            chainId: (i = this.namespace.chains) == null ? void 0 : i[0]\n        }), this.setDefaultChain(`${a}`);\n        else throw new Error(`Failed to switch to chain 'eip155:${a}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);\n        return null;\n    }\n    isChainApproved(t) {\n        return this.namespace.chains.includes(`${this.name}:${t}`);\n    }\n    async getCapabilities(t) {\n        var e, i, n, a, r;\n        const c = (i = (e = t.request) == null ? void 0 : e.params) == null ? void 0 : i[0], o = ((a = (n = t.request) == null ? void 0 : n.params) == null ? void 0 : a[1]) || [], m = `${c}${o.join(\",\")}`;\n        if (!c) throw new Error(\"Missing address parameter in `wallet_getCapabilities` request\");\n        const w = this.client.session.get(t.topic), v = ((r = w?.sessionProperties) == null ? void 0 : r.capabilities) || {};\n        if (v != null && v[m]) return v?.[m];\n        const P = await this.client.request(t);\n        try {\n            await this.client.session.update(t.topic, {\n                sessionProperties: bt(yt({}, w.sessionProperties || {}), {\n                    capabilities: bt(yt({}, v || {}), {\n                        [m]: P\n                    })\n                })\n            });\n        } catch (p) {\n            console.warn(\"Failed to update session with capabilities\", p);\n        }\n        return P;\n    }\n    async getCallStatus(t) {\n        var e, i;\n        const n = this.client.session.get(t.topic), a = (e = n.sessionProperties) == null ? void 0 : e.bundler_name;\n        if (a) {\n            const c = this.getBundlerUrl(t.chainId, a);\n            try {\n                return await this.getUserOperationReceipt(c, t);\n            } catch (o) {\n                console.warn(\"Failed to fetch call status from bundler\", o, c);\n            }\n        }\n        const r = (i = n.sessionProperties) == null ? void 0 : i.bundler_url;\n        if (r) try {\n            return await this.getUserOperationReceipt(r, t);\n        } catch (c) {\n            console.warn(\"Failed to fetch call status from custom bundler\", c, r);\n        }\n        if (this.namespace.methods.includes(t.request.method)) return await this.client.request(t);\n        throw new Error(\"Fetching call status not approved by the wallet.\");\n    }\n    async getUserOperationReceipt(t, e) {\n        var i;\n        const n = new URL(t), a = await fetch(n, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify((0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcRequest)(\"eth_getUserOperationReceipt\", [\n                (i = e.request.params) == null ? void 0 : i[0]\n            ]))\n        });\n        if (!a.ok) throw new Error(`Failed to fetch user operation receipt - ${a.status}`);\n        return await a.json();\n    }\n    getBundlerUrl(t, e) {\n        return `${jt}?projectId=${this.client.core.projectId}&chainId=${t}&bundler=${e}`;\n    }\n}\nvar $e = Object.defineProperty, Oe = (s, t, e)=>t in s ? $e(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, C = (s, t, e)=>Oe(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass Ae {\n    constructor(t){\n        C(this, \"name\", \"solana\"), C(this, \"client\"), C(this, \"httpProviders\"), C(this, \"events\"), C(this, \"namespace\"), C(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? [\n            ...new Set(t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            var i;\n            const n = b(e);\n            t[n] = this.createHttpProvider(n, (i = this.namespace.rpcMap) == null ? void 0 : i[e]);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Ce = Object.defineProperty, He = (s, t, e)=>t in s ? Ce(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, H = (s, t, e)=>He(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass Ee {\n    constructor(t){\n        H(this, \"name\", \"cosmos\"), H(this, \"client\"), H(this, \"httpProviders\"), H(this, \"events\"), H(this, \"namespace\"), H(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? [\n            ...new Set(t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            var i;\n            const n = b(e);\n            t[n] = this.createHttpProvider(n, (i = this.namespace.rpcMap) == null ? void 0 : i[e]);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Ne = Object.defineProperty, Se = (s, t, e)=>t in s ? Ne(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, E = (s, t, e)=>Se(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass De {\n    constructor(t){\n        E(this, \"name\", \"algorand\"), E(this, \"client\"), E(this, \"httpProviders\"), E(this, \"events\"), E(this, \"namespace\"), E(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        if (!this.httpProviders[t]) {\n            const i = e || d(`${this.name}:${t}`, this.namespace, this.client.core.projectId);\n            if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n            this.setHttpProvider(t, i);\n        }\n        this.chainId = t, this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? [\n            ...new Set(t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            var i;\n            t[e] = this.createHttpProvider(e, (i = this.namespace.rpcMap) == null ? void 0 : i[e]);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace, this.client.core.projectId);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar qe = Object.defineProperty, je = (s, t, e)=>t in s ? qe(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, N = (s, t, e)=>je(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass Re {\n    constructor(t){\n        N(this, \"name\", \"cip34\"), N(this, \"client\"), N(this, \"httpProviders\"), N(this, \"events\"), N(this, \"namespace\"), N(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? [\n            ...new Set(t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            const i = this.getCardanoRPCUrl(e), n = b(e);\n            t[n] = this.createHttpProvider(n, i);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    getCardanoRPCUrl(t) {\n        const e = this.namespace.rpcMap;\n        if (e) return e[t];\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || this.getCardanoRPCUrl(t);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar _e = Object.defineProperty, Ue = (s, t, e)=>t in s ? _e(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, S = (s, t, e)=>Ue(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass Fe {\n    constructor(t){\n        S(this, \"name\", \"elrond\"), S(this, \"client\"), S(this, \"httpProviders\"), S(this, \"events\"), S(this, \"namespace\"), S(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? [\n            ...new Set(t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            var i;\n            const n = b(e);\n            t[n] = this.createHttpProvider(n, (i = this.namespace.rpcMap) == null ? void 0 : i[e]);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Le = Object.defineProperty, Me = (s, t, e)=>t in s ? Le(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, D = (s, t, e)=>Me(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass xe {\n    constructor(t){\n        D(this, \"name\", \"multiversx\"), D(this, \"client\"), D(this, \"httpProviders\"), D(this, \"events\"), D(this, \"namespace\"), D(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? [\n            ...new Set(t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            var i;\n            const n = b(e);\n            t[n] = this.createHttpProvider(n, (i = this.namespace.rpcMap) == null ? void 0 : i[e]);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Be = Object.defineProperty, Ge = (s, t, e)=>t in s ? Be(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, q = (s, t, e)=>Ge(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass Je {\n    constructor(t){\n        q(this, \"name\", \"near\"), q(this, \"client\"), q(this, \"httpProviders\"), q(this, \"events\"), q(this, \"namespace\"), q(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        if (this.chainId = t, !this.httpProviders[t]) {\n            const i = e || d(`${this.name}:${t}`, this.namespace);\n            if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n            this.setHttpProvider(t, i);\n        }\n        this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            var i;\n            t[e] = this.createHttpProvider(e, (i = this.namespace.rpcMap) == null ? void 0 : i[e]);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar ze = Object.defineProperty, ke = (s, t, e)=>t in s ? ze(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, j = (s, t, e)=>ke(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass We {\n    constructor(t){\n        j(this, \"name\", \"tezos\"), j(this, \"client\"), j(this, \"httpProviders\"), j(this, \"events\"), j(this, \"namespace\"), j(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace = Object.assign(this.namespace, t);\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);\n    }\n    setDefaultChain(t, e) {\n        if (this.chainId = t, !this.httpProviders[t]) {\n            const i = e || d(`${this.name}:${t}`, this.namespace);\n            if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n            this.setHttpProvider(t, i);\n        }\n        this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]) || [] : [];\n    }\n    createHttpProviders() {\n        const t = {};\n        return this.namespace.chains.forEach((e)=>{\n            t[e] = this.createHttpProvider(e);\n        }), t;\n    }\n    getHttpProvider() {\n        const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace);\n        return typeof i > \"u\" ? void 0 : new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i));\n    }\n}\nvar Ke = Object.defineProperty, Ve = (s, t, e)=>t in s ? Ke(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, R = (s, t, e)=>Ve(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass Xe {\n    constructor(t){\n        R(this, \"name\", I), R(this, \"client\"), R(this, \"httpProviders\"), R(this, \"events\"), R(this, \"namespace\"), R(this, \"chainId\"), this.namespace = t.namespace, this.events = h(\"events\"), this.client = h(\"client\"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();\n    }\n    updateNamespace(t) {\n        this.namespace.chains = [\n            ...new Set((this.namespace.chains || []).concat(t.chains || []))\n        ], this.namespace.accounts = [\n            ...new Set((this.namespace.accounts || []).concat(t.accounts || []))\n        ], this.namespace.methods = [\n            ...new Set((this.namespace.methods || []).concat(t.methods || []))\n        ], this.namespace.events = [\n            ...new Set((this.namespace.events || []).concat(t.events || []))\n        ], this.httpProviders = this.createHttpProviders();\n    }\n    requestAccounts() {\n        return this.getAccounts();\n    }\n    request(t) {\n        return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider(t.chainId).request(t.request);\n    }\n    setDefaultChain(t, e) {\n        this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);\n    }\n    getDefaultChain() {\n        if (this.chainId) return this.chainId;\n        if (this.namespace.defaultChain) return this.namespace.defaultChain;\n        const t = this.namespace.chains[0];\n        if (!t) throw new Error(\"ChainId not found\");\n        return t.split(\":\")[1];\n    }\n    getAccounts() {\n        const t = this.namespace.accounts;\n        return t ? [\n            ...new Set(t.filter((e)=>e.split(\":\")[1] === this.chainId.toString()).map((e)=>e.split(\":\")[2]))\n        ] : [];\n    }\n    createHttpProviders() {\n        var t, e;\n        const i = {};\n        return (e = (t = this.namespace) == null ? void 0 : t.accounts) == null || e.forEach((n)=>{\n            const a = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseChainId)(n);\n            i[`${a.namespace}:${a.reference}`] = this.createHttpProvider(n);\n        }), i;\n    }\n    getHttpProvider(t) {\n        const e = this.httpProviders[t];\n        if (typeof e > \"u\") throw new Error(`JSON-RPC provider for ${t} not found`);\n        return e;\n    }\n    setHttpProvider(t, e) {\n        const i = this.createHttpProvider(t, e);\n        i && (this.httpProviders[t] = i);\n    }\n    createHttpProvider(t, e) {\n        const i = e || d(t, this.namespace, this.client.core.projectId);\n        if (!i) throw new Error(`No RPC url provided for chainId: ${t}`);\n        return new _walletconnect_jsonrpc_provider__WEBPACK_IMPORTED_MODULE_2__.JsonRpcProvider(new _walletconnect_jsonrpc_http_connection__WEBPACK_IMPORTED_MODULE_1__[\"default\"](i, h(\"disableProviderPing\")));\n    }\n}\nvar Ye = Object.defineProperty, Qe = Object.defineProperties, Ze = Object.getOwnPropertyDescriptors, It = Object.getOwnPropertySymbols, Te = Object.prototype.hasOwnProperty, ts = Object.prototype.propertyIsEnumerable, Y = (s, t, e)=>t in s ? Ye(s, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : s[t] = e, x = (s, t)=>{\n    for(var e in t || (t = {}))Te.call(t, e) && Y(s, e, t[e]);\n    if (It) for (var e of It(t))ts.call(t, e) && Y(s, e, t[e]);\n    return s;\n}, Q = (s, t)=>Qe(s, Ze(t)), l = (s, t, e)=>Y(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nclass B {\n    constructor(t){\n        l(this, \"client\"), l(this, \"namespaces\"), l(this, \"optionalNamespaces\"), l(this, \"sessionProperties\"), l(this, \"scopedProperties\"), l(this, \"events\", new (events__WEBPACK_IMPORTED_MODULE_4___default())), l(this, \"rpcProviders\", {}), l(this, \"session\"), l(this, \"providerOpts\"), l(this, \"logger\"), l(this, \"uri\"), l(this, \"disableProviderPing\", !1), this.providerOpts = t, this.logger = typeof t?.logger < \"u\" && typeof t?.logger != \"string\" ? t.logger : (0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.pino)((0,_walletconnect_logger__WEBPACK_IMPORTED_MODULE_0__.getDefaultLoggerOptions)({\n            level: t?.logger || et\n        })), this.disableProviderPing = t?.disableProviderPing || !1;\n    }\n    static async init(t) {\n        const e = new B(t);\n        return await e.initialize(), e;\n    }\n    async request(t, e, i) {\n        const [n, a] = this.validateChain(e);\n        if (!this.session) throw new Error(\"Please call connect() before request()\");\n        return await this.getProvider(n).request({\n            request: x({}, t),\n            chainId: `${n}:${a}`,\n            topic: this.session.topic,\n            expiry: i\n        });\n    }\n    sendAsync(t, e, i, n) {\n        const a = new Date().getTime();\n        this.request(t, i, n).then((r)=>e(null, (0,_walletconnect_jsonrpc_utils__WEBPACK_IMPORTED_MODULE_3__.formatJsonRpcResult)(a, r))).catch((r)=>e(r, void 0));\n    }\n    async enable() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        return this.session || await this.connect({\n            namespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties,\n            scopedProperties: this.scopedProperties\n        }), await this.requestAccounts();\n    }\n    async disconnect() {\n        var t;\n        if (!this.session) throw new Error(\"Please call connect() before enable()\");\n        await this.client.disconnect({\n            topic: (t = this.session) == null ? void 0 : t.topic,\n            reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")\n        }), await this.cleanup();\n    }\n    async connect(t) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (this.setNamespaces(t), await this.cleanupPendingPairings(), !t.skipPairing) return await this.pair(t.pairingTopic);\n    }\n    async authenticate(t, e) {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        this.setNamespaces(t), await this.cleanupPendingPairings();\n        const { uri: i, response: n } = await this.client.authenticate(t, e);\n        i && (this.uri = i, this.events.emit(\"display_uri\", i));\n        const a = await n();\n        if (this.session = a.session, this.session) {\n            const r = gt(this.session.namespaces);\n            this.namespaces = M(this.namespaces, r), await this.persist(\"namespaces\", this.namespaces), this.onConnect();\n        }\n        return a;\n    }\n    on(t, e) {\n        this.events.on(t, e);\n    }\n    once(t, e) {\n        this.events.once(t, e);\n    }\n    removeListener(t, e) {\n        this.events.removeListener(t, e);\n    }\n    off(t, e) {\n        this.events.off(t, e);\n    }\n    get isWalletConnect() {\n        return !0;\n    }\n    async pair(t) {\n        const { uri: e, approval: i } = await this.client.connect({\n            pairingTopic: t,\n            requiredNamespaces: this.namespaces,\n            optionalNamespaces: this.optionalNamespaces,\n            sessionProperties: this.sessionProperties,\n            scopedProperties: this.scopedProperties\n        });\n        e && (this.uri = e, this.events.emit(\"display_uri\", e));\n        const n = await i();\n        this.session = n;\n        const a = gt(n.namespaces);\n        return this.namespaces = M(this.namespaces, a), await this.persist(\"namespaces\", this.namespaces), await this.persist(\"optionalNamespaces\", this.optionalNamespaces), this.onConnect(), this.session;\n    }\n    setDefaultChain(t, e) {\n        try {\n            if (!this.session) return;\n            const [i, n] = this.validateChain(t), a = this.getProvider(i);\n            a.name === I ? a.setDefaultChain(`${i}:${n}`, e) : a.setDefaultChain(n, e);\n        } catch (i) {\n            if (!/Please call connect/.test(i.message)) throw i;\n        }\n    }\n    async cleanupPendingPairings(t = {}) {\n        this.logger.info(\"Cleaning up inactive pairings...\");\n        const e = this.client.pairing.getAll();\n        if ((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(e)) {\n            for (const i of e)t.deletePairings ? this.client.core.expirer.set(i.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i.topic);\n            this.logger.info(`Inactive pairings cleared: ${e.length}`);\n        }\n    }\n    abortPairingAttempt() {\n        this.logger.warn(\"abortPairingAttempt is deprecated. This is now a no-op.\");\n    }\n    async checkStorage() {\n        this.namespaces = await this.getFromStore(\"namespaces\") || {}, this.optionalNamespaces = await this.getFromStore(\"optionalNamespaces\") || {}, this.session && this.createProviders();\n    }\n    async initialize() {\n        this.logger.trace(\"Initialized\"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();\n    }\n    async createClient() {\n        var t, e;\n        if (this.client = this.providerOpts.client || await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_6__[\"default\"].init({\n            core: this.providerOpts.core,\n            logger: this.providerOpts.logger || et,\n            relayUrl: this.providerOpts.relayUrl || St,\n            projectId: this.providerOpts.projectId,\n            metadata: this.providerOpts.metadata,\n            storageOptions: this.providerOpts.storageOptions,\n            storage: this.providerOpts.storage,\n            name: this.providerOpts.name,\n            customStoragePrefix: this.providerOpts.customStoragePrefix,\n            telemetryEnabled: this.providerOpts.telemetryEnabled\n        }), this.providerOpts.session) try {\n            this.session = this.client.session.get(this.providerOpts.session.topic);\n        } catch (i) {\n            throw this.logger.error(\"Failed to get session\", i), new Error(`The provided session: ${(e = (t = this.providerOpts) == null ? void 0 : t.session) == null ? void 0 : e.topic} doesn't exist in the Sign client`);\n        }\n        else {\n            const i = this.client.session.getAll();\n            this.session = i[0];\n        }\n        this.logger.trace(\"SignClient Initialized\");\n    }\n    createProviders() {\n        if (!this.client) throw new Error(\"Sign Client not initialized\");\n        if (!this.session) throw new Error(\"Session not initialized. Please call connect() before enable()\");\n        const t = [\n            ...new Set(Object.keys(this.session.namespaces).map((e)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(e)))\n        ];\n        V(\"client\", this.client), V(\"events\", this.events), V(\"disableProviderPing\", this.disableProviderPing), t.forEach((e)=>{\n            if (!this.session) return;\n            const i = le(e, this.session), n = ft(i), a = M(this.namespaces, this.optionalNamespaces), r = Q(x({}, a[e]), {\n                accounts: i,\n                chains: n\n            });\n            switch(e){\n                case \"eip155\":\n                    this.rpcProviders[e] = new Ie({\n                        namespace: r\n                    });\n                    break;\n                case \"algorand\":\n                    this.rpcProviders[e] = new De({\n                        namespace: r\n                    });\n                    break;\n                case \"solana\":\n                    this.rpcProviders[e] = new Ae({\n                        namespace: r\n                    });\n                    break;\n                case \"cosmos\":\n                    this.rpcProviders[e] = new Ee({\n                        namespace: r\n                    });\n                    break;\n                case \"polkadot\":\n                    this.rpcProviders[e] = new ve({\n                        namespace: r\n                    });\n                    break;\n                case \"cip34\":\n                    this.rpcProviders[e] = new Re({\n                        namespace: r\n                    });\n                    break;\n                case \"elrond\":\n                    this.rpcProviders[e] = new Fe({\n                        namespace: r\n                    });\n                    break;\n                case \"multiversx\":\n                    this.rpcProviders[e] = new xe({\n                        namespace: r\n                    });\n                    break;\n                case \"near\":\n                    this.rpcProviders[e] = new Je({\n                        namespace: r\n                    });\n                    break;\n                case \"tezos\":\n                    this.rpcProviders[e] = new We({\n                        namespace: r\n                    });\n                    break;\n                default:\n                    this.rpcProviders[I] ? this.rpcProviders[I].updateNamespace(r) : this.rpcProviders[I] = new Xe({\n                        namespace: r\n                    });\n            }\n        });\n    }\n    registerEventListeners() {\n        if (typeof this.client > \"u\") throw new Error(\"Sign Client is not initialized\");\n        this.client.on(\"session_ping\", (t)=>{\n            var e;\n            const { topic: i } = t;\n            i === ((e = this.session) == null ? void 0 : e.topic) && this.events.emit(\"session_ping\", t);\n        }), this.client.on(\"session_event\", (t)=>{\n            var e;\n            const { params: i, topic: n } = t;\n            if (n !== ((e = this.session) == null ? void 0 : e.topic)) return;\n            const { event: a } = i;\n            if (a.name === \"accountsChanged\") {\n                const r = a.data;\n                r && (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(r) && this.events.emit(\"accountsChanged\", r.map(vt));\n            } else if (a.name === \"chainChanged\") {\n                const r = i.chainId, c = i.event.data, o = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(r), m = K(r) !== K(c) ? `${o}:${K(c)}` : r;\n                this.onChainChanged(m);\n            } else this.events.emit(a.name, a.data);\n            this.events.emit(\"session_event\", t);\n        }), this.client.on(\"session_update\", ({ topic: t, params: e })=>{\n            var i, n;\n            if (t !== ((i = this.session) == null ? void 0 : i.topic)) return;\n            const { namespaces: a } = e, r = (n = this.client) == null ? void 0 : n.session.get(t);\n            this.session = Q(x({}, r), {\n                namespaces: a\n            }), this.onSessionUpdate(), this.events.emit(\"session_update\", {\n                topic: t,\n                params: e\n            });\n        }), this.client.on(\"session_delete\", async (t)=>{\n            var e;\n            t.topic === ((e = this.session) == null ? void 0 : e.topic) && (await this.cleanup(), this.events.emit(\"session_delete\", t), this.events.emit(\"disconnect\", Q(x({}, (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.getSdkError)(\"USER_DISCONNECTED\")), {\n                data: t.topic\n            })));\n        }), this.on(u.DEFAULT_CHAIN_CHANGED, (t)=>{\n            this.onChainChanged(t, !0);\n        });\n    }\n    getProvider(t) {\n        return this.rpcProviders[t] || this.rpcProviders[I];\n    }\n    onSessionUpdate() {\n        Object.keys(this.rpcProviders).forEach((t)=>{\n            var e;\n            this.getProvider(t).updateNamespace((e = this.session) == null ? void 0 : e.namespaces[t]);\n        });\n    }\n    setNamespaces(t) {\n        const { namespaces: e = {}, optionalNamespaces: i = {}, sessionProperties: n, scopedProperties: a } = t;\n        this.optionalNamespaces = M(e, i), this.sessionProperties = n, this.scopedProperties = a;\n    }\n    validateChain(t) {\n        const [e, i] = t?.split(\":\") || [\n            \"\",\n            \"\"\n        ];\n        if (!this.namespaces || !Object.keys(this.namespaces).length) return [\n            e,\n            i\n        ];\n        if (e && !Object.keys(this.namespaces || {}).map((r)=>(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(r)).includes(e)) throw new Error(`Namespace '${e}' is not configured. Please call connect() first with namespace config.`);\n        if (e && i) return [\n            e,\n            i\n        ];\n        const n = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.parseNamespaceKey)(Object.keys(this.namespaces)[0]), a = this.rpcProviders[n].getDefaultChain();\n        return [\n            n,\n            a\n        ];\n    }\n    async requestAccounts() {\n        const [t] = this.validateChain();\n        return await this.getProvider(t).requestAccounts();\n    }\n    async onChainChanged(t, e = !1) {\n        if (!this.namespaces) return;\n        const [i, n] = this.validateChain(t);\n        if (!n) return;\n        this.updateNamespaceChain(i, n), this.events.emit(\"chainChanged\", n);\n        const a = this.getProvider(i).getDefaultChain();\n        e || this.getProvider(i).setDefaultChain(n), this.emitAccountsChangedOnChainChange({\n            namespace: i,\n            previousChainId: a,\n            newChainId: t\n        }), await this.persist(\"namespaces\", this.namespaces);\n    }\n    emitAccountsChangedOnChainChange({ namespace: t, previousChainId: e, newChainId: i }) {\n        var n, a;\n        try {\n            if (e === i) return;\n            const r = (a = (n = this.session) == null ? void 0 : n.namespaces[t]) == null ? void 0 : a.accounts;\n            if (!r) return;\n            const c = r.filter((o)=>o.includes(`${i}:`)).map(vt);\n            if (!(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_5__.isValidArray)(c)) return;\n            this.events.emit(\"accountsChanged\", c);\n        } catch (r) {\n            this.logger.warn(\"Failed to emit accountsChanged on chain change\", r);\n        }\n    }\n    updateNamespaceChain(t, e) {\n        if (!this.namespaces) return;\n        const i = this.namespaces[t] ? t : `${t}:${e}`, n = {\n            chains: [],\n            methods: [],\n            events: [],\n            defaultChain: e\n        };\n        this.namespaces[i] ? this.namespaces[i] && (this.namespaces[i].defaultChain = e) : this.namespaces[i] = n;\n    }\n    onConnect() {\n        this.createProviders(), this.events.emit(\"connect\", {\n            session: this.session\n        });\n    }\n    async cleanup() {\n        this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore(\"namespaces\"), await this.deleteFromStore(\"optionalNamespaces\"), await this.deleteFromStore(\"sessionProperties\"), this.session = void 0, await this.cleanupPendingPairings({\n            deletePairings: !0\n        }), await this.cleanupStorage();\n    }\n    async persist(t, e) {\n        var i;\n        const n = ((i = this.session) == null ? void 0 : i.topic) || \"\";\n        await this.client.core.storage.setItem(`${U}/${t}${n}`, e);\n    }\n    async getFromStore(t) {\n        var e;\n        const i = ((e = this.session) == null ? void 0 : e.topic) || \"\";\n        return await this.client.core.storage.getItem(`${U}/${t}${i}`);\n    }\n    async deleteFromStore(t) {\n        var e;\n        const i = ((e = this.session) == null ? void 0 : e.topic) || \"\";\n        await this.client.core.storage.removeItem(`${U}/${t}${i}`);\n    }\n    async cleanupStorage() {\n        var t;\n        try {\n            if (((t = this.client) == null ? void 0 : t.session.length) > 0) return;\n            const e = await this.client.core.storage.getKeys();\n            for (const i of e)i.startsWith(U) && await this.client.core.storage.removeItem(i);\n        } catch (e) {\n            this.logger.warn(\"Failed to cleanup storage\", e);\n        }\n    }\n}\nconst es = B;\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/universal-provider/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/dist/index.es.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BASE10: () => (/* binding */ ln),\n/* harmony export */   BASE16: () => (/* binding */ G),\n/* harmony export */   BASE64: () => (/* binding */ qt),\n/* harmony export */   BASE64URL: () => (/* binding */ xe),\n/* harmony export */   COLON: () => (/* binding */ Qo),\n/* harmony export */   DEFAULT_DEPTH: () => (/* binding */ Re),\n/* harmony export */   EMPTY_SPACE: () => (/* binding */ fe),\n/* harmony export */   ENV_MAP: () => (/* binding */ Y),\n/* harmony export */   INTERNAL_ERRORS: () => (/* binding */ bo),\n/* harmony export */   MemoryStore: () => (/* binding */ Ra),\n/* harmony export */   ONE_THOUSAND: () => (/* binding */ ti),\n/* harmony export */   REACT_NATIVE_PRODUCT: () => (/* binding */ $n),\n/* harmony export */   RELAYER_DEFAULT_PROTOCOL: () => (/* binding */ so),\n/* harmony export */   SDK_ERRORS: () => (/* binding */ wo),\n/* harmony export */   SDK_TYPE: () => (/* binding */ jn),\n/* harmony export */   SLASH: () => (/* binding */ Ln),\n/* harmony export */   TYPE_0: () => (/* binding */ dn),\n/* harmony export */   TYPE_1: () => (/* binding */ Ft),\n/* harmony export */   TYPE_2: () => (/* binding */ re),\n/* harmony export */   UTF8: () => (/* binding */ Kt),\n/* harmony export */   addResourceToRecap: () => (/* binding */ Er),\n/* harmony export */   appendToQueryString: () => (/* binding */ Cn),\n/* harmony export */   assertType: () => (/* binding */ ai),\n/* harmony export */   assignAbilityToActions: () => (/* binding */ He),\n/* harmony export */   base64Decode: () => (/* binding */ wr),\n/* harmony export */   base64Encode: () => (/* binding */ mr),\n/* harmony export */   buildApprovedNamespaces: () => (/* binding */ sa),\n/* harmony export */   buildAuthObject: () => (/* binding */ ss),\n/* harmony export */   buildNamespacesFromAuth: () => (/* binding */ ca),\n/* harmony export */   buildRecapStatement: () => (/* binding */ xr),\n/* harmony export */   calcExpiry: () => (/* binding */ Ei),\n/* harmony export */   capitalize: () => (/* binding */ pi),\n/* harmony export */   capitalizeWord: () => (/* binding */ qn),\n/* harmony export */   createDelayedPromise: () => (/* binding */ gi),\n/* harmony export */   createEncodedRecap: () => (/* binding */ fs),\n/* harmony export */   createExpiringPromise: () => (/* binding */ yi),\n/* harmony export */   createRecap: () => (/* binding */ br),\n/* harmony export */   decodeRecap: () => (/* binding */ yt),\n/* harmony export */   decodeTypeByte: () => (/* binding */ Bt),\n/* harmony export */   decodeTypeTwoEnvelope: () => (/* binding */ Hc),\n/* harmony export */   decrypt: () => (/* binding */ Mc),\n/* harmony export */   deriveSymKey: () => (/* binding */ Cc),\n/* harmony export */   deserialize: () => (/* binding */ Se),\n/* harmony export */   encodeRecap: () => (/* binding */ he),\n/* harmony export */   encodeTypeByte: () => (/* binding */ pn),\n/* harmony export */   encodeTypeTwoEnvelope: () => (/* binding */ Dc),\n/* harmony export */   encrypt: () => (/* binding */ Vc),\n/* harmony export */   engineEvent: () => (/* binding */ xi),\n/* harmony export */   enumify: () => (/* binding */ hi),\n/* harmony export */   extractSolanaTransactionId: () => (/* binding */ Ji),\n/* harmony export */   formatAccountId: () => (/* binding */ Bn),\n/* harmony export */   formatAccountWithChain: () => (/* binding */ Ho),\n/* harmony export */   formatChainId: () => (/* binding */ An),\n/* harmony export */   formatDeeplinkUrl: () => (/* binding */ Kn),\n/* harmony export */   formatExpirerTarget: () => (/* binding */ $e),\n/* harmony export */   formatIdTarget: () => (/* binding */ wi),\n/* harmony export */   formatMessage: () => (/* binding */ hr),\n/* harmony export */   formatMessageContext: () => (/* binding */ ui),\n/* harmony export */   formatRelayParams: () => (/* binding */ uo),\n/* harmony export */   formatRelayRpcUrl: () => (/* binding */ si),\n/* harmony export */   formatStatementFromRecap: () => (/* binding */ Ke),\n/* harmony export */   formatTopicTarget: () => (/* binding */ mi),\n/* harmony export */   formatUA: () => (/* binding */ Mn),\n/* harmony export */   formatUri: () => (/* binding */ Wc),\n/* harmony export */   fromBase64: () => (/* binding */ je),\n/* harmony export */   generateKeyPair: () => (/* binding */ Lc),\n/* harmony export */   generateRandomBytes32: () => (/* binding */ jc),\n/* harmony export */   getAccountsChains: () => (/* binding */ It),\n/* harmony export */   getAccountsFromNamespaces: () => (/* binding */ Ko),\n/* harmony export */   getAddressFromAccount: () => (/* binding */ In),\n/* harmony export */   getAddressesFromAccounts: () => (/* binding */ qo),\n/* harmony export */   getAppId: () => (/* binding */ ri),\n/* harmony export */   getAppMetadata: () => (/* binding */ Pn),\n/* harmony export */   getBrowserOnlineStatus: () => (/* binding */ To),\n/* harmony export */   getChainFromAccount: () => (/* binding */ Nn),\n/* harmony export */   getChainsFromAccounts: () => (/* binding */ Un),\n/* harmony export */   getChainsFromNamespace: () => (/* binding */ ue),\n/* harmony export */   getChainsFromNamespaces: () => (/* binding */ Fo),\n/* harmony export */   getChainsFromRecap: () => (/* binding */ hs),\n/* harmony export */   getChainsFromRequiredNamespaces: () => (/* binding */ zo),\n/* harmony export */   getCommonValuesInArrays: () => (/* binding */ Le),\n/* harmony export */   getCryptoKeyFromKeyData: () => (/* binding */ io),\n/* harmony export */   getDecodedRecapFromResources: () => (/* binding */ pr),\n/* harmony export */   getDeepLink: () => (/* binding */ Oi),\n/* harmony export */   getDidAddress: () => (/* binding */ De),\n/* harmony export */   getDidAddressSegments: () => (/* binding */ de),\n/* harmony export */   getDidChainId: () => (/* binding */ lr),\n/* harmony export */   getEnvironment: () => (/* binding */ xt),\n/* harmony export */   getHttpUrl: () => (/* binding */ ci),\n/* harmony export */   getInternalError: () => (/* binding */ ht),\n/* harmony export */   getJavascriptID: () => (/* binding */ Vn),\n/* harmony export */   getJavascriptOS: () => (/* binding */ kn),\n/* harmony export */   getLastItems: () => (/* binding */ Hn),\n/* harmony export */   getLinkModeURL: () => (/* binding */ Xc),\n/* harmony export */   getMethodsFromRecap: () => (/* binding */ ds),\n/* harmony export */   getNamespacedDidChainId: () => (/* binding */ dr),\n/* harmony export */   getNamespacesChains: () => (/* binding */ ho),\n/* harmony export */   getNamespacesEventsForChainId: () => (/* binding */ go),\n/* harmony export */   getNamespacesFromAccounts: () => (/* binding */ mo),\n/* harmony export */   getNamespacesMethodsForChainId: () => (/* binding */ po),\n/* harmony export */   getNodeOnlineStatus: () => (/* binding */ _o),\n/* harmony export */   getReCapActions: () => (/* binding */ yr),\n/* harmony export */   getReactNativeOnlineStatus: () => (/* binding */ Ro),\n/* harmony export */   getRecapAbilitiesFromResource: () => (/* binding */ us),\n/* harmony export */   getRecapFromResources: () => (/* binding */ pe),\n/* harmony export */   getRecapResource: () => (/* binding */ gr),\n/* harmony export */   getRelayClientMetadata: () => (/* binding */ ii),\n/* harmony export */   getRelayProtocolApi: () => (/* binding */ Yc),\n/* harmony export */   getRelayProtocolName: () => (/* binding */ Zc),\n/* harmony export */   getRequiredNamespacesFromNamespaces: () => (/* binding */ ia),\n/* harmony export */   getSdkError: () => (/* binding */ Nt),\n/* harmony export */   getSearchParamFromURL: () => (/* binding */ Ai),\n/* harmony export */   getUniqueValues: () => (/* binding */ Te),\n/* harmony export */   handleDeeplinkRedirect: () => (/* binding */ Si),\n/* harmony export */   hasOverlap: () => (/* binding */ gt),\n/* harmony export */   hashEthereumMessage: () => (/* binding */ Ve),\n/* harmony export */   hashKey: () => (/* binding */ Pc),\n/* harmony export */   hashMessage: () => (/* binding */ kc),\n/* harmony export */   isAndroid: () => (/* binding */ ei),\n/* harmony export */   isAppVisible: () => (/* binding */ Ta),\n/* harmony export */   isBrowser: () => (/* binding */ Tt),\n/* harmony export */   isCaipNamespace: () => (/* binding */ yn),\n/* harmony export */   isConformingNamespaces: () => (/* binding */ No),\n/* harmony export */   isExpired: () => (/* binding */ vi),\n/* harmony export */   isIframe: () => (/* binding */ Zn),\n/* harmony export */   isIos: () => (/* binding */ ni),\n/* harmony export */   isNode: () => (/* binding */ _e),\n/* harmony export */   isOnline: () => (/* binding */ Na),\n/* harmony export */   isProposalStruct: () => (/* binding */ la),\n/* harmony export */   isReactNative: () => (/* binding */ pt),\n/* harmony export */   isRecap: () => (/* binding */ qe),\n/* harmony export */   isSessionCompatible: () => (/* binding */ ua),\n/* harmony export */   isSessionStruct: () => (/* binding */ da),\n/* harmony export */   isTelegram: () => (/* binding */ zn),\n/* harmony export */   isTestRun: () => (/* binding */ Ii),\n/* harmony export */   isTypeOneEnvelope: () => (/* binding */ Kc),\n/* harmony export */   isTypeTwoEnvelope: () => (/* binding */ Fc),\n/* harmony export */   isUndefined: () => (/* binding */ Et),\n/* harmony export */   isValidAccountId: () => (/* binding */ Eo),\n/* harmony export */   isValidAccounts: () => (/* binding */ So),\n/* harmony export */   isValidActions: () => (/* binding */ Ao),\n/* harmony export */   isValidArray: () => (/* binding */ se),\n/* harmony export */   isValidChainId: () => (/* binding */ ce),\n/* harmony export */   isValidChains: () => (/* binding */ vo),\n/* harmony export */   isValidController: () => (/* binding */ ha),\n/* harmony export */   isValidEip1271Signature: () => (/* binding */ cr),\n/* harmony export */   isValidEip191Signature: () => (/* binding */ sr),\n/* harmony export */   isValidErrorReason: () => (/* binding */ wa),\n/* harmony export */   isValidEvent: () => (/* binding */ va),\n/* harmony export */   isValidId: () => (/* binding */ ya),\n/* harmony export */   isValidNamespaceAccounts: () => (/* binding */ Oo),\n/* harmony export */   isValidNamespaceActions: () => (/* binding */ wn),\n/* harmony export */   isValidNamespaceChains: () => (/* binding */ xo),\n/* harmony export */   isValidNamespaceMethodsOrEvents: () => (/* binding */ mn),\n/* harmony export */   isValidNamespaces: () => (/* binding */ Bo),\n/* harmony export */   isValidNamespacesChainId: () => (/* binding */ xa),\n/* harmony export */   isValidNamespacesEvent: () => (/* binding */ Oa),\n/* harmony export */   isValidNamespacesRequest: () => (/* binding */ Sa),\n/* harmony export */   isValidNumber: () => (/* binding */ Ae),\n/* harmony export */   isValidObject: () => (/* binding */ Oe),\n/* harmony export */   isValidParams: () => (/* binding */ ma),\n/* harmony export */   isValidRecap: () => (/* binding */ at),\n/* harmony export */   isValidRelay: () => (/* binding */ Io),\n/* harmony export */   isValidRelays: () => (/* binding */ ga),\n/* harmony export */   isValidRequest: () => (/* binding */ ba),\n/* harmony export */   isValidRequestExpiry: () => (/* binding */ Ia),\n/* harmony export */   isValidRequiredNamespaces: () => (/* binding */ pa),\n/* harmony export */   isValidResponse: () => (/* binding */ Ea),\n/* harmony export */   isValidString: () => (/* binding */ nt),\n/* harmony export */   isValidUrl: () => (/* binding */ fa),\n/* harmony export */   mapEntries: () => (/* binding */ di),\n/* harmony export */   mapToObj: () => (/* binding */ fi),\n/* harmony export */   mergeArrays: () => (/* binding */ ot),\n/* harmony export */   mergeEncodedRecaps: () => (/* binding */ ls),\n/* harmony export */   mergeRecaps: () => (/* binding */ vr),\n/* harmony export */   mergeRequiredAndOptionalNamespaces: () => (/* binding */ aa),\n/* harmony export */   normalizeNamespaces: () => (/* binding */ ie),\n/* harmony export */   objToMap: () => (/* binding */ li),\n/* harmony export */   openDeeplink: () => (/* binding */ Fn),\n/* harmony export */   parseAccountId: () => (/* binding */ Ue),\n/* harmony export */   parseChainId: () => (/* binding */ Ne),\n/* harmony export */   parseContextNames: () => (/* binding */ Dn),\n/* harmony export */   parseExpirerTarget: () => (/* binding */ bi),\n/* harmony export */   parseNamespaceKey: () => (/* binding */ yo),\n/* harmony export */   parseRelayParams: () => (/* binding */ co),\n/* harmony export */   parseTopic: () => (/* binding */ ao),\n/* harmony export */   parseUri: () => (/* binding */ Gc),\n/* harmony export */   populateAppMetadata: () => (/* binding */ oi),\n/* harmony export */   populateAuthPayload: () => (/* binding */ cs),\n/* harmony export */   recapHasResource: () => (/* binding */ as),\n/* harmony export */   serialize: () => (/* binding */ gn),\n/* harmony export */   sleep: () => (/* binding */ Ni),\n/* harmony export */   subscribeToBrowserNetworkChange: () => (/* binding */ $o),\n/* harmony export */   subscribeToNetworkChange: () => (/* binding */ Ua),\n/* harmony export */   subscribeToReactNativeNetworkChange: () => (/* binding */ Lo),\n/* harmony export */   toBase64: () => (/* binding */ Yn),\n/* harmony export */   uuidv4: () => (/* binding */ Bi),\n/* harmony export */   validateDecoding: () => (/* binding */ qc),\n/* harmony export */   validateEncoding: () => (/* binding */ oo),\n/* harmony export */   validateSignedCacao: () => (/* binding */ is),\n/* harmony export */   verifyP256Jwt: () => (/* binding */ zc),\n/* harmony export */   verifySignature: () => (/* binding */ ir)\n/* harmony export */ });\n/* harmony import */ var detect_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! detect-browser */ \"(ssr)/./node_modules/detect-browser/es/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @walletconnect/time */ \"(ssr)/./node_modules/@walletconnect/time/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_time__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\n/* harmony import */ var _walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @walletconnect/window-metadata */ \"(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/src/esm/index.js\");\n/* harmony import */ var _walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @walletconnect/relay-auth */ \"(ssr)/./node_modules/@walletconnect/relay-auth/dist/index.es.js\");\n/* harmony import */ var uint8arrays__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uint8arrays */ \"(ssr)/./node_modules/uint8arrays/esm/src/index.js\");\n/* harmony import */ var _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/relay-api */ \"(ssr)/./node_modules/@walletconnect/relay-api/dist/index.es.js\");\n\n\n\n\n\n\n\n\n\nconst ae = \":\";\nfunction Ne(t) {\n    const [e, n] = t.split(ae);\n    return {\n        namespace: e,\n        reference: n\n    };\n}\nfunction An(t) {\n    const { namespace: e, reference: n } = t;\n    return [\n        e,\n        n\n    ].join(ae);\n}\nfunction Ue(t) {\n    const [e, n, r] = t.split(ae);\n    return {\n        namespace: e,\n        reference: n,\n        address: r\n    };\n}\nfunction Bn(t) {\n    const { namespace: e, reference: n, address: r } = t;\n    return [\n        e,\n        n,\n        r\n    ].join(ae);\n}\nfunction Te(t, e) {\n    const n = [];\n    return t.forEach((r)=>{\n        const o = e(r);\n        n.includes(o) || n.push(o);\n    }), n;\n}\nfunction In(t) {\n    const { address: e } = Ue(t);\n    return e;\n}\nfunction Nn(t) {\n    const { namespace: e, reference: n } = Ue(t);\n    return An({\n        namespace: e,\n        reference: n\n    });\n}\nfunction Ho(t, e) {\n    const { namespace: n, reference: r } = Ne(e);\n    return Bn({\n        namespace: n,\n        reference: r,\n        address: t\n    });\n}\nfunction qo(t) {\n    return Te(t, In);\n}\nfunction Un(t) {\n    return Te(t, Nn);\n}\nfunction Ko(t, e = []) {\n    const n = [];\n    return Object.keys(t).forEach((r)=>{\n        if (e.length && !e.includes(r)) return;\n        const o = t[r];\n        n.push(...o.accounts);\n    }), n;\n}\nfunction Fo(t, e = []) {\n    const n = [];\n    return Object.keys(t).forEach((r)=>{\n        if (e.length && !e.includes(r)) return;\n        const o = t[r];\n        n.push(...Un(o.accounts));\n    }), n;\n}\nfunction zo(t, e = []) {\n    const n = [];\n    return Object.keys(t).forEach((r)=>{\n        if (e.length && !e.includes(r)) return;\n        const o = t[r];\n        n.push(...ue(r, o));\n    }), n;\n}\nfunction ue(t, e) {\n    return t.includes(\":\") ? [\n        t\n    ] : e.chains || [];\n}\nvar Zo = Object.defineProperty, Yo = Object.defineProperties, Go = Object.getOwnPropertyDescriptors, Tn = Object.getOwnPropertySymbols, Wo = Object.prototype.hasOwnProperty, Xo = Object.prototype.propertyIsEnumerable, Rn = (t, e, n)=>e in t ? Zo(t, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : t[e] = n, _n = (t, e)=>{\n    for(var n in e || (e = {}))Wo.call(e, n) && Rn(t, n, e[n]);\n    if (Tn) for (var n of Tn(e))Xo.call(e, n) && Rn(t, n, e[n]);\n    return t;\n}, Jo = (t, e)=>Yo(t, Go(e));\nconst $n = \"ReactNative\", Y = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\"\n}, fe = \" \", Qo = \":\", Ln = \"/\", Re = 2, ti = 1e3, jn = \"js\";\nfunction _e() {\n    return typeof process < \"u\" && typeof process.versions < \"u\" && typeof process.versions.node < \"u\";\n}\nfunction pt() {\n    return !(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && navigator.product === $n;\n}\nfunction ei() {\n    return pt() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\" && (global == null ? void 0 : global.Platform.OS) === \"android\";\n}\nfunction ni() {\n    return pt() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\" && (global == null ? void 0 : global.Platform.OS) === \"ios\";\n}\nfunction Tt() {\n    return !_e() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getNavigator)() && !!(0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)();\n}\nfunction xt() {\n    return pt() ? Y.reactNative : _e() ? Y.node : Tt() ? Y.browser : Y.unknown;\n}\nfunction ri() {\n    var t;\n    try {\n        return pt() && typeof global < \"u\" && typeof (global == null ? void 0 : global.Application) < \"u\" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;\n    } catch  {\n        return;\n    }\n}\nfunction Cn(t, e) {\n    const n = new URLSearchParams(t);\n    for (const r of Object.keys(e).sort())if (e.hasOwnProperty(r)) {\n        const o = e[r];\n        o !== void 0 && n.set(r, o);\n    }\n    return n.toString();\n}\nfunction oi(t) {\n    var e, n;\n    const r = Pn();\n    try {\n        return t != null && t.url && r.url && new URL(t.url).host !== new URL(r.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r.url}. This is probably unintended and can lead to issues.`), t.url = r.url), (e = t?.icons) != null && e.length && t.icons.length > 0 && (t.icons = t.icons.filter((o)=>o !== \"\")), Jo(_n(_n({}, r), t), {\n            url: t?.url || r.url,\n            name: t?.name || r.name,\n            description: t?.description || r.description,\n            icons: (n = t?.icons) != null && n.length && t.icons.length > 0 ? t.icons : r.icons\n        });\n    } catch (o) {\n        return console.warn(\"Error populating app metadata\", o), t || r;\n    }\n}\nfunction Pn() {\n    return (0,_walletconnect_window_metadata__WEBPACK_IMPORTED_MODULE_2__.getWindowMetadata)() || {\n        name: \"\",\n        description: \"\",\n        url: \"\",\n        icons: [\n            \"\"\n        ]\n    };\n}\nfunction ii(t, e) {\n    var n;\n    const r = xt(), o = {\n        protocol: t,\n        version: e,\n        env: r\n    };\n    return r === \"browser\" && (o.host = ((n = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : n.host) || \"unknown\"), o;\n}\nfunction kn() {\n    if (xt() === Y.reactNative && typeof global < \"u\" && typeof (global == null ? void 0 : global.Platform) < \"u\") {\n        const { OS: n, Version: r } = global.Platform;\n        return [\n            n,\n            r\n        ].join(\"-\");\n    }\n    const t = (0,detect_browser__WEBPACK_IMPORTED_MODULE_7__.detect)();\n    if (t === null) return \"unknown\";\n    const e = t.os ? t.os.replace(\" \", \"\").toLowerCase() : \"unknown\";\n    return t.type === \"browser\" ? [\n        e,\n        t.name,\n        t.version\n    ].join(\"-\") : [\n        e,\n        t.version\n    ].join(\"-\");\n}\nfunction Vn() {\n    var t;\n    const e = xt();\n    return e === Y.browser ? [\n        e,\n        ((t = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getLocation)()) == null ? void 0 : t.host) || \"unknown\"\n    ].join(\":\") : e;\n}\nfunction Mn(t, e, n) {\n    const r = kn(), o = Vn();\n    return [\n        [\n            t,\n            e\n        ].join(\"-\"),\n        [\n            jn,\n            n\n        ].join(\"-\"),\n        r,\n        o\n    ].join(\"/\");\n}\nfunction si({ protocol: t, version: e, relayUrl: n, sdkVersion: r, auth: o, projectId: i, useOnCloseEvent: s, bundleId: c, packageName: a }) {\n    const u = n.split(\"?\"), l = Mn(t, e, r), f = {\n        auth: o,\n        ua: l,\n        projectId: i,\n        useOnCloseEvent: s || void 0,\n        packageName: a || void 0,\n        bundleId: c || void 0\n    }, h = Cn(u[1] || \"\", f);\n    return u[0] + \"?\" + h;\n}\nfunction ci(t) {\n    let e = (t.match(/^[^:]+(?=:\\/\\/)/gi) || [])[0];\n    const n = typeof e < \"u\" ? t.split(\"://\")[1] : t;\n    return e = e === \"wss\" ? \"https\" : \"http\", [\n        e,\n        n\n    ].join(\"://\");\n}\nfunction ai(t, e, n) {\n    if (!t[e] || typeof t[e] !== n) throw new Error(`Missing or invalid \"${e}\" param`);\n}\nfunction Dn(t, e = Re) {\n    return Hn(t.split(Ln), e);\n}\nfunction ui(t) {\n    return Dn(t).join(fe);\n}\nfunction gt(t, e) {\n    return t.filter((n)=>e.includes(n)).length === t.length;\n}\nfunction Hn(t, e = Re) {\n    return t.slice(Math.max(t.length - e, 0));\n}\nfunction fi(t) {\n    return Object.fromEntries(t.entries());\n}\nfunction li(t) {\n    return new Map(Object.entries(t));\n}\nfunction di(t, e) {\n    const n = {};\n    return Object.keys(t).forEach((r)=>{\n        n[r] = e(t[r]);\n    }), n;\n}\nconst hi = (t)=>t;\nfunction qn(t) {\n    return t.trim().replace(/^\\w/, (e)=>e.toUpperCase());\n}\nfunction pi(t) {\n    return t.split(fe).map((e)=>qn(e)).join(fe);\n}\nfunction gi(t = _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES, e) {\n    const n = (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(t || _walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.FIVE_MINUTES);\n    let r, o, i, s;\n    return {\n        resolve: (c)=>{\n            i && r && (clearTimeout(i), r(c), s = Promise.resolve(c));\n        },\n        reject: (c)=>{\n            i && o && (clearTimeout(i), o(c));\n        },\n        done: ()=>new Promise((c, a)=>{\n                if (s) return c(s);\n                i = setTimeout(()=>{\n                    const u = new Error(e);\n                    s = Promise.reject(u), a(u);\n                }, n), r = c, o = a;\n            })\n    };\n}\nfunction yi(t, e, n) {\n    return new Promise(async (r, o)=>{\n        const i = setTimeout(()=>o(new Error(n)), e);\n        try {\n            const s = await t;\n            r(s);\n        } catch (s) {\n            o(s);\n        }\n        clearTimeout(i);\n    });\n}\nfunction $e(t, e) {\n    if (typeof e == \"string\" && e.startsWith(`${t}:`)) return e;\n    if (t.toLowerCase() === \"topic\") {\n        if (typeof e != \"string\") throw new Error('Value must be \"string\" for expirer target type: topic');\n        return `topic:${e}`;\n    } else if (t.toLowerCase() === \"id\") {\n        if (typeof e != \"number\") throw new Error('Value must be \"number\" for expirer target type: id');\n        return `id:${e}`;\n    }\n    throw new Error(`Unknown expirer target type: ${t}`);\n}\nfunction mi(t) {\n    return $e(\"topic\", t);\n}\nfunction wi(t) {\n    return $e(\"id\", t);\n}\nfunction bi(t) {\n    const [e, n] = t.split(\":\"), r = {\n        id: void 0,\n        topic: void 0\n    };\n    if (e === \"topic\" && typeof n == \"string\") r.topic = n;\n    else if (e === \"id\" && Number.isInteger(Number(n))) r.id = Number(n);\n    else throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${n}`);\n    return r;\n}\nfunction Ei(t, e) {\n    return (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.fromMiliseconds)((e || Date.now()) + (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(t));\n}\nfunction vi(t) {\n    return Date.now() >= (0,_walletconnect_time__WEBPACK_IMPORTED_MODULE_0__.toMiliseconds)(t);\n}\nfunction xi(t, e) {\n    return `${t}${e ? `:${e}` : \"\"}`;\n}\nfunction ot(t = [], e = []) {\n    return [\n        ...new Set([\n            ...t,\n            ...e\n        ])\n    ];\n}\nasync function Si({ id: t, topic: e, wcDeepLink: n }) {\n    var r;\n    try {\n        if (!n) return;\n        const o = typeof n == \"string\" ? JSON.parse(n) : n, i = o?.href;\n        if (typeof i != \"string\") return;\n        const s = Kn(i, t, e), c = xt();\n        if (c === Y.browser) {\n            if (!((r = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)()) != null && r.hasFocus())) {\n                console.warn(\"Document does not have focus, skipping deeplink.\");\n                return;\n            }\n            Fn(s);\n        } else c === Y.reactNative && typeof (global == null ? void 0 : global.Linking) < \"u\" && await global.Linking.openURL(s);\n    } catch (o) {\n        console.error(o);\n    }\n}\nfunction Kn(t, e, n) {\n    const r = `requestId=${e}&sessionTopic=${n}`;\n    t.endsWith(\"/\") && (t = t.slice(0, -1));\n    let o = `${t}`;\n    if (t.startsWith(\"https://t.me\")) {\n        const i = t.includes(\"?\") ? \"&startapp=\" : \"?startapp=\";\n        o = `${o}${i}${Yn(r, !0)}`;\n    } else o = `${o}/wc?${r}`;\n    return o;\n}\nfunction Fn(t) {\n    let e = \"_self\";\n    Zn() ? e = \"_top\" : (zn() || t.startsWith(\"https://\") || t.startsWith(\"http://\")) && (e = \"_blank\"), window.open(t, e, \"noreferrer noopener\");\n}\nasync function Oi(t, e) {\n    let n = \"\";\n    try {\n        if (Tt() && (n = localStorage.getItem(e), n)) return n;\n        n = await t.getItem(e);\n    } catch (r) {\n        console.error(r);\n    }\n    return n;\n}\nfunction Le(t, e) {\n    return t.filter((n)=>e.includes(n));\n}\nfunction Ai(t, e) {\n    if (!t.includes(e)) return null;\n    const n = t.split(/([&,?,=])/), r = n.indexOf(e);\n    return n[r + 2];\n}\nfunction Bi() {\n    return typeof crypto < \"u\" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/gu, (t)=>{\n        const e = Math.random() * 16 | 0;\n        return (t === \"x\" ? e : e & 3 | 8).toString(16);\n    });\n}\nfunction Ii() {\n    return typeof process < \"u\" && process.env.IS_VITEST === \"true\";\n}\nfunction zn() {\n    return  false && (0);\n}\nfunction Zn() {\n    try {\n        return window.self !== window.top;\n    } catch  {\n        return !1;\n    }\n}\nfunction Yn(t, e = !1) {\n    const n = Buffer.from(t).toString(\"base64\");\n    return e ? n.replace(/[=]/g, \"\") : n;\n}\nfunction je(t) {\n    return Buffer.from(t, \"base64\").toString(\"utf-8\");\n}\nfunction Ni(t) {\n    return new Promise((e)=>setTimeout(e, t));\n}\nfunction Wt(t) {\n    if (!Number.isSafeInteger(t) || t < 0) throw new Error(\"positive integer expected, got \" + t);\n}\nfunction Ui(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction Xt(t, ...e) {\n    if (!Ui(t)) throw new Error(\"Uint8Array expected\");\n    if (e.length > 0 && !e.includes(t.length)) throw new Error(\"Uint8Array expected of length \" + e + \", got length=\" + t.length);\n}\nfunction Ce(t) {\n    if (typeof t != \"function\" || typeof t.create != \"function\") throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    Wt(t.outputLen), Wt(t.blockLen);\n}\nfunction Rt(t, e = !0) {\n    if (t.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (e && t.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction Gn(t, e) {\n    Xt(t);\n    const n = e.outputLen;\n    if (t.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nconst le = BigInt(2 ** 32 - 1), Wn = BigInt(32);\nfunction Ti(t, e = !1) {\n    return e ? {\n        h: Number(t & le),\n        l: Number(t >> Wn & le)\n    } : {\n        h: Number(t >> Wn & le) | 0,\n        l: Number(t & le) | 0\n    };\n}\nfunction Ri(t, e = !1) {\n    let n = new Uint32Array(t.length), r = new Uint32Array(t.length);\n    for(let o = 0; o < t.length; o++){\n        const { h: i, l: s } = Ti(t[o], e);\n        [n[o], r[o]] = [\n            i,\n            s\n        ];\n    }\n    return [\n        n,\n        r\n    ];\n}\nconst _i = (t, e, n)=>t << n | e >>> 32 - n, $i = (t, e, n)=>e << n | t >>> 32 - n, Li = (t, e, n)=>e << n - 32 | t >>> 64 - n, ji = (t, e, n)=>t << n - 32 | e >>> 64 - n, _t = typeof globalThis == \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\nfunction Ci(t) {\n    return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));\n}\nfunction Pe(t) {\n    return new DataView(t.buffer, t.byteOffset, t.byteLength);\n}\nfunction ct(t, e) {\n    return t << 32 - e | t >>> e;\n}\nconst Xn = new Uint8Array(new Uint32Array([\n    287454020\n]).buffer)[0] === 68;\nfunction Pi(t) {\n    return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;\n}\nfunction Jn(t) {\n    for(let e = 0; e < t.length; e++)t[e] = Pi(t[e]);\n}\nfunction ki(t) {\n    if (typeof t != \"string\") throw new Error(\"utf8ToBytes expected string, got \" + typeof t);\n    return new Uint8Array(new TextEncoder().encode(t));\n}\nfunction $t(t) {\n    return typeof t == \"string\" && (t = ki(t)), Xt(t), t;\n}\nfunction Vi(...t) {\n    let e = 0;\n    for(let r = 0; r < t.length; r++){\n        const o = t[r];\n        Xt(o), e += o.length;\n    }\n    const n = new Uint8Array(e);\n    for(let r = 0, o = 0; r < t.length; r++){\n        const i = t[r];\n        n.set(i, o), o += i.length;\n    }\n    return n;\n}\nclass ke {\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction Qn(t) {\n    const e = (r)=>t().update($t(r)).digest(), n = t();\n    return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = ()=>t(), e;\n}\nfunction Lt(t = 32) {\n    if (_t && typeof _t.getRandomValues == \"function\") return _t.getRandomValues(new Uint8Array(t));\n    if (_t && typeof _t.randomBytes == \"function\") return _t.randomBytes(t);\n    throw new Error(\"crypto.getRandomValues must be defined\");\n}\nconst tr = [], er = [], nr = [], Mi = BigInt(0), Jt = BigInt(1), Di = BigInt(2), Hi = BigInt(7), qi = BigInt(256), Ki = BigInt(113);\nfor(let t = 0, e = Jt, n = 1, r = 0; t < 24; t++){\n    [n, r] = [\n        r,\n        (2 * n + 3 * r) % 5\n    ], tr.push(2 * (5 * r + n)), er.push((t + 1) * (t + 2) / 2 % 64);\n    let o = Mi;\n    for(let i = 0; i < 7; i++)e = (e << Jt ^ (e >> Hi) * Ki) % qi, e & Di && (o ^= Jt << (Jt << BigInt(i)) - Jt);\n    nr.push(o);\n}\nconst [Fi, zi] = Ri(nr, !0), rr = (t, e, n)=>n > 32 ? Li(t, e, n) : _i(t, e, n), or = (t, e, n)=>n > 32 ? ji(t, e, n) : $i(t, e, n);\nfunction Zi(t, e = 24) {\n    const n = new Uint32Array(10);\n    for(let r = 24 - e; r < 24; r++){\n        for(let s = 0; s < 10; s++)n[s] = t[s] ^ t[s + 10] ^ t[s + 20] ^ t[s + 30] ^ t[s + 40];\n        for(let s = 0; s < 10; s += 2){\n            const c = (s + 8) % 10, a = (s + 2) % 10, u = n[a], l = n[a + 1], f = rr(u, l, 1) ^ n[c], h = or(u, l, 1) ^ n[c + 1];\n            for(let y = 0; y < 50; y += 10)t[s + y] ^= f, t[s + y + 1] ^= h;\n        }\n        let o = t[2], i = t[3];\n        for(let s = 0; s < 24; s++){\n            const c = er[s], a = rr(o, i, c), u = or(o, i, c), l = tr[s];\n            o = t[l], i = t[l + 1], t[l] = a, t[l + 1] = u;\n        }\n        for(let s = 0; s < 50; s += 10){\n            for(let c = 0; c < 10; c++)n[c] = t[s + c];\n            for(let c = 0; c < 10; c++)t[s + c] ^= ~n[(c + 2) % 10] & n[(c + 4) % 10];\n        }\n        t[0] ^= Fi[r], t[1] ^= zi[r];\n    }\n    n.fill(0);\n}\nclass En extends ke {\n    constructor(e, n, r, o = !1, i = 24){\n        if (super(), this.blockLen = e, this.suffix = n, this.outputLen = r, this.enableXOF = o, this.rounds = i, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, Wt(r), 0 >= this.blockLen || this.blockLen >= 200) throw new Error(\"Sha3 supports only keccak-f1600 function\");\n        this.state = new Uint8Array(200), this.state32 = Ci(this.state);\n    }\n    keccak() {\n        Xn || Jn(this.state32), Zi(this.state32, this.rounds), Xn || Jn(this.state32), this.posOut = 0, this.pos = 0;\n    }\n    update(e) {\n        Rt(this);\n        const { blockLen: n, state: r } = this;\n        e = $t(e);\n        const o = e.length;\n        for(let i = 0; i < o;){\n            const s = Math.min(n - this.pos, o - i);\n            for(let c = 0; c < s; c++)r[this.pos++] ^= e[i++];\n            this.pos === n && this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = !0;\n        const { state: e, suffix: n, pos: r, blockLen: o } = this;\n        e[r] ^= n, (n & 128) !== 0 && r === o - 1 && this.keccak(), e[o - 1] ^= 128, this.keccak();\n    }\n    writeInto(e) {\n        Rt(this, !1), Xt(e), this.finish();\n        const n = this.state, { blockLen: r } = this;\n        for(let o = 0, i = e.length; o < i;){\n            this.posOut >= r && this.keccak();\n            const s = Math.min(r - this.posOut, i - o);\n            e.set(n.subarray(this.posOut, this.posOut + s), o), this.posOut += s, o += s;\n        }\n        return e;\n    }\n    xofInto(e) {\n        if (!this.enableXOF) throw new Error(\"XOF is not possible for this instance\");\n        return this.writeInto(e);\n    }\n    xof(e) {\n        return Wt(e), this.xofInto(new Uint8Array(e));\n    }\n    digestInto(e) {\n        if (Gn(e, this), this.finished) throw new Error(\"digest() was already called\");\n        return this.writeInto(e), this.destroy(), e;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = !0, this.state.fill(0);\n    }\n    _cloneInto(e) {\n        const { blockLen: n, suffix: r, outputLen: o, rounds: i, enableXOF: s } = this;\n        return e || (e = new En(n, r, o, s, i)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = i, e.suffix = r, e.outputLen = o, e.enableXOF = s, e.destroyed = this.destroyed, e;\n    }\n}\nconst Yi = (t, e, n)=>Qn(()=>new En(e, t, n)), Gi = Yi(1, 136, 256 / 8), Wi = \"https://rpc.walletconnect.org/v1\";\nfunction Ve(t) {\n    const e = `\u0019Ethereum Signed Message:\n${t.length}`, n = new TextEncoder().encode(e + t);\n    return \"0x\" + Buffer.from(Gi(n)).toString(\"hex\");\n}\nasync function ir(t, e, n, r, o, i) {\n    switch(n.t){\n        case \"eip191\":\n            return await sr(t, e, n.s);\n        case \"eip1271\":\n            return await cr(t, e, n.s, r, o, i);\n        default:\n            throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n.t}`);\n    }\n}\nasync function sr(t, e, n) {\n    return (await (0,viem__WEBPACK_IMPORTED_MODULE_8__.recoverAddress)({\n        hash: Ve(e),\n        signature: n\n    })).toLowerCase() === t.toLowerCase();\n}\nasync function cr(t, e, n, r, o, i) {\n    const s = Ne(r);\n    if (!s.namespace || !s.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r}`);\n    try {\n        const c = \"0x1626ba7e\", a = \"0000000000000000000000000000000000000000000000000000000000000040\", u = \"0000000000000000000000000000000000000000000000000000000000000041\", l = n.substring(2), f = Ve(e).substring(2), h = c + f + a + u + l, y = await fetch(`${i || Wi}/?chainId=${r}&projectId=${o}`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                id: Xi(),\n                jsonrpc: \"2.0\",\n                method: \"eth_call\",\n                params: [\n                    {\n                        to: t,\n                        data: h\n                    },\n                    \"latest\"\n                ]\n            })\n        }), { result: E } = await y.json();\n        return E ? E.slice(0, c.length).toLowerCase() === c.toLowerCase() : !1;\n    } catch (c) {\n        return console.error(\"isValidEip1271Signature: \", c), !1;\n    }\n}\nfunction Xi() {\n    return Date.now() + Math.floor(Math.random() * 1e3);\n}\nfunction Ji(t) {\n    const e = atob(t), n = new Uint8Array(e.length);\n    for(let s = 0; s < e.length; s++)n[s] = e.charCodeAt(s);\n    const r = n[0];\n    if (r === 0) throw new Error(\"No signatures found\");\n    const o = 1 + r * 64;\n    if (n.length < o) throw new Error(\"Transaction data too short for claimed signature count\");\n    if (n.length < 100) throw new Error(\"Transaction too short\");\n    const i = Buffer.from(t, \"base64\").slice(1, 65);\n    return bs58__WEBPACK_IMPORTED_MODULE_3__[\"default\"].encode(i);\n}\nvar Qi = Object.defineProperty, ts = Object.defineProperties, es = Object.getOwnPropertyDescriptors, ar = Object.getOwnPropertySymbols, ns = Object.prototype.hasOwnProperty, rs = Object.prototype.propertyIsEnumerable, ur = (t, e, n)=>e in t ? Qi(t, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : t[e] = n, Me = (t, e)=>{\n    for(var n in e || (e = {}))ns.call(e, n) && ur(t, n, e[n]);\n    if (ar) for (var n of ar(e))rs.call(e, n) && ur(t, n, e[n]);\n    return t;\n}, fr = (t, e)=>ts(t, es(e));\nconst os = \"did:pkh:\", de = (t)=>t?.split(\":\"), lr = (t)=>{\n    const e = t && de(t);\n    if (e) return t.includes(os) ? e[3] : e[1];\n}, dr = (t)=>{\n    const e = t && de(t);\n    if (e) return e[2] + \":\" + e[3];\n}, De = (t)=>{\n    const e = t && de(t);\n    if (e) return e.pop();\n};\nasync function is(t) {\n    const { cacao: e, projectId: n } = t, { s: r, p: o } = e, i = hr(o, o.iss), s = De(o.iss);\n    return await ir(s, i, r, dr(o.iss), n);\n}\nconst hr = (t, e)=>{\n    const n = `${t.domain} wants you to sign in with your Ethereum account:`, r = De(e);\n    if (!t.aud && !t.uri) throw new Error(\"Either `aud` or `uri` is required to construct the message\");\n    let o = t.statement || void 0;\n    const i = `URI: ${t.aud || t.uri}`, s = `Version: ${t.version}`, c = `Chain ID: ${lr(e)}`, a = `Nonce: ${t.nonce}`, u = `Issued At: ${t.iat}`, l = t.exp ? `Expiration Time: ${t.exp}` : void 0, f = t.nbf ? `Not Before: ${t.nbf}` : void 0, h = t.requestId ? `Request ID: ${t.requestId}` : void 0, y = t.resources ? `Resources:${t.resources.map((p)=>`\n- ${p}`).join(\"\")}` : void 0, E = pe(t.resources);\n    if (E) {\n        const p = yt(E);\n        o = Ke(o, p);\n    }\n    return [\n        n,\n        r,\n        \"\",\n        o,\n        \"\",\n        i,\n        s,\n        c,\n        a,\n        u,\n        l,\n        f,\n        h,\n        y\n    ].filter((p)=>p != null).join(`\n`);\n};\nfunction ss(t, e, n) {\n    return n.includes(\"did:pkh:\") || (n = `did:pkh:${n}`), {\n        h: {\n            t: \"caip122\"\n        },\n        p: {\n            iss: n,\n            domain: t.domain,\n            aud: t.aud,\n            version: t.version,\n            nonce: t.nonce,\n            iat: t.iat,\n            statement: t.statement,\n            requestId: t.requestId,\n            resources: t.resources,\n            nbf: t.nbf,\n            exp: t.exp\n        },\n        s: e\n    };\n}\nfunction cs(t) {\n    var e;\n    const { authPayload: n, chains: r, methods: o } = t, i = n.statement || \"\";\n    if (!(r != null && r.length)) return n;\n    const s = n.chains, c = Le(s, r);\n    if (!(c != null && c.length)) throw new Error(\"No supported chains\");\n    const a = pr(n.resources);\n    if (!a) return n;\n    at(a);\n    const u = gr(a, \"eip155\");\n    let l = n?.resources || [];\n    if (u != null && u.length) {\n        const f = yr(u), h = Le(f, o);\n        if (!(h != null && h.length)) throw new Error(`Supported methods don't satisfy the requested: ${JSON.stringify(f)}, supported: ${JSON.stringify(o)}`);\n        const y = He(\"request\", h, {\n            chains: c\n        }), E = Er(a, \"eip155\", y);\n        l = ((e = n?.resources) == null ? void 0 : e.slice(0, -1)) || [], l.push(he(E));\n    }\n    return fr(Me({}, n), {\n        statement: xr(i, pe(l)),\n        chains: c,\n        resources: n != null && n.resources || l.length > 0 ? l : void 0\n    });\n}\nfunction pr(t) {\n    const e = pe(t);\n    if (e && qe(e)) return yt(e);\n}\nfunction as(t, e) {\n    var n;\n    return (n = t?.att) == null ? void 0 : n.hasOwnProperty(e);\n}\nfunction gr(t, e) {\n    var n, r;\n    return (n = t?.att) != null && n[e] ? Object.keys((r = t?.att) == null ? void 0 : r[e]) : [];\n}\nfunction us(t) {\n    return t?.map((e)=>Object.keys(e)) || [];\n}\nfunction yr(t) {\n    return t?.map((e)=>{\n        var n;\n        return (n = e.split(\"/\")) == null ? void 0 : n[1];\n    }) || [];\n}\nfunction mr(t) {\n    return Buffer.from(JSON.stringify(t)).toString(\"base64\");\n}\nfunction wr(t) {\n    return JSON.parse(Buffer.from(t, \"base64\").toString(\"utf-8\"));\n}\nfunction at(t) {\n    if (!t) throw new Error(\"No recap provided, value is undefined\");\n    if (!t.att) throw new Error(\"No `att` property found\");\n    const e = Object.keys(t.att);\n    if (!(e != null && e.length)) throw new Error(\"No resources found in `att` property\");\n    e.forEach((n)=>{\n        const r = t.att[n];\n        if (Array.isArray(r)) throw new Error(`Resource must be an object: ${n}`);\n        if (typeof r != \"object\") throw new Error(`Resource must be an object: ${n}`);\n        if (!Object.keys(r).length) throw new Error(`Resource object is empty: ${n}`);\n        Object.keys(r).forEach((o)=>{\n            const i = r[o];\n            if (!Array.isArray(i)) throw new Error(`Ability limits ${o} must be an array of objects, found: ${i}`);\n            if (!i.length) throw new Error(`Value of ${o} is empty array, must be an array with objects`);\n            i.forEach((s)=>{\n                if (typeof s != \"object\") throw new Error(`Ability limits (${o}) must be an array of objects, found: ${s}`);\n            });\n        });\n    });\n}\nfunction br(t, e, n, r = {}) {\n    return n?.sort((o, i)=>o.localeCompare(i)), {\n        att: {\n            [t]: He(e, n, r)\n        }\n    };\n}\nfunction Er(t, e, n) {\n    var r;\n    t.att[e] = Me({}, n);\n    const o = (r = Object.keys(t.att)) == null ? void 0 : r.sort((s, c)=>s.localeCompare(c)), i = {\n        att: {}\n    };\n    return o.reduce((s, c)=>(s.att[c] = t.att[c], s), i);\n}\nfunction He(t, e, n = {}) {\n    e = e?.sort((o, i)=>o.localeCompare(i));\n    const r = e.map((o)=>({\n            [`${t}/${o}`]: [\n                n\n            ]\n        }));\n    return Object.assign({}, ...r);\n}\nfunction he(t) {\n    return at(t), `urn:recap:${mr(t).replace(/=/g, \"\")}`;\n}\nfunction yt(t) {\n    const e = wr(t.replace(\"urn:recap:\", \"\"));\n    return at(e), e;\n}\nfunction fs(t, e, n) {\n    const r = br(t, e, n);\n    return he(r);\n}\nfunction qe(t) {\n    return t && t.includes(\"urn:recap:\");\n}\nfunction ls(t, e) {\n    const n = yt(t), r = yt(e), o = vr(n, r);\n    return he(o);\n}\nfunction vr(t, e) {\n    at(t), at(e);\n    const n = Object.keys(t.att).concat(Object.keys(e.att)).sort((o, i)=>o.localeCompare(i)), r = {\n        att: {}\n    };\n    return n.forEach((o)=>{\n        var i, s;\n        Object.keys(((i = t.att) == null ? void 0 : i[o]) || {}).concat(Object.keys(((s = e.att) == null ? void 0 : s[o]) || {})).sort((c, a)=>c.localeCompare(a)).forEach((c)=>{\n            var a, u;\n            r.att[o] = fr(Me({}, r.att[o]), {\n                [c]: ((a = t.att[o]) == null ? void 0 : a[c]) || ((u = e.att[o]) == null ? void 0 : u[c])\n            });\n        });\n    }), r;\n}\nfunction Ke(t = \"\", e) {\n    at(e);\n    const n = \"I further authorize the stated URI to perform the following actions on my behalf: \";\n    if (t.includes(n)) return t;\n    const r = [];\n    let o = 0;\n    Object.keys(e.att).forEach((c)=>{\n        const a = Object.keys(e.att[c]).map((f)=>({\n                ability: f.split(\"/\")[0],\n                action: f.split(\"/\")[1]\n            }));\n        a.sort((f, h)=>f.action.localeCompare(h.action));\n        const u = {};\n        a.forEach((f)=>{\n            u[f.ability] || (u[f.ability] = []), u[f.ability].push(f.action);\n        });\n        const l = Object.keys(u).map((f)=>(o++, `(${o}) '${f}': '${u[f].join(\"', '\")}' for '${c}'.`));\n        r.push(l.join(\", \").replace(\".,\", \".\"));\n    });\n    const i = r.join(\" \"), s = `${n}${i}`;\n    return `${t ? t + \" \" : \"\"}${s}`;\n}\nfunction ds(t) {\n    var e;\n    const n = yt(t);\n    at(n);\n    const r = (e = n.att) == null ? void 0 : e.eip155;\n    return r ? Object.keys(r).map((o)=>o.split(\"/\")[1]) : [];\n}\nfunction hs(t) {\n    const e = yt(t);\n    at(e);\n    const n = [];\n    return Object.values(e.att).forEach((r)=>{\n        Object.values(r).forEach((o)=>{\n            var i;\n            (i = o?.[0]) != null && i.chains && n.push(o[0].chains);\n        });\n    }), [\n        ...new Set(n.flat())\n    ];\n}\nfunction xr(t, e) {\n    if (!e) return t;\n    const n = yt(e);\n    return at(n), Ke(t, n);\n}\nfunction pe(t) {\n    if (!t) return;\n    const e = t?.[t.length - 1];\n    return qe(e) ? e : void 0;\n}\nfunction Fe(t) {\n    if (!Number.isSafeInteger(t) || t < 0) throw new Error(\"positive integer expected, got \" + t);\n}\nfunction Sr(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction tt(t, ...e) {\n    if (!Sr(t)) throw new Error(\"Uint8Array expected\");\n    if (e.length > 0 && !e.includes(t.length)) throw new Error(\"Uint8Array expected of length \" + e + \", got length=\" + t.length);\n}\nfunction Or(t, e = !0) {\n    if (t.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (e && t.finished) throw new Error(\"Hash#digest() has already been called\");\n}\nfunction ps(t, e) {\n    tt(t);\n    const n = e.outputLen;\n    if (t.length < n) throw new Error(\"digestInto() expects output buffer of length at least \" + n);\n}\nfunction Ar(t) {\n    if (typeof t != \"boolean\") throw new Error(`boolean expected, not ${t}`);\n}\nconst mt = (t)=>new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4)), gs = (t)=>new DataView(t.buffer, t.byteOffset, t.byteLength), ys = new Uint8Array(new Uint32Array([\n    287454020\n]).buffer)[0] === 68;\nif (!ys) throw new Error(\"Non little-endian hardware is not supported\");\nfunction ms(t) {\n    if (typeof t != \"string\") throw new Error(\"string expected\");\n    return new Uint8Array(new TextEncoder().encode(t));\n}\nfunction ze(t) {\n    if (typeof t == \"string\") t = ms(t);\n    else if (Sr(t)) t = Ze(t);\n    else throw new Error(\"Uint8Array expected, got \" + typeof t);\n    return t;\n}\nfunction ws(t, e) {\n    if (e == null || typeof e != \"object\") throw new Error(\"options must be defined\");\n    return Object.assign(t, e);\n}\nfunction bs(t, e) {\n    if (t.length !== e.length) return !1;\n    let n = 0;\n    for(let r = 0; r < t.length; r++)n |= t[r] ^ e[r];\n    return n === 0;\n}\nconst Es = (t, e)=>{\n    function n(r, ...o) {\n        if (tt(r), t.nonceLength !== void 0) {\n            const l = o[0];\n            if (!l) throw new Error(\"nonce / iv required\");\n            t.varSizeNonce ? tt(l) : tt(l, t.nonceLength);\n        }\n        const i = t.tagLength;\n        i && o[1] !== void 0 && tt(o[1]);\n        const s = e(r, ...o), c = (l, f)=>{\n            if (f !== void 0) {\n                if (l !== 2) throw new Error(\"cipher output not supported\");\n                tt(f);\n            }\n        };\n        let a = !1;\n        return {\n            encrypt (l, f) {\n                if (a) throw new Error(\"cannot encrypt() twice with same key + nonce\");\n                return a = !0, tt(l), c(s.encrypt.length, f), s.encrypt(l, f);\n            },\n            decrypt (l, f) {\n                if (tt(l), i && l.length < i) throw new Error(\"invalid ciphertext length: smaller than tagLength=\" + i);\n                return c(s.decrypt.length, f), s.decrypt(l, f);\n            }\n        };\n    }\n    return Object.assign(n, t), n;\n};\nfunction Br(t, e, n = !0) {\n    if (e === void 0) return new Uint8Array(t);\n    if (e.length !== t) throw new Error(\"invalid output length, expected \" + t + \", got: \" + e.length);\n    if (n && !vs(e)) throw new Error(\"invalid output, must be aligned\");\n    return e;\n}\nfunction Ir(t, e, n, r) {\n    if (typeof t.setBigUint64 == \"function\") return t.setBigUint64(e, n, r);\n    const o = BigInt(32), i = BigInt(4294967295), s = Number(n >> o & i), c = Number(n & i), a = r ? 4 : 0, u = r ? 0 : 4;\n    t.setUint32(e + a, s, r), t.setUint32(e + u, c, r);\n}\nfunction vs(t) {\n    return t.byteOffset % 4 === 0;\n}\nfunction Ze(t) {\n    return Uint8Array.from(t);\n}\nfunction jt(...t) {\n    for(let e = 0; e < t.length; e++)t[e].fill(0);\n}\nconst Nr = (t)=>Uint8Array.from(t.split(\"\").map((e)=>e.charCodeAt(0))), xs = Nr(\"expand 16-byte k\"), Ss = Nr(\"expand 32-byte k\"), Os = mt(xs), As = mt(Ss);\nfunction V(t, e) {\n    return t << e | t >>> 32 - e;\n}\nfunction Ye(t) {\n    return t.byteOffset % 4 === 0;\n}\nconst ge = 64, Bs = 16, Ur = 2 ** 32 - 1, Tr = new Uint32Array;\nfunction Is(t, e, n, r, o, i, s, c) {\n    const a = o.length, u = new Uint8Array(ge), l = mt(u), f = Ye(o) && Ye(i), h = f ? mt(o) : Tr, y = f ? mt(i) : Tr;\n    for(let E = 0; E < a; s++){\n        if (t(e, n, r, l, s, c), s >= Ur) throw new Error(\"arx: counter overflow\");\n        const p = Math.min(ge, a - E);\n        if (f && p === ge) {\n            const d = E / 4;\n            if (E % 4 !== 0) throw new Error(\"arx: invalid block position\");\n            for(let v = 0, m; v < Bs; v++)m = d + v, y[m] = h[m] ^ l[v];\n            E += ge;\n            continue;\n        }\n        for(let d = 0, v; d < p; d++)v = E + d, i[v] = o[v] ^ u[d];\n        E += p;\n    }\n}\nfunction Ns(t, e) {\n    const { allowShortKeys: n, extendNonceFn: r, counterLength: o, counterRight: i, rounds: s } = ws({\n        allowShortKeys: !1,\n        counterLength: 8,\n        counterRight: !1,\n        rounds: 20\n    }, e);\n    if (typeof t != \"function\") throw new Error(\"core must be a function\");\n    return Fe(o), Fe(s), Ar(i), Ar(n), (c, a, u, l, f = 0)=>{\n        tt(c), tt(a), tt(u);\n        const h = u.length;\n        if (l === void 0 && (l = new Uint8Array(h)), tt(l), Fe(f), f < 0 || f >= Ur) throw new Error(\"arx: counter overflow\");\n        if (l.length < h) throw new Error(`arx: output (${l.length}) is shorter than data (${h})`);\n        const y = [];\n        let E = c.length, p, d;\n        if (E === 32) y.push(p = Ze(c)), d = As;\n        else if (E === 16 && n) p = new Uint8Array(32), p.set(c), p.set(c, 16), d = Os, y.push(p);\n        else throw new Error(`arx: invalid 32-byte key, got length=${E}`);\n        Ye(a) || y.push(a = Ze(a));\n        const v = mt(p);\n        if (r) {\n            if (a.length !== 24) throw new Error(\"arx: extended nonce must be 24 bytes\");\n            r(d, v, mt(a.subarray(0, 16)), v), a = a.subarray(16);\n        }\n        const m = 16 - o;\n        if (m !== a.length) throw new Error(`arx: nonce must be ${m} or 16 bytes`);\n        if (m !== 12) {\n            const N = new Uint8Array(12);\n            N.set(a, i ? 0 : 12 - a.length), a = N, y.push(a);\n        }\n        const O = mt(a);\n        return Is(t, d, v, O, u, l, f, s), jt(...y), l;\n    };\n}\nconst F = (t, e)=>t[e++] & 255 | (t[e++] & 255) << 8;\nclass Us {\n    constructor(e){\n        this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = !1, e = ze(e), tt(e, 32);\n        const n = F(e, 0), r = F(e, 2), o = F(e, 4), i = F(e, 6), s = F(e, 8), c = F(e, 10), a = F(e, 12), u = F(e, 14);\n        this.r[0] = n & 8191, this.r[1] = (n >>> 13 | r << 3) & 8191, this.r[2] = (r >>> 10 | o << 6) & 7939, this.r[3] = (o >>> 7 | i << 9) & 8191, this.r[4] = (i >>> 4 | s << 12) & 255, this.r[5] = s >>> 1 & 8190, this.r[6] = (s >>> 14 | c << 2) & 8191, this.r[7] = (c >>> 11 | a << 5) & 8065, this.r[8] = (a >>> 8 | u << 8) & 8191, this.r[9] = u >>> 5 & 127;\n        for(let l = 0; l < 8; l++)this.pad[l] = F(e, 16 + 2 * l);\n    }\n    process(e, n, r = !1) {\n        const o = r ? 0 : 2048, { h: i, r: s } = this, c = s[0], a = s[1], u = s[2], l = s[3], f = s[4], h = s[5], y = s[6], E = s[7], p = s[8], d = s[9], v = F(e, n + 0), m = F(e, n + 2), O = F(e, n + 4), N = F(e, n + 6), $ = F(e, n + 8), B = F(e, n + 10), A = F(e, n + 12), T = F(e, n + 14);\n        let S = i[0] + (v & 8191), L = i[1] + ((v >>> 13 | m << 3) & 8191), U = i[2] + ((m >>> 10 | O << 6) & 8191), _ = i[3] + ((O >>> 7 | N << 9) & 8191), j = i[4] + ((N >>> 4 | $ << 12) & 8191), g = i[5] + ($ >>> 1 & 8191), w = i[6] + (($ >>> 14 | B << 2) & 8191), b = i[7] + ((B >>> 11 | A << 5) & 8191), I = i[8] + ((A >>> 8 | T << 8) & 8191), R = i[9] + (T >>> 5 | o), x = 0, C = x + S * c + L * (5 * d) + U * (5 * p) + _ * (5 * E) + j * (5 * y);\n        x = C >>> 13, C &= 8191, C += g * (5 * h) + w * (5 * f) + b * (5 * l) + I * (5 * u) + R * (5 * a), x += C >>> 13, C &= 8191;\n        let P = x + S * a + L * c + U * (5 * d) + _ * (5 * p) + j * (5 * E);\n        x = P >>> 13, P &= 8191, P += g * (5 * y) + w * (5 * h) + b * (5 * f) + I * (5 * l) + R * (5 * u), x += P >>> 13, P &= 8191;\n        let k = x + S * u + L * a + U * c + _ * (5 * d) + j * (5 * p);\n        x = k >>> 13, k &= 8191, k += g * (5 * E) + w * (5 * y) + b * (5 * h) + I * (5 * f) + R * (5 * l), x += k >>> 13, k &= 8191;\n        let M = x + S * l + L * u + U * a + _ * c + j * (5 * d);\n        x = M >>> 13, M &= 8191, M += g * (5 * p) + w * (5 * E) + b * (5 * y) + I * (5 * h) + R * (5 * f), x += M >>> 13, M &= 8191;\n        let D = x + S * f + L * l + U * u + _ * a + j * c;\n        x = D >>> 13, D &= 8191, D += g * (5 * d) + w * (5 * p) + b * (5 * E) + I * (5 * y) + R * (5 * h), x += D >>> 13, D &= 8191;\n        let z = x + S * h + L * f + U * l + _ * u + j * a;\n        x = z >>> 13, z &= 8191, z += g * c + w * (5 * d) + b * (5 * p) + I * (5 * E) + R * (5 * y), x += z >>> 13, z &= 8191;\n        let Z = x + S * y + L * h + U * f + _ * l + j * u;\n        x = Z >>> 13, Z &= 8191, Z += g * a + w * c + b * (5 * d) + I * (5 * p) + R * (5 * E), x += Z >>> 13, Z &= 8191;\n        let st = x + S * E + L * y + U * h + _ * f + j * l;\n        x = st >>> 13, st &= 8191, st += g * u + w * a + b * c + I * (5 * d) + R * (5 * p), x += st >>> 13, st &= 8191;\n        let W = x + S * p + L * E + U * y + _ * h + j * f;\n        x = W >>> 13, W &= 8191, W += g * l + w * u + b * a + I * c + R * (5 * d), x += W >>> 13, W &= 8191;\n        let J = x + S * d + L * p + U * E + _ * y + j * h;\n        x = J >>> 13, J &= 8191, J += g * f + w * l + b * u + I * a + R * c, x += J >>> 13, J &= 8191, x = (x << 2) + x | 0, x = x + C | 0, C = x & 8191, x = x >>> 13, P += x, i[0] = C, i[1] = P, i[2] = k, i[3] = M, i[4] = D, i[5] = z, i[6] = Z, i[7] = st, i[8] = W, i[9] = J;\n    }\n    finalize() {\n        const { h: e, pad: n } = this, r = new Uint16Array(10);\n        let o = e[1] >>> 13;\n        e[1] &= 8191;\n        for(let c = 2; c < 10; c++)e[c] += o, o = e[c] >>> 13, e[c] &= 8191;\n        e[0] += o * 5, o = e[0] >>> 13, e[0] &= 8191, e[1] += o, o = e[1] >>> 13, e[1] &= 8191, e[2] += o, r[0] = e[0] + 5, o = r[0] >>> 13, r[0] &= 8191;\n        for(let c = 1; c < 10; c++)r[c] = e[c] + o, o = r[c] >>> 13, r[c] &= 8191;\n        r[9] -= 8192;\n        let i = (o ^ 1) - 1;\n        for(let c = 0; c < 10; c++)r[c] &= i;\n        i = ~i;\n        for(let c = 0; c < 10; c++)e[c] = e[c] & i | r[c];\n        e[0] = (e[0] | e[1] << 13) & 65535, e[1] = (e[1] >>> 3 | e[2] << 10) & 65535, e[2] = (e[2] >>> 6 | e[3] << 7) & 65535, e[3] = (e[3] >>> 9 | e[4] << 4) & 65535, e[4] = (e[4] >>> 12 | e[5] << 1 | e[6] << 14) & 65535, e[5] = (e[6] >>> 2 | e[7] << 11) & 65535, e[6] = (e[7] >>> 5 | e[8] << 8) & 65535, e[7] = (e[8] >>> 8 | e[9] << 5) & 65535;\n        let s = e[0] + n[0];\n        e[0] = s & 65535;\n        for(let c = 1; c < 8; c++)s = (e[c] + n[c] | 0) + (s >>> 16) | 0, e[c] = s & 65535;\n        jt(r);\n    }\n    update(e) {\n        Or(this);\n        const { buffer: n, blockLen: r } = this;\n        e = ze(e);\n        const o = e.length;\n        for(let i = 0; i < o;){\n            const s = Math.min(r - this.pos, o - i);\n            if (s === r) {\n                for(; r <= o - i; i += r)this.process(e, i);\n                continue;\n            }\n            n.set(e.subarray(i, i + s), this.pos), this.pos += s, i += s, this.pos === r && (this.process(n, 0, !1), this.pos = 0);\n        }\n        return this;\n    }\n    destroy() {\n        jt(this.h, this.r, this.buffer, this.pad);\n    }\n    digestInto(e) {\n        Or(this), ps(e, this), this.finished = !0;\n        const { buffer: n, h: r } = this;\n        let { pos: o } = this;\n        if (o) {\n            for(n[o++] = 1; o < 16; o++)n[o] = 0;\n            this.process(n, 0, !0);\n        }\n        this.finalize();\n        let i = 0;\n        for(let s = 0; s < 8; s++)e[i++] = r[s] >>> 0, e[i++] = r[s] >>> 8;\n        return e;\n    }\n    digest() {\n        const { buffer: e, outputLen: n } = this;\n        this.digestInto(e);\n        const r = e.slice(0, n);\n        return this.destroy(), r;\n    }\n}\nfunction Ts(t) {\n    const e = (r, o)=>t(o).update(ze(r)).digest(), n = t(new Uint8Array(32));\n    return e.outputLen = n.outputLen, e.blockLen = n.blockLen, e.create = (r)=>t(r), e;\n}\nconst Rs = Ts((t)=>new Us(t));\nfunction _s(t, e, n, r, o, i = 20) {\n    let s = t[0], c = t[1], a = t[2], u = t[3], l = e[0], f = e[1], h = e[2], y = e[3], E = e[4], p = e[5], d = e[6], v = e[7], m = o, O = n[0], N = n[1], $ = n[2], B = s, A = c, T = a, S = u, L = l, U = f, _ = h, j = y, g = E, w = p, b = d, I = v, R = m, x = O, C = N, P = $;\n    for(let M = 0; M < i; M += 2)B = B + L | 0, R = V(R ^ B, 16), g = g + R | 0, L = V(L ^ g, 12), B = B + L | 0, R = V(R ^ B, 8), g = g + R | 0, L = V(L ^ g, 7), A = A + U | 0, x = V(x ^ A, 16), w = w + x | 0, U = V(U ^ w, 12), A = A + U | 0, x = V(x ^ A, 8), w = w + x | 0, U = V(U ^ w, 7), T = T + _ | 0, C = V(C ^ T, 16), b = b + C | 0, _ = V(_ ^ b, 12), T = T + _ | 0, C = V(C ^ T, 8), b = b + C | 0, _ = V(_ ^ b, 7), S = S + j | 0, P = V(P ^ S, 16), I = I + P | 0, j = V(j ^ I, 12), S = S + j | 0, P = V(P ^ S, 8), I = I + P | 0, j = V(j ^ I, 7), B = B + U | 0, P = V(P ^ B, 16), b = b + P | 0, U = V(U ^ b, 12), B = B + U | 0, P = V(P ^ B, 8), b = b + P | 0, U = V(U ^ b, 7), A = A + _ | 0, R = V(R ^ A, 16), I = I + R | 0, _ = V(_ ^ I, 12), A = A + _ | 0, R = V(R ^ A, 8), I = I + R | 0, _ = V(_ ^ I, 7), T = T + j | 0, x = V(x ^ T, 16), g = g + x | 0, j = V(j ^ g, 12), T = T + j | 0, x = V(x ^ T, 8), g = g + x | 0, j = V(j ^ g, 7), S = S + L | 0, C = V(C ^ S, 16), w = w + C | 0, L = V(L ^ w, 12), S = S + L | 0, C = V(C ^ S, 8), w = w + C | 0, L = V(L ^ w, 7);\n    let k = 0;\n    r[k++] = s + B | 0, r[k++] = c + A | 0, r[k++] = a + T | 0, r[k++] = u + S | 0, r[k++] = l + L | 0, r[k++] = f + U | 0, r[k++] = h + _ | 0, r[k++] = y + j | 0, r[k++] = E + g | 0, r[k++] = p + w | 0, r[k++] = d + b | 0, r[k++] = v + I | 0, r[k++] = m + R | 0, r[k++] = O + x | 0, r[k++] = N + C | 0, r[k++] = $ + P | 0;\n}\nconst $s = Ns(_s, {\n    counterRight: !1,\n    counterLength: 4,\n    allowShortKeys: !1\n}), Ls = new Uint8Array(16), Rr = (t, e)=>{\n    t.update(e);\n    const n = e.length % 16;\n    n && t.update(Ls.subarray(n));\n}, js = new Uint8Array(32);\nfunction _r(t, e, n, r, o) {\n    const i = t(e, n, js), s = Rs.create(i);\n    o && Rr(s, o), Rr(s, r);\n    const c = new Uint8Array(16), a = gs(c);\n    Ir(a, 0, BigInt(o ? o.length : 0), !0), Ir(a, 8, BigInt(r.length), !0), s.update(c);\n    const u = s.digest();\n    return jt(i, c), u;\n}\nconst Cs = (t)=>(e, n, r)=>({\n            encrypt (i, s) {\n                const c = i.length;\n                s = Br(c + 16, s, !1), s.set(i);\n                const a = s.subarray(0, -16);\n                t(e, n, a, a, 1);\n                const u = _r(t, e, n, a, r);\n                return s.set(u, c), jt(u), s;\n            },\n            decrypt (i, s) {\n                s = Br(i.length - 16, s, !1);\n                const c = i.subarray(0, -16), a = i.subarray(-16), u = _r(t, e, n, c, r);\n                if (!bs(a, u)) throw new Error(\"invalid tag\");\n                return s.set(i.subarray(0, -16)), t(e, n, s, s, 1), jt(u), s;\n            }\n        }), $r = Es({\n    blockSize: 64,\n    nonceLength: 12,\n    tagLength: 16\n}, Cs($s));\nclass Lr extends ke {\n    constructor(e, n){\n        super(), this.finished = !1, this.destroyed = !1, Ce(e);\n        const r = $t(n);\n        if (this.iHash = e.create(), typeof this.iHash.update != \"function\") throw new Error(\"Expected instance of class which extends utils.Hash\");\n        this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;\n        const o = this.blockLen, i = new Uint8Array(o);\n        i.set(r.length > o ? e.create().update(r).digest() : r);\n        for(let s = 0; s < i.length; s++)i[s] ^= 54;\n        this.iHash.update(i), this.oHash = e.create();\n        for(let s = 0; s < i.length; s++)i[s] ^= 106;\n        this.oHash.update(i), i.fill(0);\n    }\n    update(e) {\n        return Rt(this), this.iHash.update(e), this;\n    }\n    digestInto(e) {\n        Rt(this), Xt(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();\n    }\n    digest() {\n        const e = new Uint8Array(this.oHash.outputLen);\n        return this.digestInto(e), e;\n    }\n    _cloneInto(e) {\n        e || (e = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash: n, iHash: r, finished: o, destroyed: i, blockLen: s, outputLen: c } = this;\n        return e = e, e.finished = o, e.destroyed = i, e.blockLen = s, e.outputLen = c, e.oHash = n._cloneInto(e.oHash), e.iHash = r._cloneInto(e.iHash), e;\n    }\n    destroy() {\n        this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();\n    }\n}\nconst ye = (t, e, n)=>new Lr(t, e).update(n).digest();\nye.create = (t, e)=>new Lr(t, e);\nfunction Ps(t, e, n) {\n    return Ce(t), n === void 0 && (n = new Uint8Array(t.outputLen)), ye(t, $t(n), $t(e));\n}\nconst Ge = new Uint8Array([\n    0\n]), jr = new Uint8Array;\nfunction ks(t, e, n, r = 32) {\n    if (Ce(t), Wt(r), r > 255 * t.outputLen) throw new Error(\"Length should be <= 255*HashLen\");\n    const o = Math.ceil(r / t.outputLen);\n    n === void 0 && (n = jr);\n    const i = new Uint8Array(o * t.outputLen), s = ye.create(t, e), c = s._cloneInto(), a = new Uint8Array(s.outputLen);\n    for(let u = 0; u < o; u++)Ge[0] = u + 1, c.update(u === 0 ? jr : a).update(n).update(Ge).digestInto(a), i.set(a, t.outputLen * u), s._cloneInto(c);\n    return s.destroy(), c.destroy(), a.fill(0), Ge.fill(0), i.slice(0, r);\n}\nconst Vs = (t, e, n, r, o)=>ks(t, Ps(t, e, n), r, o);\nfunction Ms(t, e, n, r) {\n    if (typeof t.setBigUint64 == \"function\") return t.setBigUint64(e, n, r);\n    const o = BigInt(32), i = BigInt(4294967295), s = Number(n >> o & i), c = Number(n & i), a = r ? 4 : 0, u = r ? 0 : 4;\n    t.setUint32(e + a, s, r), t.setUint32(e + u, c, r);\n}\nfunction Ds(t, e, n) {\n    return t & e ^ ~t & n;\n}\nfunction Hs(t, e, n) {\n    return t & e ^ t & n ^ e & n;\n}\nclass qs extends ke {\n    constructor(e, n, r, o){\n        super(), this.blockLen = e, this.outputLen = n, this.padOffset = r, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = Pe(this.buffer);\n    }\n    update(e) {\n        Rt(this);\n        const { view: n, buffer: r, blockLen: o } = this;\n        e = $t(e);\n        const i = e.length;\n        for(let s = 0; s < i;){\n            const c = Math.min(o - this.pos, i - s);\n            if (c === o) {\n                const a = Pe(e);\n                for(; o <= i - s; s += o)this.process(a, s);\n                continue;\n            }\n            r.set(e.subarray(s, s + c), this.pos), this.pos += c, s += c, this.pos === o && (this.process(n, 0), this.pos = 0);\n        }\n        return this.length += e.length, this.roundClean(), this;\n    }\n    digestInto(e) {\n        Rt(this), Gn(e, this), this.finished = !0;\n        const { buffer: n, view: r, blockLen: o, isLE: i } = this;\n        let { pos: s } = this;\n        n[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o - s && (this.process(r, 0), s = 0);\n        for(let f = s; f < o; f++)n[f] = 0;\n        Ms(r, o - 8, BigInt(this.length * 8), i), this.process(r, 0);\n        const c = Pe(e), a = this.outputLen;\n        if (a % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const u = a / 4, l = this.get();\n        if (u > l.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let f = 0; f < u; f++)c.setUint32(4 * f, l[f], i);\n    }\n    digest() {\n        const { buffer: e, outputLen: n } = this;\n        this.digestInto(e);\n        const r = e.slice(0, n);\n        return this.destroy(), r;\n    }\n    _cloneInto(e) {\n        e || (e = new this.constructor), e.set(...this.get());\n        const { blockLen: n, buffer: r, length: o, finished: i, destroyed: s, pos: c } = this;\n        return e.length = o, e.pos = c, e.finished = i, e.destroyed = s, o % n && e.buffer.set(r), e;\n    }\n}\nconst Ks = new Uint32Array([\n    1116352408,\n    1899447441,\n    3049323471,\n    3921009573,\n    961987163,\n    1508970993,\n    2453635748,\n    2870763221,\n    3624381080,\n    310598401,\n    607225278,\n    1426881987,\n    1925078388,\n    2162078206,\n    2614888103,\n    3248222580,\n    3835390401,\n    4022224774,\n    264347078,\n    604807628,\n    770255983,\n    1249150122,\n    1555081692,\n    1996064986,\n    2554220882,\n    2821834349,\n    2952996808,\n    3210313671,\n    3336571891,\n    3584528711,\n    113926993,\n    338241895,\n    666307205,\n    773529912,\n    1294757372,\n    1396182291,\n    1695183700,\n    1986661051,\n    2177026350,\n    2456956037,\n    2730485921,\n    2820302411,\n    3259730800,\n    3345764771,\n    3516065817,\n    3600352804,\n    4094571909,\n    275423344,\n    430227734,\n    506948616,\n    659060556,\n    883997877,\n    958139571,\n    1322822218,\n    1537002063,\n    1747873779,\n    1955562222,\n    2024104815,\n    2227730452,\n    2361852424,\n    2428436474,\n    2756734187,\n    3204031479,\n    3329325298\n]), wt = new Uint32Array([\n    1779033703,\n    3144134277,\n    1013904242,\n    2773480762,\n    1359893119,\n    2600822924,\n    528734635,\n    1541459225\n]), bt = new Uint32Array(64);\nclass Fs extends qs {\n    constructor(){\n        super(64, 32, 8, !1), this.A = wt[0] | 0, this.B = wt[1] | 0, this.C = wt[2] | 0, this.D = wt[3] | 0, this.E = wt[4] | 0, this.F = wt[5] | 0, this.G = wt[6] | 0, this.H = wt[7] | 0;\n    }\n    get() {\n        const { A: e, B: n, C: r, D: o, E: i, F: s, G: c, H: a } = this;\n        return [\n            e,\n            n,\n            r,\n            o,\n            i,\n            s,\n            c,\n            a\n        ];\n    }\n    set(e, n, r, o, i, s, c, a) {\n        this.A = e | 0, this.B = n | 0, this.C = r | 0, this.D = o | 0, this.E = i | 0, this.F = s | 0, this.G = c | 0, this.H = a | 0;\n    }\n    process(e, n) {\n        for(let f = 0; f < 16; f++, n += 4)bt[f] = e.getUint32(n, !1);\n        for(let f = 16; f < 64; f++){\n            const h = bt[f - 15], y = bt[f - 2], E = ct(h, 7) ^ ct(h, 18) ^ h >>> 3, p = ct(y, 17) ^ ct(y, 19) ^ y >>> 10;\n            bt[f] = p + bt[f - 7] + E + bt[f - 16] | 0;\n        }\n        let { A: r, B: o, C: i, D: s, E: c, F: a, G: u, H: l } = this;\n        for(let f = 0; f < 64; f++){\n            const h = ct(c, 6) ^ ct(c, 11) ^ ct(c, 25), y = l + h + Ds(c, a, u) + Ks[f] + bt[f] | 0, p = (ct(r, 2) ^ ct(r, 13) ^ ct(r, 22)) + Hs(r, o, i) | 0;\n            l = u, u = a, a = c, c = s + y | 0, s = i, i = o, o = r, r = y + p | 0;\n        }\n        r = r + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, s = s + this.D | 0, c = c + this.E | 0, a = a + this.F | 0, u = u + this.G | 0, l = l + this.H | 0, this.set(r, o, i, s, c, a, u, l);\n    }\n    roundClean() {\n        bt.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);\n    }\n}\nconst Qt = Qn(()=>new Fs); /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \nconst me = BigInt(0), we = BigInt(1), zs = BigInt(2);\nfunction St(t) {\n    return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction te(t) {\n    if (!St(t)) throw new Error(\"Uint8Array expected\");\n}\nfunction Ct(t, e) {\n    if (typeof e != \"boolean\") throw new Error(t + \" boolean expected, got \" + e);\n}\nconst Zs = Array.from({\n    length: 256\n}, (t, e)=>e.toString(16).padStart(2, \"0\"));\nfunction Pt(t) {\n    te(t);\n    let e = \"\";\n    for(let n = 0; n < t.length; n++)e += Zs[t[n]];\n    return e;\n}\nfunction kt(t) {\n    const e = t.toString(16);\n    return e.length & 1 ? \"0\" + e : e;\n}\nfunction We(t) {\n    if (typeof t != \"string\") throw new Error(\"hex string expected, got \" + typeof t);\n    return t === \"\" ? me : BigInt(\"0x\" + t);\n}\nconst ut = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction Cr(t) {\n    if (t >= ut._0 && t <= ut._9) return t - ut._0;\n    if (t >= ut.A && t <= ut.F) return t - (ut.A - 10);\n    if (t >= ut.a && t <= ut.f) return t - (ut.a - 10);\n}\nfunction Vt(t) {\n    if (typeof t != \"string\") throw new Error(\"hex string expected, got \" + typeof t);\n    const e = t.length, n = e / 2;\n    if (e % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + e);\n    const r = new Uint8Array(n);\n    for(let o = 0, i = 0; o < n; o++, i += 2){\n        const s = Cr(t.charCodeAt(i)), c = Cr(t.charCodeAt(i + 1));\n        if (s === void 0 || c === void 0) {\n            const a = t[i] + t[i + 1];\n            throw new Error('hex string expected, got non-hex character \"' + a + '\" at index ' + i);\n        }\n        r[o] = s * 16 + c;\n    }\n    return r;\n}\nfunction Ot(t) {\n    return We(Pt(t));\n}\nfunction ee(t) {\n    return te(t), We(Pt(Uint8Array.from(t).reverse()));\n}\nfunction Mt(t, e) {\n    return Vt(t.toString(16).padStart(e * 2, \"0\"));\n}\nfunction be(t, e) {\n    return Mt(t, e).reverse();\n}\nfunction Ys(t) {\n    return Vt(kt(t));\n}\nfunction et(t, e, n) {\n    let r;\n    if (typeof e == \"string\") try {\n        r = Vt(e);\n    } catch (i) {\n        throw new Error(t + \" must be hex string or Uint8Array, cause: \" + i);\n    }\n    else if (St(e)) r = Uint8Array.from(e);\n    else throw new Error(t + \" must be hex string or Uint8Array\");\n    const o = r.length;\n    if (typeof n == \"number\" && o !== n) throw new Error(t + \" of length \" + n + \" expected, got \" + o);\n    return r;\n}\nfunction ne(...t) {\n    let e = 0;\n    for(let r = 0; r < t.length; r++){\n        const o = t[r];\n        te(o), e += o.length;\n    }\n    const n = new Uint8Array(e);\n    for(let r = 0, o = 0; r < t.length; r++){\n        const i = t[r];\n        n.set(i, o), o += i.length;\n    }\n    return n;\n}\nfunction Gs(t, e) {\n    if (t.length !== e.length) return !1;\n    let n = 0;\n    for(let r = 0; r < t.length; r++)n |= t[r] ^ e[r];\n    return n === 0;\n}\nfunction Ws(t) {\n    if (typeof t != \"string\") throw new Error(\"string expected\");\n    return new Uint8Array(new TextEncoder().encode(t));\n}\nconst Xe = (t)=>typeof t == \"bigint\" && me <= t;\nfunction Ee(t, e, n) {\n    return Xe(t) && Xe(e) && Xe(n) && e <= t && t < n;\n}\nfunction ft(t, e, n, r) {\n    if (!Ee(e, n, r)) throw new Error(\"expected valid \" + t + \": \" + n + \" <= n < \" + r + \", got \" + e);\n}\nfunction Pr(t) {\n    let e;\n    for(e = 0; t > me; t >>= we, e += 1);\n    return e;\n}\nfunction Xs(t, e) {\n    return t >> BigInt(e) & we;\n}\nfunction Js(t, e, n) {\n    return t | (n ? we : me) << BigInt(e);\n}\nconst Je = (t)=>(zs << BigInt(t - 1)) - we, Qe = (t)=>new Uint8Array(t), kr = (t)=>Uint8Array.from(t);\nfunction Vr(t, e, n) {\n    if (typeof t != \"number\" || t < 2) throw new Error(\"hashLen must be a number\");\n    if (typeof e != \"number\" || e < 2) throw new Error(\"qByteLen must be a number\");\n    if (typeof n != \"function\") throw new Error(\"hmacFn must be a function\");\n    let r = Qe(t), o = Qe(t), i = 0;\n    const s = ()=>{\n        r.fill(1), o.fill(0), i = 0;\n    }, c = (...f)=>n(o, r, ...f), a = (f = Qe())=>{\n        o = c(kr([\n            0\n        ]), f), r = c(), f.length !== 0 && (o = c(kr([\n            1\n        ]), f), r = c());\n    }, u = ()=>{\n        if (i++ >= 1e3) throw new Error(\"drbg: tried 1000 values\");\n        let f = 0;\n        const h = [];\n        for(; f < e;){\n            r = c();\n            const y = r.slice();\n            h.push(y), f += r.length;\n        }\n        return ne(...h);\n    };\n    return (f, h)=>{\n        s(), a(f);\n        let y;\n        for(; !(y = h(u()));)a();\n        return s(), y;\n    };\n}\nconst Qs = {\n    bigint: (t)=>typeof t == \"bigint\",\n    function: (t)=>typeof t == \"function\",\n    boolean: (t)=>typeof t == \"boolean\",\n    string: (t)=>typeof t == \"string\",\n    stringOrUint8Array: (t)=>typeof t == \"string\" || St(t),\n    isSafeInteger: (t)=>Number.isSafeInteger(t),\n    array: (t)=>Array.isArray(t),\n    field: (t, e)=>e.Fp.isValid(t),\n    hash: (t)=>typeof t == \"function\" && Number.isSafeInteger(t.outputLen)\n};\nfunction Dt(t, e, n = {}) {\n    const r = (o, i, s)=>{\n        const c = Qs[i];\n        if (typeof c != \"function\") throw new Error(\"invalid validator function\");\n        const a = t[o];\n        if (!(s && a === void 0) && !c(a, t)) throw new Error(\"param \" + String(o) + \" is invalid. Expected \" + i + \", got \" + a);\n    };\n    for (const [o, i] of Object.entries(e))r(o, i, !1);\n    for (const [o, i] of Object.entries(n))r(o, i, !0);\n    return t;\n}\nconst tc = ()=>{\n    throw new Error(\"not implemented\");\n};\nfunction tn(t) {\n    const e = new WeakMap;\n    return (n, ...r)=>{\n        const o = e.get(n);\n        if (o !== void 0) return o;\n        const i = t(n, ...r);\n        return e.set(n, i), i;\n    };\n}\nvar ec = Object.freeze({\n    __proto__: null,\n    isBytes: St,\n    abytes: te,\n    abool: Ct,\n    bytesToHex: Pt,\n    numberToHexUnpadded: kt,\n    hexToNumber: We,\n    hexToBytes: Vt,\n    bytesToNumberBE: Ot,\n    bytesToNumberLE: ee,\n    numberToBytesBE: Mt,\n    numberToBytesLE: be,\n    numberToVarBytesBE: Ys,\n    ensureBytes: et,\n    concatBytes: ne,\n    equalBytes: Gs,\n    utf8ToBytes: Ws,\n    inRange: Ee,\n    aInRange: ft,\n    bitLen: Pr,\n    bitGet: Xs,\n    bitSet: Js,\n    bitMask: Je,\n    createHmacDrbg: Vr,\n    validateObject: Dt,\n    notImplemented: tc,\n    memoized: tn\n});\nconst q = BigInt(0), H = BigInt(1), At = BigInt(2), nc = BigInt(3), en = BigInt(4), Mr = BigInt(5), Dr = BigInt(8);\nfunction X(t, e) {\n    const n = t % e;\n    return n >= q ? n : e + n;\n}\nfunction Hr(t, e, n) {\n    if (e < q) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n <= q) throw new Error(\"invalid modulus\");\n    if (n === H) return q;\n    let r = H;\n    for(; e > q;)e & H && (r = r * t % n), t = t * t % n, e >>= H;\n    return r;\n}\nfunction it(t, e, n) {\n    let r = t;\n    for(; e-- > q;)r *= r, r %= n;\n    return r;\n}\nfunction nn(t, e) {\n    if (t === q) throw new Error(\"invert: expected non-zero number\");\n    if (e <= q) throw new Error(\"invert: expected positive modulus, got \" + e);\n    let n = X(t, e), r = e, o = q, i = H;\n    for(; n !== q;){\n        const c = r / n, a = r % n, u = o - i * c;\n        r = n, n = a, o = i, i = u;\n    }\n    if (r !== H) throw new Error(\"invert: does not exist\");\n    return X(o, e);\n}\nfunction rc(t) {\n    const e = (t - H) / At;\n    let n, r, o;\n    for(n = t - H, r = 0; n % At === q; n /= At, r++);\n    for(o = At; o < t && Hr(o, e, t) !== t - H; o++)if (o > 1e3) throw new Error(\"Cannot find square root: likely non-prime P\");\n    if (r === 1) {\n        const s = (t + H) / en;\n        return function(a, u) {\n            const l = a.pow(u, s);\n            if (!a.eql(a.sqr(l), u)) throw new Error(\"Cannot find square root\");\n            return l;\n        };\n    }\n    const i = (n + H) / At;\n    return function(c, a) {\n        if (c.pow(a, e) === c.neg(c.ONE)) throw new Error(\"Cannot find square root\");\n        let u = r, l = c.pow(c.mul(c.ONE, o), n), f = c.pow(a, i), h = c.pow(a, n);\n        for(; !c.eql(h, c.ONE);){\n            if (c.eql(h, c.ZERO)) return c.ZERO;\n            let y = 1;\n            for(let p = c.sqr(h); y < u && !c.eql(p, c.ONE); y++)p = c.sqr(p);\n            const E = c.pow(l, H << BigInt(u - y - 1));\n            l = c.sqr(E), f = c.mul(f, E), h = c.mul(h, l), u = y;\n        }\n        return f;\n    };\n}\nfunction oc(t) {\n    if (t % en === nc) {\n        const e = (t + H) / en;\n        return function(r, o) {\n            const i = r.pow(o, e);\n            if (!r.eql(r.sqr(i), o)) throw new Error(\"Cannot find square root\");\n            return i;\n        };\n    }\n    if (t % Dr === Mr) {\n        const e = (t - Mr) / Dr;\n        return function(r, o) {\n            const i = r.mul(o, At), s = r.pow(i, e), c = r.mul(o, s), a = r.mul(r.mul(c, At), s), u = r.mul(c, r.sub(a, r.ONE));\n            if (!r.eql(r.sqr(u), o)) throw new Error(\"Cannot find square root\");\n            return u;\n        };\n    }\n    return rc(t);\n}\nconst ic = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction sc(t) {\n    const e = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    }, n = ic.reduce((r, o)=>(r[o] = \"function\", r), e);\n    return Dt(t, n);\n}\nfunction cc(t, e, n) {\n    if (n < q) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (n === q) return t.ONE;\n    if (n === H) return e;\n    let r = t.ONE, o = e;\n    for(; n > q;)n & H && (r = t.mul(r, o)), o = t.sqr(o), n >>= H;\n    return r;\n}\nfunction ac(t, e) {\n    const n = new Array(e.length), r = e.reduce((i, s, c)=>t.is0(s) ? i : (n[c] = i, t.mul(i, s)), t.ONE), o = t.inv(r);\n    return e.reduceRight((i, s, c)=>t.is0(s) ? i : (n[c] = t.mul(i, n[c]), t.mul(i, s)), o), n;\n}\nfunction qr(t, e) {\n    const n = e !== void 0 ? e : t.toString(2).length, r = Math.ceil(n / 8);\n    return {\n        nBitLength: n,\n        nByteLength: r\n    };\n}\nfunction Kr(t, e, n = !1, r = {}) {\n    if (t <= q) throw new Error(\"invalid field: expected ORDER > 0, got \" + t);\n    const { nBitLength: o, nByteLength: i } = qr(t, e);\n    if (i > 2048) throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\n    let s;\n    const c = Object.freeze({\n        ORDER: t,\n        isLE: n,\n        BITS: o,\n        BYTES: i,\n        MASK: Je(o),\n        ZERO: q,\n        ONE: H,\n        create: (a)=>X(a, t),\n        isValid: (a)=>{\n            if (typeof a != \"bigint\") throw new Error(\"invalid field element: expected bigint, got \" + typeof a);\n            return q <= a && a < t;\n        },\n        is0: (a)=>a === q,\n        isOdd: (a)=>(a & H) === H,\n        neg: (a)=>X(-a, t),\n        eql: (a, u)=>a === u,\n        sqr: (a)=>X(a * a, t),\n        add: (a, u)=>X(a + u, t),\n        sub: (a, u)=>X(a - u, t),\n        mul: (a, u)=>X(a * u, t),\n        pow: (a, u)=>cc(c, a, u),\n        div: (a, u)=>X(a * nn(u, t), t),\n        sqrN: (a)=>a * a,\n        addN: (a, u)=>a + u,\n        subN: (a, u)=>a - u,\n        mulN: (a, u)=>a * u,\n        inv: (a)=>nn(a, t),\n        sqrt: r.sqrt || ((a)=>(s || (s = oc(t)), s(c, a))),\n        invertBatch: (a)=>ac(c, a),\n        cmov: (a, u, l)=>l ? u : a,\n        toBytes: (a)=>n ? be(a, i) : Mt(a, i),\n        fromBytes: (a)=>{\n            if (a.length !== i) throw new Error(\"Field.fromBytes: expected \" + i + \" bytes, got \" + a.length);\n            return n ? ee(a) : Ot(a);\n        }\n    });\n    return Object.freeze(c);\n}\nfunction Fr(t) {\n    if (typeof t != \"bigint\") throw new Error(\"field order must be bigint\");\n    const e = t.toString(2).length;\n    return Math.ceil(e / 8);\n}\nfunction zr(t) {\n    const e = Fr(t);\n    return e + Math.ceil(e / 2);\n}\nfunction uc(t, e, n = !1) {\n    const r = t.length, o = Fr(e), i = zr(e);\n    if (r < 16 || r < i || r > 1024) throw new Error(\"expected \" + i + \"-1024 bytes of input, got \" + r);\n    const s = n ? ee(t) : Ot(t), c = X(s, e - H) + H;\n    return n ? be(c, o) : Mt(c, o);\n}\nconst Zr = BigInt(0), ve = BigInt(1);\nfunction rn(t, e) {\n    const n = e.negate();\n    return t ? n : e;\n}\nfunction Yr(t, e) {\n    if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error(\"invalid window size, expected [1..\" + e + \"], got W=\" + t);\n}\nfunction on(t, e) {\n    Yr(t, e);\n    const n = Math.ceil(e / t) + 1, r = 2 ** (t - 1);\n    return {\n        windows: n,\n        windowSize: r\n    };\n}\nfunction fc(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"array expected\");\n    t.forEach((n, r)=>{\n        if (!(n instanceof e)) throw new Error(\"invalid point at index \" + r);\n    });\n}\nfunction lc(t, e) {\n    if (!Array.isArray(t)) throw new Error(\"array of scalars expected\");\n    t.forEach((n, r)=>{\n        if (!e.isValid(n)) throw new Error(\"invalid scalar at index \" + r);\n    });\n}\nconst sn = new WeakMap, Gr = new WeakMap;\nfunction cn(t) {\n    return Gr.get(t) || 1;\n}\nfunction dc(t, e) {\n    return {\n        constTimeNegate: rn,\n        hasPrecomputes (n) {\n            return cn(n) !== 1;\n        },\n        unsafeLadder (n, r, o = t.ZERO) {\n            let i = n;\n            for(; r > Zr;)r & ve && (o = o.add(i)), i = i.double(), r >>= ve;\n            return o;\n        },\n        precomputeWindow (n, r) {\n            const { windows: o, windowSize: i } = on(r, e), s = [];\n            let c = n, a = c;\n            for(let u = 0; u < o; u++){\n                a = c, s.push(a);\n                for(let l = 1; l < i; l++)a = a.add(c), s.push(a);\n                c = a.double();\n            }\n            return s;\n        },\n        wNAF (n, r, o) {\n            const { windows: i, windowSize: s } = on(n, e);\n            let c = t.ZERO, a = t.BASE;\n            const u = BigInt(2 ** n - 1), l = 2 ** n, f = BigInt(n);\n            for(let h = 0; h < i; h++){\n                const y = h * s;\n                let E = Number(o & u);\n                o >>= f, E > s && (E -= l, o += ve);\n                const p = y, d = y + Math.abs(E) - 1, v = h % 2 !== 0, m = E < 0;\n                E === 0 ? a = a.add(rn(v, r[p])) : c = c.add(rn(m, r[d]));\n            }\n            return {\n                p: c,\n                f: a\n            };\n        },\n        wNAFUnsafe (n, r, o, i = t.ZERO) {\n            const { windows: s, windowSize: c } = on(n, e), a = BigInt(2 ** n - 1), u = 2 ** n, l = BigInt(n);\n            for(let f = 0; f < s; f++){\n                const h = f * c;\n                if (o === Zr) break;\n                let y = Number(o & a);\n                if (o >>= l, y > c && (y -= u, o += ve), y === 0) continue;\n                let E = r[h + Math.abs(y) - 1];\n                y < 0 && (E = E.negate()), i = i.add(E);\n            }\n            return i;\n        },\n        getPrecomputes (n, r, o) {\n            let i = sn.get(r);\n            return i || (i = this.precomputeWindow(r, n), n !== 1 && sn.set(r, o(i))), i;\n        },\n        wNAFCached (n, r, o) {\n            const i = cn(n);\n            return this.wNAF(i, this.getPrecomputes(i, n, o), r);\n        },\n        wNAFCachedUnsafe (n, r, o, i) {\n            const s = cn(n);\n            return s === 1 ? this.unsafeLadder(n, r, i) : this.wNAFUnsafe(s, this.getPrecomputes(s, n, o), r, i);\n        },\n        setWindowSize (n, r) {\n            Yr(r, e), Gr.set(n, r), sn.delete(n);\n        }\n    };\n}\nfunction hc(t, e, n, r) {\n    if (fc(n, t), lc(r, e), n.length !== r.length) throw new Error(\"arrays of points and scalars must have equal length\");\n    const o = t.ZERO, i = Pr(BigInt(n.length)), s = i > 12 ? i - 3 : i > 4 ? i - 2 : i ? 2 : 1, c = (1 << s) - 1, a = new Array(c + 1).fill(o), u = Math.floor((e.BITS - 1) / s) * s;\n    let l = o;\n    for(let f = u; f >= 0; f -= s){\n        a.fill(o);\n        for(let y = 0; y < r.length; y++){\n            const E = r[y], p = Number(E >> BigInt(f) & BigInt(c));\n            a[p] = a[p].add(n[y]);\n        }\n        let h = o;\n        for(let y = a.length - 1, E = o; y > 0; y--)E = E.add(a[y]), h = h.add(E);\n        if (l = l.add(h), f !== 0) for(let y = 0; y < s; y++)l = l.double();\n    }\n    return l;\n}\nfunction Wr(t) {\n    return sc(t.Fp), Dt(t, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    }), Object.freeze({\n        ...qr(t.n, t.nBitLength),\n        ...t,\n        p: t.Fp.ORDER\n    });\n}\nBigInt(0), BigInt(1), BigInt(2), BigInt(8);\nconst Ht = BigInt(0), an = BigInt(1);\nfunction pc(t) {\n    return Dt(t, {\n        a: \"bigint\"\n    }, {\n        montgomeryBits: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\",\n        adjustScalarBytes: \"function\",\n        domain: \"function\",\n        powPminus2: \"function\",\n        Gu: \"bigint\"\n    }), Object.freeze({\n        ...t\n    });\n}\nfunction gc(t) {\n    const e = pc(t), { P: n } = e, r = (m)=>X(m, n), o = e.montgomeryBits, i = Math.ceil(o / 8), s = e.nByteLength, c = e.adjustScalarBytes || ((m)=>m), a = e.powPminus2 || ((m)=>Hr(m, n - BigInt(2), n));\n    function u(m, O, N) {\n        const $ = r(m * (O - N));\n        return O = r(O - $), N = r(N + $), [\n            O,\n            N\n        ];\n    }\n    const l = (e.a - BigInt(2)) / BigInt(4);\n    function f(m, O) {\n        ft(\"u\", m, Ht, n), ft(\"scalar\", O, Ht, n);\n        const N = O, $ = m;\n        let B = an, A = Ht, T = m, S = an, L = Ht, U;\n        for(let j = BigInt(o - 1); j >= Ht; j--){\n            const g = N >> j & an;\n            L ^= g, U = u(L, B, T), B = U[0], T = U[1], U = u(L, A, S), A = U[0], S = U[1], L = g;\n            const w = B + A, b = r(w * w), I = B - A, R = r(I * I), x = b - R, C = T + S, P = T - S, k = r(P * w), M = r(C * I), D = k + M, z = k - M;\n            T = r(D * D), S = r($ * r(z * z)), B = r(b * R), A = r(x * (b + r(l * x)));\n        }\n        U = u(L, B, T), B = U[0], T = U[1], U = u(L, A, S), A = U[0], S = U[1];\n        const _ = a(A);\n        return r(B * _);\n    }\n    function h(m) {\n        return be(r(m), i);\n    }\n    function y(m) {\n        const O = et(\"u coordinate\", m, i);\n        return s === 32 && (O[31] &= 127), ee(O);\n    }\n    function E(m) {\n        const O = et(\"scalar\", m), N = O.length;\n        if (N !== i && N !== s) {\n            let $ = \"\" + i + \" or \" + s;\n            throw new Error(\"invalid scalar, expected \" + $ + \" bytes, got \" + N);\n        }\n        return ee(c(O));\n    }\n    function p(m, O) {\n        const N = y(O), $ = E(m), B = f(N, $);\n        if (B === Ht) throw new Error(\"invalid private or public key received\");\n        return h(B);\n    }\n    const d = h(e.Gu);\n    function v(m) {\n        return p(m, d);\n    }\n    return {\n        scalarMult: p,\n        scalarMultBase: v,\n        getSharedSecret: (m, O)=>p(m, O),\n        getPublicKey: (m)=>v(m),\n        utils: {\n            randomPrivateKey: ()=>e.randomBytes(e.nByteLength)\n        },\n        GuBytes: d\n    };\n}\nconst un = BigInt(\"57896044618658097711785492504343953926634992332820282019728792003956564819949\");\nBigInt(0);\nconst yc = BigInt(1), Xr = BigInt(2), mc = BigInt(3), wc = BigInt(5);\nBigInt(8);\nfunction bc(t) {\n    const e = BigInt(10), n = BigInt(20), r = BigInt(40), o = BigInt(80), i = un, c = t * t % i * t % i, a = it(c, Xr, i) * c % i, u = it(a, yc, i) * t % i, l = it(u, wc, i) * u % i, f = it(l, e, i) * l % i, h = it(f, n, i) * f % i, y = it(h, r, i) * h % i, E = it(y, o, i) * y % i, p = it(E, o, i) * y % i, d = it(p, e, i) * l % i;\n    return {\n        pow_p_5_8: it(d, Xr, i) * t % i,\n        b2: c\n    };\n}\nfunction Ec(t) {\n    return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;\n}\nconst fn = gc({\n    P: un,\n    a: BigInt(486662),\n    montgomeryBits: 255,\n    nByteLength: 32,\n    Gu: BigInt(9),\n    powPminus2: (t)=>{\n        const e = un, { pow_p_5_8: n, b2: r } = bc(t);\n        return X(it(n, mc, e) * r, e);\n    },\n    adjustScalarBytes: Ec,\n    randomBytes: Lt\n});\nfunction Jr(t) {\n    t.lowS !== void 0 && Ct(\"lowS\", t.lowS), t.prehash !== void 0 && Ct(\"prehash\", t.prehash);\n}\nfunction vc(t) {\n    const e = Wr(t);\n    Dt(e, {\n        a: \"field\",\n        b: \"field\"\n    }, {\n        allowedPrivateKeyLengths: \"array\",\n        wrapPrivateKey: \"boolean\",\n        isTorsionFree: \"function\",\n        clearCofactor: \"function\",\n        allowInfinityPoint: \"boolean\",\n        fromBytes: \"function\",\n        toBytes: \"function\"\n    });\n    const { endo: n, Fp: r, a: o } = e;\n    if (n) {\n        if (!r.eql(o, r.ZERO)) throw new Error(\"invalid endomorphism, can only be defined for Koblitz curves that have a=0\");\n        if (typeof n != \"object\" || typeof n.beta != \"bigint\" || typeof n.splitScalar != \"function\") throw new Error(\"invalid endomorphism, expected beta: bigint and splitScalar: function\");\n    }\n    return Object.freeze({\n        ...e\n    });\n}\nconst { bytesToNumberBE: xc, hexToBytes: Sc } = ec;\nclass Oc extends Error {\n    constructor(e = \"\"){\n        super(e);\n    }\n}\nconst lt = {\n    Err: Oc,\n    _tlv: {\n        encode: (t, e)=>{\n            const { Err: n } = lt;\n            if (t < 0 || t > 256) throw new n(\"tlv.encode: wrong tag\");\n            if (e.length & 1) throw new n(\"tlv.encode: unpadded data\");\n            const r = e.length / 2, o = kt(r);\n            if (o.length / 2 & 128) throw new n(\"tlv.encode: long form length too big\");\n            const i = r > 127 ? kt(o.length / 2 | 128) : \"\";\n            return kt(t) + i + o + e;\n        },\n        decode (t, e) {\n            const { Err: n } = lt;\n            let r = 0;\n            if (t < 0 || t > 256) throw new n(\"tlv.encode: wrong tag\");\n            if (e.length < 2 || e[r++] !== t) throw new n(\"tlv.decode: wrong tlv\");\n            const o = e[r++], i = !!(o & 128);\n            let s = 0;\n            if (!i) s = o;\n            else {\n                const a = o & 127;\n                if (!a) throw new n(\"tlv.decode(long): indefinite length not supported\");\n                if (a > 4) throw new n(\"tlv.decode(long): byte length is too big\");\n                const u = e.subarray(r, r + a);\n                if (u.length !== a) throw new n(\"tlv.decode: length bytes not complete\");\n                if (u[0] === 0) throw new n(\"tlv.decode(long): zero leftmost byte\");\n                for (const l of u)s = s << 8 | l;\n                if (r += a, s < 128) throw new n(\"tlv.decode(long): not minimal encoding\");\n            }\n            const c = e.subarray(r, r + s);\n            if (c.length !== s) throw new n(\"tlv.decode: wrong value length\");\n            return {\n                v: c,\n                l: e.subarray(r + s)\n            };\n        }\n    },\n    _int: {\n        encode (t) {\n            const { Err: e } = lt;\n            if (t < dt) throw new e(\"integer: negative integers are not allowed\");\n            let n = kt(t);\n            if (Number.parseInt(n[0], 16) & 8 && (n = \"00\" + n), n.length & 1) throw new e(\"unexpected DER parsing assertion: unpadded hex\");\n            return n;\n        },\n        decode (t) {\n            const { Err: e } = lt;\n            if (t[0] & 128) throw new e(\"invalid signature integer: negative\");\n            if (t[0] === 0 && !(t[1] & 128)) throw new e(\"invalid signature integer: unnecessary leading zero\");\n            return xc(t);\n        }\n    },\n    toSig (t) {\n        const { Err: e, _int: n, _tlv: r } = lt, o = typeof t == \"string\" ? Sc(t) : t;\n        te(o);\n        const { v: i, l: s } = r.decode(48, o);\n        if (s.length) throw new e(\"invalid signature: left bytes after parsing\");\n        const { v: c, l: a } = r.decode(2, i), { v: u, l } = r.decode(2, a);\n        if (l.length) throw new e(\"invalid signature: left bytes after parsing\");\n        return {\n            r: n.decode(c),\n            s: n.decode(u)\n        };\n    },\n    hexFromSig (t) {\n        const { _tlv: e, _int: n } = lt, r = e.encode(2, n.encode(t.r)), o = e.encode(2, n.encode(t.s)), i = r + o;\n        return e.encode(48, i);\n    }\n}, dt = BigInt(0), K = BigInt(1);\nBigInt(2);\nconst Qr = BigInt(3);\nBigInt(4);\nfunction Ac(t) {\n    const e = vc(t), { Fp: n } = e, r = Kr(e.n, e.nBitLength), o = e.toBytes || ((p, d, v)=>{\n        const m = d.toAffine();\n        return ne(Uint8Array.from([\n            4\n        ]), n.toBytes(m.x), n.toBytes(m.y));\n    }), i = e.fromBytes || ((p)=>{\n        const d = p.subarray(1), v = n.fromBytes(d.subarray(0, n.BYTES)), m = n.fromBytes(d.subarray(n.BYTES, 2 * n.BYTES));\n        return {\n            x: v,\n            y: m\n        };\n    });\n    function s(p) {\n        const { a: d, b: v } = e, m = n.sqr(p), O = n.mul(m, p);\n        return n.add(n.add(O, n.mul(p, d)), v);\n    }\n    if (!n.eql(n.sqr(e.Gy), s(e.Gx))) throw new Error(\"bad generator point: equation left != right\");\n    function c(p) {\n        return Ee(p, K, e.n);\n    }\n    function a(p) {\n        const { allowedPrivateKeyLengths: d, nByteLength: v, wrapPrivateKey: m, n: O } = e;\n        if (d && typeof p != \"bigint\") {\n            if (St(p) && (p = Pt(p)), typeof p != \"string\" || !d.includes(p.length)) throw new Error(\"invalid private key\");\n            p = p.padStart(v * 2, \"0\");\n        }\n        let N;\n        try {\n            N = typeof p == \"bigint\" ? p : Ot(et(\"private key\", p, v));\n        } catch  {\n            throw new Error(\"invalid private key, expected hex or \" + v + \" bytes, got \" + typeof p);\n        }\n        return m && (N = X(N, O)), ft(\"private key\", N, K, O), N;\n    }\n    function u(p) {\n        if (!(p instanceof h)) throw new Error(\"ProjectivePoint expected\");\n    }\n    const l = tn((p, d)=>{\n        const { px: v, py: m, pz: O } = p;\n        if (n.eql(O, n.ONE)) return {\n            x: v,\n            y: m\n        };\n        const N = p.is0();\n        d == null && (d = N ? n.ONE : n.inv(O));\n        const $ = n.mul(v, d), B = n.mul(m, d), A = n.mul(O, d);\n        if (N) return {\n            x: n.ZERO,\n            y: n.ZERO\n        };\n        if (!n.eql(A, n.ONE)) throw new Error(\"invZ was invalid\");\n        return {\n            x: $,\n            y: B\n        };\n    }), f = tn((p)=>{\n        if (p.is0()) {\n            if (e.allowInfinityPoint && !n.is0(p.py)) return;\n            throw new Error(\"bad point: ZERO\");\n        }\n        const { x: d, y: v } = p.toAffine();\n        if (!n.isValid(d) || !n.isValid(v)) throw new Error(\"bad point: x or y not FE\");\n        const m = n.sqr(v), O = s(d);\n        if (!n.eql(m, O)) throw new Error(\"bad point: equation left != right\");\n        if (!p.isTorsionFree()) throw new Error(\"bad point: not in prime-order subgroup\");\n        return !0;\n    });\n    class h {\n        constructor(d, v, m){\n            if (this.px = d, this.py = v, this.pz = m, d == null || !n.isValid(d)) throw new Error(\"x required\");\n            if (v == null || !n.isValid(v)) throw new Error(\"y required\");\n            if (m == null || !n.isValid(m)) throw new Error(\"z required\");\n            Object.freeze(this);\n        }\n        static fromAffine(d) {\n            const { x: v, y: m } = d || {};\n            if (!d || !n.isValid(v) || !n.isValid(m)) throw new Error(\"invalid affine point\");\n            if (d instanceof h) throw new Error(\"projective point not allowed\");\n            const O = (N)=>n.eql(N, n.ZERO);\n            return O(v) && O(m) ? h.ZERO : new h(v, m, n.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        static normalizeZ(d) {\n            const v = n.invertBatch(d.map((m)=>m.pz));\n            return d.map((m, O)=>m.toAffine(v[O])).map(h.fromAffine);\n        }\n        static fromHex(d) {\n            const v = h.fromAffine(i(et(\"pointHex\", d)));\n            return v.assertValidity(), v;\n        }\n        static fromPrivateKey(d) {\n            return h.BASE.multiply(a(d));\n        }\n        static msm(d, v) {\n            return hc(h, r, d, v);\n        }\n        _setWindowSize(d) {\n            E.setWindowSize(this, d);\n        }\n        assertValidity() {\n            f(this);\n        }\n        hasEvenY() {\n            const { y: d } = this.toAffine();\n            if (n.isOdd) return !n.isOdd(d);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        equals(d) {\n            u(d);\n            const { px: v, py: m, pz: O } = this, { px: N, py: $, pz: B } = d, A = n.eql(n.mul(v, B), n.mul(N, O)), T = n.eql(n.mul(m, B), n.mul($, O));\n            return A && T;\n        }\n        negate() {\n            return new h(this.px, n.neg(this.py), this.pz);\n        }\n        double() {\n            const { a: d, b: v } = e, m = n.mul(v, Qr), { px: O, py: N, pz: $ } = this;\n            let B = n.ZERO, A = n.ZERO, T = n.ZERO, S = n.mul(O, O), L = n.mul(N, N), U = n.mul($, $), _ = n.mul(O, N);\n            return _ = n.add(_, _), T = n.mul(O, $), T = n.add(T, T), B = n.mul(d, T), A = n.mul(m, U), A = n.add(B, A), B = n.sub(L, A), A = n.add(L, A), A = n.mul(B, A), B = n.mul(_, B), T = n.mul(m, T), U = n.mul(d, U), _ = n.sub(S, U), _ = n.mul(d, _), _ = n.add(_, T), T = n.add(S, S), S = n.add(T, S), S = n.add(S, U), S = n.mul(S, _), A = n.add(A, S), U = n.mul(N, $), U = n.add(U, U), S = n.mul(U, _), B = n.sub(B, S), T = n.mul(U, L), T = n.add(T, T), T = n.add(T, T), new h(B, A, T);\n        }\n        add(d) {\n            u(d);\n            const { px: v, py: m, pz: O } = this, { px: N, py: $, pz: B } = d;\n            let A = n.ZERO, T = n.ZERO, S = n.ZERO;\n            const L = e.a, U = n.mul(e.b, Qr);\n            let _ = n.mul(v, N), j = n.mul(m, $), g = n.mul(O, B), w = n.add(v, m), b = n.add(N, $);\n            w = n.mul(w, b), b = n.add(_, j), w = n.sub(w, b), b = n.add(v, O);\n            let I = n.add(N, B);\n            return b = n.mul(b, I), I = n.add(_, g), b = n.sub(b, I), I = n.add(m, O), A = n.add($, B), I = n.mul(I, A), A = n.add(j, g), I = n.sub(I, A), S = n.mul(L, b), A = n.mul(U, g), S = n.add(A, S), A = n.sub(j, S), S = n.add(j, S), T = n.mul(A, S), j = n.add(_, _), j = n.add(j, _), g = n.mul(L, g), b = n.mul(U, b), j = n.add(j, g), g = n.sub(_, g), g = n.mul(L, g), b = n.add(b, g), _ = n.mul(j, b), T = n.add(T, _), _ = n.mul(I, b), A = n.mul(w, A), A = n.sub(A, _), _ = n.mul(w, j), S = n.mul(I, S), S = n.add(S, _), new h(A, T, S);\n        }\n        subtract(d) {\n            return this.add(d.negate());\n        }\n        is0() {\n            return this.equals(h.ZERO);\n        }\n        wNAF(d) {\n            return E.wNAFCached(this, d, h.normalizeZ);\n        }\n        multiplyUnsafe(d) {\n            const { endo: v, n: m } = e;\n            ft(\"scalar\", d, dt, m);\n            const O = h.ZERO;\n            if (d === dt) return O;\n            if (this.is0() || d === K) return this;\n            if (!v || E.hasPrecomputes(this)) return E.wNAFCachedUnsafe(this, d, h.normalizeZ);\n            let { k1neg: N, k1: $, k2neg: B, k2: A } = v.splitScalar(d), T = O, S = O, L = this;\n            for(; $ > dt || A > dt;)$ & K && (T = T.add(L)), A & K && (S = S.add(L)), L = L.double(), $ >>= K, A >>= K;\n            return N && (T = T.negate()), B && (S = S.negate()), S = new h(n.mul(S.px, v.beta), S.py, S.pz), T.add(S);\n        }\n        multiply(d) {\n            const { endo: v, n: m } = e;\n            ft(\"scalar\", d, K, m);\n            let O, N;\n            if (v) {\n                const { k1neg: $, k1: B, k2neg: A, k2: T } = v.splitScalar(d);\n                let { p: S, f: L } = this.wNAF(B), { p: U, f: _ } = this.wNAF(T);\n                S = E.constTimeNegate($, S), U = E.constTimeNegate(A, U), U = new h(n.mul(U.px, v.beta), U.py, U.pz), O = S.add(U), N = L.add(_);\n            } else {\n                const { p: $, f: B } = this.wNAF(d);\n                O = $, N = B;\n            }\n            return h.normalizeZ([\n                O,\n                N\n            ])[0];\n        }\n        multiplyAndAddUnsafe(d, v, m) {\n            const O = h.BASE, N = (B, A)=>A === dt || A === K || !B.equals(O) ? B.multiplyUnsafe(A) : B.multiply(A), $ = N(this, v).add(N(d, m));\n            return $.is0() ? void 0 : $;\n        }\n        toAffine(d) {\n            return l(this, d);\n        }\n        isTorsionFree() {\n            const { h: d, isTorsionFree: v } = e;\n            if (d === K) return !0;\n            if (v) return v(h, this);\n            throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\");\n        }\n        clearCofactor() {\n            const { h: d, clearCofactor: v } = e;\n            return d === K ? this : v ? v(h, this) : this.multiplyUnsafe(e.h);\n        }\n        toRawBytes(d = !0) {\n            return Ct(\"isCompressed\", d), this.assertValidity(), o(h, this, d);\n        }\n        toHex(d = !0) {\n            return Ct(\"isCompressed\", d), Pt(this.toRawBytes(d));\n        }\n    }\n    h.BASE = new h(e.Gx, e.Gy, n.ONE), h.ZERO = new h(n.ZERO, n.ONE, n.ZERO);\n    const y = e.nBitLength, E = dc(h, e.endo ? Math.ceil(y / 2) : y);\n    return {\n        CURVE: e,\n        ProjectivePoint: h,\n        normPrivateKeyToScalar: a,\n        weierstrassEquation: s,\n        isWithinCurveOrder: c\n    };\n}\nfunction Bc(t) {\n    const e = Wr(t);\n    return Dt(e, {\n        hash: \"hash\",\n        hmac: \"function\",\n        randomBytes: \"function\"\n    }, {\n        bits2int: \"function\",\n        bits2int_modN: \"function\",\n        lowS: \"boolean\"\n    }), Object.freeze({\n        lowS: !0,\n        ...e\n    });\n}\nfunction Ic(t) {\n    const e = Bc(t), { Fp: n, n: r } = e, o = n.BYTES + 1, i = 2 * n.BYTES + 1;\n    function s(g) {\n        return X(g, r);\n    }\n    function c(g) {\n        return nn(g, r);\n    }\n    const { ProjectivePoint: a, normPrivateKeyToScalar: u, weierstrassEquation: l, isWithinCurveOrder: f } = Ac({\n        ...e,\n        toBytes (g, w, b) {\n            const I = w.toAffine(), R = n.toBytes(I.x), x = ne;\n            return Ct(\"isCompressed\", b), b ? x(Uint8Array.from([\n                w.hasEvenY() ? 2 : 3\n            ]), R) : x(Uint8Array.from([\n                4\n            ]), R, n.toBytes(I.y));\n        },\n        fromBytes (g) {\n            const w = g.length, b = g[0], I = g.subarray(1);\n            if (w === o && (b === 2 || b === 3)) {\n                const R = Ot(I);\n                if (!Ee(R, K, n.ORDER)) throw new Error(\"Point is not on curve\");\n                const x = l(R);\n                let C;\n                try {\n                    C = n.sqrt(x);\n                } catch (M) {\n                    const D = M instanceof Error ? \": \" + M.message : \"\";\n                    throw new Error(\"Point is not on curve\" + D);\n                }\n                const P = (C & K) === K;\n                return (b & 1) === 1 !== P && (C = n.neg(C)), {\n                    x: R,\n                    y: C\n                };\n            } else if (w === i && b === 4) {\n                const R = n.fromBytes(I.subarray(0, n.BYTES)), x = n.fromBytes(I.subarray(n.BYTES, 2 * n.BYTES));\n                return {\n                    x: R,\n                    y: x\n                };\n            } else {\n                const R = o, x = i;\n                throw new Error(\"invalid Point, expected length of \" + R + \", or uncompressed \" + x + \", got \" + w);\n            }\n        }\n    }), h = (g)=>Pt(Mt(g, e.nByteLength));\n    function y(g) {\n        const w = r >> K;\n        return g > w;\n    }\n    function E(g) {\n        return y(g) ? s(-g) : g;\n    }\n    const p = (g, w, b)=>Ot(g.slice(w, b));\n    class d {\n        constructor(w, b, I){\n            this.r = w, this.s = b, this.recovery = I, this.assertValidity();\n        }\n        static fromCompact(w) {\n            const b = e.nByteLength;\n            return w = et(\"compactSignature\", w, b * 2), new d(p(w, 0, b), p(w, b, 2 * b));\n        }\n        static fromDER(w) {\n            const { r: b, s: I } = lt.toSig(et(\"DER\", w));\n            return new d(b, I);\n        }\n        assertValidity() {\n            ft(\"r\", this.r, K, r), ft(\"s\", this.s, K, r);\n        }\n        addRecoveryBit(w) {\n            return new d(this.r, this.s, w);\n        }\n        recoverPublicKey(w) {\n            const { r: b, s: I, recovery: R } = this, x = B(et(\"msgHash\", w));\n            if (R == null || ![\n                0,\n                1,\n                2,\n                3\n            ].includes(R)) throw new Error(\"recovery id invalid\");\n            const C = R === 2 || R === 3 ? b + e.n : b;\n            if (C >= n.ORDER) throw new Error(\"recovery id 2 or 3 invalid\");\n            const P = (R & 1) === 0 ? \"02\" : \"03\", k = a.fromHex(P + h(C)), M = c(C), D = s(-x * M), z = s(I * M), Z = a.BASE.multiplyAndAddUnsafe(k, D, z);\n            if (!Z) throw new Error(\"point at infinify\");\n            return Z.assertValidity(), Z;\n        }\n        hasHighS() {\n            return y(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new d(this.r, s(-this.s), this.recovery) : this;\n        }\n        toDERRawBytes() {\n            return Vt(this.toDERHex());\n        }\n        toDERHex() {\n            return lt.hexFromSig({\n                r: this.r,\n                s: this.s\n            });\n        }\n        toCompactRawBytes() {\n            return Vt(this.toCompactHex());\n        }\n        toCompactHex() {\n            return h(this.r) + h(this.s);\n        }\n    }\n    const v = {\n        isValidPrivateKey (g) {\n            try {\n                return u(g), !0;\n            } catch  {\n                return !1;\n            }\n        },\n        normPrivateKeyToScalar: u,\n        randomPrivateKey: ()=>{\n            const g = zr(e.n);\n            return uc(e.randomBytes(g), e.n);\n        },\n        precompute (g = 8, w = a.BASE) {\n            return w._setWindowSize(g), w.multiply(BigInt(3)), w;\n        }\n    };\n    function m(g, w = !0) {\n        return a.fromPrivateKey(g).toRawBytes(w);\n    }\n    function O(g) {\n        const w = St(g), b = typeof g == \"string\", I = (w || b) && g.length;\n        return w ? I === o || I === i : b ? I === 2 * o || I === 2 * i : g instanceof a;\n    }\n    function N(g, w, b = !0) {\n        if (O(g)) throw new Error(\"first arg must be private key\");\n        if (!O(w)) throw new Error(\"second arg must be public key\");\n        return a.fromHex(w).multiply(u(g)).toRawBytes(b);\n    }\n    const $ = e.bits2int || function(g) {\n        if (g.length > 8192) throw new Error(\"input is too large\");\n        const w = Ot(g), b = g.length * 8 - e.nBitLength;\n        return b > 0 ? w >> BigInt(b) : w;\n    }, B = e.bits2int_modN || function(g) {\n        return s($(g));\n    }, A = Je(e.nBitLength);\n    function T(g) {\n        return ft(\"num < 2^\" + e.nBitLength, g, dt, A), Mt(g, e.nByteLength);\n    }\n    function S(g, w, b = L) {\n        if ([\n            \"recovered\",\n            \"canonical\"\n        ].some((W)=>W in b)) throw new Error(\"sign() legacy options not supported\");\n        const { hash: I, randomBytes: R } = e;\n        let { lowS: x, prehash: C, extraEntropy: P } = b;\n        x == null && (x = !0), g = et(\"msgHash\", g), Jr(b), C && (g = et(\"prehashed msgHash\", I(g)));\n        const k = B(g), M = u(w), D = [\n            T(M),\n            T(k)\n        ];\n        if (P != null && P !== !1) {\n            const W = P === !0 ? R(n.BYTES) : P;\n            D.push(et(\"extraEntropy\", W));\n        }\n        const z = ne(...D), Z = k;\n        function st(W) {\n            const J = $(W);\n            if (!f(J)) return;\n            const Be = c(J), zt = a.BASE.multiply(J).toAffine(), vt = s(zt.x);\n            if (vt === dt) return;\n            const Zt = s(Be * s(Z + vt * M));\n            if (Zt === dt) return;\n            let Ut = (zt.x === vt ? 0 : 2) | Number(zt.y & K), vn = Zt;\n            return x && y(Zt) && (vn = E(Zt), Ut ^= 1), new d(vt, vn, Ut);\n        }\n        return {\n            seed: z,\n            k2sig: st\n        };\n    }\n    const L = {\n        lowS: e.lowS,\n        prehash: !1\n    }, U = {\n        lowS: e.lowS,\n        prehash: !1\n    };\n    function _(g, w, b = L) {\n        const { seed: I, k2sig: R } = S(g, w, b), x = e;\n        return Vr(x.hash.outputLen, x.nByteLength, x.hmac)(I, R);\n    }\n    a.BASE._setWindowSize(8);\n    function j(g, w, b, I = U) {\n        const R = g;\n        w = et(\"msgHash\", w), b = et(\"publicKey\", b);\n        const { lowS: x, prehash: C, format: P } = I;\n        if (Jr(I), \"strict\" in I) throw new Error(\"options.strict was renamed to lowS\");\n        if (P !== void 0 && P !== \"compact\" && P !== \"der\") throw new Error(\"format must be compact or der\");\n        const k = typeof R == \"string\" || St(R), M = !k && !P && typeof R == \"object\" && R !== null && typeof R.r == \"bigint\" && typeof R.s == \"bigint\";\n        if (!k && !M) throw new Error(\"invalid signature, expected Uint8Array, hex string or Signature instance\");\n        let D, z;\n        try {\n            if (M && (D = new d(R.r, R.s)), k) {\n                try {\n                    P !== \"compact\" && (D = d.fromDER(R));\n                } catch (Ut) {\n                    if (!(Ut instanceof lt.Err)) throw Ut;\n                }\n                !D && P !== \"der\" && (D = d.fromCompact(R));\n            }\n            z = a.fromHex(b);\n        } catch  {\n            return !1;\n        }\n        if (!D || x && D.hasHighS()) return !1;\n        C && (w = e.hash(w));\n        const { r: Z, s: st } = D, W = B(w), J = c(st), Be = s(W * J), zt = s(Z * J), vt = a.BASE.multiplyAndAddUnsafe(z, Be, zt)?.toAffine();\n        return vt ? s(vt.x) === Z : !1;\n    }\n    return {\n        CURVE: e,\n        getPublicKey: m,\n        getSharedSecret: N,\n        sign: _,\n        verify: j,\n        ProjectivePoint: a,\n        Signature: d,\n        utils: v\n    };\n}\nfunction Nc(t) {\n    return {\n        hash: t,\n        hmac: (e, ...n)=>ye(t, e, Vi(...n)),\n        randomBytes: Lt\n    };\n}\nfunction Uc(t, e) {\n    const n = (r)=>Ic({\n            ...t,\n            ...Nc(r)\n        });\n    return {\n        ...n(e),\n        create: n\n    };\n}\nconst to = Kr(BigInt(\"0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff\")), Tc = to.create(BigInt(\"-3\")), Rc = BigInt(\"0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b\"), _c = Uc({\n    a: Tc,\n    b: Rc,\n    Fp: to,\n    n: BigInt(\"0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551\"),\n    Gx: BigInt(\"0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296\"),\n    Gy: BigInt(\"0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5\"),\n    h: BigInt(1),\n    lowS: !1\n}, Qt), ln = \"base10\", G = \"base16\", qt = \"base64pad\", xe = \"base64url\", Kt = \"utf8\", dn = 0, Ft = 1, re = 2, $c = 0, eo = 1, oe = 12, hn = 32;\nfunction Lc() {\n    const t = fn.utils.randomPrivateKey(), e = fn.getPublicKey(t);\n    return {\n        privateKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(t, G),\n        publicKey: (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e, G)\n    };\n}\nfunction jc() {\n    const t = Lt(hn);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(t, G);\n}\nfunction Cc(t, e) {\n    const n = fn.getSharedSecret((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t, G), (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, G)), r = Vs(Qt, n, void 0, void 0, hn);\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(r, G);\n}\nfunction Pc(t) {\n    const e = Qt((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t, G));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e, G);\n}\nfunction kc(t) {\n    const e = Qt((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t, Kt));\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(e, G);\n}\nfunction pn(t) {\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(`${t}`, ln);\n}\nfunction Bt(t) {\n    return Number((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(t, ln));\n}\nfunction no(t) {\n    return t.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\nfunction ro(t) {\n    const e = t.replace(/-/g, \"+\").replace(/_/g, \"/\"), n = (4 - e.length % 4) % 4;\n    return e + \"=\".repeat(n);\n}\nfunction Vc(t) {\n    const e = pn(typeof t.type < \"u\" ? t.type : dn);\n    if (Bt(e) === Ft && typeof t.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n    const n = typeof t.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t.senderPublicKey, G) : void 0, r = typeof t.iv < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t.iv, G) : Lt(oe), o = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t.symKey, G), i = $r(o, r).encrypt((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t.message, Kt)), s = gn({\n        type: e,\n        sealed: i,\n        iv: r,\n        senderPublicKey: n\n    });\n    return t.encoding === xe ? no(s) : s;\n}\nfunction Mc(t) {\n    const e = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t.symKey, G), { sealed: n, iv: r } = Se({\n        encoded: t.encoded,\n        encoding: t.encoding\n    }), o = $r(e, r).decrypt(n);\n    if (o === null) throw new Error(\"Failed to decrypt\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(o, Kt);\n}\nfunction Dc(t, e) {\n    const n = pn(re), r = Lt(oe), o = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(t, Kt), i = gn({\n        type: n,\n        sealed: o,\n        iv: r\n    });\n    return e === xe ? no(i) : i;\n}\nfunction Hc(t, e) {\n    const { sealed: n } = Se({\n        encoded: t,\n        encoding: e\n    });\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(n, Kt);\n}\nfunction gn(t) {\n    if (Bt(t.type) === re) return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n        t.type,\n        t.sealed\n    ]), qt);\n    if (Bt(t.type) === Ft) {\n        if (typeof t.senderPublicKey > \"u\") throw new Error(\"Missing sender public key for type 1 envelope\");\n        return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n            t.type,\n            t.senderPublicKey,\n            t.iv,\n            t.sealed\n        ]), qt);\n    }\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n        t.type,\n        t.iv,\n        t.sealed\n    ]), qt);\n}\nfunction Se(t) {\n    const e = (t.encoding || qt) === xe ? ro(t.encoded) : t.encoded, n = (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.fromString)(e, qt), r = n.slice($c, eo), o = eo;\n    if (Bt(r) === Ft) {\n        const a = o + hn, u = a + oe, l = n.slice(o, a), f = n.slice(a, u), h = n.slice(u);\n        return {\n            type: r,\n            sealed: h,\n            iv: f,\n            senderPublicKey: l\n        };\n    }\n    if (Bt(r) === re) {\n        const a = n.slice(o), u = Lt(oe);\n        return {\n            type: r,\n            sealed: a,\n            iv: u\n        };\n    }\n    const i = o + oe, s = n.slice(o, i), c = n.slice(i);\n    return {\n        type: r,\n        sealed: c,\n        iv: s\n    };\n}\nfunction qc(t, e) {\n    const n = Se({\n        encoded: t,\n        encoding: e?.encoding\n    });\n    return oo({\n        type: Bt(n.type),\n        senderPublicKey: typeof n.senderPublicKey < \"u\" ? (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.toString)(n.senderPublicKey, G) : void 0,\n        receiverPublicKey: e?.receiverPublicKey\n    });\n}\nfunction oo(t) {\n    const e = t?.type || dn;\n    if (e === Ft) {\n        if (typeof t?.senderPublicKey > \"u\") throw new Error(\"missing sender public key\");\n        if (typeof t?.receiverPublicKey > \"u\") throw new Error(\"missing receiver public key\");\n    }\n    return {\n        type: e,\n        senderPublicKey: t?.senderPublicKey,\n        receiverPublicKey: t?.receiverPublicKey\n    };\n}\nfunction Kc(t) {\n    return t.type === Ft && typeof t.senderPublicKey == \"string\" && typeof t.receiverPublicKey == \"string\";\n}\nfunction Fc(t) {\n    return t.type === re;\n}\nfunction io(t) {\n    const e = Buffer.from(t.x, \"base64\"), n = Buffer.from(t.y, \"base64\");\n    return (0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n        new Uint8Array([\n            4\n        ]),\n        e,\n        n\n    ]);\n}\nfunction zc(t, e) {\n    const [n, r, o] = t.split(\".\"), i = Buffer.from(ro(o), \"base64\");\n    if (i.length !== 64) throw new Error(\"Invalid signature length\");\n    const s = i.slice(0, 32), c = i.slice(32, 64), a = `${n}.${r}`, u = Qt(a), l = io(e);\n    if (!_c.verify((0,uint8arrays__WEBPACK_IMPORTED_MODULE_5__.concat)([\n        s,\n        c\n    ]), u, l)) throw new Error(\"Invalid signature\");\n    return (0,_walletconnect_relay_auth__WEBPACK_IMPORTED_MODULE_4__.decodeJWT)(t).payload;\n}\nconst so = \"irn\";\nfunction Zc(t) {\n    return t?.relay || {\n        protocol: so\n    };\n}\nfunction Yc(t) {\n    const e = _walletconnect_relay_api__WEBPACK_IMPORTED_MODULE_6__.RELAY_JSONRPC[t];\n    if (typeof e > \"u\") throw new Error(`Relay Protocol not supported: ${t}`);\n    return e;\n}\nfunction co(t, e = \"-\") {\n    const n = {}, r = \"relay\" + e;\n    return Object.keys(t).forEach((o)=>{\n        if (o.startsWith(r)) {\n            const i = o.replace(r, \"\"), s = t[o];\n            n[i] = s;\n        }\n    }), n;\n}\nfunction Gc(t) {\n    if (!t.includes(\"wc:\")) {\n        const u = je(t);\n        u != null && u.includes(\"wc:\") && (t = u);\n    }\n    t = t.includes(\"wc://\") ? t.replace(\"wc://\", \"\") : t, t = t.includes(\"wc:\") ? t.replace(\"wc:\", \"\") : t;\n    const e = t.indexOf(\":\"), n = t.indexOf(\"?\") !== -1 ? t.indexOf(\"?\") : void 0, r = t.substring(0, e), o = t.substring(e + 1, n).split(\"@\"), i = typeof n < \"u\" ? t.substring(n) : \"\", s = new URLSearchParams(i), c = {};\n    s.forEach((u, l)=>{\n        c[l] = u;\n    });\n    const a = typeof c.methods == \"string\" ? c.methods.split(\",\") : void 0;\n    return {\n        protocol: r,\n        topic: ao(o[0]),\n        version: parseInt(o[1], 10),\n        symKey: c.symKey,\n        relay: co(c),\n        methods: a,\n        expiryTimestamp: c.expiryTimestamp ? parseInt(c.expiryTimestamp, 10) : void 0\n    };\n}\nfunction ao(t) {\n    return t.startsWith(\"//\") ? t.substring(2) : t;\n}\nfunction uo(t, e = \"-\") {\n    const n = \"relay\", r = {};\n    return Object.keys(t).forEach((o)=>{\n        const i = o, s = n + e + i;\n        t[i] && (r[s] = t[i]);\n    }), r;\n}\nfunction Wc(t) {\n    const e = new URLSearchParams, n = uo(t.relay);\n    Object.keys(n).sort().forEach((o)=>{\n        e.set(o, n[o]);\n    }), e.set(\"symKey\", t.symKey), t.expiryTimestamp && e.set(\"expiryTimestamp\", t.expiryTimestamp.toString()), t.methods && e.set(\"methods\", t.methods.join(\",\"));\n    const r = e.toString();\n    return `${t.protocol}:${t.topic}@${t.version}?${r}`;\n}\nfunction Xc(t, e, n) {\n    return `${t}?wc_ev=${n}&topic=${e}`;\n}\nvar Jc = Object.defineProperty, Qc = Object.defineProperties, ta = Object.getOwnPropertyDescriptors, fo = Object.getOwnPropertySymbols, ea = Object.prototype.hasOwnProperty, na = Object.prototype.propertyIsEnumerable, lo = (t, e, n)=>e in t ? Jc(t, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : t[e] = n, ra = (t, e)=>{\n    for(var n in e || (e = {}))ea.call(e, n) && lo(t, n, e[n]);\n    if (fo) for (var n of fo(e))na.call(e, n) && lo(t, n, e[n]);\n    return t;\n}, oa = (t, e)=>Qc(t, ta(e));\nfunction It(t) {\n    const e = [];\n    return t.forEach((n)=>{\n        const [r, o] = n.split(\":\");\n        e.push(`${r}:${o}`);\n    }), e;\n}\nfunction ho(t) {\n    const e = [];\n    return Object.values(t).forEach((n)=>{\n        e.push(...It(n.accounts));\n    }), e;\n}\nfunction po(t, e) {\n    const n = [];\n    return Object.values(t).forEach((r)=>{\n        It(r.accounts).includes(e) && n.push(...r.methods);\n    }), n;\n}\nfunction go(t, e) {\n    const n = [];\n    return Object.values(t).forEach((r)=>{\n        It(r.accounts).includes(e) && n.push(...r.events);\n    }), n;\n}\nfunction ia(t, e) {\n    const n = Bo(t, e);\n    if (n) throw new Error(n.message);\n    const r = {};\n    for (const [o, i] of Object.entries(t))r[o] = {\n        methods: i.methods,\n        events: i.events,\n        chains: i.accounts.map((s)=>`${s.split(\":\")[0]}:${s.split(\":\")[1]}`)\n    };\n    return r;\n}\nfunction sa(t) {\n    const { proposal: { requiredNamespaces: e, optionalNamespaces: n = {} }, supportedNamespaces: r } = t, o = ie(e), i = ie(n), s = {};\n    Object.keys(r).forEach((u)=>{\n        const l = r[u].chains, f = r[u].methods, h = r[u].events, y = r[u].accounts;\n        l.forEach((E)=>{\n            if (!y.some((p)=>p.includes(E))) throw new Error(`No accounts provided for chain ${E} in namespace ${u}`);\n        }), s[u] = {\n            chains: l,\n            methods: f,\n            events: h,\n            accounts: y\n        };\n    });\n    const c = No(e, s, \"approve()\");\n    if (c) throw new Error(c.message);\n    const a = {};\n    return !Object.keys(e).length && !Object.keys(n).length ? s : (Object.keys(o).forEach((u)=>{\n        const l = r[u].chains.filter((E)=>{\n            var p, d;\n            return (d = (p = o[u]) == null ? void 0 : p.chains) == null ? void 0 : d.includes(E);\n        }), f = r[u].methods.filter((E)=>{\n            var p, d;\n            return (d = (p = o[u]) == null ? void 0 : p.methods) == null ? void 0 : d.includes(E);\n        }), h = r[u].events.filter((E)=>{\n            var p, d;\n            return (d = (p = o[u]) == null ? void 0 : p.events) == null ? void 0 : d.includes(E);\n        }), y = l.map((E)=>r[u].accounts.filter((p)=>p.includes(`${E}:`))).flat();\n        a[u] = {\n            chains: l,\n            methods: f,\n            events: h,\n            accounts: y\n        };\n    }), Object.keys(i).forEach((u)=>{\n        var l, f, h, y, E, p;\n        if (!r[u]) return;\n        const d = (f = (l = i[u]) == null ? void 0 : l.chains) == null ? void 0 : f.filter((N)=>r[u].chains.includes(N)), v = r[u].methods.filter((N)=>{\n            var $, B;\n            return (B = ($ = i[u]) == null ? void 0 : $.methods) == null ? void 0 : B.includes(N);\n        }), m = r[u].events.filter((N)=>{\n            var $, B;\n            return (B = ($ = i[u]) == null ? void 0 : $.events) == null ? void 0 : B.includes(N);\n        }), O = d?.map((N)=>r[u].accounts.filter(($)=>$.includes(`${N}:`))).flat();\n        a[u] = {\n            chains: ot((h = a[u]) == null ? void 0 : h.chains, d),\n            methods: ot((y = a[u]) == null ? void 0 : y.methods, v),\n            events: ot((E = a[u]) == null ? void 0 : E.events, m),\n            accounts: ot((p = a[u]) == null ? void 0 : p.accounts, O)\n        };\n    }), a);\n}\nfunction yn(t) {\n    return t.includes(\":\");\n}\nfunction yo(t) {\n    return yn(t) ? t.split(\":\")[0] : t;\n}\nfunction ie(t) {\n    var e, n, r;\n    const o = {};\n    if (!Oe(t)) return o;\n    for (const [i, s] of Object.entries(t)){\n        const c = yn(i) ? [\n            i\n        ] : s.chains, a = s.methods || [], u = s.events || [], l = yo(i);\n        o[l] = oa(ra({}, o[l]), {\n            chains: ot(c, (e = o[l]) == null ? void 0 : e.chains),\n            methods: ot(a, (n = o[l]) == null ? void 0 : n.methods),\n            events: ot(u, (r = o[l]) == null ? void 0 : r.events)\n        });\n    }\n    return o;\n}\nfunction mo(t) {\n    const e = {};\n    return t?.forEach((n)=>{\n        var r;\n        const [o, i] = n.split(\":\");\n        e[o] || (e[o] = {\n            accounts: [],\n            chains: [],\n            events: [],\n            methods: []\n        }), e[o].accounts.push(n), (r = e[o].chains) == null || r.push(`${o}:${i}`);\n    }), e;\n}\nfunction ca(t, e) {\n    e = e.map((r)=>r.replace(\"did:pkh:\", \"\"));\n    const n = mo(e);\n    for (const [r, o] of Object.entries(n))o.methods ? o.methods = ot(o.methods, t) : o.methods = t, o.events = [\n        \"chainChanged\",\n        \"accountsChanged\"\n    ];\n    return n;\n}\nfunction aa(t, e) {\n    var n, r, o, i, s, c;\n    const a = ie(t), u = ie(e), l = {}, f = Object.keys(a).concat(Object.keys(u));\n    for (const h of f)l[h] = {\n        chains: ot((n = a[h]) == null ? void 0 : n.chains, (r = u[h]) == null ? void 0 : r.chains),\n        methods: ot((o = a[h]) == null ? void 0 : o.methods, (i = u[h]) == null ? void 0 : i.methods),\n        events: ot((s = a[h]) == null ? void 0 : s.events, (c = u[h]) == null ? void 0 : c.events)\n    };\n    return l;\n}\nconst wo = {\n    INVALID_METHOD: {\n        message: \"Invalid method.\",\n        code: 1001\n    },\n    INVALID_EVENT: {\n        message: \"Invalid event.\",\n        code: 1002\n    },\n    INVALID_UPDATE_REQUEST: {\n        message: \"Invalid update request.\",\n        code: 1003\n    },\n    INVALID_EXTEND_REQUEST: {\n        message: \"Invalid extend request.\",\n        code: 1004\n    },\n    INVALID_SESSION_SETTLE_REQUEST: {\n        message: \"Invalid session settle request.\",\n        code: 1005\n    },\n    UNAUTHORIZED_METHOD: {\n        message: \"Unauthorized method.\",\n        code: 3001\n    },\n    UNAUTHORIZED_EVENT: {\n        message: \"Unauthorized event.\",\n        code: 3002\n    },\n    UNAUTHORIZED_UPDATE_REQUEST: {\n        message: \"Unauthorized update request.\",\n        code: 3003\n    },\n    UNAUTHORIZED_EXTEND_REQUEST: {\n        message: \"Unauthorized extend request.\",\n        code: 3004\n    },\n    USER_REJECTED: {\n        message: \"User rejected.\",\n        code: 5e3\n    },\n    USER_REJECTED_CHAINS: {\n        message: \"User rejected chains.\",\n        code: 5001\n    },\n    USER_REJECTED_METHODS: {\n        message: \"User rejected methods.\",\n        code: 5002\n    },\n    USER_REJECTED_EVENTS: {\n        message: \"User rejected events.\",\n        code: 5003\n    },\n    UNSUPPORTED_CHAINS: {\n        message: \"Unsupported chains.\",\n        code: 5100\n    },\n    UNSUPPORTED_METHODS: {\n        message: \"Unsupported methods.\",\n        code: 5101\n    },\n    UNSUPPORTED_EVENTS: {\n        message: \"Unsupported events.\",\n        code: 5102\n    },\n    UNSUPPORTED_ACCOUNTS: {\n        message: \"Unsupported accounts.\",\n        code: 5103\n    },\n    UNSUPPORTED_NAMESPACE_KEY: {\n        message: \"Unsupported namespace key.\",\n        code: 5104\n    },\n    USER_DISCONNECTED: {\n        message: \"User disconnected.\",\n        code: 6e3\n    },\n    SESSION_SETTLEMENT_FAILED: {\n        message: \"Session settlement failed.\",\n        code: 7e3\n    },\n    WC_METHOD_UNSUPPORTED: {\n        message: \"Unsupported wc_ method.\",\n        code: 10001\n    }\n}, bo = {\n    NOT_INITIALIZED: {\n        message: \"Not initialized.\",\n        code: 1\n    },\n    NO_MATCHING_KEY: {\n        message: \"No matching key.\",\n        code: 2\n    },\n    RESTORE_WILL_OVERRIDE: {\n        message: \"Restore will override.\",\n        code: 3\n    },\n    RESUBSCRIBED: {\n        message: \"Resubscribed.\",\n        code: 4\n    },\n    MISSING_OR_INVALID: {\n        message: \"Missing or invalid.\",\n        code: 5\n    },\n    EXPIRED: {\n        message: \"Expired.\",\n        code: 6\n    },\n    UNKNOWN_TYPE: {\n        message: \"Unknown type.\",\n        code: 7\n    },\n    MISMATCHED_TOPIC: {\n        message: \"Mismatched topic.\",\n        code: 8\n    },\n    NON_CONFORMING_NAMESPACES: {\n        message: \"Non conforming namespaces.\",\n        code: 9\n    }\n};\nfunction ht(t, e) {\n    const { message: n, code: r } = bo[t];\n    return {\n        message: e ? `${n} ${e}` : n,\n        code: r\n    };\n}\nfunction Nt(t, e) {\n    const { message: n, code: r } = wo[t];\n    return {\n        message: e ? `${n} ${e}` : n,\n        code: r\n    };\n}\nfunction se(t, e) {\n    return Array.isArray(t) ? typeof e < \"u\" && t.length ? t.every(e) : !0 : !1;\n}\nfunction Oe(t) {\n    return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;\n}\nfunction Et(t) {\n    return typeof t > \"u\";\n}\nfunction nt(t, e) {\n    return e && Et(t) ? !0 : typeof t == \"string\" && !!t.trim().length;\n}\nfunction Ae(t, e) {\n    return e && Et(t) ? !0 : typeof t == \"number\" && !isNaN(t);\n}\nfunction ua(t, e) {\n    const { requiredNamespaces: n } = e, r = Object.keys(t.namespaces), o = Object.keys(n);\n    let i = !0;\n    return gt(o, r) ? (r.forEach((s)=>{\n        const { accounts: c, methods: a, events: u } = t.namespaces[s], l = It(c), f = n[s];\n        (!gt(ue(s, f), l) || !gt(f.methods, a) || !gt(f.events, u)) && (i = !1);\n    }), i) : !1;\n}\nfunction ce(t) {\n    return nt(t, !1) && t.includes(\":\") ? t.split(\":\").length === 2 : !1;\n}\nfunction Eo(t) {\n    if (nt(t, !1) && t.includes(\":\")) {\n        const e = t.split(\":\");\n        if (e.length === 3) {\n            const n = e[0] + \":\" + e[1];\n            return !!e[2] && ce(n);\n        }\n    }\n    return !1;\n}\nfunction fa(t) {\n    function e(n) {\n        try {\n            return typeof new URL(n) < \"u\";\n        } catch  {\n            return !1;\n        }\n    }\n    try {\n        if (nt(t, !1)) {\n            if (e(t)) return !0;\n            const n = je(t);\n            return e(n);\n        }\n    } catch  {}\n    return !1;\n}\nfunction la(t) {\n    var e;\n    return (e = t?.proposer) == null ? void 0 : e.publicKey;\n}\nfunction da(t) {\n    return t?.topic;\n}\nfunction ha(t, e) {\n    let n = null;\n    return nt(t?.publicKey, !1) || (n = ht(\"MISSING_OR_INVALID\", `${e} controller public key should be a string`)), n;\n}\nfunction mn(t) {\n    let e = !0;\n    return se(t) ? t.length && (e = t.every((n)=>nt(n, !1))) : e = !1, e;\n}\nfunction vo(t, e, n) {\n    let r = null;\n    return se(e) && e.length ? e.forEach((o)=>{\n        r || ce(o) || (r = Nt(\"UNSUPPORTED_CHAINS\", `${n}, chain ${o} should be a string and conform to \"namespace:chainId\" format`));\n    }) : ce(t) || (r = Nt(\"UNSUPPORTED_CHAINS\", `${n}, chains must be defined as \"namespace:chainId\" e.g. \"eip155:1\": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: [\"eip155:1\", \"eip155:5\"] }`)), r;\n}\nfunction xo(t, e, n) {\n    let r = null;\n    return Object.entries(t).forEach(([o, i])=>{\n        if (r) return;\n        const s = vo(o, ue(o, i), `${e} ${n}`);\n        s && (r = s);\n    }), r;\n}\nfunction So(t, e) {\n    let n = null;\n    return se(t) ? t.forEach((r)=>{\n        n || Eo(r) || (n = Nt(\"UNSUPPORTED_ACCOUNTS\", `${e}, account ${r} should be a string and conform to \"namespace:chainId:address\" format`));\n    }) : n = Nt(\"UNSUPPORTED_ACCOUNTS\", `${e}, accounts should be an array of strings conforming to \"namespace:chainId:address\" format`), n;\n}\nfunction Oo(t, e) {\n    let n = null;\n    return Object.values(t).forEach((r)=>{\n        if (n) return;\n        const o = So(r?.accounts, `${e} namespace`);\n        o && (n = o);\n    }), n;\n}\nfunction Ao(t, e) {\n    let n = null;\n    return mn(t?.methods) ? mn(t?.events) || (n = Nt(\"UNSUPPORTED_EVENTS\", `${e}, events should be an array of strings or empty array for no events`)) : n = Nt(\"UNSUPPORTED_METHODS\", `${e}, methods should be an array of strings or empty array for no methods`), n;\n}\nfunction wn(t, e) {\n    let n = null;\n    return Object.values(t).forEach((r)=>{\n        if (n) return;\n        const o = Ao(r, `${e}, namespace`);\n        o && (n = o);\n    }), n;\n}\nfunction pa(t, e, n) {\n    let r = null;\n    if (t && Oe(t)) {\n        const o = wn(t, e);\n        o && (r = o);\n        const i = xo(t, e, n);\n        i && (r = i);\n    } else r = ht(\"MISSING_OR_INVALID\", `${e}, ${n} should be an object with data`);\n    return r;\n}\nfunction Bo(t, e) {\n    let n = null;\n    if (t && Oe(t)) {\n        const r = wn(t, e);\n        r && (n = r);\n        const o = Oo(t, e);\n        o && (n = o);\n    } else n = ht(\"MISSING_OR_INVALID\", `${e}, namespaces should be an object with data`);\n    return n;\n}\nfunction Io(t) {\n    return nt(t.protocol, !0);\n}\nfunction ga(t, e) {\n    let n = !1;\n    return e && !t ? n = !0 : t && se(t) && t.length && t.forEach((r)=>{\n        n = Io(r);\n    }), n;\n}\nfunction ya(t) {\n    return typeof t == \"number\";\n}\nfunction ma(t) {\n    return typeof t < \"u\" && typeof t !== null;\n}\nfunction wa(t) {\n    return !(!t || typeof t != \"object\" || !t.code || !Ae(t.code, !1) || !t.message || !nt(t.message, !1));\n}\nfunction ba(t) {\n    return !(Et(t) || !nt(t.method, !1));\n}\nfunction Ea(t) {\n    return !(Et(t) || Et(t.result) && Et(t.error) || !Ae(t.id, !1) || !nt(t.jsonrpc, !1));\n}\nfunction va(t) {\n    return !(Et(t) || !nt(t.name, !1));\n}\nfunction xa(t, e) {\n    return !(!ce(e) || !ho(t).includes(e));\n}\nfunction Sa(t, e, n) {\n    return nt(n, !1) ? po(t, e).includes(n) : !1;\n}\nfunction Oa(t, e, n) {\n    return nt(n, !1) ? go(t, e).includes(n) : !1;\n}\nfunction No(t, e, n) {\n    let r = null;\n    const o = Aa(t), i = Ba(e), s = Object.keys(o), c = Object.keys(i), a = Uo(Object.keys(t)), u = Uo(Object.keys(e)), l = a.filter((f)=>!u.includes(f));\n    return l.length && (r = ht(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces keys don't satisfy requiredNamespaces.\n      Required: ${l.toString()}\n      Received: ${Object.keys(e).toString()}`)), gt(s, c) || (r = ht(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces chains don't satisfy required namespaces.\n      Required: ${s.toString()}\n      Approved: ${c.toString()}`)), Object.keys(e).forEach((f)=>{\n        if (!f.includes(\":\") || r) return;\n        const h = It(e[f].accounts);\n        h.includes(f) || (r = ht(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces accounts don't satisfy namespace accounts for ${f}\n        Required: ${f}\n        Approved: ${h.toString()}`));\n    }), s.forEach((f)=>{\n        r || (gt(o[f].methods, i[f].methods) ? gt(o[f].events, i[f].events) || (r = ht(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces events don't satisfy namespace events for ${f}`)) : r = ht(\"NON_CONFORMING_NAMESPACES\", `${n} namespaces methods don't satisfy namespace methods for ${f}`));\n    }), r;\n}\nfunction Aa(t) {\n    const e = {};\n    return Object.keys(t).forEach((n)=>{\n        var r;\n        n.includes(\":\") ? e[n] = t[n] : (r = t[n].chains) == null || r.forEach((o)=>{\n            e[o] = {\n                methods: t[n].methods,\n                events: t[n].events\n            };\n        });\n    }), e;\n}\nfunction Uo(t) {\n    return [\n        ...new Set(t.map((e)=>e.includes(\":\") ? e.split(\":\")[0] : e))\n    ];\n}\nfunction Ba(t) {\n    const e = {};\n    return Object.keys(t).forEach((n)=>{\n        if (n.includes(\":\")) e[n] = t[n];\n        else {\n            const r = It(t[n].accounts);\n            r?.forEach((o)=>{\n                e[o] = {\n                    accounts: t[n].accounts.filter((i)=>i.includes(`${o}:`)),\n                    methods: t[n].methods,\n                    events: t[n].events\n                };\n            });\n        }\n    }), e;\n}\nfunction Ia(t, e) {\n    return Ae(t, !1) && t <= e.max && t >= e.min;\n}\nfunction Na() {\n    const t = xt();\n    return new Promise((e)=>{\n        switch(t){\n            case Y.browser:\n                e(To());\n                break;\n            case Y.reactNative:\n                e(Ro());\n                break;\n            case Y.node:\n                e(_o());\n                break;\n            default:\n                e(!0);\n        }\n    });\n}\nfunction To() {\n    return Tt() && navigator?.onLine;\n}\nasync function Ro() {\n    if (pt() && typeof global < \"u\" && global != null && global.NetInfo) {\n        const t = await (global == null ? void 0 : global.NetInfo.fetch());\n        return t?.isConnected;\n    }\n    return !0;\n}\nfunction _o() {\n    return !0;\n}\nfunction Ua(t) {\n    switch(xt()){\n        case Y.browser:\n            $o(t);\n            break;\n        case Y.reactNative:\n            Lo(t);\n            break;\n        case Y.node:\n            break;\n    }\n}\nfunction $o(t) {\n    !pt() && Tt() && (window.addEventListener(\"online\", ()=>t(!0)), window.addEventListener(\"offline\", ()=>t(!1)));\n}\nfunction Lo(t) {\n    pt() && typeof global < \"u\" && global != null && global.NetInfo && global?.NetInfo.addEventListener((e)=>t(e?.isConnected));\n}\nfunction Ta() {\n    var t;\n    return Tt() && (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)() ? ((t = (0,_walletconnect_window_getters__WEBPACK_IMPORTED_MODULE_1__.getDocument)()) == null ? void 0 : t.visibilityState) === \"visible\" : !0;\n}\nconst bn = {};\nclass Ra {\n    static get(e) {\n        return bn[e];\n    }\n    static set(e, n) {\n        bn[e] = n;\n    }\n    static delete(e) {\n        delete bn[e];\n    }\n}\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-getters/dist/cjs/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getLocalStorage = exports.getLocalStorageOrThrow = exports.getCrypto = exports.getCryptoOrThrow = exports.getLocation = exports.getLocationOrThrow = exports.getNavigator = exports.getNavigatorOrThrow = exports.getDocument = exports.getDocumentOrThrow = exports.getFromWindowOrThrow = exports.getFromWindow = void 0;\nfunction getFromWindow(name) {\n    let res = undefined;\n    if (false) {}\n    return res;\n}\nexports.getFromWindow = getFromWindow;\nfunction getFromWindowOrThrow(name) {\n    const res = getFromWindow(name);\n    if (!res) {\n        throw new Error(`${name} is not defined in Window`);\n    }\n    return res;\n}\nexports.getFromWindowOrThrow = getFromWindowOrThrow;\nfunction getDocumentOrThrow() {\n    return getFromWindowOrThrow(\"document\");\n}\nexports.getDocumentOrThrow = getDocumentOrThrow;\nfunction getDocument() {\n    return getFromWindow(\"document\");\n}\nexports.getDocument = getDocument;\nfunction getNavigatorOrThrow() {\n    return getFromWindowOrThrow(\"navigator\");\n}\nexports.getNavigatorOrThrow = getNavigatorOrThrow;\nfunction getNavigator() {\n    return getFromWindow(\"navigator\");\n}\nexports.getNavigator = getNavigator;\nfunction getLocationOrThrow() {\n    return getFromWindowOrThrow(\"location\");\n}\nexports.getLocationOrThrow = getLocationOrThrow;\nfunction getLocation() {\n    return getFromWindow(\"location\");\n}\nexports.getLocation = getLocation;\nfunction getCryptoOrThrow() {\n    return getFromWindowOrThrow(\"crypto\");\n}\nexports.getCryptoOrThrow = getCryptoOrThrow;\nfunction getCrypto() {\n    return getFromWindow(\"crypto\");\n}\nexports.getCrypto = getCrypto;\nfunction getLocalStorageOrThrow() {\n    return getFromWindowOrThrow(\"localStorage\");\n}\nexports.getLocalStorageOrThrow = getLocalStorageOrThrow;\nfunction getLocalStorage() {\n    return getFromWindow(\"localStorage\");\n}\nexports.getLocalStorage = getLocalStorage; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2luZG93LWdldHRlcnMvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSw4QkFBOEIsR0FBR0EsaUJBQWlCLEdBQUdBLHdCQUF3QixHQUFHQSxtQkFBbUIsR0FBR0EsMEJBQTBCLEdBQUdBLG9CQUFvQixHQUFHQSwyQkFBMkIsR0FBR0EsbUJBQW1CLEdBQUdBLDBCQUEwQixHQUFHQSw0QkFBNEIsR0FBR0EscUJBQXFCLEdBQUcsS0FBSztBQUNqVSxTQUFTYSxjQUFjQyxJQUFJO0lBQ3ZCLElBQUlDLE1BQU1DO0lBQ1YsSUFBSSxLQUFvRSxFQUFFLEVBRXpFO0lBQ0QsT0FBT0Q7QUFDWDtBQUNBZixxQkFBcUIsR0FBR2E7QUFDeEIsU0FBU0QscUJBQXFCRSxJQUFJO0lBQzlCLE1BQU1DLE1BQU1GLGNBQWNDO0lBQzFCLElBQUksQ0FBQ0MsS0FBSztRQUNOLE1BQU0sSUFBSUcsTUFBTSxDQUFDLEVBQUVKLEtBQUsseUJBQXlCLENBQUM7SUFDdEQ7SUFDQSxPQUFPQztBQUNYO0FBQ0FmLDRCQUE0QixHQUFHWTtBQUMvQixTQUFTRDtJQUNMLE9BQU9DLHFCQUFxQjtBQUNoQztBQUNBWiwwQkFBMEIsR0FBR1c7QUFDN0IsU0FBU0Q7SUFDTCxPQUFPRyxjQUFjO0FBQ3pCO0FBQ0FiLG1CQUFtQixHQUFHVTtBQUN0QixTQUFTRDtJQUNMLE9BQU9HLHFCQUFxQjtBQUNoQztBQUNBWiwyQkFBMkIsR0FBR1M7QUFDOUIsU0FBU0Q7SUFDTCxPQUFPSyxjQUFjO0FBQ3pCO0FBQ0FiLG9CQUFvQixHQUFHUTtBQUN2QixTQUFTRDtJQUNMLE9BQU9LLHFCQUFxQjtBQUNoQztBQUNBWiwwQkFBMEIsR0FBR087QUFDN0IsU0FBU0Q7SUFDTCxPQUFPTyxjQUFjO0FBQ3pCO0FBQ0FiLG1CQUFtQixHQUFHTTtBQUN0QixTQUFTRDtJQUNMLE9BQU9PLHFCQUFxQjtBQUNoQztBQUNBWix3QkFBd0IsR0FBR0s7QUFDM0IsU0FBU0Q7SUFDTCxPQUFPUyxjQUFjO0FBQ3pCO0FBQ0FiLGlCQUFpQixHQUFHSTtBQUNwQixTQUFTRDtJQUNMLE9BQU9TLHFCQUFxQjtBQUNoQztBQUNBWiw4QkFBOEIsR0FBR0c7QUFDakMsU0FBU0Q7SUFDTCxPQUFPVyxjQUFjO0FBQ3pCO0FBQ0FiLHVCQUF1QixHQUFHRSxpQkFDMUIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3Qvd2luZG93LWdldHRlcnMvZGlzdC9janMvaW5kZXguanM/N2IyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlID0gZXhwb3J0cy5nZXRMb2NhbFN0b3JhZ2VPclRocm93ID0gZXhwb3J0cy5nZXRDcnlwdG8gPSBleHBvcnRzLmdldENyeXB0b09yVGhyb3cgPSBleHBvcnRzLmdldExvY2F0aW9uID0gZXhwb3J0cy5nZXRMb2NhdGlvbk9yVGhyb3cgPSBleHBvcnRzLmdldE5hdmlnYXRvciA9IGV4cG9ydHMuZ2V0TmF2aWdhdG9yT3JUaHJvdyA9IGV4cG9ydHMuZ2V0RG9jdW1lbnQgPSBleHBvcnRzLmdldERvY3VtZW50T3JUaHJvdyA9IGV4cG9ydHMuZ2V0RnJvbVdpbmRvd09yVGhyb3cgPSBleHBvcnRzLmdldEZyb21XaW5kb3cgPSB2b2lkIDA7XG5mdW5jdGlvbiBnZXRGcm9tV2luZG93KG5hbWUpIHtcbiAgICBsZXQgcmVzID0gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3dbbmFtZV0gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmVzID0gd2luZG93W25hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZXhwb3J0cy5nZXRGcm9tV2luZG93ID0gZ2V0RnJvbVdpbmRvdztcbmZ1bmN0aW9uIGdldEZyb21XaW5kb3dPclRocm93KG5hbWUpIHtcbiAgICBjb25zdCByZXMgPSBnZXRGcm9tV2luZG93KG5hbWUpO1xuICAgIGlmICghcmVzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtuYW1lfSBpcyBub3QgZGVmaW5lZCBpbiBXaW5kb3dgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmV4cG9ydHMuZ2V0RnJvbVdpbmRvd09yVGhyb3cgPSBnZXRGcm9tV2luZG93T3JUaHJvdztcbmZ1bmN0aW9uIGdldERvY3VtZW50T3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJkb2N1bWVudFwiKTtcbn1cbmV4cG9ydHMuZ2V0RG9jdW1lbnRPclRocm93ID0gZ2V0RG9jdW1lbnRPclRocm93O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJkb2N1bWVudFwiKTtcbn1cbmV4cG9ydHMuZ2V0RG9jdW1lbnQgPSBnZXREb2N1bWVudDtcbmZ1bmN0aW9uIGdldE5hdmlnYXRvck9yVGhyb3coKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3dPclRocm93KFwibmF2aWdhdG9yXCIpO1xufVxuZXhwb3J0cy5nZXROYXZpZ2F0b3JPclRocm93ID0gZ2V0TmF2aWdhdG9yT3JUaHJvdztcbmZ1bmN0aW9uIGdldE5hdmlnYXRvcigpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcIm5hdmlnYXRvclwiKTtcbn1cbmV4cG9ydHMuZ2V0TmF2aWdhdG9yID0gZ2V0TmF2aWdhdG9yO1xuZnVuY3Rpb24gZ2V0TG9jYXRpb25PclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcImxvY2F0aW9uXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhdGlvbk9yVGhyb3cgPSBnZXRMb2NhdGlvbk9yVGhyb3c7XG5mdW5jdGlvbiBnZXRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvdyhcImxvY2F0aW9uXCIpO1xufVxuZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGdldExvY2F0aW9uO1xuZnVuY3Rpb24gZ2V0Q3J5cHRvT3JUaHJvdygpIHtcbiAgICByZXR1cm4gZ2V0RnJvbVdpbmRvd09yVGhyb3coXCJjcnlwdG9cIik7XG59XG5leHBvcnRzLmdldENyeXB0b09yVGhyb3cgPSBnZXRDcnlwdG9PclRocm93O1xuZnVuY3Rpb24gZ2V0Q3J5cHRvKCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93KFwiY3J5cHRvXCIpO1xufVxuZXhwb3J0cy5nZXRDcnlwdG8gPSBnZXRDcnlwdG87XG5mdW5jdGlvbiBnZXRMb2NhbFN0b3JhZ2VPclRocm93KCkge1xuICAgIHJldHVybiBnZXRGcm9tV2luZG93T3JUaHJvdyhcImxvY2FsU3RvcmFnZVwiKTtcbn1cbmV4cG9ydHMuZ2V0TG9jYWxTdG9yYWdlT3JUaHJvdyA9IGdldExvY2FsU3RvcmFnZU9yVGhyb3c7XG5mdW5jdGlvbiBnZXRMb2NhbFN0b3JhZ2UoKSB7XG4gICAgcmV0dXJuIGdldEZyb21XaW5kb3coXCJsb2NhbFN0b3JhZ2VcIik7XG59XG5leHBvcnRzLmdldExvY2FsU3RvcmFnZSA9IGdldExvY2FsU3RvcmFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldExvY2FsU3RvcmFnZSIsImdldExvY2FsU3RvcmFnZU9yVGhyb3ciLCJnZXRDcnlwdG8iLCJnZXRDcnlwdG9PclRocm93IiwiZ2V0TG9jYXRpb24iLCJnZXRMb2NhdGlvbk9yVGhyb3ciLCJnZXROYXZpZ2F0b3IiLCJnZXROYXZpZ2F0b3JPclRocm93IiwiZ2V0RG9jdW1lbnQiLCJnZXREb2N1bWVudE9yVGhyb3ciLCJnZXRGcm9tV2luZG93T3JUaHJvdyIsImdldEZyb21XaW5kb3ciLCJuYW1lIiwicmVzIiwidW5kZWZpbmVkIiwid2luZG93IiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@walletconnect/window-metadata/dist/cjs/index.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getWindowMetadata = void 0;\nconst window_getters_1 = __webpack_require__(/*! @walletconnect/window-getters */ \"(ssr)/./node_modules/@walletconnect/window-getters/dist/cjs/index.js\");\nfunction getWindowMetadata() {\n    let doc;\n    let loc;\n    try {\n        doc = window_getters_1.getDocumentOrThrow();\n        loc = window_getters_1.getLocationOrThrow();\n    } catch (e) {\n        return null;\n    }\n    function getIcons() {\n        const links = doc.getElementsByTagName(\"link\");\n        const icons = [];\n        for(let i = 0; i < links.length; i++){\n            const link = links[i];\n            const rel = link.getAttribute(\"rel\");\n            if (rel) {\n                if (rel.toLowerCase().indexOf(\"icon\") > -1) {\n                    const href = link.getAttribute(\"href\");\n                    if (href) {\n                        if (href.toLowerCase().indexOf(\"https:\") === -1 && href.toLowerCase().indexOf(\"http:\") === -1 && href.indexOf(\"//\") !== 0) {\n                            let absoluteHref = loc.protocol + \"//\" + loc.host;\n                            if (href.indexOf(\"/\") === 0) {\n                                absoluteHref += href;\n                            } else {\n                                const path = loc.pathname.split(\"/\");\n                                path.pop();\n                                const finalPath = path.join(\"/\");\n                                absoluteHref += finalPath + \"/\" + href;\n                            }\n                            icons.push(absoluteHref);\n                        } else if (href.indexOf(\"//\") === 0) {\n                            const absoluteUrl = loc.protocol + href;\n                            icons.push(absoluteUrl);\n                        } else {\n                            icons.push(href);\n                        }\n                    }\n                }\n            }\n        }\n        return icons;\n    }\n    function getWindowMetadataOfAny(...args) {\n        const metaTags = doc.getElementsByTagName(\"meta\");\n        for(let i = 0; i < metaTags.length; i++){\n            const tag = metaTags[i];\n            const attributes = [\n                \"itemprop\",\n                \"property\",\n                \"name\"\n            ].map((target)=>tag.getAttribute(target)).filter((attr)=>{\n                if (attr) {\n                    return args.includes(attr);\n                }\n                return false;\n            });\n            if (attributes.length && attributes) {\n                const content = tag.getAttribute(\"content\");\n                if (content) {\n                    return content;\n                }\n            }\n        }\n        return \"\";\n    }\n    function getName() {\n        let name = getWindowMetadataOfAny(\"name\", \"og:site_name\", \"og:title\", \"twitter:title\");\n        if (!name) {\n            name = doc.title;\n        }\n        return name;\n    }\n    function getDescription() {\n        const description = getWindowMetadataOfAny(\"description\", \"og:description\", \"twitter:description\", \"keywords\");\n        return description;\n    }\n    const name = getName();\n    const description = getDescription();\n    const url = loc.origin;\n    const icons = getIcons();\n    const meta = {\n        description,\n        url,\n        icons,\n        name\n    };\n    return meta;\n}\nexports.getWindowMetadata = getWindowMetadata; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/window-metadata/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs":
/*!********************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   builtinDrivers: () => (/* binding */ builtinDrivers),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   defineDriver: () => (/* binding */ defineDriver),\n/* harmony export */   filterKeyByBase: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   filterKeyByDepth: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   joinKeys: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   normalizeBaseKey: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   normalizeKey: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   prefixStorage: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   restoreSnapshot: () => (/* binding */ restoreSnapshot),\n/* harmony export */   snapshot: () => (/* binding */ snapshot)\n/* harmony export */ });\n/* harmony import */ var destr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! destr */ \"(ssr)/./node_modules/destr/dist/index.mjs\");\n/* harmony import */ var _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared/unstorage.CoCt7NXC.mjs */ \"(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs\");\n\n\n\nfunction defineDriver(factory) {\n    return factory;\n}\nconst DRIVER_NAME = \"memory\";\nconst memory = defineDriver(()=>{\n    const data = /* @__PURE__ */ new Map();\n    return {\n        name: DRIVER_NAME,\n        getInstance: ()=>data,\n        hasItem (key) {\n            return data.has(key);\n        },\n        getItem (key) {\n            return data.get(key) ?? null;\n        },\n        getItemRaw (key) {\n            return data.get(key) ?? null;\n        },\n        setItem (key, value) {\n            data.set(key, value);\n        },\n        setItemRaw (key, value) {\n            data.set(key, value);\n        },\n        removeItem (key) {\n            data.delete(key);\n        },\n        getKeys () {\n            return [\n                ...data.keys()\n            ];\n        },\n        clear () {\n            data.clear();\n        },\n        dispose () {\n            data.clear();\n        }\n    };\n});\nfunction createStorage(options = {}) {\n    const context = {\n        mounts: {\n            \"\": options.driver || memory()\n        },\n        mountpoints: [\n            \"\"\n        ],\n        watching: false,\n        watchListeners: [],\n        unwatch: {}\n    };\n    const getMount = (key)=>{\n        for (const base of context.mountpoints){\n            if (key.startsWith(base)) {\n                return {\n                    base,\n                    relativeKey: key.slice(base.length),\n                    driver: context.mounts[base]\n                };\n            }\n        }\n        return {\n            base: \"\",\n            relativeKey: key,\n            driver: context.mounts[\"\"]\n        };\n    };\n    const getMounts = (base, includeParent)=>{\n        return context.mountpoints.filter((mountpoint)=>mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)).map((mountpoint)=>({\n                relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\n                mountpoint,\n                driver: context.mounts[mountpoint]\n            }));\n    };\n    const onChange = (event, key)=>{\n        if (!context.watching) {\n            return;\n        }\n        key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n        for (const listener of context.watchListeners){\n            listener(event, key);\n        }\n    };\n    const startWatch = async ()=>{\n        if (context.watching) {\n            return;\n        }\n        context.watching = true;\n        for(const mountpoint in context.mounts){\n            context.unwatch[mountpoint] = await watch(context.mounts[mountpoint], onChange, mountpoint);\n        }\n    };\n    const stopWatch = async ()=>{\n        if (!context.watching) {\n            return;\n        }\n        for(const mountpoint in context.unwatch){\n            await context.unwatch[mountpoint]();\n        }\n        context.unwatch = {};\n        context.watching = false;\n    };\n    const runBatch = (items, commonOptions, cb)=>{\n        const batches = /* @__PURE__ */ new Map();\n        const getBatch = (mount)=>{\n            let batch = batches.get(mount.base);\n            if (!batch) {\n                batch = {\n                    driver: mount.driver,\n                    base: mount.base,\n                    items: []\n                };\n                batches.set(mount.base, batch);\n            }\n            return batch;\n        };\n        for (const item of items){\n            const isStringItem = typeof item === \"string\";\n            const key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(isStringItem ? item : item.key);\n            const value = isStringItem ? void 0 : item.value;\n            const options2 = isStringItem || !item.options ? commonOptions : {\n                ...commonOptions,\n                ...item.options\n            };\n            const mount = getMount(key);\n            getBatch(mount).items.push({\n                key,\n                value,\n                relativeKey: mount.relativeKey,\n                options: options2\n            });\n        }\n        return Promise.all([\n            ...batches.values()\n        ].map((batch)=>cb(batch))).then((r)=>r.flat());\n    };\n    const storage = {\n        // Item\n        hasItem (key, opts = {}) {\n            key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.hasItem, relativeKey, opts);\n        },\n        getItem (key, opts = {}) {\n            key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,destr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(value));\n        },\n        getItems (items, commonOptions = {}) {\n            return runBatch(items, commonOptions, (batch)=>{\n                if (batch.driver.getItems) {\n                    return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(batch.driver.getItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            options: item.options\n                        })), commonOptions).then((r)=>r.map((item)=>({\n                                key: (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(batch.base, item.key),\n                                value: (0,destr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(item.value)\n                            })));\n                }\n                return Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(batch.driver.getItem, item.relativeKey, item.options).then((value)=>({\n                            key: item.key,\n                            value: (0,destr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(value)\n                        }));\n                }));\n            });\n        },\n        getItemRaw (key, opts = {}) {\n            key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.getItemRaw) {\n                return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getItemRaw, relativeKey, opts);\n            }\n            return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getItem, relativeKey, opts).then((value)=>(0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(value));\n        },\n        async setItem (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key);\n            }\n            key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.setItem) {\n                return;\n            }\n            await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(value), opts);\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async setItems (items, commonOptions) {\n            await runBatch(items, commonOptions, async (batch)=>{\n                if (batch.driver.setItems) {\n                    return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(batch.driver.setItems, batch.items.map((item)=>({\n                            key: item.relativeKey,\n                            value: (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(item.value),\n                            options: item.options\n                        })), commonOptions);\n                }\n                if (!batch.driver.setItem) {\n                    return;\n                }\n                await Promise.all(batch.items.map((item)=>{\n                    return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(batch.driver.setItem, item.relativeKey, (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(item.value), item.options);\n                }));\n            });\n        },\n        async setItemRaw (key, value, opts = {}) {\n            if (value === void 0) {\n                return storage.removeItem(key, opts);\n            }\n            key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (driver.setItemRaw) {\n                await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.setItemRaw, relativeKey, value, opts);\n            } else if (driver.setItem) {\n                await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(value), opts);\n            } else {\n                return;\n            }\n            if (!driver.watch) {\n                onChange(\"update\", key);\n            }\n        },\n        async removeItem (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    removeMeta: opts\n                };\n            }\n            key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            if (!driver.removeItem) {\n                return;\n            }\n            await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.removeItem, relativeKey, opts);\n            if (opts.removeMeta || opts.removeMata) {\n                await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.removeItem, relativeKey + \"$\", opts);\n            }\n            if (!driver.watch) {\n                onChange(\"remove\", key);\n            }\n        },\n        // Meta\n        async getMeta (key, opts = {}) {\n            if (typeof opts === \"boolean\") {\n                opts = {\n                    nativeOnly: opts\n                };\n            }\n            key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n            const { relativeKey, driver } = getMount(key);\n            const meta = /* @__PURE__ */ Object.create(null);\n            if (driver.getMeta) {\n                Object.assign(meta, await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getMeta, relativeKey, opts));\n            }\n            if (!opts.nativeOnly) {\n                const value = await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getItem, relativeKey + \"$\", opts).then((value_)=>(0,destr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(value_));\n                if (value && typeof value === \"object\") {\n                    if (typeof value.atime === \"string\") {\n                        value.atime = new Date(value.atime);\n                    }\n                    if (typeof value.mtime === \"string\") {\n                        value.mtime = new Date(value.mtime);\n                    }\n                    Object.assign(meta, value);\n                }\n            }\n            return meta;\n        },\n        setMeta (key, value, opts = {}) {\n            return this.setItem(key + \"$\", value, opts);\n        },\n        removeMeta (key, opts = {}) {\n            return this.removeItem(key + \"$\", opts);\n        },\n        // Keys\n        async getKeys (base, opts = {}) {\n            base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n            const mounts = getMounts(base, true);\n            let maskedMounts = [];\n            const allKeys = [];\n            let allMountsSupportMaxDepth = true;\n            for (const mount of mounts){\n                if (!mount.driver.flags?.maxDepth) {\n                    allMountsSupportMaxDepth = false;\n                }\n                const rawKeys = await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(mount.driver.getKeys, mount.relativeBase, opts);\n                for (const key of rawKeys){\n                    const fullKey = mount.mountpoint + (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n                    if (!maskedMounts.some((p)=>fullKey.startsWith(p))) {\n                        allKeys.push(fullKey);\n                    }\n                }\n                maskedMounts = [\n                    mount.mountpoint,\n                    ...maskedMounts.filter((p)=>!p.startsWith(mount.mountpoint))\n                ];\n            }\n            const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;\n            return allKeys.filter((key)=>(!shouldFilterByDepth || (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(key, opts.maxDepth)) && (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(key, base));\n        },\n        // Utils\n        async clear (base, opts = {}) {\n            base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n            await Promise.all(getMounts(base, false).map(async (m)=>{\n                if (m.driver.clear) {\n                    return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(m.driver.clear, m.relativeBase, opts);\n                }\n                if (m.driver.removeItem) {\n                    const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\n                    return Promise.all(keys.map((key)=>m.driver.removeItem(key, opts)));\n                }\n            }));\n        },\n        async dispose () {\n            await Promise.all(Object.values(context.mounts).map((driver)=>dispose(driver)));\n        },\n        async watch (callback) {\n            await startWatch();\n            context.watchListeners.push(callback);\n            return async ()=>{\n                context.watchListeners = context.watchListeners.filter((listener)=>listener !== callback);\n                if (context.watchListeners.length === 0) {\n                    await stopWatch();\n                }\n            };\n        },\n        async unwatch () {\n            context.watchListeners = [];\n            await stopWatch();\n        },\n        // Mount\n        mount (base, driver) {\n            base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n            if (base && context.mounts[base]) {\n                throw new Error(`already mounted at ${base}`);\n            }\n            if (base) {\n                context.mountpoints.push(base);\n                context.mountpoints.sort((a, b)=>b.length - a.length);\n            }\n            context.mounts[base] = driver;\n            if (context.watching) {\n                Promise.resolve(watch(driver, onChange, base)).then((unwatcher)=>{\n                    context.unwatch[base] = unwatcher;\n                }).catch(console.error);\n            }\n            return storage;\n        },\n        async unmount (base, _dispose = true) {\n            base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n            if (!base || !context.mounts[base]) {\n                return;\n            }\n            if (context.watching && base in context.unwatch) {\n                context.unwatch[base]?.();\n                delete context.unwatch[base];\n            }\n            if (_dispose) {\n                await dispose(context.mounts[base]);\n            }\n            context.mountpoints = context.mountpoints.filter((key)=>key !== base);\n            delete context.mounts[base];\n        },\n        getMount (key = \"\") {\n            key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key) + \":\";\n            const m = getMount(key);\n            return {\n                driver: m.driver,\n                base: m.base\n            };\n        },\n        getMounts (base = \"\", opts = {}) {\n            base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(base);\n            const mounts = getMounts(base, opts.parents);\n            return mounts.map((m)=>({\n                    driver: m.driver,\n                    base: m.mountpoint\n                }));\n        },\n        // Aliases\n        keys: (base, opts = {})=>storage.getKeys(base, opts),\n        get: (key, opts = {})=>storage.getItem(key, opts),\n        set: (key, value, opts = {})=>storage.setItem(key, value, opts),\n        has: (key, opts = {})=>storage.hasItem(key, opts),\n        del: (key, opts = {})=>storage.removeItem(key, opts),\n        remove: (key, opts = {})=>storage.removeItem(key, opts)\n    };\n    return storage;\n}\nasync function snapshot(storage, base) {\n    base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n    const keys = await storage.getKeys(base);\n    const snapshot2 = {};\n    await Promise.all(keys.map(async (key)=>{\n        snapshot2[key.slice(base.length)] = await storage.getItem(key);\n    }));\n    return snapshot2;\n}\nasync function restoreSnapshot(driver, snapshot2, base = \"\") {\n    base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n    await Promise.all(Object.entries(snapshot2).map((e)=>driver.setItem(base + e[0], e[1])));\n}\nfunction watch(driver, onChange, base) {\n    return driver.watch ? driver.watch((event, key)=>onChange(event, base + key)) : ()=>{};\n}\nasync function dispose(driver) {\n    if (typeof driver.dispose === \"function\") {\n        await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.dispose);\n    }\n}\nconst builtinDrivers = {\n    \"azure-app-configuration\": \"unstorage/drivers/azure-app-configuration\",\n    \"azureAppConfiguration\": \"unstorage/drivers/azure-app-configuration\",\n    \"azure-cosmos\": \"unstorage/drivers/azure-cosmos\",\n    \"azureCosmos\": \"unstorage/drivers/azure-cosmos\",\n    \"azure-key-vault\": \"unstorage/drivers/azure-key-vault\",\n    \"azureKeyVault\": \"unstorage/drivers/azure-key-vault\",\n    \"azure-storage-blob\": \"unstorage/drivers/azure-storage-blob\",\n    \"azureStorageBlob\": \"unstorage/drivers/azure-storage-blob\",\n    \"azure-storage-table\": \"unstorage/drivers/azure-storage-table\",\n    \"azureStorageTable\": \"unstorage/drivers/azure-storage-table\",\n    \"capacitor-preferences\": \"unstorage/drivers/capacitor-preferences\",\n    \"capacitorPreferences\": \"unstorage/drivers/capacitor-preferences\",\n    \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    \"cloudflareKVBinding\": \"unstorage/drivers/cloudflare-kv-binding\",\n    \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\",\n    \"cloudflareKVHttp\": \"unstorage/drivers/cloudflare-kv-http\",\n    \"cloudflare-r2-binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n    \"cloudflareR2Binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n    \"db0\": \"unstorage/drivers/db0\",\n    \"deno-kv-node\": \"unstorage/drivers/deno-kv-node\",\n    \"denoKVNode\": \"unstorage/drivers/deno-kv-node\",\n    \"deno-kv\": \"unstorage/drivers/deno-kv\",\n    \"denoKV\": \"unstorage/drivers/deno-kv\",\n    \"fs-lite\": \"unstorage/drivers/fs-lite\",\n    \"fsLite\": \"unstorage/drivers/fs-lite\",\n    \"fs\": \"unstorage/drivers/fs\",\n    \"github\": \"unstorage/drivers/github\",\n    \"http\": \"unstorage/drivers/http\",\n    \"indexedb\": \"unstorage/drivers/indexedb\",\n    \"localstorage\": \"unstorage/drivers/localstorage\",\n    \"lru-cache\": \"unstorage/drivers/lru-cache\",\n    \"lruCache\": \"unstorage/drivers/lru-cache\",\n    \"memory\": \"unstorage/drivers/memory\",\n    \"mongodb\": \"unstorage/drivers/mongodb\",\n    \"netlify-blobs\": \"unstorage/drivers/netlify-blobs\",\n    \"netlifyBlobs\": \"unstorage/drivers/netlify-blobs\",\n    \"null\": \"unstorage/drivers/null\",\n    \"overlay\": \"unstorage/drivers/overlay\",\n    \"planetscale\": \"unstorage/drivers/planetscale\",\n    \"redis\": \"unstorage/drivers/redis\",\n    \"s3\": \"unstorage/drivers/s3\",\n    \"session-storage\": \"unstorage/drivers/session-storage\",\n    \"sessionStorage\": \"unstorage/drivers/session-storage\",\n    \"uploadthing\": \"unstorage/drivers/uploadthing\",\n    \"upstash\": \"unstorage/drivers/upstash\",\n    \"vercel-blob\": \"unstorage/drivers/vercel-blob\",\n    \"vercelBlob\": \"unstorage/drivers/vercel-blob\",\n    \"vercel-kv\": \"unstorage/drivers/vercel-kv\",\n    \"vercelKV\": \"unstorage/drivers/vercel-kv\"\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ normalizeKey),\n/* harmony export */   b: () => (/* binding */ asyncCall),\n/* harmony export */   c: () => (/* binding */ filterKeyByBase),\n/* harmony export */   d: () => (/* binding */ stringify),\n/* harmony export */   e: () => (/* binding */ deserializeRaw),\n/* harmony export */   f: () => (/* binding */ filterKeyByDepth),\n/* harmony export */   j: () => (/* binding */ joinKeys),\n/* harmony export */   n: () => (/* binding */ normalizeBaseKey),\n/* harmony export */   p: () => (/* binding */ prefixStorage),\n/* harmony export */   s: () => (/* binding */ serializeRaw)\n/* harmony export */ });\nfunction wrapToPromise(value) {\n    if (!value || typeof value.then !== \"function\") {\n        return Promise.resolve(value);\n    }\n    return value;\n}\nfunction asyncCall(function_, ...arguments_) {\n    try {\n        return wrapToPromise(function_(...arguments_));\n    } catch (error) {\n        return Promise.reject(error);\n    }\n}\nfunction isPrimitive(value) {\n    const type = typeof value;\n    return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n    const proto = Object.getPrototypeOf(value);\n    return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n    if (isPrimitive(value)) {\n        return String(value);\n    }\n    if (isPureObject(value) || Array.isArray(value)) {\n        return JSON.stringify(value);\n    }\n    if (typeof value.toJSON === \"function\") {\n        return stringify(value.toJSON());\n    }\n    throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return BASE64_PREFIX + base64Encode(value);\n}\nfunction deserializeRaw(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (!value.startsWith(BASE64_PREFIX)) {\n        return value;\n    }\n    return base64Decode(value.slice(BASE64_PREFIX.length));\n}\nfunction base64Decode(input) {\n    if (globalThis.Buffer) {\n        return Buffer.from(input, \"base64\");\n    }\n    return Uint8Array.from(globalThis.atob(input), (c)=>c.codePointAt(0));\n}\nfunction base64Encode(input) {\n    if (globalThis.Buffer) {\n        return Buffer.from(input).toString(\"base64\");\n    }\n    return globalThis.btoa(String.fromCodePoint(...input));\n}\nconst storageKeyProperties = [\n    \"has\",\n    \"hasItem\",\n    \"get\",\n    \"getItem\",\n    \"getItemRaw\",\n    \"set\",\n    \"setItem\",\n    \"setItemRaw\",\n    \"del\",\n    \"remove\",\n    \"removeItem\",\n    \"getMeta\",\n    \"setMeta\",\n    \"removeMeta\",\n    \"getKeys\",\n    \"clear\",\n    \"mount\",\n    \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n    base = normalizeBaseKey(base);\n    if (!base) {\n        return storage;\n    }\n    const nsStorage = {\n        ...storage\n    };\n    for (const property of storageKeyProperties){\n        nsStorage[property] = (key = \"\", ...args)=>// @ts-ignore\n            storage[property](base + key, ...args);\n    }\n    nsStorage.getKeys = (key = \"\", ...arguments_)=>storage.getKeys(base + key, ...arguments_).then((keys)=>keys.map((key2)=>key2.slice(base.length)));\n    nsStorage.getItems = async (items, commonOptions)=>{\n        const prefixedItems = items.map((item)=>typeof item === \"string\" ? base + item : {\n                ...item,\n                key: base + item.key\n            });\n        const results = await storage.getItems(prefixedItems, commonOptions);\n        return results.map((entry)=>({\n                key: entry.key.slice(base.length),\n                value: entry.value\n            }));\n    };\n    nsStorage.setItems = async (items, commonOptions)=>{\n        const prefixedItems = items.map((item)=>({\n                key: base + item.key,\n                value: item.value,\n                options: item.options\n            }));\n        return storage.setItems(prefixedItems, commonOptions);\n    };\n    return nsStorage;\n}\nfunction normalizeKey(key) {\n    if (!key) {\n        return \"\";\n    }\n    return key.split(\"?\")[0]?.replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\") || \"\";\n}\nfunction joinKeys(...keys) {\n    return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n    base = normalizeKey(base);\n    return base ? base + \":\" : \"\";\n}\nfunction filterKeyByDepth(key, depth) {\n    if (depth === void 0) {\n        return true;\n    }\n    let substrCount = 0;\n    let index = key.indexOf(\":\");\n    while(index > -1){\n        substrCount++;\n        index = key.indexOf(\":\", index + 1);\n    }\n    return substrCount <= depth;\n}\nfunction filterKeyByBase(key, base) {\n    if (base) {\n        return key.startsWith(base) && key[key.length - 1] !== \"$\";\n    }\n    return key[key.length - 1] !== \"$\";\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/core/node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/_shortw_utils.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/_shortw_utils.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCurve: () => (/* binding */ createCurve),\n/* harmony export */   getHash: () => (/* binding */ getHash)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/hmac.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n\n\n/** connects noble-curves to noble-hashes */ function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs)=>(0,_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_0__.hmac)(hash, key, (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.concatBytes)(...msgs)),\n        randomBytes: _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_1__.randomBytes\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash)=>(0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_2__.weierstrass)({\n            ...curveDef,\n            ...getHash(hash)\n        });\n    return {\n        ...create(defHash),\n        create\n    };\n} //# sourceMappingURL=_shortw_utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL19zaG9ydHdfdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FDRCxvRUFBb0UsR0FDMUI7QUFDcUI7QUFDUDtBQUN4RCwwQ0FBMEMsR0FDbkMsU0FBU0ksUUFBUUMsSUFBSTtJQUN4QixPQUFPO1FBQ0hBO1FBQ0FMLE1BQU0sQ0FBQ00sS0FBSyxHQUFHQyxPQUFTUCx3REFBSUEsQ0FBQ0ssTUFBTUMsS0FBS0wsZ0VBQVdBLElBQUlNO1FBQ3ZETCxXQUFXQSw4REFBQUE7SUFDZjtBQUNKO0FBQ08sU0FBU00sWUFBWUMsUUFBUSxFQUFFQyxPQUFPO0lBQ3pDLE1BQU1DLFNBQVMsQ0FBQ04sT0FBU0YscUVBQVdBLENBQUM7WUFBRSxHQUFHTSxRQUFRO1lBQUUsR0FBR0wsUUFBUUMsS0FBSztRQUFDO0lBQ3JFLE9BQU87UUFBRSxHQUFHTSxPQUFPRCxRQUFRO1FBQUVDO0lBQU87QUFDeEMsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vX3Nob3J0d191dGlscy5qcz9iN2U0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVXRpbGl0aWVzIGZvciBzaG9ydCB3ZWllcnN0cmFzcyBjdXJ2ZXMsIGNvbWJpbmVkIHdpdGggbm9ibGUtaGFzaGVzLlxuICogQG1vZHVsZVxuICovXG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5pbXBvcnQgeyBobWFjIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbmltcG9ydCB7IGNvbmNhdEJ5dGVzLCByYW5kb21CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHsgd2VpZXJzdHJhc3MgfSBmcm9tICcuL2Fic3RyYWN0L3dlaWVyc3RyYXNzLmpzJztcbi8qKiBjb25uZWN0cyBub2JsZS1jdXJ2ZXMgdG8gbm9ibGUtaGFzaGVzICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SGFzaChoYXNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGFzaCxcbiAgICAgICAgaG1hYzogKGtleSwgLi4ubXNncykgPT4gaG1hYyhoYXNoLCBrZXksIGNvbmNhdEJ5dGVzKC4uLm1zZ3MpKSxcbiAgICAgICAgcmFuZG9tQnl0ZXMsXG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDdXJ2ZShjdXJ2ZURlZiwgZGVmSGFzaCkge1xuICAgIGNvbnN0IGNyZWF0ZSA9IChoYXNoKSA9PiB3ZWllcnN0cmFzcyh7IC4uLmN1cnZlRGVmLCAuLi5nZXRIYXNoKGhhc2gpIH0pO1xuICAgIHJldHVybiB7IC4uLmNyZWF0ZShkZWZIYXNoKSwgY3JlYXRlIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1fc2hvcnR3X3V0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJobWFjIiwiY29uY2F0Qnl0ZXMiLCJyYW5kb21CeXRlcyIsIndlaWVyc3RyYXNzIiwiZ2V0SGFzaCIsImhhc2giLCJrZXkiLCJtc2dzIiwiY3JlYXRlQ3VydmUiLCJjdXJ2ZURlZiIsImRlZkhhc2giLCJjcmVhdGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/_shortw_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/curve.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/curve.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pippenger: () => (/* binding */ pippenger),\n/* harmony export */   precomputeMSMUnsafe: () => (/* binding */ precomputeMSMUnsafe),\n/* harmony export */   validateBasic: () => (/* binding */ validateBasic),\n/* harmony export */   wNAF: () => (/* binding */ wNAF)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/utils.js\");\n/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error(\"invalid window size, expected [1..\" + bits + \"], got W=\" + W);\n}\nfunction calcWOpts(W, bits) {\n    validateW(W, bits);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return {\n        windows,\n        windowSize\n    };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points)) throw new Error(\"array expected\");\n    points.forEach((p, i)=>{\n        if (!(p instanceof c)) throw new Error(\"invalid point at index \" + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars)) throw new Error(\"array of scalars expected\");\n    scalars.forEach((s, i)=>{\n        if (!field.isValid(s)) throw new Error(\"invalid scalar at index \" + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap(); // This allows use make points immutable (nothing changes inside)\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */ function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes (elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder (elm, n, p = c.ZERO) {\n            let d = elm;\n            while(n > _0n){\n                if (n & _1n) p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */ precomputeWindow (elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for(let window = 0; window < windows; window++){\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for(let i = 1; i < windowSize; i++){\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */ wNAF (W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = calcWOpts(W, bits);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for(let window = 0; window < windows; window++){\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                } else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return {\n                p,\n                f\n            };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */ wNAFUnsafe (W, precomputes, n, acc = c.ZERO) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for(let window = 0; window < windows; window++){\n                const offset = window * windowSize;\n                if (n === _0n) break; // No need to go over empty scalar\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                if (wbits === 0) continue;\n                let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n                if (wbits < 0) curr = curr.negate();\n                // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n                acc = acc.add(curr);\n            }\n            return acc;\n        },\n        getPrecomputes (W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached (P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe (P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize (P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        }\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */ function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    if (points.length !== scalars.length) throw new Error(\"arrays of points and scalars must have equal length\");\n    const zero = c.ZERO;\n    const wbits = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitLen)(BigInt(points.length));\n    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n    const MASK = (1 << windowSize) - 1;\n    const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for(let i = lastBits; i >= 0; i -= windowSize){\n        buckets.fill(zero);\n        for(let j = 0; j < scalars.length; j++){\n            const scalar = scalars[j];\n            const wbits = Number(scalar >> BigInt(i) & BigInt(MASK));\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for(let j = buckets.length - 1, sumI = zero; j > 0; j--){\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0) for(let j = 0; j < windowSize; j++)sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */ function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */ validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = BigInt((1 << windowSize) - 1);\n    const tables = points.map((p)=>{\n        const res = [];\n        for(let i = 0, acc = p; i < tableSize; i++){\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars)=>{\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length) throw new Error(\"array of scalars must be smaller than array of points\");\n        let res = zero;\n        for(let i = 0; i < chunks; i++){\n            // No need to double if accumulator is still zero.\n            if (res !== zero) for(let j = 0; j < windowSize; j++)res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for(let j = 0; j < scalars.length; j++){\n                const n = scalars[j];\n                const curr = Number(n >> shiftBy & MASK);\n                if (!curr) continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nfunction validateBasic(curve) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.validateField)(curve.Fp);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(curve, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{\n            p: curve.Fp.ORDER\n        }\n    });\n} //# sourceMappingURL=curve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/hash-to-curve.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/hash-to-curve.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHasher: () => (/* binding */ createHasher),\n/* harmony export */   expand_message_xmd: () => (/* binding */ expand_message_xmd),\n/* harmony export */   expand_message_xof: () => (/* binding */ expand_message_xof),\n/* harmony export */   hash_to_field: () => (/* binding */ hash_to_field),\n/* harmony export */   isogenyMap: () => (/* binding */ isogenyMap)\n/* harmony export */ });\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/utils.js\");\n\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << 8 * length) throw new Error(\"invalid I2OSP input: \" + value);\n    const res = Array.from({\n        length\n    }).fill(0);\n    for(let i = length - 1; i >= 0; i--){\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for(let i = 0; i < a.length; i++){\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item)) throw new Error(\"number expected\");\n}\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */ function expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255) DST = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(\"H2C-OVERSIZE-DST-\"), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255) throw new Error(\"expand_message_xmd: invalid lenInBytes\");\n    const DST_prime = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for(let i = 1; i <= ell; i++){\n        const args = [\n            strxor(b_0, b[i - 1]),\n            i2osp(i + 1, 1),\n            DST_prime\n        ];\n        b[i] = H((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */ function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil(2 * k / 8);\n        DST = H.create({\n            dkLen\n        }).update((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(\"H2C-OVERSIZE-DST-\")).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255) throw new Error(\"expand_message_xof: invalid lenInBytes\");\n    return H.create({\n        dkLen: lenInBytes\n    }).update(msg).update(i2osp(lenInBytes, 2))// 2. DST_prime = DST || I2OSP(len(DST), 1)\n    .update(DST).update(i2osp(DST.length, 1)).digest();\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */ function hash_to_field(msg, count, options) {\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(options, {\n        DST: \"stringOrUint8Array\",\n        p: \"bigint\",\n        m: \"isSafeInteger\",\n        k: \"isSafeInteger\",\n        hash: \"hash\"\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(msg);\n    anum(count);\n    const DST = typeof _DST === \"string\" ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === \"xmd\") {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    } else if (expand === \"xof\") {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    } else if (expand === \"_internal_pass\") {\n        // for internal tests only\n        prb = msg;\n    } else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for(let i = 0; i < count; i++){\n        const e = new Array(m);\n        for(let j = 0; j < m; j++){\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0,_modular_js__WEBPACK_IMPORTED_MODULE_1__.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i)=>Array.from(i).reverse());\n    return (x, y)=>{\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val)=>val.reduce((acc, i)=>field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return {\n            x: x,\n            y: y\n        };\n    };\n}\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */ function createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== \"function\") throw new Error(\"mapToCurve() must be defined\");\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve (msg, options) {\n            const u = hash_to_field(msg, 2, {\n                ...def,\n                DST: def.DST,\n                ...options\n            });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve (msg, options) {\n            const u = hash_to_field(msg, 1, {\n                ...def,\n                DST: def.encodeDST,\n                ...options\n            });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Same as encodeToCurve, but without hash\n        mapToCurve (scalars) {\n            if (!Array.isArray(scalars)) throw new Error(\"mapToCurve: expected array of bigints\");\n            for (const i of scalars)if (typeof i !== \"bigint\") throw new Error(\"mapToCurve: expected array of bigints\");\n            const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n            P.assertValidity();\n            return P;\n        }\n    };\n} //# sourceMappingURL=hash-to-curve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/modular.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/modular.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Field: () => (/* binding */ Field),\n/* harmony export */   FpDiv: () => (/* binding */ FpDiv),\n/* harmony export */   FpInvertBatch: () => (/* binding */ FpInvertBatch),\n/* harmony export */   FpIsSquare: () => (/* binding */ FpIsSquare),\n/* harmony export */   FpLegendre: () => (/* binding */ FpLegendre),\n/* harmony export */   FpPow: () => (/* binding */ FpPow),\n/* harmony export */   FpSqrt: () => (/* binding */ FpSqrt),\n/* harmony export */   FpSqrtEven: () => (/* binding */ FpSqrtEven),\n/* harmony export */   FpSqrtOdd: () => (/* binding */ FpSqrtOdd),\n/* harmony export */   getFieldBytesLength: () => (/* binding */ getFieldBytesLength),\n/* harmony export */   getMinHashLength: () => (/* binding */ getMinHashLength),\n/* harmony export */   hashToPrivateScalar: () => (/* binding */ hashToPrivateScalar),\n/* harmony export */   invert: () => (/* binding */ invert),\n/* harmony export */   isNegativeLE: () => (/* binding */ isNegativeLE),\n/* harmony export */   mapHashToField: () => (/* binding */ mapHashToField),\n/* harmony export */   mod: () => (/* binding */ mod),\n/* harmony export */   nLength: () => (/* binding */ nLength),\n/* harmony export */   pow: () => (/* binding */ pow),\n/* harmony export */   pow2: () => (/* binding */ pow2),\n/* harmony export */   tonelliShanks: () => (/* binding */ tonelliShanks),\n/* harmony export */   validateField: () => (/* binding */ validateField)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/utils.js\");\n/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n = /* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */ function pow(num, power, modulo) {\n    if (power < _0n) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (modulo <= _0n) throw new Error(\"invalid modulus\");\n    if (modulo === _1n) return _0n;\n    let res = _1n;\n    while(power > _0n){\n        if (power & _1n) res = res * num % modulo;\n        num = num * num % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */ function pow2(x, power, modulo) {\n    let res = x;\n    while(power-- > _0n){\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */ function invert(number, modulo) {\n    if (number === _0n) throw new Error(\"invert: expected non-zero number\");\n    if (modulo <= _0n) throw new Error(\"invert: expected positive modulus, got \" + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while(a !== _0n){\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n) throw new Error(\"invert: does not exist\");\n    return mod(x, modulo);\n}\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */ function tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for(Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for(Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++){\n        // Crash instead of infinity loop, we cannot reasonable count until P.\n        if (Z > 1000) throw new Error(\"Cannot find square root: likely non-prime P\");\n    }\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error(\"Cannot find square root\");\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while(!Fp.eql(b, Fp.ONE)){\n            if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for(let t2 = Fp.sqr(b); m < r; m++){\n                if (Fp.eql(t2, Fp.ONE)) break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */ function FpSqrt(P) {\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo)=>(mod(num, modulo) & _1n) === _1n;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    };\n    const opts = FIELD_FIELDS.reduce((map, val)=>{\n        map[val] = \"function\";\n        return map;\n    }, initial);\n    return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */ function FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (power === _0n) return f.ONE;\n    if (power === _1n) return num;\n    let p = f.ONE;\n    let d = num;\n    while(power > _0n){\n        if (power & _1n) p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */ function FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i)=>{\n        if (f.is0(num)) return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i)=>{\n        if (f.is0(num)) return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === \"bigint\" ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */ function FpLegendre(order) {\n    const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n    return (f, x)=>f.pow(x, legendreConst);\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendre = FpLegendre(f.ORDER);\n    return (x)=>{\n        const p = legendre(f, x);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return {\n        nBitLength: _nBitLength,\n        nByteLength\n    };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */ function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n) throw new Error(\"invalid field: expected ORDER > 0, got \" + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048) throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num)=>mod(num, ORDER),\n        isValid: (num)=>{\n            if (typeof num !== \"bigint\") throw new Error(\"invalid field element: expected bigint, got \" + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num)=>num === _0n,\n        isOdd: (num)=>(num & _1n) === _1n,\n        neg: (num)=>mod(-num, ORDER),\n        eql: (lhs, rhs)=>lhs === rhs,\n        sqr: (num)=>mod(num * num, ORDER),\n        add: (lhs, rhs)=>mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs)=>mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs)=>mod(lhs * rhs, ORDER),\n        pow: (num, power)=>FpPow(f, num, power),\n        div: (lhs, rhs)=>mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num)=>num * num,\n        addN: (lhs, rhs)=>lhs + rhs,\n        subN: (lhs, rhs)=>lhs - rhs,\n        mulN: (lhs, rhs)=>lhs * rhs,\n        inv: (num)=>invert(num, ORDER),\n        sqrt: redef.sqrt || ((n)=>{\n            if (!sqrtP) sqrtP = FpSqrt(ORDER);\n            return sqrtP(f, n);\n        }),\n        invertBatch: (lst)=>FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c)=>c ? b : a,\n        toBytes: (num)=>isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(num, BYTES) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(num, BYTES),\n        fromBytes: (bytes)=>{\n            if (bytes.length !== BYTES) throw new Error(\"Field.fromBytes: expected \" + BYTES + \" bytes, got \" + bytes.length);\n            return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(bytes) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(bytes);\n        }\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */ function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"privateHash\", hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(\"hashToPrivateScalar: expected \" + minLen + \"-1024 bytes of input, got \" + hashLen);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(hash) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */ function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== \"bigint\") throw new Error(\"field order must be bigint\");\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */ function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */ function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024) throw new Error(\"expected \" + minLen + \"-1024 bytes of input, got \" + len);\n    const num = isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberLE)(key) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesLE)(reduced, fieldLen) : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE)(reduced, fieldLen);\n} //# sourceMappingURL=modular.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/modular.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/utils.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aInRange: () => (/* binding */ aInRange),\n/* harmony export */   abool: () => (/* binding */ abool),\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   inRange: () => (/* binding */ inRange),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   memoized: () => (/* binding */ memoized),\n/* harmony export */   notImplemented: () => (/* binding */ notImplemented),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/**\n * Hex, bytes and number utilities.\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nfunction isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\n}\nfunction abytes(item) {\n    if (!isBytes(item)) throw new Error(\"Uint8Array expected\");\n}\nfunction abool(title, value) {\n    if (typeof value !== \"boolean\") throw new Error(title + \" boolean expected, got \" + value);\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    abytes(bytes);\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? \"0\" + hex : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    return hex === \"\" ? _0n : BigInt(\"0x\" + hex); // Big Endian\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + hl);\n    const array = new Uint8Array(al);\n    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, \"0\"));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */ function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === \"string\") {\n        try {\n            res = hexToBytes(hex);\n        } catch (e) {\n            throw new Error(title + \" must be hex string or Uint8Array, cause: \" + e);\n        }\n    } else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    } else {\n        throw new Error(title + \" must be hex string or Uint8Array\");\n    }\n    const len = res.length;\n    if (typeof expectedLength === \"number\" && len !== expectedLength) throw new Error(title + \" of length \" + expectedLength + \" expected, got \" + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */ function concatBytes(...arrays) {\n    let sum = 0;\n    for(let i = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length) return false;\n    let diff = 0;\n    for(let i = 0; i < a.length; i++)diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(\"string expected\");\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n)=>typeof n === \"bigint\" && _0n <= n;\nfunction inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */ function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max)) throw new Error(\"expected valid \" + title + \": \" + min + \" <= n < \" + max + \", got \" + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */ function bitLen(n) {\n    let len;\n    for(len = 0; n > _0n; n >>= _1n, len += 1);\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */ function bitGet(n, pos) {\n    return n >> BigInt(pos) & _1n;\n}\n/**\n * Sets single bit at position.\n */ function bitSet(n, pos, value) {\n    return n | (value ? _1n : _0n) << BigInt(pos);\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */ const bitMask = (n)=>(_2n << BigInt(n - 1)) - _1n;\n// DRBG\nconst u8n = (data)=>new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr)=>Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */ function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== \"number\" || hashLen < 2) throw new Error(\"hashLen must be a number\");\n    if (typeof qByteLen !== \"number\" || qByteLen < 2) throw new Error(\"qByteLen must be a number\");\n    if (typeof hmacFn !== \"function\") throw new Error(\"hmacFn must be a function\");\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = ()=>{\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b)=>hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n())=>{\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([\n            0x00\n        ]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0) return;\n        k = h(u8fr([\n            0x01\n        ]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = ()=>{\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000) throw new Error(\"drbg: tried 1000 values\");\n        let len = 0;\n        const out = [];\n        while(len < qByteLen){\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred)=>{\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while(!(res = pred(gen())))reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val)=>typeof val === \"bigint\",\n    function: (val)=>typeof val === \"function\",\n    boolean: (val)=>typeof val === \"boolean\",\n    string: (val)=>typeof val === \"string\",\n    stringOrUint8Array: (val)=>typeof val === \"string\" || isBytes(val),\n    isSafeInteger: (val)=>Number.isSafeInteger(val),\n    array: (val)=>Array.isArray(val),\n    field: (val, object)=>object.Fp.isValid(val),\n    hash: (val)=>typeof val === \"function\" && Number.isSafeInteger(val.outputLen)\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional)=>{\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== \"function\") throw new Error(\"invalid validator function\");\n        const val = object[fieldName];\n        if (isOptional && val === undefined) return;\n        if (!checkVal(val, object)) {\n            throw new Error(\"param \" + String(fieldName) + \" is invalid. Expected \" + type + \", got \" + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */ const notImplemented = ()=>{\n    throw new Error(\"not implemented\");\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */ function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args)=>{\n        const val = map.get(arg);\n        if (val !== undefined) return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/weierstrass.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/weierstrass.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DER: () => (/* binding */ DER),\n/* harmony export */   DERErr: () => (/* binding */ DERErr),\n/* harmony export */   SWUFpSqrtRatio: () => (/* binding */ SWUFpSqrtRatio),\n/* harmony export */   mapToCurveSimpleSWU: () => (/* binding */ mapToCurveSimpleSWU),\n/* harmony export */   weierstrass: () => (/* binding */ weierstrass),\n/* harmony export */   weierstrassPoints: () => (/* binding */ weierstrassPoints)\n/* harmony export */ });\n/* harmony import */ var _curve_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./curve.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/curve.js\");\n/* harmony import */ var _modular_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/utils.js\");\n/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n\n\n\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined) (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abool)(\"lowS\", opts.lowS);\n    if (opts.prehash !== undefined) (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abool)(\"prehash\", opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_1__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject(opts, {\n        a: \"field\",\n        b: \"field\"\n    }, {\n        allowedPrivateKeyLengths: \"array\",\n        wrapPrivateKey: \"boolean\",\n        isTorsionFree: \"function\",\n        clearCofactor: \"function\",\n        allowInfinityPoint: \"boolean\",\n        fromBytes: \"function\",\n        toBytes: \"function\"\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error(\"invalid endomorphism, can only be defined for Koblitz curves that have a=0\");\n        }\n        if (typeof endo !== \"object\" || typeof endo.beta !== \"bigint\" || typeof endo.splitScalar !== \"function\") {\n            throw new Error(\"invalid endomorphism, expected beta: bigint and splitScalar: function\");\n        }\n    }\n    return Object.freeze({\n        ...opts\n    });\n}\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = _utils_js__WEBPACK_IMPORTED_MODULE_0__;\nclass DERErr extends Error {\n    constructor(m = \"\"){\n        super(m);\n    }\n}\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */ const DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data)=>{\n            const { Err: E } = DER;\n            if (tag < 0 || tag > 256) throw new E(\"tlv.encode: wrong tag\");\n            if (data.length & 1) throw new E(\"tlv.encode: unpadded data\");\n            const dataLen = data.length / 2;\n            const len = _utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToHexUnpadded(dataLen);\n            if (len.length / 2 & 128) throw new E(\"tlv.encode: long form length too big\");\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? _utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToHexUnpadded(len.length / 2 | 128) : \"\";\n            const t = _utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToHexUnpadded(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode (tag, data) {\n            const { Err: E } = DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256) throw new E(\"tlv.encode: wrong tag\");\n            if (data.length < 2 || data[pos++] !== tag) throw new E(\"tlv.decode: wrong tlv\");\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong) length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen) throw new E(\"tlv.decode(long): indefinite length not supported\");\n                if (lenLen > 4) throw new E(\"tlv.decode(long): byte length is too big\"); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen) throw new E(\"tlv.decode: length bytes not complete\");\n                if (lengthBytes[0] === 0) throw new E(\"tlv.decode(long): zero leftmost byte\");\n                for (const b of lengthBytes)length = length << 8 | b;\n                pos += lenLen;\n                if (length < 128) throw new E(\"tlv.decode(long): not minimal encoding\");\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length) throw new E(\"tlv.decode: wrong value length\");\n            return {\n                v,\n                l: data.subarray(pos + length)\n            };\n        }\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode (num) {\n            const { Err: E } = DER;\n            if (num < _0n) throw new E(\"integer: negative integers are not allowed\");\n            let hex = _utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToHexUnpadded(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 8) hex = \"00\" + hex;\n            if (hex.length & 1) throw new E(\"unexpected DER parsing assertion: unpadded hex\");\n            return hex;\n        },\n        decode (data) {\n            const { Err: E } = DER;\n            if (data[0] & 128) throw new E(\"invalid signature integer: negative\");\n            if (data[0] === 0x00 && !(data[1] & 128)) throw new E(\"invalid signature integer: unnecessary leading zero\");\n            return b2n(data);\n        }\n    },\n    toSig (hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = DER;\n        const data = typeof hex === \"string\" ? h2b(hex) : hex;\n        _utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes(data);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length) throw new E(\"invalid signature: left bytes after parsing\");\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length) throw new E(\"invalid signature: left bytes after parsing\");\n        return {\n            r: int.decode(rBytes),\n            s: int.decode(sBytes)\n        };\n    },\n    hexFromSig (sig) {\n        const { _tlv: tlv, _int: int } = DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.Field)(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes || ((_c, point, _isCompressed)=>{\n        const a = point.toAffine();\n        return _utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes(Uint8Array.from([\n            0x04\n        ]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n    const fromBytes = CURVE.fromBytes || ((bytes)=>{\n        // const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return {\n            x,\n            y\n        };\n    });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */ function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error(\"bad generator point: equation left != right\");\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return _utils_js__WEBPACK_IMPORTED_MODULE_0__.inRange(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== \"bigint\") {\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes(key)) key = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== \"string\" || !lengths.includes(key.length)) throw new Error(\"invalid private key\");\n            key = key.padStart(nByteLength * 2, \"0\");\n        }\n        let num;\n        try {\n            num = typeof key === \"bigint\" ? key : _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"private key\", key, nByteLength));\n        } catch (error) {\n            throw new Error(\"invalid private key, expected hex or \" + nByteLength + \" bytes, got \" + typeof key);\n        }\n        if (wrapPrivateKey) num = (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.mod)(num, N); // disabled by default, enabled for BLS\n        _utils_js__WEBPACK_IMPORTED_MODULE_0__.aInRange(\"private key\", num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point)) throw new Error(\"ProjectivePoint expected\");\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    const toAffineMemo = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memoized)((p, iz)=>{\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE)) return {\n            x,\n            y\n        };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0) return {\n            x: Fp.ZERO,\n            y: Fp.ZERO\n        };\n        if (!Fp.eql(zz, Fp.ONE)) throw new Error(\"invZ was invalid\");\n        return {\n            x: ax,\n            y: ay\n        };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memoized)((p)=>{\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n            throw new Error(\"bad point: ZERO\");\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error(\"bad point: x or y not FE\");\n        const left = Fp.sqr(y); // y²\n        const right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right)) throw new Error(\"bad point: equation left != right\");\n        if (!p.isTorsionFree()) throw new Error(\"bad point: not in prime-order subgroup\");\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */ class Point {\n        constructor(px, py, pz){\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px)) throw new Error(\"x required\");\n            if (py == null || !Fp.isValid(py)) throw new Error(\"y required\");\n            if (pz == null || !Fp.isValid(pz)) throw new Error(\"z required\");\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error(\"invalid affine point\");\n            if (p instanceof Point) throw new Error(\"projective point not allowed\");\n            const is0 = (i)=>Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y)) return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */ static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p)=>p.pz));\n            return points.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */ static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"pointHex\", hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return (0,_curve_js__WEBPACK_IMPORTED_MODULE_1__.pippenger)(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd) return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */ equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */ negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */ multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            _utils_js__WEBPACK_IMPORTED_MODULE_0__.aInRange(\"scalar\", sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n) return I;\n            if (this.is0() || sc === _1n) return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this)) return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while(k1 > _0n || k2 > _0n){\n                if (k1 & _1n) k1p = k1p.add(d);\n                if (k2 & _1n) k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg) k1p = k1p.negate();\n            if (k2neg) k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */ multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            _utils_js__WEBPACK_IMPORTED_MODULE_0__.aInRange(\"scalar\", scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            } else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([\n                point,\n                fake\n            ])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */ multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            )=>a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n) return true; // No subgroups, always torsion-free\n            if (isTorsionFree) return isTorsionFree(Point, this);\n            throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\");\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n) return this; // Fast-path\n            if (clearCofactor) return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abool)(\"isCompressed\", isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abool)(\"isCompressed\", isCompressed);\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0,_curve_js__WEBPACK_IMPORTED_MODULE_1__.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0,_curve_js__WEBPACK_IMPORTED_MODULE_1__.validateBasic)(curve);\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.validateObject(opts, {\n        hash: \"hash\",\n        hmac: \"function\",\n        randomBytes: \"function\"\n    }, {\n        bits2int: \"function\",\n        bits2int_modN: \"function\",\n        lowS: \"boolean\"\n    });\n    return Object.freeze({\n        lowS: true,\n        ...opts\n    });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */ function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.mod)(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.invert)(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({\n        ...CURVE,\n        toBytes (_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = _utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes;\n            (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.abool)(\"isCompressed\", isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([\n                    point.hasEvenY() ? 0x02 : 0x03\n                ]), x);\n            } else {\n                return cat(Uint8Array.from([\n                    0x04\n                ]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes (bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE(tail);\n                if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__.inRange(x, _1n, Fp.ORDER)) throw new Error(\"Point is not on curve\");\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                } catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? \": \" + sqrtError.message : \"\";\n                    throw new Error(\"Point is not on curve\" + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n                return {\n                    x,\n                    y\n                };\n            } else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return {\n                    x,\n                    y\n                };\n            } else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error(\"invalid Point, expected length of \" + cl + \", or uncompressed \" + ul + \", got \" + len);\n            }\n        }\n    });\n    const numToNByteStr = (num)=>_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex(_utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to)=>_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */ class Signature {\n        constructor(r, s, recovery){\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"compactSignature\", hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = DER.toSig((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"DER\", hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            _utils_js__WEBPACK_IMPORTED_MODULE_0__.aInRange(\"r\", this.r, _1n, CURVE_ORDER); // r in [1..N]\n            _utils_js__WEBPACK_IMPORTED_MODULE_0__.aInRange(\"s\", this.s, _1n, CURVE_ORDER); // s in [1..N]\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"msgHash\", msgHash)); // Truncate hash\n            if (rec == null || ![\n                0,\n                1,\n                2,\n                3\n            ].includes(rec)) throw new Error(\"recovery id invalid\");\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER) throw new Error(\"recovery id 2 or 3 invalid\");\n            const prefix = (rec & 1) === 0 ? \"02\" : \"03\";\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q) throw new Error(\"point at infinify\"); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return DER.hexFromSig({\n                r: this.r,\n                s: this.s\n            });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return _utils_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey (privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            } catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */ randomPrivateKey: ()=>{\n            const length = (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.getMinHashLength)(CURVE.n);\n            return (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.mapHashToField)(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */ precompute (windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        }\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */ function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */ function isProbPub(item) {\n        const arr = _utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes(item);\n        const str = typeof item === \"string\";\n        const len = (arr || str) && item.length;\n        if (arr) return len === compressedLen || len === uncompressedLen;\n        if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point) return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */ function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA)) throw new Error(\"first arg must be private key\");\n        if (!isProbPub(publicB)) throw new Error(\"second arg must be public key\");\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int || function(bytes) {\n        // Our custom check \"just in case\"\n        if (bytes.length > 8192) throw new Error(\"input is too large\");\n        // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n        // for some cases, since bytes.length * 8 is not actual bitLength.\n        const num = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToNumberBE(bytes); // check for == u8 done here\n        const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n        return delta > 0 ? num >> BigInt(delta) : num;\n    };\n    const bits2int_modN = CURVE.bits2int_modN || function(bytes) {\n        return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */ function int2octets(num) {\n        _utils_js__WEBPACK_IMPORTED_MODULE_0__.aInRange(\"num < 2^\" + CURVE.nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return _utils_js__WEBPACK_IMPORTED_MODULE_0__.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if ([\n            \"recovered\",\n            \"canonical\"\n        ].some((k)=>k in opts)) throw new Error(\"sign() legacy options not supported\");\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"msgHash\", msgHash);\n        validateSigVerOpts(opts);\n        if (prehash) msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"prehashed msgHash\", hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [\n            int2octets(d),\n            int2octets(h1int)\n        ];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"extraEntropy\", e)); // check for being bytes\n        }\n        const seed = _utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n) return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n) return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return {\n            seed,\n            k2sig\n        };\n    }\n    const defaultSigOpts = {\n        lowS: CURVE.lowS,\n        prehash: false\n    };\n    const defaultVerOpts = {\n        lowS: CURVE.lowS,\n        prehash: false\n    };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */ function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = _utils_js__WEBPACK_IMPORTED_MODULE_0__.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */ function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"msgHash\", msgHash);\n        publicKey = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.ensureBytes)(\"publicKey\", publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if (\"strict\" in opts) throw new Error(\"options.strict was renamed to lowS\");\n        if (format !== undefined && format !== \"compact\" && format !== \"der\") throw new Error(\"format must be compact or der\");\n        const isHex = typeof sg === \"string\" || _utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes(sg);\n        const isObj = !isHex && !format && typeof sg === \"object\" && sg !== null && typeof sg.r === \"bigint\" && typeof sg.s === \"bigint\";\n        if (!isHex && !isObj) throw new Error(\"invalid signature, expected Uint8Array, hex string or Signature instance\");\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj) _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== \"compact\") _sig = Signature.fromDER(sg);\n                } catch (derError) {\n                    if (!(derError instanceof DER.Err)) throw derError;\n                }\n                if (!_sig && format !== \"der\") _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        } catch (error) {\n            return false;\n        }\n        if (!_sig) return false;\n        if (lowS && _sig.hasHighS()) return false;\n        if (prehash) msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R) return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */ function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for(let o = q - _1n; o % _2n === _0n; o /= _2n)l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v)=>{\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for(let i = c1; i > _1n; i--){\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return {\n            isValid: isQR,\n            value: tv3\n        };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v)=>{\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return {\n                isValid: isQR,\n                value: y\n            }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */ function mapToCurveSimpleSWU(Fp, opts) {\n    (0,_modular_js__WEBPACK_IMPORTED_MODULE_2__.validateField)(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error(\"mapToCurveSimpleSWU: invalid opts\");\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd) throw new Error(\"Fp.isOdd is not implemented!\");\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u)=>{\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return {\n            x,\n            y\n        };\n    };\n} //# sourceMappingURL=weierstrass.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/weierstrass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/secp256k1.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/secp256k1.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeToCurve: () => (/* binding */ encodeToCurve),\n/* harmony export */   hashToCurve: () => (/* binding */ hashToCurve),\n/* harmony export */   schnorr: () => (/* binding */ schnorr),\n/* harmony export */   secp256k1: () => (/* binding */ secp256k1)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_shortw_utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/_shortw_utils.js\");\n/* harmony import */ var _abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/hash-to-curve.js\");\n/* harmony import */ var _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract/modular.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/modular.js\");\n/* harmony import */ var _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract/utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/utils.js\");\n/* harmony import */ var _abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/abstract/weierstrass.js\");\n/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ \n\n\n\n\n\n\nconst secp256k1P = BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\");\nconst secp256k1N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b)=>(a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */ function sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = y * y * y % P; // x^3, 11\n    const b3 = b2 * b2 * y % P; // x^7\n    const b6 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b3, _3n, P) * b3 % P;\n    const b9 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b6, _3n, P) * b3 % P;\n    const b11 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b9, _2n, P) * b2 % P;\n    const b22 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b11, _11n, P) * b11 % P;\n    const b44 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b22, _22n, P) * b22 % P;\n    const b88 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b44, _44n, P) * b44 % P;\n    const b176 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b88, _88n, P) * b88 % P;\n    const b220 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b176, _44n, P) * b44 % P;\n    const b223 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b220, _3n, P) * b3 % P;\n    const t1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(b223, _23n, P) * b22 % P;\n    const t2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t1, _6n, P) * b2 % P;\n    const root = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.pow2)(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error(\"Cannot find square root\");\n    return root;\n}\nconst Fpk1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.Field)(secp256k1P, undefined, undefined, {\n    sqrt: sqrtMod\n});\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */ const secp256k1 = (0,_shortw_utils_js__WEBPACK_IMPORTED_MODULE_1__.createCurve)({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp: Fpk1,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n    Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\n    h: BigInt(1),\n    lowS: true,\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),\n        splitScalar: (k)=>{\n            const n = secp256k1N;\n            const a1 = BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\");\n            const b1 = -_1n * BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\");\n            const a2 = BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\");\n            const b2 = a1;\n            const POW_2_128 = BigInt(\"0x100000000000000000000000000000000\"); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg) k1 = n - k1;\n            if (k2neg) k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error(\"splitScalar: Endomorphism failed, k=\" + k);\n            }\n            return {\n                k1neg,\n                k1,\n                k2neg,\n                k2\n            };\n        }\n    }\n}, _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */ const TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));\n        tagP = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256)((0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point)=>point.toRawBytes(true).slice(1);\nconst numTo32b = (n)=>(0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE)(n, 32);\nconst modP = (x)=>(0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1P);\nconst modN = (x)=>(0,_abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod)(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b)=>Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return {\n        scalar: scalar,\n        bytes: pointToBytes(p)\n    };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */ function lift_x(x) {\n    (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.aInRange)(\"x\", x, _1n, secp256k1P); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */ function challenge(...args) {\n    return modN(num(taggedHash(\"BIP0340/challenge\", ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */ function schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */ function schnorrSign(message, privateKey, auxRand = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.randomBytes)(32)) {\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"message\", message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"auxRand\", auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash(\"BIP0340/aux\", a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash(\"BIP0340/nonce\", t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n) throw new Error(\"sign failed: k is zero\"); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px)) throw new Error(\"sign: Invalid signature produced\");\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */ function schnorrVerify(signature, message, publicKey) {\n    const sig = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"signature\", signature, 64);\n    const m = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"message\", message);\n    const pub = (0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.ensureBytes)(\"publicKey\", publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!(0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.inRange)(r, _1n, secp256k1P)) return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!(0,_abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.inRange)(s, _1n, secp256k1N)) return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    } catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */ const schnorr = /* @__PURE__ */ (()=>({\n        getPublicKey: schnorrGetPublicKey,\n        sign: schnorrSign,\n        verify: schnorrVerify,\n        utils: {\n            randomPrivateKey: secp256k1.utils.randomPrivateKey,\n            lift_x,\n            pointToBytes,\n            numberToBytesBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.numberToBytesBE,\n            bytesToNumberBE: _abstract_utils_js__WEBPACK_IMPORTED_MODULE_3__.bytesToNumberBE,\n            taggedHash,\n            mod: _abstract_modular_js__WEBPACK_IMPORTED_MODULE_0__.mod\n        }\n    }))();\nconst isoMap = /* @__PURE__ */ (()=>(0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.isogenyMap)(Fpk1, [\n        // xNum\n        [\n            \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7\",\n            \"0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581\",\n            \"0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262\",\n            \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c\"\n        ],\n        // xDen\n        [\n            \"0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b\",\n            \"0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        ],\n        // yNum\n        [\n            \"0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c\",\n            \"0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3\",\n            \"0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931\",\n            \"0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84\"\n        ],\n        // yDen\n        [\n            \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b\",\n            \"0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573\",\n            \"0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        ]\n    ].map((i)=>i.map((j)=>BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (()=>(0,_abstract_weierstrass_js__WEBPACK_IMPORTED_MODULE_6__.mapToCurveSimpleSWU)(Fpk1, {\n        A: BigInt(\"0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533\"),\n        B: BigInt(\"1771\"),\n        Z: Fpk1.create(BigInt(\"-11\"))\n    }))();\nconst htf = /* @__PURE__ */ (()=>(0,_abstract_hash_to_curve_js__WEBPACK_IMPORTED_MODULE_5__.createHasher)(secp256k1.ProjectivePoint, (scalars)=>{\n        const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n        return isoMap(x, y);\n    }, {\n        DST: \"secp256k1_XMD:SHA-256_SSWU_RO_\",\n        encodeDST: \"secp256k1_XMD:SHA-256_SSWU_NU_\",\n        p: Fpk1.ORDER,\n        m: 1,\n        k: 128,\n        expand: \"xmd\",\n        hash: _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_2__.sha256\n    }))();\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */ const hashToCurve = /* @__PURE__ */ (()=>htf.hashToCurve)();\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */ const encodeToCurve = /* @__PURE__ */ (()=>htf.encodeToCurve)(); //# sourceMappingURL=secp256k1.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL3NlY3AyNTZrMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7Ozs7OztDQVdDLEdBQ0Qsb0VBQW9FLEdBQ3RCO0FBQ0k7QUFDRDtBQUNzQjtBQUNkO0FBQzREO0FBQ3JEO0FBQ2hFLE1BQU1lLGFBQWFDLE9BQU87QUFDMUIsTUFBTUMsYUFBYUQsT0FBTztBQUMxQixNQUFNRSxNQUFNRixPQUFPO0FBQ25CLE1BQU1HLE1BQU1ILE9BQU87QUFDbkIsTUFBTUksYUFBYSxDQUFDQyxHQUFHQyxJQUFNLENBQUNELElBQUlDLElBQUlILEdBQUUsSUFBS0c7QUFDN0M7OztDQUdDLEdBQ0QsU0FBU0MsUUFBUUMsQ0FBQztJQUNkLE1BQU1DLElBQUlWO0lBQ1Ysa0JBQWtCO0lBQ2xCLE1BQU1XLE1BQU1WLE9BQU8sSUFBSVcsTUFBTVgsT0FBTyxJQUFJWSxPQUFPWixPQUFPLEtBQUthLE9BQU9iLE9BQU87SUFDekUsa0JBQWtCO0lBQ2xCLE1BQU1jLE9BQU9kLE9BQU8sS0FBS2UsT0FBT2YsT0FBTyxLQUFLZ0IsT0FBT2hCLE9BQU87SUFDMUQsTUFBTWlCLEtBQUssSUFBS1QsSUFBSUEsSUFBS0MsR0FBRyxVQUFVO0lBQ3RDLE1BQU1TLEtBQUssS0FBTUQsS0FBS1QsSUFBS0MsR0FBRyxNQUFNO0lBQ3BDLE1BQU1VLEtBQUssMkRBQU1ELElBQUlSLEtBQUtELEtBQUtTLEtBQU1UO0lBQ3JDLE1BQU1XLEtBQUssMkRBQU1ELElBQUlULEtBQUtELEtBQUtTLEtBQU1UO0lBQ3JDLE1BQU1ZLE1BQU0sMkRBQU1ELElBQUlqQixLQUFLTSxLQUFLUSxLQUFNUjtJQUN0QyxNQUFNYSxNQUFNLDJEQUFNRCxLQUFLVCxNQUFNSCxLQUFLWSxNQUFPWjtJQUN6QyxNQUFNYyxNQUFNLDJEQUFNRCxLQUFLVCxNQUFNSixLQUFLYSxNQUFPYjtJQUN6QyxNQUFNZSxNQUFNLDJEQUFNRCxLQUFLUixNQUFNTixLQUFLYyxNQUFPZDtJQUN6QyxNQUFNZ0IsT0FBTywyREFBTUQsS0FBS1IsTUFBTVAsS0FBS2UsTUFBT2Y7SUFDMUMsTUFBTWlCLE9BQU8sMkRBQU1ELE1BQU1WLE1BQU1OLEtBQUtjLE1BQU9kO0lBQzNDLE1BQU1rQixPQUFPLDJEQUFNRCxNQUFNaEIsS0FBS0QsS0FBS1MsS0FBTVQ7SUFDekMsTUFBTW1CLEtBQUssMkRBQU1ELE1BQU1iLE1BQU1MLEtBQUthLE1BQU9iO0lBQ3pDLE1BQU1vQixLQUFLLDJEQUFNRCxJQUFJakIsS0FBS0YsS0FBS1EsS0FBTVI7SUFDckMsTUFBTXFCLE9BQU92QywwREFBSUEsQ0FBQ3NDLElBQUkxQixLQUFLTTtJQUMzQixJQUFJLENBQUNzQixLQUFLQyxHQUFHLENBQUNELEtBQUtFLEdBQUcsQ0FBQ0gsT0FBT3RCLElBQzFCLE1BQU0sSUFBSTBCLE1BQU07SUFDcEIsT0FBT0o7QUFDWDtBQUNBLE1BQU1DLE9BQU8xQywyREFBS0EsQ0FBQ1UsWUFBWW9DLFdBQVdBLFdBQVc7SUFBRUMsTUFBTTdCO0FBQVE7QUFDckU7Ozs7Ozs7Ozs7O0NBV0MsR0FDTSxNQUFNOEIsWUFBWW5ELDZEQUFXQSxDQUFDO0lBQ2pDbUIsR0FBR0wsT0FBTztJQUNWTSxHQUFHTixPQUFPO0lBQ1ZzQyxJQUFJUDtJQUNKUSxHQUFHdEM7SUFDSCx3Q0FBd0M7SUFDeEN1QyxJQUFJeEMsT0FBTztJQUNYeUMsSUFBSXpDLE9BQU87SUFDWDBDLEdBQUcxQyxPQUFPO0lBQ1YyQyxNQUFNO0lBQ05DLE1BQU07UUFDRiwwQkFBMEI7UUFDMUJDLE1BQU03QyxPQUFPO1FBQ2I4QyxhQUFhLENBQUNDO1lBQ1YsTUFBTVIsSUFBSXRDO1lBQ1YsTUFBTStDLEtBQUtoRCxPQUFPO1lBQ2xCLE1BQU1pRCxLQUFLLENBQUMvQyxNQUFNRixPQUFPO1lBQ3pCLE1BQU1rRCxLQUFLbEQsT0FBTztZQUNsQixNQUFNaUIsS0FBSytCO1lBQ1gsTUFBTUcsWUFBWW5ELE9BQU8sd0NBQXdDLDBCQUEwQjtZQUMzRixNQUFNb0QsS0FBS2hELFdBQVdhLEtBQUs4QixHQUFHUjtZQUM5QixNQUFNYyxLQUFLakQsV0FBVyxDQUFDNkMsS0FBS0YsR0FBR1I7WUFDL0IsSUFBSWUsS0FBS2hFLHlEQUFHQSxDQUFDeUQsSUFBSUssS0FBS0osS0FBS0ssS0FBS0gsSUFBSVg7WUFDcEMsSUFBSWdCLEtBQUtqRSx5REFBR0EsQ0FBQyxDQUFDOEQsS0FBS0gsS0FBS0ksS0FBS3BDLElBQUlzQjtZQUNqQyxNQUFNaUIsUUFBUUYsS0FBS0g7WUFDbkIsTUFBTU0sUUFBUUYsS0FBS0o7WUFDbkIsSUFBSUssT0FDQUYsS0FBS2YsSUFBSWU7WUFDYixJQUFJRyxPQUNBRixLQUFLaEIsSUFBSWdCO1lBQ2IsSUFBSUQsS0FBS0gsYUFBYUksS0FBS0osV0FBVztnQkFDbEMsTUFBTSxJQUFJakIsTUFBTSx5Q0FBeUNhO1lBQzdEO1lBQ0EsT0FBTztnQkFBRVM7Z0JBQU9GO2dCQUFJRztnQkFBT0Y7WUFBRztRQUNsQztJQUNKO0FBQ0osR0FBR3ZFLHdEQUFNQSxFQUFFO0FBQ1gsK0ZBQStGO0FBQy9GLGlFQUFpRTtBQUNqRSxNQUFNMEUsTUFBTTFELE9BQU87QUFDbkIsc0ZBQXNGLEdBQ3RGLE1BQU0yRCx1QkFBdUIsQ0FBQztBQUM5QixTQUFTQyxXQUFXQyxHQUFHLEVBQUUsR0FBR0MsUUFBUTtJQUNoQyxJQUFJQyxPQUFPSixvQkFBb0IsQ0FBQ0UsSUFBSTtJQUNwQyxJQUFJRSxTQUFTNUIsV0FBVztRQUNwQixNQUFNNkIsT0FBT2hGLDREQUFNQSxDQUFDaUYsV0FBV0MsSUFBSSxDQUFDTCxLQUFLLENBQUNNLElBQU1BLEVBQUVDLFVBQVUsQ0FBQztRQUM3REwsT0FBT3JFLCtEQUFXQSxDQUFDc0UsTUFBTUE7UUFDekJMLG9CQUFvQixDQUFDRSxJQUFJLEdBQUdFO0lBQ2hDO0lBQ0EsT0FBTy9FLDREQUFNQSxDQUFDVSwrREFBV0EsQ0FBQ3FFLFNBQVNEO0FBQ3ZDO0FBQ0Esb0ZBQW9GO0FBQ3BGLE1BQU1PLGVBQWUsQ0FBQ0MsUUFBVUEsTUFBTUMsVUFBVSxDQUFDLE1BQU1DLEtBQUssQ0FBQztBQUM3RCxNQUFNQyxXQUFXLENBQUNsQyxJQUFNMUMsbUVBQWVBLENBQUMwQyxHQUFHO0FBQzNDLE1BQU1tQyxPQUFPLENBQUNDLElBQU1yRix5REFBR0EsQ0FBQ3FGLEdBQUc1RTtBQUMzQixNQUFNNkUsT0FBTyxDQUFDRCxJQUFNckYseURBQUdBLENBQUNxRixHQUFHMUU7QUFDM0IsTUFBTTRFLFFBQVF4QyxVQUFVeUMsZUFBZTtBQUN2QyxNQUFNQyxVQUFVLENBQUNDLEdBQUczRSxHQUFHQyxJQUFNdUUsTUFBTUksSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQ0YsR0FBRzNFLEdBQUdDO0FBQ25FLG9DQUFvQztBQUNwQyxTQUFTNkUsb0JBQW9CQyxJQUFJO0lBQzdCLElBQUlDLEtBQUtoRCxVQUFVaUQsS0FBSyxDQUFDQyxzQkFBc0IsQ0FBQ0gsT0FBTyx5Q0FBeUM7SUFDaEcsSUFBSUksSUFBSVgsTUFBTVksY0FBYyxDQUFDSixLQUFLLDRDQUE0QztJQUM5RSxNQUFNSyxTQUFTRixFQUFFRyxRQUFRLEtBQUtOLEtBQUtULEtBQUssQ0FBQ1M7SUFDekMsT0FBTztRQUFFSyxRQUFRQTtRQUFRRSxPQUFPdkIsYUFBYW1CO0lBQUc7QUFDcEQ7QUFDQTs7O0NBR0MsR0FDRCxTQUFTSyxPQUFPbEIsQ0FBQztJQUNibkYsNERBQVFBLENBQUMsS0FBS21GLEdBQUd6RSxLQUFLSCxhQUFhLGlCQUFpQjtJQUNwRCxNQUFNK0YsS0FBS3BCLEtBQUtDLElBQUlBO0lBQ3BCLE1BQU1SLElBQUlPLEtBQUtvQixLQUFLbkIsSUFBSTNFLE9BQU8sS0FBSyx3QkFBd0I7SUFDNUQsSUFBSVEsSUFBSUQsUUFBUTRELElBQUksMkJBQTJCO0lBQy9DLElBQUkzRCxJQUFJTCxRQUFRdUQsS0FDWmxELElBQUlrRSxLQUFLLENBQUNsRSxJQUFJLG1EQUFtRDtJQUNyRSxNQUFNZ0YsSUFBSSxJQUFJWCxNQUFNRixHQUFHbkUsR0FBR04sTUFBTSxtREFBbUQ7SUFDbkZzRixFQUFFTyxjQUFjO0lBQ2hCLE9BQU9QO0FBQ1g7QUFDQSxNQUFNUSxNQUFNdkcsK0RBQWVBO0FBQzNCOztDQUVDLEdBQ0QsU0FBU3dHLFVBQVUsR0FBR0MsSUFBSTtJQUN0QixPQUFPdEIsS0FBS29CLElBQUlwQyxXQUFXLHdCQUF3QnNDO0FBQ3ZEO0FBQ0E7O0NBRUMsR0FDRCxTQUFTQyxvQkFBb0JDLFVBQVU7SUFDbkMsT0FBT2pCLG9CQUFvQmlCLFlBQVlSLEtBQUssRUFBRSxvREFBb0Q7QUFDdEc7QUFDQTs7O0NBR0MsR0FDRCxTQUFTUyxZQUFZQyxPQUFPLEVBQUVGLFVBQVUsRUFBRUcsVUFBVXRILGdFQUFXQSxDQUFDLEdBQUc7SUFDL0QsTUFBTXVILElBQUk3RywrREFBV0EsQ0FBQyxXQUFXMkc7SUFDakMsTUFBTSxFQUFFVixPQUFPYSxFQUFFLEVBQUVmLFFBQVFnQixDQUFDLEVBQUUsR0FBR3ZCLG9CQUFvQmlCLGFBQWEsZ0NBQWdDO0lBQ2xHLE1BQU0vRixJQUFJViwrREFBV0EsQ0FBQyxXQUFXNEcsU0FBUyxLQUFLLDJDQUEyQztJQUMxRixNQUFNSSxJQUFJbEMsU0FBU2lDLElBQUlWLElBQUlwQyxXQUFXLGVBQWV2RCxNQUFNLHlEQUF5RDtJQUNwSCxNQUFNdUcsT0FBT2hELFdBQVcsaUJBQWlCK0MsR0FBR0YsSUFBSUQsSUFBSSw0Q0FBNEM7SUFDaEcsTUFBTUssS0FBS2pDLEtBQUtvQixJQUFJWSxRQUFRLDJCQUEyQjtJQUN2RCxJQUFJQyxPQUFPbkQsS0FDUCxNQUFNLElBQUl4QixNQUFNLDJCQUEyQixrQkFBa0I7SUFDakUsTUFBTSxFQUFFMEQsT0FBT2tCLEVBQUUsRUFBRXBCLFFBQVEzQyxDQUFDLEVBQUUsR0FBR29DLG9CQUFvQjBCLEtBQUssZ0JBQWdCO0lBQzFFLE1BQU1FLElBQUlkLFVBQVVhLElBQUlMLElBQUlELElBQUksZ0VBQWdFO0lBQ2hHLE1BQU1RLE1BQU0sSUFBSS9DLFdBQVcsS0FBSywrQ0FBK0M7SUFDL0UrQyxJQUFJQyxHQUFHLENBQUNILElBQUk7SUFDWkUsSUFBSUMsR0FBRyxDQUFDeEMsU0FBU0csS0FBSzdCLElBQUlnRSxJQUFJTCxLQUFLO0lBQ25DLGlFQUFpRTtJQUNqRSxJQUFJLENBQUNRLGNBQWNGLEtBQUtSLEdBQUdDLEtBQ3ZCLE1BQU0sSUFBSXZFLE1BQU07SUFDcEIsT0FBTzhFO0FBQ1g7QUFDQTs7O0NBR0MsR0FDRCxTQUFTRSxjQUFjQyxTQUFTLEVBQUViLE9BQU8sRUFBRWMsU0FBUztJQUNoRCxNQUFNSixNQUFNckgsK0RBQVdBLENBQUMsYUFBYXdILFdBQVc7SUFDaEQsTUFBTVgsSUFBSTdHLCtEQUFXQSxDQUFDLFdBQVcyRztJQUNqQyxNQUFNZSxNQUFNMUgsK0RBQVdBLENBQUMsYUFBYXlILFdBQVc7SUFDaEQsSUFBSTtRQUNBLE1BQU0zRyxJQUFJb0YsT0FBT0csSUFBSXFCLE9BQU8sMENBQTBDO1FBQ3RFLE1BQU1DLElBQUl0QixJQUFJZ0IsSUFBSU8sUUFBUSxDQUFDLEdBQUcsTUFBTSx5Q0FBeUM7UUFDN0UsSUFBSSxDQUFDM0gsMkRBQU9BLENBQUMwSCxHQUFHcEgsS0FBS0gsYUFDakIsT0FBTztRQUNYLE1BQU15SCxJQUFJeEIsSUFBSWdCLElBQUlPLFFBQVEsQ0FBQyxJQUFJLE1BQU0sMENBQTBDO1FBQy9FLElBQUksQ0FBQzNILDJEQUFPQSxDQUFDNEgsR0FBR3RILEtBQUtELGFBQ2pCLE9BQU87UUFDWCxNQUFNOEcsSUFBSWQsVUFBVXhCLFNBQVM2QyxJQUFJakQsYUFBYTVELElBQUkrRixJQUFJLDBDQUEwQztRQUNoRyxNQUFNaUIsSUFBSTFDLFFBQVF0RSxHQUFHK0csR0FBRzVDLEtBQUssQ0FBQ21DLEtBQUssZ0JBQWdCO1FBQ25ELElBQUksQ0FBQ1UsS0FBSyxDQUFDQSxFQUFFOUIsUUFBUSxNQUFNOEIsRUFBRUMsUUFBUSxHQUFHL0MsQ0FBQyxLQUFLMkMsR0FDMUMsT0FBTyxPQUFPLGdCQUFnQjtRQUNsQyxPQUFPLE1BQU0seURBQXlEO0lBQzFFLEVBQ0EsT0FBT0ssT0FBTztRQUNWLE9BQU87SUFDWDtBQUNKO0FBQ0E7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLE1BQU1DLFVBQTBCLGFBQUgsR0FBSSxLQUFPO1FBQzNDQyxjQUFjMUI7UUFDZDJCLE1BQU16QjtRQUNOMEIsUUFBUWI7UUFDUjVCLE9BQU87WUFDSDBDLGtCQUFrQjNGLFVBQVVpRCxLQUFLLENBQUMwQyxnQkFBZ0I7WUFDbERuQztZQUNBeEI7WUFDQXhFLGVBQWVBLGlFQUFBQTtZQUNmSixlQUFlQSxpRUFBQUE7WUFDZm1FO1lBQ0F0RSxHQUFHQSx1REFBQUE7UUFDUDtJQUNKLEVBQUMsSUFBSztBQUNOLE1BQU0ySSxTQUF5QixhQUFILEdBQUksS0FBTTdJLHNFQUFVQSxDQUFDMkMsTUFBTTtRQUNuRCxPQUFPO1FBQ1A7WUFDSTtZQUNBO1lBQ0E7WUFDQTtTQUNIO1FBQ0QsT0FBTztRQUNQO1lBQ0k7WUFDQTtZQUNBO1NBQ0g7UUFDRCxPQUFPO1FBQ1A7WUFDSTtZQUNBO1lBQ0E7WUFDQTtTQUNIO1FBQ0QsT0FBTztRQUNQO1lBQ0k7WUFDQTtZQUNBO1lBQ0E7U0FDSDtLQUNKLENBQUNtRyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUEsRUFBRUQsR0FBRyxDQUFDLENBQUNFLElBQU1wSSxPQUFPb0ksS0FBSTtBQUNyQyxNQUFNQyxTQUF5QixhQUFILEdBQUksS0FBTXZJLDZFQUFtQkEsQ0FBQ2lDLE1BQU07UUFDNUR1RyxHQUFHdEksT0FBTztRQUNWdUksR0FBR3ZJLE9BQU87UUFDVndJLEdBQUd6RyxLQUFLMEcsTUFBTSxDQUFDekksT0FBTztJQUMxQixFQUFDO0FBQ0QsTUFBTTBJLE1BQXNCLGFBQUgsR0FBSSxLQUFNdkosd0VBQVlBLENBQUNrRCxVQUFVeUMsZUFBZSxFQUFFLENBQUM2RDtRQUN4RSxNQUFNLEVBQUVoRSxDQUFDLEVBQUVuRSxDQUFDLEVBQUUsR0FBRzZILE9BQU90RyxLQUFLMEcsTUFBTSxDQUFDRSxPQUFPLENBQUMsRUFBRTtRQUM5QyxPQUFPVixPQUFPdEQsR0FBR25FO0lBQ3JCLEdBQUc7UUFDQ29JLEtBQUs7UUFDTEMsV0FBVztRQUNYckQsR0FBR3pELEtBQUsrRyxLQUFLO1FBQ2J0QyxHQUFHO1FBQ0h6RCxHQUFHO1FBQ0hnRyxRQUFRO1FBQ1JDLE1BQU1oSyx3REFBTUE7SUFDaEIsRUFBQztBQUNELHFGQUFxRixHQUM5RSxNQUFNaUssY0FBOEIsYUFBSCxHQUFJLEtBQU1QLElBQUlPLFdBQVcsSUFBSTtBQUNyRSx1RkFBdUYsR0FDaEYsTUFBTUMsZ0JBQWdDLGFBQUgsR0FBSSxLQUFNUixJQUFJUSxhQUFhLElBQUksQ0FDekUscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvZXNtL3NlY3AyNTZrMS5qcz9lNTY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTklTVCBzZWNwMjU2azEuIFNlZSBbcGRmXShodHRwczovL3d3dy5zZWNnLm9yZy9zZWMyLXYyLnBkZikuXG4gKlxuICogU2VlbXMgdG8gYmUgcmlnaWQgKG5vdCBiYWNrZG9vcmVkKVxuICogW2FzIHBlciBkaXNjdXNzaW9uXShodHRwczovL2JpdGNvaW50YWxrLm9yZy9pbmRleC5waHA/dG9waWM9Mjg5Nzk1Lm1zZzMxODM5NzUjbXNnMzE4Mzk3NSkuXG4gKlxuICogc2VjcDI1NmsxIGJlbG9uZ3MgdG8gS29ibGl0eiBjdXJ2ZXM6IGl0IGhhcyBlZmZpY2llbnRseSBjb21wdXRhYmxlIGVuZG9tb3JwaGlzbS5cbiAqIEVuZG9tb3JwaGlzbSB1c2VzIDJ4IGxlc3MgUkFNLCBzcGVlZHMgdXAgcHJlY29tcHV0YXRpb24gYnkgMnggYW5kIEVDREggLyBrZXkgcmVjb3ZlcnkgYnkgMjAlLlxuICogRm9yIHByZWNvbXB1dGVkIHdOQUYgaXQgdHJhZGVzIG9mZiAxLzIgaW5pdCB0aW1lICYgMS8zIHJhbSBmb3IgMjAlIHBlcmYgaGl0LlxuICogW1NlZSBleHBsYW5hdGlvbl0oaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vcGF1bG1pbGxyL2ViNjcwODA2NzkzZTg0ZGY2MjhhN2M0MzRhODczMDY2KS5cbiAqIEBtb2R1bGVcbiAqL1xuLyohIG5vYmxlLWN1cnZlcyAtIE1JVCBMaWNlbnNlIChjKSAyMDIyIFBhdWwgTWlsbGVyIChwYXVsbWlsbHIuY29tKSAqL1xuaW1wb3J0IHsgc2hhMjU2IH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9zaGEyNTYnO1xuaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tICdAbm9ibGUvaGFzaGVzL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUN1cnZlIH0gZnJvbSAnLi9fc2hvcnR3X3V0aWxzLmpzJztcbmltcG9ydCB7IGNyZWF0ZUhhc2hlciwgaXNvZ2VueU1hcCB9IGZyb20gJy4vYWJzdHJhY3QvaGFzaC10by1jdXJ2ZS5qcyc7XG5pbXBvcnQgeyBGaWVsZCwgbW9kLCBwb3cyIH0gZnJvbSAnLi9hYnN0cmFjdC9tb2R1bGFyLmpzJztcbmltcG9ydCB7IGFJblJhbmdlLCBieXRlc1RvTnVtYmVyQkUsIGNvbmNhdEJ5dGVzLCBlbnN1cmVCeXRlcywgaW5SYW5nZSwgbnVtYmVyVG9CeXRlc0JFLCB9IGZyb20gJy4vYWJzdHJhY3QvdXRpbHMuanMnO1xuaW1wb3J0IHsgbWFwVG9DdXJ2ZVNpbXBsZVNXVSB9IGZyb20gJy4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanMnO1xuY29uc3Qgc2VjcDI1NmsxUCA9IEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmYzJmJyk7XG5jb25zdCBzZWNwMjU2azFOID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZlYmFhZWRjZTZhZjQ4YTAzYmJmZDI1ZThjZDAzNjQxNDEnKTtcbmNvbnN0IF8xbiA9IEJpZ0ludCgxKTtcbmNvbnN0IF8ybiA9IEJpZ0ludCgyKTtcbmNvbnN0IGRpdk5lYXJlc3QgPSAoYSwgYikgPT4gKGEgKyBiIC8gXzJuKSAvIGI7XG4vKipcbiAqIOKImm4gPSBuXigocCsxKS80KSBmb3IgZmllbGRzIHAgPSAzIG1vZCA0LiBXZSB1bndyYXAgdGhlIGxvb3AgYW5kIG11bHRpcGx5IGJpdC1ieS1iaXQuXG4gKiAoUCsxbi80bikudG9TdHJpbmcoMikgd291bGQgcHJvZHVjZSBiaXRzIFsyMjN4IDEsIDAsIDIyeCAxLCA0eCAwLCAxMSwgMDBdXG4gKi9cbmZ1bmN0aW9uIHNxcnRNb2QoeSkge1xuICAgIGNvbnN0IFAgPSBzZWNwMjU2azFQO1xuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIGNvbnN0IF8zbiA9IEJpZ0ludCgzKSwgXzZuID0gQmlnSW50KDYpLCBfMTFuID0gQmlnSW50KDExKSwgXzIybiA9IEJpZ0ludCgyMik7XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgY29uc3QgXzIzbiA9IEJpZ0ludCgyMyksIF80NG4gPSBCaWdJbnQoNDQpLCBfODhuID0gQmlnSW50KDg4KTtcbiAgICBjb25zdCBiMiA9ICh5ICogeSAqIHkpICUgUDsgLy8geF4zLCAxMVxuICAgIGNvbnN0IGIzID0gKGIyICogYjIgKiB5KSAlIFA7IC8vIHheN1xuICAgIGNvbnN0IGI2ID0gKHBvdzIoYjMsIF8zbiwgUCkgKiBiMykgJSBQO1xuICAgIGNvbnN0IGI5ID0gKHBvdzIoYjYsIF8zbiwgUCkgKiBiMykgJSBQO1xuICAgIGNvbnN0IGIxMSA9IChwb3cyKGI5LCBfMm4sIFApICogYjIpICUgUDtcbiAgICBjb25zdCBiMjIgPSAocG93MihiMTEsIF8xMW4sIFApICogYjExKSAlIFA7XG4gICAgY29uc3QgYjQ0ID0gKHBvdzIoYjIyLCBfMjJuLCBQKSAqIGIyMikgJSBQO1xuICAgIGNvbnN0IGI4OCA9IChwb3cyKGI0NCwgXzQ0biwgUCkgKiBiNDQpICUgUDtcbiAgICBjb25zdCBiMTc2ID0gKHBvdzIoYjg4LCBfODhuLCBQKSAqIGI4OCkgJSBQO1xuICAgIGNvbnN0IGIyMjAgPSAocG93MihiMTc2LCBfNDRuLCBQKSAqIGI0NCkgJSBQO1xuICAgIGNvbnN0IGIyMjMgPSAocG93MihiMjIwLCBfM24sIFApICogYjMpICUgUDtcbiAgICBjb25zdCB0MSA9IChwb3cyKGIyMjMsIF8yM24sIFApICogYjIyKSAlIFA7XG4gICAgY29uc3QgdDIgPSAocG93Mih0MSwgXzZuLCBQKSAqIGIyKSAlIFA7XG4gICAgY29uc3Qgcm9vdCA9IHBvdzIodDIsIF8ybiwgUCk7XG4gICAgaWYgKCFGcGsxLmVxbChGcGsxLnNxcihyb290KSwgeSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgc3F1YXJlIHJvb3QnKTtcbiAgICByZXR1cm4gcm9vdDtcbn1cbmNvbnN0IEZwazEgPSBGaWVsZChzZWNwMjU2azFQLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgeyBzcXJ0OiBzcXJ0TW9kIH0pO1xuLyoqXG4gKiBzZWNwMjU2azEgc2hvcnQgd2VpZXJzdHJhc3MgY3VydmUgYW5kIEVDRFNBIHNpZ25hdHVyZXMgb3ZlciBpdC5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgc2VjcDI1NmsxIH0gZnJvbSAnQG5vYmxlL2N1cnZlcy9zZWNwMjU2azEnO1xuICpcbiAqIGNvbnN0IHByaXYgPSBzZWNwMjU2azEudXRpbHMucmFuZG9tUHJpdmF0ZUtleSgpO1xuICogY29uc3QgcHViID0gc2VjcDI1NmsxLmdldFB1YmxpY0tleShwcml2KTtcbiAqIGNvbnN0IG1zZyA9IG5ldyBVaW50OEFycmF5KDMyKS5maWxsKDEpOyAvLyBtZXNzYWdlIGhhc2ggKG5vdCBtZXNzYWdlKSBpbiBlY2RzYVxuICogY29uc3Qgc2lnID0gc2VjcDI1NmsxLnNpZ24obXNnLCBwcml2KTsgLy8gYHtwcmVoYXNoOiB0cnVlfWAgb3B0aW9uIGlzIGF2YWlsYWJsZVxuICogY29uc3QgaXNWYWxpZCA9IHNlY3AyNTZrMS52ZXJpZnkoc2lnLCBtc2csIHB1YikgPT09IHRydWU7XG4gKi9cbmV4cG9ydCBjb25zdCBzZWNwMjU2azEgPSBjcmVhdGVDdXJ2ZSh7XG4gICAgYTogQmlnSW50KDApLCAvLyBlcXVhdGlvbiBwYXJhbXM6IGEsIGJcbiAgICBiOiBCaWdJbnQoNyksXG4gICAgRnA6IEZwazEsIC8vIEZpZWxkJ3MgcHJpbWU6IDJuKioyNTZuIC0gMm4qKjMybiAtIDJuKio5biAtIDJuKio4biAtIDJuKio3biAtIDJuKio2biAtIDJuKio0biAtIDFuXG4gICAgbjogc2VjcDI1NmsxTiwgLy8gQ3VydmUgb3JkZXIsIHRvdGFsIGNvdW50IG9mIHZhbGlkIHBvaW50cyBpbiB0aGUgZmllbGRcbiAgICAvLyBCYXNlIHBvaW50ICh4LCB5KSBha2EgZ2VuZXJhdG9yIHBvaW50XG4gICAgR3g6IEJpZ0ludCgnNTUwNjYyNjMwMjIyNzczNDM2Njk1Nzg3MTg4OTUxNjg1MzQzMjYyNTA2MDM0NTM3Nzc1OTQxNzU1MDAxODczNjAzODkxMTY3MjkyNDAnKSxcbiAgICBHeTogQmlnSW50KCczMjY3MDUxMDAyMDc1ODgxNjk3ODA4MzA4NTEzMDUwNzA0MzE4NDQ3MTI3MzM4MDY1OTI0MzI3NTkzODkwNDMzNTc1NzMzNzQ4MjQyNCcpLFxuICAgIGg6IEJpZ0ludCgxKSwgLy8gQ29mYWN0b3JcbiAgICBsb3dTOiB0cnVlLCAvLyBBbGxvdyBvbmx5IGxvdy1TIHNpZ25hdHVyZXMgYnkgZGVmYXVsdCBpbiBzaWduKCkgYW5kIHZlcmlmeSgpXG4gICAgZW5kbzoge1xuICAgICAgICAvLyBFbmRvbW9ycGhpc20sIHNlZSBhYm92ZVxuICAgICAgICBiZXRhOiBCaWdJbnQoJzB4N2FlOTZhMmI2NTdjMDcxMDZlNjQ0NzllYWMzNDM0ZTk5Y2YwNDk3NTEyZjU4OTk1YzEzOTZjMjg3MTk1MDFlZScpLFxuICAgICAgICBzcGxpdFNjYWxhcjogKGspID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBzZWNwMjU2azFOO1xuICAgICAgICAgICAgY29uc3QgYTEgPSBCaWdJbnQoJzB4MzA4NmQyMjFhN2Q0NmJjZGU4NmM5MGU0OTI4NGViMTUnKTtcbiAgICAgICAgICAgIGNvbnN0IGIxID0gLV8xbiAqIEJpZ0ludCgnMHhlNDQzN2VkNjAxMGU4ODI4NmY1NDdmYTkwYWJmZTRjMycpO1xuICAgICAgICAgICAgY29uc3QgYTIgPSBCaWdJbnQoJzB4MTE0Y2E1MGY3YThlMmYzZjY1N2MxMTA4ZDlkNDRjZmQ4Jyk7XG4gICAgICAgICAgICBjb25zdCBiMiA9IGExO1xuICAgICAgICAgICAgY29uc3QgUE9XXzJfMTI4ID0gQmlnSW50KCcweDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpOyAvLyAoMm4qKjEyOG4pLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgY29uc3QgYzEgPSBkaXZOZWFyZXN0KGIyICogaywgbik7XG4gICAgICAgICAgICBjb25zdCBjMiA9IGRpdk5lYXJlc3QoLWIxICogaywgbik7XG4gICAgICAgICAgICBsZXQgazEgPSBtb2QoayAtIGMxICogYTEgLSBjMiAqIGEyLCBuKTtcbiAgICAgICAgICAgIGxldCBrMiA9IG1vZCgtYzEgKiBiMSAtIGMyICogYjIsIG4pO1xuICAgICAgICAgICAgY29uc3QgazFuZWcgPSBrMSA+IFBPV18yXzEyODtcbiAgICAgICAgICAgIGNvbnN0IGsybmVnID0gazIgPiBQT1dfMl8xMjg7XG4gICAgICAgICAgICBpZiAoazFuZWcpXG4gICAgICAgICAgICAgICAgazEgPSBuIC0gazE7XG4gICAgICAgICAgICBpZiAoazJuZWcpXG4gICAgICAgICAgICAgICAgazIgPSBuIC0gazI7XG4gICAgICAgICAgICBpZiAoazEgPiBQT1dfMl8xMjggfHwgazIgPiBQT1dfMl8xMjgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NwbGl0U2NhbGFyOiBFbmRvbW9ycGhpc20gZmFpbGVkLCBrPScgKyBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGsxbmVnLCBrMSwgazJuZWcsIGsyIH07XG4gICAgICAgIH0sXG4gICAgfSxcbn0sIHNoYTI1Nik7XG4vLyBTY2hub3JyIHNpZ25hdHVyZXMgYXJlIHN1cGVyaW9yIHRvIEVDRFNBIGZyb20gYWJvdmUuIEJlbG93IGlzIFNjaG5vcnItc3BlY2lmaWMgQklQMDM0MCBjb2RlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW4vYmlwcy9ibG9iL21hc3Rlci9iaXAtMDM0MC5tZWRpYXdpa2lcbmNvbnN0IF8wbiA9IEJpZ0ludCgwKTtcbi8qKiBBbiBvYmplY3QgbWFwcGluZyB0YWdzIHRvIHRoZWlyIHRhZ2dlZCBoYXNoIHByZWZpeCBvZiBbU0hBMjU2KHRhZykgfCBTSEEyNTYodGFnKV0gKi9cbmNvbnN0IFRBR0dFRF9IQVNIX1BSRUZJWEVTID0ge307XG5mdW5jdGlvbiB0YWdnZWRIYXNoKHRhZywgLi4ubWVzc2FnZXMpIHtcbiAgICBsZXQgdGFnUCA9IFRBR0dFRF9IQVNIX1BSRUZJWEVTW3RhZ107XG4gICAgaWYgKHRhZ1AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB0YWdIID0gc2hhMjU2KFVpbnQ4QXJyYXkuZnJvbSh0YWcsIChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcbiAgICAgICAgdGFnUCA9IGNvbmNhdEJ5dGVzKHRhZ0gsIHRhZ0gpO1xuICAgICAgICBUQUdHRURfSEFTSF9QUkVGSVhFU1t0YWddID0gdGFnUDtcbiAgICB9XG4gICAgcmV0dXJuIHNoYTI1Nihjb25jYXRCeXRlcyh0YWdQLCAuLi5tZXNzYWdlcykpO1xufVxuLy8gRUNEU0EgY29tcGFjdCBwb2ludHMgYXJlIDMzLWJ5dGUuIFNjaG5vcnIgaXMgMzI6IHdlIHN0cmlwIGZpcnN0IGJ5dGUgMHgwMiBvciAweDAzXG5jb25zdCBwb2ludFRvQnl0ZXMgPSAocG9pbnQpID0+IHBvaW50LnRvUmF3Qnl0ZXModHJ1ZSkuc2xpY2UoMSk7XG5jb25zdCBudW1UbzMyYiA9IChuKSA9PiBudW1iZXJUb0J5dGVzQkUobiwgMzIpO1xuY29uc3QgbW9kUCA9ICh4KSA9PiBtb2QoeCwgc2VjcDI1NmsxUCk7XG5jb25zdCBtb2ROID0gKHgpID0+IG1vZCh4LCBzZWNwMjU2azFOKTtcbmNvbnN0IFBvaW50ID0gc2VjcDI1NmsxLlByb2plY3RpdmVQb2ludDtcbmNvbnN0IEdtdWxBZGQgPSAoUSwgYSwgYikgPT4gUG9pbnQuQkFTRS5tdWx0aXBseUFuZEFkZFVuc2FmZShRLCBhLCBiKTtcbi8vIENhbGN1bGF0ZSBwb2ludCwgc2NhbGFyIGFuZCBieXRlc1xuZnVuY3Rpb24gc2Nobm9yckdldEV4dFB1YktleShwcml2KSB7XG4gICAgbGV0IGRfID0gc2VjcDI1NmsxLnV0aWxzLm5vcm1Qcml2YXRlS2V5VG9TY2FsYXIocHJpdik7IC8vIHNhbWUgbWV0aG9kIGV4ZWN1dGVkIGluIGZyb21Qcml2YXRlS2V5XG4gICAgbGV0IHAgPSBQb2ludC5mcm9tUHJpdmF0ZUtleShkXyk7IC8vIFAgPSBkJ+KLhUc7IDAgPCBkJyA8IG4gY2hlY2sgaXMgZG9uZSBpbnNpZGVcbiAgICBjb25zdCBzY2FsYXIgPSBwLmhhc0V2ZW5ZKCkgPyBkXyA6IG1vZE4oLWRfKTtcbiAgICByZXR1cm4geyBzY2FsYXI6IHNjYWxhciwgYnl0ZXM6IHBvaW50VG9CeXRlcyhwKSB9O1xufVxuLyoqXG4gKiBsaWZ0X3ggZnJvbSBCSVAzNDAuIENvbnZlcnQgMzItYnl0ZSB4IGNvb3JkaW5hdGUgdG8gZWxsaXB0aWMgY3VydmUgcG9pbnQuXG4gKiBAcmV0dXJucyB2YWxpZCBwb2ludCBjaGVja2VkIGZvciBiZWluZyBvbi1jdXJ2ZVxuICovXG5mdW5jdGlvbiBsaWZ0X3goeCkge1xuICAgIGFJblJhbmdlKCd4JywgeCwgXzFuLCBzZWNwMjU2azFQKTsgLy8gRmFpbCBpZiB4IOKJpSBwLlxuICAgIGNvbnN0IHh4ID0gbW9kUCh4ICogeCk7XG4gICAgY29uc3QgYyA9IG1vZFAoeHggKiB4ICsgQmlnSW50KDcpKTsgLy8gTGV0IGMgPSB4wrMgKyA3IG1vZCBwLlxuICAgIGxldCB5ID0gc3FydE1vZChjKTsgLy8gTGV0IHkgPSBjXihwKzEpLzQgbW9kIHAuXG4gICAgaWYgKHkgJSBfMm4gIT09IF8wbilcbiAgICAgICAgeSA9IG1vZFAoLXkpOyAvLyBSZXR1cm4gdGhlIHVuaXF1ZSBwb2ludCBQIHN1Y2ggdGhhdCB4KFApID0geCBhbmRcbiAgICBjb25zdCBwID0gbmV3IFBvaW50KHgsIHksIF8xbik7IC8vIHkoUCkgPSB5IGlmIHkgbW9kIDIgPSAwIG9yIHkoUCkgPSBwLXkgb3RoZXJ3aXNlLlxuICAgIHAuYXNzZXJ0VmFsaWRpdHkoKTtcbiAgICByZXR1cm4gcDtcbn1cbmNvbnN0IG51bSA9IGJ5dGVzVG9OdW1iZXJCRTtcbi8qKlxuICogQ3JlYXRlIHRhZ2dlZCBoYXNoLCBjb252ZXJ0IGl0IHRvIGJpZ2ludCwgcmVkdWNlIG1vZHVsby1uLlxuICovXG5mdW5jdGlvbiBjaGFsbGVuZ2UoLi4uYXJncykge1xuICAgIHJldHVybiBtb2ROKG51bSh0YWdnZWRIYXNoKCdCSVAwMzQwL2NoYWxsZW5nZScsIC4uLmFyZ3MpKSk7XG59XG4vKipcbiAqIFNjaG5vcnIgcHVibGljIGtleSBpcyBqdXN0IGB4YCBjb29yZGluYXRlIG9mIFBvaW50IGFzIHBlciBCSVAzNDAuXG4gKi9cbmZ1bmN0aW9uIHNjaG5vcnJHZXRQdWJsaWNLZXkocHJpdmF0ZUtleSkge1xuICAgIHJldHVybiBzY2hub3JyR2V0RXh0UHViS2V5KHByaXZhdGVLZXkpLmJ5dGVzOyAvLyBkJz1pbnQoc2spLiBGYWlsIGlmIGQnPTAgb3IgZCfiiaVuLiBSZXQgYnl0ZXMoZCfii4VHKVxufVxuLyoqXG4gKiBDcmVhdGVzIFNjaG5vcnIgc2lnbmF0dXJlIGFzIHBlciBCSVAzNDAuIFZlcmlmaWVzIGl0c2VsZiBiZWZvcmUgcmV0dXJuaW5nIGFueXRoaW5nLlxuICogYXV4UmFuZCBpcyBvcHRpb25hbCBhbmQgaXMgbm90IHRoZSBzb2xlIHNvdXJjZSBvZiBrIGdlbmVyYXRpb246IGJhZCBDU1BSTkcgd29uJ3QgYmUgZGFuZ2Vyb3VzLlxuICovXG5mdW5jdGlvbiBzY2hub3JyU2lnbihtZXNzYWdlLCBwcml2YXRlS2V5LCBhdXhSYW5kID0gcmFuZG9tQnl0ZXMoMzIpKSB7XG4gICAgY29uc3QgbSA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgY29uc3QgeyBieXRlczogcHgsIHNjYWxhcjogZCB9ID0gc2Nobm9yckdldEV4dFB1YktleShwcml2YXRlS2V5KTsgLy8gY2hlY2tzIGZvciBpc1dpdGhpbkN1cnZlT3JkZXJcbiAgICBjb25zdCBhID0gZW5zdXJlQnl0ZXMoJ2F1eFJhbmQnLCBhdXhSYW5kLCAzMik7IC8vIEF1eGlsaWFyeSByYW5kb20gZGF0YSBhOiBhIDMyLWJ5dGUgYXJyYXlcbiAgICBjb25zdCB0ID0gbnVtVG8zMmIoZCBeIG51bSh0YWdnZWRIYXNoKCdCSVAwMzQwL2F1eCcsIGEpKSk7IC8vIExldCB0IGJlIHRoZSBieXRlLXdpc2UgeG9yIG9mIGJ5dGVzKGQpIGFuZCBoYXNoL2F1eChhKVxuICAgIGNvbnN0IHJhbmQgPSB0YWdnZWRIYXNoKCdCSVAwMzQwL25vbmNlJywgdCwgcHgsIG0pOyAvLyBMZXQgcmFuZCA9IGhhc2gvbm9uY2UodCB8fCBieXRlcyhQKSB8fCBtKVxuICAgIGNvbnN0IGtfID0gbW9kTihudW0ocmFuZCkpOyAvLyBMZXQgaycgPSBpbnQocmFuZCkgbW9kIG5cbiAgICBpZiAoa18gPT09IF8wbilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduIGZhaWxlZDogayBpcyB6ZXJvJyk7IC8vIEZhaWwgaWYgaycgPSAwLlxuICAgIGNvbnN0IHsgYnl0ZXM6IHJ4LCBzY2FsYXI6IGsgfSA9IHNjaG5vcnJHZXRFeHRQdWJLZXkoa18pOyAvLyBMZXQgUiA9IGsn4ouFRy5cbiAgICBjb25zdCBlID0gY2hhbGxlbmdlKHJ4LCBweCwgbSk7IC8vIExldCBlID0gaW50KGhhc2gvY2hhbGxlbmdlKGJ5dGVzKFIpIHx8IGJ5dGVzKFApIHx8IG0pKSBtb2Qgbi5cbiAgICBjb25zdCBzaWcgPSBuZXcgVWludDhBcnJheSg2NCk7IC8vIExldCBzaWcgPSBieXRlcyhSKSB8fCBieXRlcygoayArIGVkKSBtb2QgbikuXG4gICAgc2lnLnNldChyeCwgMCk7XG4gICAgc2lnLnNldChudW1UbzMyYihtb2ROKGsgKyBlICogZCkpLCAzMik7XG4gICAgLy8gSWYgVmVyaWZ5KGJ5dGVzKFApLCBtLCBzaWcpIChzZWUgYmVsb3cpIHJldHVybnMgZmFpbHVyZSwgYWJvcnRcbiAgICBpZiAoIXNjaG5vcnJWZXJpZnkoc2lnLCBtLCBweCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbjogSW52YWxpZCBzaWduYXR1cmUgcHJvZHVjZWQnKTtcbiAgICByZXR1cm4gc2lnO1xufVxuLyoqXG4gKiBWZXJpZmllcyBTY2hub3JyIHNpZ25hdHVyZS5cbiAqIFdpbGwgc3dhbGxvdyBlcnJvcnMgJiByZXR1cm4gZmFsc2UgZXhjZXB0IGZvciBpbml0aWFsIHR5cGUgdmFsaWRhdGlvbiBvZiBhcmd1bWVudHMuXG4gKi9cbmZ1bmN0aW9uIHNjaG5vcnJWZXJpZnkoc2lnbmF0dXJlLCBtZXNzYWdlLCBwdWJsaWNLZXkpIHtcbiAgICBjb25zdCBzaWcgPSBlbnN1cmVCeXRlcygnc2lnbmF0dXJlJywgc2lnbmF0dXJlLCA2NCk7XG4gICAgY29uc3QgbSA9IGVuc3VyZUJ5dGVzKCdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgY29uc3QgcHViID0gZW5zdXJlQnl0ZXMoJ3B1YmxpY0tleScsIHB1YmxpY0tleSwgMzIpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFAgPSBsaWZ0X3gobnVtKHB1YikpOyAvLyBQID0gbGlmdF94KGludChwaykpOyBmYWlsIGlmIHRoYXQgZmFpbHNcbiAgICAgICAgY29uc3QgciA9IG51bShzaWcuc3ViYXJyYXkoMCwgMzIpKTsgLy8gTGV0IHIgPSBpbnQoc2lnWzA6MzJdKTsgZmFpbCBpZiByIOKJpSBwLlxuICAgICAgICBpZiAoIWluUmFuZ2UociwgXzFuLCBzZWNwMjU2azFQKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgcyA9IG51bShzaWcuc3ViYXJyYXkoMzIsIDY0KSk7IC8vIExldCBzID0gaW50KHNpZ1szMjo2NF0pOyBmYWlsIGlmIHMg4omlIG4uXG4gICAgICAgIGlmICghaW5SYW5nZShzLCBfMW4sIHNlY3AyNTZrMU4pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBlID0gY2hhbGxlbmdlKG51bVRvMzJiKHIpLCBwb2ludFRvQnl0ZXMoUCksIG0pOyAvLyBpbnQoY2hhbGxlbmdlKGJ5dGVzKHIpfHxieXRlcyhQKXx8bSkpJW5cbiAgICAgICAgY29uc3QgUiA9IEdtdWxBZGQoUCwgcywgbW9kTigtZSkpOyAvLyBSID0gc+KLhUcgLSBl4ouFUFxuICAgICAgICBpZiAoIVIgfHwgIVIuaGFzRXZlblkoKSB8fCBSLnRvQWZmaW5lKCkueCAhPT0gcilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gLWVQID09IChuLWUpUFxuICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gRmFpbCBpZiBpc19pbmZpbml0ZShSKSAvIG5vdCBoYXNfZXZlbl95KFIpIC8geChSKSDiiaAgci5cbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG4vKipcbiAqIFNjaG5vcnIgc2lnbmF0dXJlcyBvdmVyIHNlY3AyNTZrMS5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRjb2luL2JpcHMvYmxvYi9tYXN0ZXIvYmlwLTAzNDAubWVkaWF3aWtpXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHsgc2Nobm9yciB9IGZyb20gJ0Bub2JsZS9jdXJ2ZXMvc2VjcDI1NmsxJztcbiAqIGNvbnN0IHByaXYgPSBzY2hub3JyLnV0aWxzLnJhbmRvbVByaXZhdGVLZXkoKTtcbiAqIGNvbnN0IHB1YiA9IHNjaG5vcnIuZ2V0UHVibGljS2V5KHByaXYpO1xuICogY29uc3QgbXNnID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKCdoZWxsbycpO1xuICogY29uc3Qgc2lnID0gc2Nobm9yci5zaWduKG1zZywgcHJpdik7XG4gKiBjb25zdCBpc1ZhbGlkID0gc2Nobm9yci52ZXJpZnkoc2lnLCBtc2csIHB1Yik7XG4gKi9cbmV4cG9ydCBjb25zdCBzY2hub3JyID0gLyogQF9fUFVSRV9fICovICgoKSA9PiAoe1xuICAgIGdldFB1YmxpY0tleTogc2Nobm9yckdldFB1YmxpY0tleSxcbiAgICBzaWduOiBzY2hub3JyU2lnbixcbiAgICB2ZXJpZnk6IHNjaG5vcnJWZXJpZnksXG4gICAgdXRpbHM6IHtcbiAgICAgICAgcmFuZG9tUHJpdmF0ZUtleTogc2VjcDI1NmsxLnV0aWxzLnJhbmRvbVByaXZhdGVLZXksXG4gICAgICAgIGxpZnRfeCxcbiAgICAgICAgcG9pbnRUb0J5dGVzLFxuICAgICAgICBudW1iZXJUb0J5dGVzQkUsXG4gICAgICAgIGJ5dGVzVG9OdW1iZXJCRSxcbiAgICAgICAgdGFnZ2VkSGFzaCxcbiAgICAgICAgbW9kLFxuICAgIH0sXG59KSkoKTtcbmNvbnN0IGlzb01hcCA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gaXNvZ2VueU1hcChGcGsxLCBbXG4gICAgLy8geE51bVxuICAgIFtcbiAgICAgICAgJzB4OGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGUzOGRhYWFhYThjNycsXG4gICAgICAgICcweDdkM2Q0YzgwYmMzMjFkNWI5ZjMxNWNlYTdmZDQ0YzVkNTk1ZDJmYzBiZjYzYjkyZGZmZjEwNDRmMTdjNjU4MScsXG4gICAgICAgICcweDUzNGMzMjhkMjNmMjM0ZTZlMmE0MTNkZWNhMjVjYWVjZTQ1MDYxNDQwMzdjNDAzMTRlY2JkMGI1M2Q5ZGQyNjInLFxuICAgICAgICAnMHg4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZTM4ZGFhYWFhODhjJyxcbiAgICBdLFxuICAgIC8vIHhEZW5cbiAgICBbXG4gICAgICAgICcweGQzNTc3MTE5M2Q5NDkxOGE5Y2EzNGNjYmI3YjY0MGRkODZjZDQwOTU0MmY4NDg3ZDlmZTZiNzQ1NzgxZWI0OWInLFxuICAgICAgICAnMHhlZGFkYzZmNjQzODNkYzFkZjdjNGIyZDUxYjU0MjI1NDA2ZDM2YjY0MWY1ZTQxYmJjNTJhNTY2MTJhOGM2ZDE0JyxcbiAgICAgICAgJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMScsIC8vIExBU1QgMVxuICAgIF0sXG4gICAgLy8geU51bVxuICAgIFtcbiAgICAgICAgJzB4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGJkYTEyZjY4NGI4ZTM4ZTIzYycsXG4gICAgICAgICcweGM3NWUwYzMyZDVjYjdjMGZhOWQwYTU0YjEyYTBhNmQ1NjQ3YWIwNDZkNjg2ZGE2ZmRmZmM5MGZjMjAxZDcxYTMnLFxuICAgICAgICAnMHgyOWE2MTk0NjkxZjkxYTczNzE1MjA5ZWY2NTEyZTU3NjcyMjgzMGEyMDFiZTIwMThhNzY1ZTg1YTllY2VlOTMxJyxcbiAgICAgICAgJzB4MmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmY2ODRiZGExMmYzOGUzOGQ4NCcsXG4gICAgXSxcbiAgICAvLyB5RGVuXG4gICAgW1xuICAgICAgICAnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWZmZmZmOTNiJyxcbiAgICAgICAgJzB4N2EwNjUzNGJiOGJkYjQ5ZmQ1ZTllNjYzMjcyMmMyOTg5NDY3YzFiZmM4ZThkOTc4ZGZiNDI1ZDI2ODVjMjU3MycsXG4gICAgICAgICcweDY0ODRhYTcxNjU0NWNhMmNmM2E3MGMzZmE4ZmUzMzdlMGEzZDIxMTYyZjBkNjI5OWE3YmY4MTkyYmZkMmE3NmYnLFxuICAgICAgICAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxJywgLy8gTEFTVCAxXG4gICAgXSxcbl0ubWFwKChpKSA9PiBpLm1hcCgoaikgPT4gQmlnSW50KGopKSkpKSgpO1xuY29uc3QgbWFwU1dVID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBtYXBUb0N1cnZlU2ltcGxlU1dVKEZwazEsIHtcbiAgICBBOiBCaWdJbnQoJzB4M2Y4NzMxYWJkZDY2MWFkY2EwOGE1NTU4ZjBmNWQyNzJlOTUzZDM2M2NiNmYwZTVkNDA1NDQ3YzAxYTQ0NDUzMycpLFxuICAgIEI6IEJpZ0ludCgnMTc3MScpLFxuICAgIFo6IEZwazEuY3JlYXRlKEJpZ0ludCgnLTExJykpLFxufSkpKCk7XG5jb25zdCBodGYgPSAvKiBAX19QVVJFX18gKi8gKCgpID0+IGNyZWF0ZUhhc2hlcihzZWNwMjU2azEuUHJvamVjdGl2ZVBvaW50LCAoc2NhbGFycykgPT4ge1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gbWFwU1dVKEZwazEuY3JlYXRlKHNjYWxhcnNbMF0pKTtcbiAgICByZXR1cm4gaXNvTWFwKHgsIHkpO1xufSwge1xuICAgIERTVDogJ3NlY3AyNTZrMV9YTUQ6U0hBLTI1Nl9TU1dVX1JPXycsXG4gICAgZW5jb2RlRFNUOiAnc2VjcDI1NmsxX1hNRDpTSEEtMjU2X1NTV1VfTlVfJyxcbiAgICBwOiBGcGsxLk9SREVSLFxuICAgIG06IDEsXG4gICAgazogMTI4LFxuICAgIGV4cGFuZDogJ3htZCcsXG4gICAgaGFzaDogc2hhMjU2LFxufSkpKCk7XG4vKiogc2VjcDI1NmsxIGhhc2gtdG8tY3VydmUgZnJvbSBbUkZDIDkzODBdKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwKS4gKi9cbmV4cG9ydCBjb25zdCBoYXNoVG9DdXJ2ZSA9IC8qIEBfX1BVUkVfXyAqLyAoKCkgPT4gaHRmLmhhc2hUb0N1cnZlKSgpO1xuLyoqIHNlY3AyNTZrMSBlbmNvZGUtdG8tY3VydmUgZnJvbSBbUkZDIDkzODBdKGh0dHBzOi8vd3d3LnJmYy1lZGl0b3Iub3JnL3JmYy9yZmM5MzgwKS4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVUb0N1cnZlID0gLyogQF9fUFVSRV9fICovICgoKSA9PiBodGYuZW5jb2RlVG9DdXJ2ZSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlY3AyNTZrMS5qcy5tYXAiXSwibmFtZXMiOlsic2hhMjU2IiwicmFuZG9tQnl0ZXMiLCJjcmVhdGVDdXJ2ZSIsImNyZWF0ZUhhc2hlciIsImlzb2dlbnlNYXAiLCJGaWVsZCIsIm1vZCIsInBvdzIiLCJhSW5SYW5nZSIsImJ5dGVzVG9OdW1iZXJCRSIsImNvbmNhdEJ5dGVzIiwiZW5zdXJlQnl0ZXMiLCJpblJhbmdlIiwibnVtYmVyVG9CeXRlc0JFIiwibWFwVG9DdXJ2ZVNpbXBsZVNXVSIsInNlY3AyNTZrMVAiLCJCaWdJbnQiLCJzZWNwMjU2azFOIiwiXzFuIiwiXzJuIiwiZGl2TmVhcmVzdCIsImEiLCJiIiwic3FydE1vZCIsInkiLCJQIiwiXzNuIiwiXzZuIiwiXzExbiIsIl8yMm4iLCJfMjNuIiwiXzQ0biIsIl84OG4iLCJiMiIsImIzIiwiYjYiLCJiOSIsImIxMSIsImIyMiIsImI0NCIsImI4OCIsImIxNzYiLCJiMjIwIiwiYjIyMyIsInQxIiwidDIiLCJyb290IiwiRnBrMSIsImVxbCIsInNxciIsIkVycm9yIiwidW5kZWZpbmVkIiwic3FydCIsInNlY3AyNTZrMSIsIkZwIiwibiIsIkd4IiwiR3kiLCJoIiwibG93UyIsImVuZG8iLCJiZXRhIiwic3BsaXRTY2FsYXIiLCJrIiwiYTEiLCJiMSIsImEyIiwiUE9XXzJfMTI4IiwiYzEiLCJjMiIsImsxIiwiazIiLCJrMW5lZyIsImsybmVnIiwiXzBuIiwiVEFHR0VEX0hBU0hfUFJFRklYRVMiLCJ0YWdnZWRIYXNoIiwidGFnIiwibWVzc2FnZXMiLCJ0YWdQIiwidGFnSCIsIlVpbnQ4QXJyYXkiLCJmcm9tIiwiYyIsImNoYXJDb2RlQXQiLCJwb2ludFRvQnl0ZXMiLCJwb2ludCIsInRvUmF3Qnl0ZXMiLCJzbGljZSIsIm51bVRvMzJiIiwibW9kUCIsIngiLCJtb2ROIiwiUG9pbnQiLCJQcm9qZWN0aXZlUG9pbnQiLCJHbXVsQWRkIiwiUSIsIkJBU0UiLCJtdWx0aXBseUFuZEFkZFVuc2FmZSIsInNjaG5vcnJHZXRFeHRQdWJLZXkiLCJwcml2IiwiZF8iLCJ1dGlscyIsIm5vcm1Qcml2YXRlS2V5VG9TY2FsYXIiLCJwIiwiZnJvbVByaXZhdGVLZXkiLCJzY2FsYXIiLCJoYXNFdmVuWSIsImJ5dGVzIiwibGlmdF94IiwieHgiLCJhc3NlcnRWYWxpZGl0eSIsIm51bSIsImNoYWxsZW5nZSIsImFyZ3MiLCJzY2hub3JyR2V0UHVibGljS2V5IiwicHJpdmF0ZUtleSIsInNjaG5vcnJTaWduIiwibWVzc2FnZSIsImF1eFJhbmQiLCJtIiwicHgiLCJkIiwidCIsInJhbmQiLCJrXyIsInJ4IiwiZSIsInNpZyIsInNldCIsInNjaG5vcnJWZXJpZnkiLCJzaWduYXR1cmUiLCJwdWJsaWNLZXkiLCJwdWIiLCJyIiwic3ViYXJyYXkiLCJzIiwiUiIsInRvQWZmaW5lIiwiZXJyb3IiLCJzY2hub3JyIiwiZ2V0UHVibGljS2V5Iiwic2lnbiIsInZlcmlmeSIsInJhbmRvbVByaXZhdGVLZXkiLCJpc29NYXAiLCJtYXAiLCJpIiwiaiIsIm1hcFNXVSIsIkEiLCJCIiwiWiIsImNyZWF0ZSIsImh0ZiIsInNjYWxhcnMiLCJEU1QiLCJlbmNvZGVEU1QiLCJPUkRFUiIsImV4cGFuZCIsImhhc2giLCJoYXNoVG9DdXJ2ZSIsImVuY29kZVRvQ3VydmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_assert.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_assert.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   aexists: () => (/* binding */ aexists),\n/* harmony export */   ahash: () => (/* binding */ ahash),\n/* harmony export */   anumber: () => (/* binding */ anumber),\n/* harmony export */   aoutput: () => (/* binding */ aoutput)\n/* harmony export */ });\n/**\n * Internal assertion helpers.\n * @module\n */ /** Asserts something is positive integer. */ function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error(\"positive integer expected, got \" + n);\n}\n/** Is number an Uint8Array? Copied from utils for perf. */ function isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\n}\n/** Asserts something is Uint8Array. */ function abytes(b, ...lengths) {\n    if (!isBytes(b)) throw new Error(\"Uint8Array expected\");\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(\"Uint8Array expected of length \" + lengths + \", got length=\" + b.length);\n}\n/** Asserts something is hash */ function ahash(h) {\n    if (typeof h !== \"function\" || typeof h.create !== \"function\") throw new Error(\"Hash should be wrapped by utils.wrapConstructor\");\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */ function aexists(instance, checkFinished = true) {\n    if (instance.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (checkFinished && instance.finished) throw new Error(\"Hash#digest() has already been called\");\n}\n/** Asserts output is properly-sized byte array */ function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(\"digestInto() expects output buffer of length at least \" + min);\n    }\n}\n //# sourceMappingURL=_assert.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19hc3NlcnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7O0NBR0MsR0FDRCwyQ0FBMkMsR0FDM0MsU0FBU0EsUUFBUUMsQ0FBQztJQUNkLElBQUksQ0FBQ0MsT0FBT0MsYUFBYSxDQUFDRixNQUFNQSxJQUFJLEdBQ2hDLE1BQU0sSUFBSUcsTUFBTSxvQ0FBb0NIO0FBQzVEO0FBQ0EseURBQXlELEdBQ3pELFNBQVNJLFFBQVFDLENBQUM7SUFDZCxPQUFPQSxhQUFhQyxjQUFlQyxZQUFZQyxNQUFNLENBQUNILE1BQU1BLEVBQUVJLFdBQVcsQ0FBQ0MsSUFBSSxLQUFLO0FBQ3ZGO0FBQ0EscUNBQXFDLEdBQ3JDLFNBQVNDLE9BQU9DLENBQUMsRUFBRSxHQUFHQyxPQUFPO0lBQ3pCLElBQUksQ0FBQ1QsUUFBUVEsSUFDVCxNQUFNLElBQUlULE1BQU07SUFDcEIsSUFBSVUsUUFBUUMsTUFBTSxHQUFHLEtBQUssQ0FBQ0QsUUFBUUUsUUFBUSxDQUFDSCxFQUFFRSxNQUFNLEdBQ2hELE1BQU0sSUFBSVgsTUFBTSxtQ0FBbUNVLFVBQVUsa0JBQWtCRCxFQUFFRSxNQUFNO0FBQy9GO0FBQ0EsOEJBQThCLEdBQzlCLFNBQVNFLE1BQU1DLENBQUM7SUFDWixJQUFJLE9BQU9BLE1BQU0sY0FBYyxPQUFPQSxFQUFFQyxNQUFNLEtBQUssWUFDL0MsTUFBTSxJQUFJZixNQUFNO0lBQ3BCSixRQUFRa0IsRUFBRUUsU0FBUztJQUNuQnBCLFFBQVFrQixFQUFFRyxRQUFRO0FBQ3RCO0FBQ0EsOERBQThELEdBQzlELFNBQVNDLFFBQVFDLFFBQVEsRUFBRUMsZ0JBQWdCLElBQUk7SUFDM0MsSUFBSUQsU0FBU0UsU0FBUyxFQUNsQixNQUFNLElBQUlyQixNQUFNO0lBQ3BCLElBQUlvQixpQkFBaUJELFNBQVNHLFFBQVEsRUFDbEMsTUFBTSxJQUFJdEIsTUFBTTtBQUN4QjtBQUNBLGdEQUFnRCxHQUNoRCxTQUFTdUIsUUFBUUMsR0FBRyxFQUFFTCxRQUFRO0lBQzFCWCxPQUFPZ0I7SUFDUCxNQUFNQyxNQUFNTixTQUFTSCxTQUFTO0lBQzlCLElBQUlRLElBQUliLE1BQU0sR0FBR2MsS0FBSztRQUNsQixNQUFNLElBQUl6QixNQUFNLDJEQUEyRHlCO0lBQy9FO0FBQ0o7QUFDb0QsQ0FDcEQsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL19hc3NlcnQuanM/NzQ4MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEludGVybmFsIGFzc2VydGlvbiBoZWxwZXJzLlxuICogQG1vZHVsZVxuICovXG4vKiogQXNzZXJ0cyBzb21ldGhpbmcgaXMgcG9zaXRpdmUgaW50ZWdlci4gKi9cbmZ1bmN0aW9uIGFudW1iZXIobikge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIobikgfHwgbiA8IDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigncG9zaXRpdmUgaW50ZWdlciBleHBlY3RlZCwgZ290ICcgKyBuKTtcbn1cbi8qKiBJcyBudW1iZXIgYW4gVWludDhBcnJheT8gQ29waWVkIGZyb20gdXRpbHMgZm9yIHBlcmYuICovXG5mdW5jdGlvbiBpc0J5dGVzKGEpIHtcbiAgICByZXR1cm4gYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgKEFycmF5QnVmZmVyLmlzVmlldyhhKSAmJiBhLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdVaW50OEFycmF5Jyk7XG59XG4vKiogQXNzZXJ0cyBzb21ldGhpbmcgaXMgVWludDhBcnJheS4gKi9cbmZ1bmN0aW9uIGFieXRlcyhiLCAuLi5sZW5ndGhzKSB7XG4gICAgaWYgKCFpc0J5dGVzKGIpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VpbnQ4QXJyYXkgZXhwZWN0ZWQnKTtcbiAgICBpZiAobGVuZ3Rocy5sZW5ndGggPiAwICYmICFsZW5ndGhzLmluY2x1ZGVzKGIubGVuZ3RoKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVaW50OEFycmF5IGV4cGVjdGVkIG9mIGxlbmd0aCAnICsgbGVuZ3RocyArICcsIGdvdCBsZW5ndGg9JyArIGIubGVuZ3RoKTtcbn1cbi8qKiBBc3NlcnRzIHNvbWV0aGluZyBpcyBoYXNoICovXG5mdW5jdGlvbiBhaGFzaChoKSB7XG4gICAgaWYgKHR5cGVvZiBoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBoLmNyZWF0ZSAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoIHNob3VsZCBiZSB3cmFwcGVkIGJ5IHV0aWxzLndyYXBDb25zdHJ1Y3RvcicpO1xuICAgIGFudW1iZXIoaC5vdXRwdXRMZW4pO1xuICAgIGFudW1iZXIoaC5ibG9ja0xlbik7XG59XG4vKiogQXNzZXJ0cyBhIGhhc2ggaW5zdGFuY2UgaGFzIG5vdCBiZWVuIGRlc3Ryb3llZCAvIGZpbmlzaGVkICovXG5mdW5jdGlvbiBhZXhpc3RzKGluc3RhbmNlLCBjaGVja0ZpbmlzaGVkID0gdHJ1ZSkge1xuICAgIGlmIChpbnN0YW5jZS5kZXN0cm95ZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSGFzaCBpbnN0YW5jZSBoYXMgYmVlbiBkZXN0cm95ZWQnKTtcbiAgICBpZiAoY2hlY2tGaW5pc2hlZCAmJiBpbnN0YW5jZS5maW5pc2hlZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdIYXNoI2RpZ2VzdCgpIGhhcyBhbHJlYWR5IGJlZW4gY2FsbGVkJyk7XG59XG4vKiogQXNzZXJ0cyBvdXRwdXQgaXMgcHJvcGVybHktc2l6ZWQgYnl0ZSBhcnJheSAqL1xuZnVuY3Rpb24gYW91dHB1dChvdXQsIGluc3RhbmNlKSB7XG4gICAgYWJ5dGVzKG91dCk7XG4gICAgY29uc3QgbWluID0gaW5zdGFuY2Uub3V0cHV0TGVuO1xuICAgIGlmIChvdXQubGVuZ3RoIDwgbWluKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZGlnZXN0SW50bygpIGV4cGVjdHMgb3V0cHV0IGJ1ZmZlciBvZiBsZW5ndGggYXQgbGVhc3QgJyArIG1pbik7XG4gICAgfVxufVxuZXhwb3J0IHsgYW51bWJlciwgYWJ5dGVzLCBhaGFzaCwgYWV4aXN0cywgYW91dHB1dCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X2Fzc2VydC5qcy5tYXAiXSwibmFtZXMiOlsiYW51bWJlciIsIm4iLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiRXJyb3IiLCJpc0J5dGVzIiwiYSIsIlVpbnQ4QXJyYXkiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImNvbnN0cnVjdG9yIiwibmFtZSIsImFieXRlcyIsImIiLCJsZW5ndGhzIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJhaGFzaCIsImgiLCJjcmVhdGUiLCJvdXRwdXRMZW4iLCJibG9ja0xlbiIsImFleGlzdHMiLCJpbnN0YW5jZSIsImNoZWNrRmluaXNoZWQiLCJkZXN0cm95ZWQiLCJmaW5pc2hlZCIsImFvdXRwdXQiLCJvdXQiLCJtaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_assert.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_md.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_md.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chi: () => (/* binding */ Chi),\n/* harmony export */   HashMD: () => (/* binding */ HashMD),\n/* harmony export */   Maj: () => (/* binding */ Maj),\n/* harmony export */   setBigUint64: () => (/* binding */ setBigUint64)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js\");\n/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */ \n\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */ function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === \"function\") return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number(value >> _32n & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */ function Chi(a, b, c) {\n    return a & b ^ ~a & c;\n}\n/** Majority function, true if any two inputs is true. */ function Maj(a, b, c) {\n    return a & b ^ a & c ^ b & c;\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */ class HashMD extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE){\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(this.buffer);\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.aexists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(data);\n                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.aexists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.aoutput)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 128;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for(let i = pos; i < blockLen; i++)buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen) to.buffer.set(buffer);\n        return to;\n    }\n} //# sourceMappingURL=_md.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_md.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_u64.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_u64.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   add3H: () => (/* binding */ add3H),\n/* harmony export */   add3L: () => (/* binding */ add3L),\n/* harmony export */   add4H: () => (/* binding */ add4H),\n/* harmony export */   add4L: () => (/* binding */ add4L),\n/* harmony export */   add5H: () => (/* binding */ add5H),\n/* harmony export */   add5L: () => (/* binding */ add5L),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fromBig: () => (/* binding */ fromBig),\n/* harmony export */   rotlBH: () => (/* binding */ rotlBH),\n/* harmony export */   rotlBL: () => (/* binding */ rotlBL),\n/* harmony export */   rotlSH: () => (/* binding */ rotlSH),\n/* harmony export */   rotlSL: () => (/* binding */ rotlSL),\n/* harmony export */   rotr32H: () => (/* binding */ rotr32H),\n/* harmony export */   rotr32L: () => (/* binding */ rotr32L),\n/* harmony export */   rotrBH: () => (/* binding */ rotrBH),\n/* harmony export */   rotrBL: () => (/* binding */ rotrBL),\n/* harmony export */   rotrSH: () => (/* binding */ rotrSH),\n/* harmony export */   rotrSL: () => (/* binding */ rotrSL),\n/* harmony export */   shrSH: () => (/* binding */ shrSH),\n/* harmony export */   shrSL: () => (/* binding */ shrSL),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   toBig: () => (/* binding */ toBig)\n/* harmony export */ });\n/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */ const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le) return {\n        h: Number(n & U32_MASK64),\n        l: Number(n >> _32n & U32_MASK64)\n    };\n    return {\n        h: Number(n >> _32n & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0\n    };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for(let i = 0; i < lst.length; i++){\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [\n            h,\n            l\n        ];\n    }\n    return [\n        Ah,\n        Al\n    ];\n}\nconst toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s)=>h >>> s;\nconst shrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s)=>h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s)=>h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l)=>l;\nconst rotr32L = (h, _l)=>h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s)=>h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s)=>l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return {\n        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n        l: l | 0\n    };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\n\n// prettier-ignore\nconst u64 = {\n    fromBig,\n    split,\n    toBig,\n    shrSH,\n    shrSL,\n    rotrSH,\n    rotrSL,\n    rotrBH,\n    rotrBL,\n    rotr32H,\n    rotr32L,\n    rotlSH,\n    rotlSL,\n    rotlBH,\n    rotlBL,\n    add,\n    add3L,\n    add3H,\n    add4L,\n    add4H,\n    add5H,\n    add5L\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (u64); //# sourceMappingURL=_u64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_u64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/cryptoNode.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/cryptoNode.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("var node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   crypto: () => (/* binding */ crypto)\n/* harmony export */ });\n/* harmony import */ var node_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:crypto */ \"node:crypto\");\n/**\n * Internal webcrypto alias.\n * We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n * Falls back to Node.js built-in crypto for Node.js <=v14.\n * See utils.ts for details.\n * @module\n */ // @ts-ignore\n\nconst crypto = /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === \"object\" && \"webcrypto\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? node_crypto__WEBPACK_IMPORTED_MODULE_0__.webcrypto : /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) && typeof /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) === \"object\" && \"randomBytes\" in /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) ? /*#__PURE__*/ (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache || (node_crypto__WEBPACK_IMPORTED_MODULE_0___namespace_cache = __webpack_require__.t(node_crypto__WEBPACK_IMPORTED_MODULE_0__, 2))) : undefined; //# sourceMappingURL=cryptoNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2NyeXB0b05vZGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7OztDQU1DLEdBQ0QsYUFBYTtBQUNxQjtBQUMzQixNQUFNQyxTQUFTRCwyTUFBRUEsSUFBSSxPQUFPQSwyTUFBRUEsS0FBSyxZQUFZLDBOQUFpQkEsR0FDakVBLGtEQUFZLEdBQ1pBLDJNQUFFQSxJQUFJLE9BQU9BLDJNQUFFQSxLQUFLLFlBQVksNE5BQW1CQSxHQUMvQ0EsMk1BQUVBLEdBQ0ZHLFVBQVUsQ0FDcEIsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2NyeXB0b05vZGUuanM/YjVmZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEludGVybmFsIHdlYmNyeXB0byBhbGlhcy5cbiAqIFdlIHByZWZlciBXZWJDcnlwdG8gYWthIGdsb2JhbFRoaXMuY3J5cHRvLCB3aGljaCBleGlzdHMgaW4gbm9kZS5qcyAxNisuXG4gKiBGYWxscyBiYWNrIHRvIE5vZGUuanMgYnVpbHQtaW4gY3J5cHRvIGZvciBOb2RlLmpzIDw9djE0LlxuICogU2VlIHV0aWxzLnRzIGZvciBkZXRhaWxzLlxuICogQG1vZHVsZVxuICovXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgKiBhcyBuYyBmcm9tICdub2RlOmNyeXB0byc7XG5leHBvcnQgY29uc3QgY3J5cHRvID0gbmMgJiYgdHlwZW9mIG5jID09PSAnb2JqZWN0JyAmJiAnd2ViY3J5cHRvJyBpbiBuY1xuICAgID8gbmMud2ViY3J5cHRvXG4gICAgOiBuYyAmJiB0eXBlb2YgbmMgPT09ICdvYmplY3QnICYmICdyYW5kb21CeXRlcycgaW4gbmNcbiAgICAgICAgPyBuY1xuICAgICAgICA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b05vZGUuanMubWFwIl0sIm5hbWVzIjpbIm5jIiwiY3J5cHRvIiwid2ViY3J5cHRvIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/hmac.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/hmac.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HMAC: () => (/* binding */ HMAC),\n/* harmony export */   hmac: () => (/* binding */ hmac)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js\");\n/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */ \n\nclass HMAC extends _utils_js__WEBPACK_IMPORTED_MODULE_0__.Hash {\n    constructor(hash, _key){\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.ahash)(hash);\n        const key = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== \"function\") throw new Error(\"Expected instance of class which extends utils.Hash\");\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.aexists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.aexists)(this);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_1__.abytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key)=>new HMAC(hash, key); //# sourceMappingURL=hmac.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvZXNtL2htYWMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7Q0FHQyxHQUNxRDtBQUNYO0FBQ3BDLE1BQU1LLGFBQWFGLDJDQUFJQTtJQUMxQkcsWUFBWUMsSUFBSSxFQUFFQyxJQUFJLENBQUU7UUFDcEIsS0FBSztRQUNMLElBQUksQ0FBQ0MsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0MsU0FBUyxHQUFHO1FBQ2pCUixpREFBS0EsQ0FBQ0s7UUFDTixNQUFNSSxNQUFNUCxrREFBT0EsQ0FBQ0k7UUFDcEIsSUFBSSxDQUFDSSxLQUFLLEdBQUdMLEtBQUtNLE1BQU07UUFDeEIsSUFBSSxPQUFPLElBQUksQ0FBQ0QsS0FBSyxDQUFDRSxNQUFNLEtBQUssWUFDN0IsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCLElBQUksQ0FBQ0MsUUFBUSxHQUFHLElBQUksQ0FBQ0osS0FBSyxDQUFDSSxRQUFRO1FBQ25DLElBQUksQ0FBQ0MsU0FBUyxHQUFHLElBQUksQ0FBQ0wsS0FBSyxDQUFDSyxTQUFTO1FBQ3JDLE1BQU1ELFdBQVcsSUFBSSxDQUFDQSxRQUFRO1FBQzlCLE1BQU1FLE1BQU0sSUFBSUMsV0FBV0g7UUFDM0Isd0NBQXdDO1FBQ3hDRSxJQUFJRSxHQUFHLENBQUNULElBQUlVLE1BQU0sR0FBR0wsV0FBV1QsS0FBS00sTUFBTSxHQUFHQyxNQUFNLENBQUNILEtBQUtXLE1BQU0sS0FBS1g7UUFDckUsSUFBSyxJQUFJWSxJQUFJLEdBQUdBLElBQUlMLElBQUlHLE1BQU0sRUFBRUUsSUFDNUJMLEdBQUcsQ0FBQ0ssRUFBRSxJQUFJO1FBQ2QsSUFBSSxDQUFDWCxLQUFLLENBQUNFLE1BQU0sQ0FBQ0k7UUFDbEIsbUhBQW1IO1FBQ25ILElBQUksQ0FBQ00sS0FBSyxHQUFHakIsS0FBS00sTUFBTTtRQUN4Qix1Q0FBdUM7UUFDdkMsSUFBSyxJQUFJVSxJQUFJLEdBQUdBLElBQUlMLElBQUlHLE1BQU0sRUFBRUUsSUFDNUJMLEdBQUcsQ0FBQ0ssRUFBRSxJQUFJLE9BQU87UUFDckIsSUFBSSxDQUFDQyxLQUFLLENBQUNWLE1BQU0sQ0FBQ0k7UUFDbEJBLElBQUlPLElBQUksQ0FBQztJQUNiO0lBQ0FYLE9BQU9ZLEdBQUcsRUFBRTtRQUNSekIsbURBQU9BLENBQUMsSUFBSTtRQUNaLElBQUksQ0FBQ1csS0FBSyxDQUFDRSxNQUFNLENBQUNZO1FBQ2xCLE9BQU8sSUFBSTtJQUNmO0lBQ0FDLFdBQVdDLEdBQUcsRUFBRTtRQUNaM0IsbURBQU9BLENBQUMsSUFBSTtRQUNaRCxrREFBTUEsQ0FBQzRCLEtBQUssSUFBSSxDQUFDWCxTQUFTO1FBQzFCLElBQUksQ0FBQ1IsUUFBUSxHQUFHO1FBQ2hCLElBQUksQ0FBQ0csS0FBSyxDQUFDZSxVQUFVLENBQUNDO1FBQ3RCLElBQUksQ0FBQ0osS0FBSyxDQUFDVixNQUFNLENBQUNjO1FBQ2xCLElBQUksQ0FBQ0osS0FBSyxDQUFDRyxVQUFVLENBQUNDO1FBQ3RCLElBQUksQ0FBQ0MsT0FBTztJQUNoQjtJQUNBUCxTQUFTO1FBQ0wsTUFBTU0sTUFBTSxJQUFJVCxXQUFXLElBQUksQ0FBQ0ssS0FBSyxDQUFDUCxTQUFTO1FBQy9DLElBQUksQ0FBQ1UsVUFBVSxDQUFDQztRQUNoQixPQUFPQTtJQUNYO0lBQ0FFLFdBQVdDLEVBQUUsRUFBRTtRQUNYLG1HQUFtRztRQUNuR0EsTUFBT0EsQ0FBQUEsS0FBS0MsT0FBT25CLE1BQU0sQ0FBQ21CLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFDO1FBQ3pELE1BQU0sRUFBRVQsS0FBSyxFQUFFWixLQUFLLEVBQUVILFFBQVEsRUFBRUMsU0FBUyxFQUFFTSxRQUFRLEVBQUVDLFNBQVMsRUFBRSxHQUFHLElBQUk7UUFDdkVjLEtBQUtBO1FBQ0xBLEdBQUd0QixRQUFRLEdBQUdBO1FBQ2RzQixHQUFHckIsU0FBUyxHQUFHQTtRQUNmcUIsR0FBR2YsUUFBUSxHQUFHQTtRQUNkZSxHQUFHZCxTQUFTLEdBQUdBO1FBQ2ZjLEdBQUdQLEtBQUssR0FBR0EsTUFBTU0sVUFBVSxDQUFDQyxHQUFHUCxLQUFLO1FBQ3BDTyxHQUFHbkIsS0FBSyxHQUFHQSxNQUFNa0IsVUFBVSxDQUFDQyxHQUFHbkIsS0FBSztRQUNwQyxPQUFPbUI7SUFDWDtJQUNBRixVQUFVO1FBQ04sSUFBSSxDQUFDbkIsU0FBUyxHQUFHO1FBQ2pCLElBQUksQ0FBQ2MsS0FBSyxDQUFDSyxPQUFPO1FBQ2xCLElBQUksQ0FBQ2pCLEtBQUssQ0FBQ2lCLE9BQU87SUFDdEI7QUFDSjtBQUNBOzs7Ozs7Ozs7Q0FTQyxHQUNNLE1BQU1LLE9BQU8sQ0FBQzNCLE1BQU1JLEtBQUt3QixVQUFZLElBQUk5QixLQUFLRSxNQUFNSSxLQUFLRyxNQUFNLENBQUNxQixTQUFTYixNQUFNLEdBQUc7QUFDekZZLEtBQUtyQixNQUFNLEdBQUcsQ0FBQ04sTUFBTUksTUFBUSxJQUFJTixLQUFLRSxNQUFNSSxNQUM1QyxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9lc20vaG1hYy5qcz81NTE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSE1BQzogUkZDMjEwNCBtZXNzYWdlIGF1dGhlbnRpY2F0aW9uIGNvZGUuXG4gKiBAbW9kdWxlXG4gKi9cbmltcG9ydCB7IGFieXRlcywgYWV4aXN0cywgYWhhc2ggfSBmcm9tICcuL19hc3NlcnQuanMnO1xuaW1wb3J0IHsgSGFzaCwgdG9CeXRlcyB9IGZyb20gJy4vdXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIEhNQUMgZXh0ZW5kcyBIYXNoIHtcbiAgICBjb25zdHJ1Y3RvcihoYXNoLCBfa2V5KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgYWhhc2goaGFzaCk7XG4gICAgICAgIGNvbnN0IGtleSA9IHRvQnl0ZXMoX2tleSk7XG4gICAgICAgIHRoaXMuaUhhc2ggPSBoYXNoLmNyZWF0ZSgpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuaUhhc2gudXBkYXRlICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBpbnN0YW5jZSBvZiBjbGFzcyB3aGljaCBleHRlbmRzIHV0aWxzLkhhc2gnKTtcbiAgICAgICAgdGhpcy5ibG9ja0xlbiA9IHRoaXMuaUhhc2guYmxvY2tMZW47XG4gICAgICAgIHRoaXMub3V0cHV0TGVuID0gdGhpcy5pSGFzaC5vdXRwdXRMZW47XG4gICAgICAgIGNvbnN0IGJsb2NrTGVuID0gdGhpcy5ibG9ja0xlbjtcbiAgICAgICAgY29uc3QgcGFkID0gbmV3IFVpbnQ4QXJyYXkoYmxvY2tMZW4pO1xuICAgICAgICAvLyBibG9ja0xlbiBjYW4gYmUgYmlnZ2VyIHRoYW4gb3V0cHV0TGVuXG4gICAgICAgIHBhZC5zZXQoa2V5Lmxlbmd0aCA+IGJsb2NrTGVuID8gaGFzaC5jcmVhdGUoKS51cGRhdGUoa2V5KS5kaWdlc3QoKSA6IGtleSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgcGFkW2ldIF49IDB4MzY7XG4gICAgICAgIHRoaXMuaUhhc2gudXBkYXRlKHBhZCk7XG4gICAgICAgIC8vIEJ5IGRvaW5nIHVwZGF0ZSAocHJvY2Vzc2luZyBvZiBmaXJzdCBibG9jaykgb2Ygb3V0ZXIgaGFzaCBoZXJlIHdlIGNhbiByZS11c2UgaXQgYmV0d2VlbiBtdWx0aXBsZSBjYWxscyB2aWEgY2xvbmVcbiAgICAgICAgdGhpcy5vSGFzaCA9IGhhc2guY3JlYXRlKCk7XG4gICAgICAgIC8vIFVuZG8gaW50ZXJuYWwgWE9SICYmIGFwcGx5IG91dGVyIFhPUlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHBhZFtpXSBePSAweDM2IF4gMHg1YztcbiAgICAgICAgdGhpcy5vSGFzaC51cGRhdGUocGFkKTtcbiAgICAgICAgcGFkLmZpbGwoMCk7XG4gICAgfVxuICAgIHVwZGF0ZShidWYpIHtcbiAgICAgICAgYWV4aXN0cyh0aGlzKTtcbiAgICAgICAgdGhpcy5pSGFzaC51cGRhdGUoYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRpZ2VzdEludG8ob3V0KSB7XG4gICAgICAgIGFleGlzdHModGhpcyk7XG4gICAgICAgIGFieXRlcyhvdXQsIHRoaXMub3V0cHV0TGVuKTtcbiAgICAgICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuaUhhc2guZGlnZXN0SW50byhvdXQpO1xuICAgICAgICB0aGlzLm9IYXNoLnVwZGF0ZShvdXQpO1xuICAgICAgICB0aGlzLm9IYXNoLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuICAgIGRpZ2VzdCgpIHtcbiAgICAgICAgY29uc3Qgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5vSGFzaC5vdXRwdXRMZW4pO1xuICAgICAgICB0aGlzLmRpZ2VzdEludG8ob3V0KTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgX2Nsb25lSW50byh0bykge1xuICAgICAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlIHdpdGhvdXQgY2FsbGluZyBjb25zdHJ1Y3RvciBzaW5jZSBrZXkgYWxyZWFkeSBpbiBzdGF0ZSBhbmQgd2UgZG9uJ3Qga25vdyBpdC5cbiAgICAgICAgdG8gfHwgKHRvID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksIHt9KSk7XG4gICAgICAgIGNvbnN0IHsgb0hhc2gsIGlIYXNoLCBmaW5pc2hlZCwgZGVzdHJveWVkLCBibG9ja0xlbiwgb3V0cHV0TGVuIH0gPSB0aGlzO1xuICAgICAgICB0byA9IHRvO1xuICAgICAgICB0by5maW5pc2hlZCA9IGZpbmlzaGVkO1xuICAgICAgICB0by5kZXN0cm95ZWQgPSBkZXN0cm95ZWQ7XG4gICAgICAgIHRvLmJsb2NrTGVuID0gYmxvY2tMZW47XG4gICAgICAgIHRvLm91dHB1dExlbiA9IG91dHB1dExlbjtcbiAgICAgICAgdG8ub0hhc2ggPSBvSGFzaC5fY2xvbmVJbnRvKHRvLm9IYXNoKTtcbiAgICAgICAgdG8uaUhhc2ggPSBpSGFzaC5fY2xvbmVJbnRvKHRvLmlIYXNoKTtcbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRoaXMub0hhc2guZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmlIYXNoLmRlc3Ryb3koKTtcbiAgICB9XG59XG4vKipcbiAqIEhNQUM6IFJGQzIxMDQgbWVzc2FnZSBhdXRoZW50aWNhdGlvbiBjb2RlLlxuICogQHBhcmFtIGhhc2ggLSBmdW5jdGlvbiB0aGF0IHdvdWxkIGJlIHVzZWQgZS5nLiBzaGEyNTZcbiAqIEBwYXJhbSBrZXkgLSBtZXNzYWdlIGtleVxuICogQHBhcmFtIG1lc3NhZ2UgLSBtZXNzYWdlIGRhdGFcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgeyBobWFjIH0gZnJvbSAnQG5vYmxlL2hhc2hlcy9obWFjJztcbiAqIGltcG9ydCB7IHNoYTI1NiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhMic7XG4gKiBjb25zdCBtYWMxID0gaG1hYyhzaGEyNTYsICdrZXknLCAnbWVzc2FnZScpO1xuICovXG5leHBvcnQgY29uc3QgaG1hYyA9IChoYXNoLCBrZXksIG1lc3NhZ2UpID0+IG5ldyBITUFDKGhhc2gsIGtleSkudXBkYXRlKG1lc3NhZ2UpLmRpZ2VzdCgpO1xuaG1hYy5jcmVhdGUgPSAoaGFzaCwga2V5KSA9PiBuZXcgSE1BQyhoYXNoLCBrZXkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG1hYy5qcy5tYXAiXSwibmFtZXMiOlsiYWJ5dGVzIiwiYWV4aXN0cyIsImFoYXNoIiwiSGFzaCIsInRvQnl0ZXMiLCJITUFDIiwiY29uc3RydWN0b3IiLCJoYXNoIiwiX2tleSIsImZpbmlzaGVkIiwiZGVzdHJveWVkIiwia2V5IiwiaUhhc2giLCJjcmVhdGUiLCJ1cGRhdGUiLCJFcnJvciIsImJsb2NrTGVuIiwib3V0cHV0TGVuIiwicGFkIiwiVWludDhBcnJheSIsInNldCIsImxlbmd0aCIsImRpZ2VzdCIsImkiLCJvSGFzaCIsImZpbGwiLCJidWYiLCJkaWdlc3RJbnRvIiwib3V0IiwiZGVzdHJveSIsIl9jbG9uZUludG8iLCJ0byIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaG1hYyIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/sha256.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/sha256.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SHA256: () => (/* binding */ SHA256),\n/* harmony export */   sha224: () => (/* binding */ sha224),\n/* harmony export */   sha256: () => (/* binding */ sha256)\n/* harmony export */ });\n/* harmony import */ var _md_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_md.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_md.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js\");\n/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */ \n\n/** Round constants: first 32 bits of fractional parts of the cube roots of the first 64 primes 2..311). */ // prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n]);\n/** Initial state: first 32 bits of fractional parts of the square roots of the first 8 primes 2..19. */ // prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n]);\n/**\n * Temporary buffer, not used to store anything between runs.\n * Named this way because it matches specification.\n */ const SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_js__WEBPACK_IMPORTED_MODULE_0__.HashMD {\n    constructor(){\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E,\n            F,\n            G,\n            H\n        ];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 64; i++){\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 7) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W15, 18) ^ W15 >>> 3;\n            const s1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 17) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(W2, 19) ^ W2 >>> 10;\n            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for(let i = 0; i < 64; i++){\n            const sigma1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 6) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 11) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(E, 25);\n            const T1 = H + sigma1 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n            const sigma0 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 2) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 13) ^ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.rotr)(A, 22);\n            const T2 = sigma0 + (0,_md_js__WEBPACK_IMPORTED_MODULE_0__.Maj)(A, B, C) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = D + T1 | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = T1 + T2 | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        F = F + this.F | 0;\n        G = G + this.G | 0;\n        H = H + this.H | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * Constants taken from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf.\n */ class SHA224 extends SHA256 {\n    constructor(){\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/** SHA2-256 hash function */ const sha256 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(()=>new SHA256());\n/** SHA2-224 hash function */ const sha224 = /* @__PURE__ */ (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(()=>new SHA224()); //# sourceMappingURL=sha256.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/sha3.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/sha3.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Keccak: () => (/* binding */ Keccak),\n/* harmony export */   keccakP: () => (/* binding */ keccakP),\n/* harmony export */   keccak_224: () => (/* binding */ keccak_224),\n/* harmony export */   keccak_256: () => (/* binding */ keccak_256),\n/* harmony export */   keccak_384: () => (/* binding */ keccak_384),\n/* harmony export */   keccak_512: () => (/* binding */ keccak_512),\n/* harmony export */   sha3_224: () => (/* binding */ sha3_224),\n/* harmony export */   sha3_256: () => (/* binding */ sha3_256),\n/* harmony export */   sha3_384: () => (/* binding */ sha3_384),\n/* harmony export */   sha3_512: () => (/* binding */ sha3_512),\n/* harmony export */   shake128: () => (/* binding */ shake128),\n/* harmony export */   shake256: () => (/* binding */ shake256)\n/* harmony export */ });\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_assert.js\");\n/* harmony import */ var _u64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_u64.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js\");\n/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */ \n\n\n// Various per round constants calculations\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){\n    // Pi\n    [x, y] = [\n        y,\n        (2 * x + 3 * y) % 5\n    ];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n    // Iota\n    let t = _0n;\n    for(let j = 0; j < 7; j++){\n        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n        if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s)=>s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBH)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSH)(h, l, s);\nconst rotlL = (h, l, s)=>s > 32 ? (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlBL)(h, l, s) : (0,_u64_js__WEBPACK_IMPORTED_MODULE_0__.rotlSL)(h, l, s);\n/** `keccakf1600` internal function, additionally allows to adjust round count. */ function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for(let round = 24 - rounds; round < 24; round++){\n        // Theta θ\n        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for(let x = 0; x < 10; x += 2){\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for(let y = 0; y < 50; y += 10){\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for(let t = 0; t < 24; t++){\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for(let y = 0; y < 50; y += 10){\n            for(let x = 0; x < 10; x++)B[x] = s[y + x];\n            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\n/** Keccak sponge function. */ class Keccak extends _utils_js__WEBPACK_IMPORTED_MODULE_1__.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.anumber)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error(\"Sha3 supports only keccak-f1600 function\");\n        this.state = new Uint8Array(200);\n        this.state32 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.u32)(this.state);\n    }\n    keccak() {\n        if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.byteSwap32)(this.state32);\n        keccakP(this.state32, this.rounds);\n        if (!_utils_js__WEBPACK_IMPORTED_MODULE_1__.isLE) (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.byteSwap32)(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.aexists)(this);\n        const { blockLen, state } = this;\n        data = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.toBytes)(data);\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen) this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.aexists)(this, false);\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.abytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for(let pos = 0, len = out.length; pos < len;){\n            if (this.posOut >= blockLen) this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF) throw new Error(\"XOF is not possible for this instance\");\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.anumber)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_2__.aoutput)(out, this);\n        if (this.finished) throw new Error(\"digest() was already called\");\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapConstructor)(()=>new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */ const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/** SHA3-256 hash function. Different from keccak-256. */ const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\n/** SHA3-384 hash function. */ const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\n/** SHA3-512 hash function. */ const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\n/** keccak-224 hash function. */ const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/** keccak-256 hash function. Different from SHA3-256. */ const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\n/** keccak-384 hash function. */ const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\n/** keccak-512 hash function. */ const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.wrapXOFConstructorWithOpts)((opts = {})=>new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n/** SHAKE128 XOF with 128-bit security. */ const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\n/** SHAKE256 XOF with 256-bit security. */ const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8); //# sourceMappingURL=sha3.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hash: () => (/* binding */ Hash),\n/* harmony export */   asyncLoop: () => (/* binding */ asyncLoop),\n/* harmony export */   byteSwap: () => (/* binding */ byteSwap),\n/* harmony export */   byteSwap32: () => (/* binding */ byteSwap32),\n/* harmony export */   byteSwapIfBE: () => (/* binding */ byteSwapIfBE),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   checkOpts: () => (/* binding */ checkOpts),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   createView: () => (/* binding */ createView),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isLE: () => (/* binding */ isLE),\n/* harmony export */   nextTick: () => (/* binding */ nextTick),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   rotl: () => (/* binding */ rotl),\n/* harmony export */   rotr: () => (/* binding */ rotr),\n/* harmony export */   toBytes: () => (/* binding */ toBytes),\n/* harmony export */   u32: () => (/* binding */ u32),\n/* harmony export */   u8: () => (/* binding */ u8),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   wrapConstructor: () => (/* binding */ wrapConstructor),\n/* harmony export */   wrapConstructorWithOpts: () => (/* binding */ wrapConstructorWithOpts),\n/* harmony export */   wrapXOFConstructorWithOpts: () => (/* binding */ wrapXOFConstructorWithOpts)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/cryptoNode.js\");\n/* harmony import */ var _assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_assert.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/_assert.js\");\n/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */ /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\n\n\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nfunction isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\n}\n// Cast array to different type\nfunction u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\nfunction u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n// Cast array to view\nfunction createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */ function rotr(word, shift) {\n    return word << 32 - shift | word >>> shift;\n}\n/** The rotate left (circular left shift) operation for uint32 */ function rotl(word, shift) {\n    return word << shift | word >>> 32 - shift >>> 0;\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */ const isLE = /* @__PURE__ */ (()=>new Uint8Array(new Uint32Array([\n        0x11223344\n    ]).buffer)[0] === 0x44)();\n// The byte swap operation for uint32\nfunction byteSwap(word) {\n    return word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;\n}\n/** Conditionally byte swap if on a big-endian platform */ const byteSwapIfBE = isLE ? (n)=>n : (n)=>byteSwap(n);\n/** In place byte swap for Uint32Array */ function byteSwap32(arr) {\n    for(let i = 0; i < arr.length; i++){\n        arr[i] = byteSwap(arr[i]);\n    }\n}\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * Convert byte array to hex string.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(bytes);\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + hl);\n    const array = new Uint8Array(al);\n    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */ const nextTick = async ()=>{};\n/** Returns control to thread each 'tick' ms to avoid blocking. */ async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for(let i = 0; i < iters; i++){\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick) continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Convert JS string to byte array.\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(\"utf8ToBytes expected string, got \" + typeof str);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */ function toBytes(data) {\n    if (typeof data === \"string\") data = utf8ToBytes(data);\n    (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(data);\n    return data;\n}\n/**\n * Copies several Uint8Arrays into one.\n */ function concatBytes(...arrays) {\n    let sum = 0;\n    for(let i = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        (0,_assert_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n/** For runtime check if class implements interface */ class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && ({}).toString.call(opts) !== \"[object Object]\") throw new Error(\"Options should be object or undefined\");\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** Wraps hash function, creating an interface on top of it */ function wrapConstructor(hashCons) {\n    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = ()=>hashCons();\n    return hashC;\n}\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */ function randomBytes(bytesLength = 32) {\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues === \"function\") {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (_noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto && typeof _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.randomBytes === \"function\") {\n        return _noble_hashes_crypto__WEBPACK_IMPORTED_MODULE_1__.crypto.randomBytes(bytesLength);\n    }\n    throw new Error(\"crypto.getRandomValues must be defined\");\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   publicKeyToAddress: () => (/* binding */ publicKeyToAddress)\n/* harmony export */ });\n/* harmony import */ var _utils_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/address/getAddress.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var _utils_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/hash/keccak256.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\");\n\n\n/**\n * @description Converts an ECDSA public key to an address.\n *\n * @param publicKey The public key to convert.\n *\n * @returns The address.\n */ function publicKeyToAddress(publicKey) {\n    const address = (0,_utils_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_0__.keccak256)(`0x${publicKey.substring(4)}`).substring(26);\n    return (0,_utils_address_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.checksumAddress)(`0x${address}`);\n} //# sourceMappingURL=publicKeyToAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9hY2NvdW50cy91dGlscy9wdWJsaWNLZXlUb0FkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFFO0FBQ1Y7QUFDM0Q7Ozs7OztDQU1DLEdBQ00sU0FBU0UsbUJBQW1CQyxTQUFTO0lBQ3hDLE1BQU1DLFVBQVVILG1FQUFTQSxDQUFDLENBQUMsRUFBRSxFQUFFRSxVQUFVRSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUVBLFNBQVMsQ0FBQztJQUNuRSxPQUFPTCw2RUFBZUEsQ0FBQyxDQUFDLEVBQUUsRUFBRUksUUFBUSxDQUFDO0FBQ3pDLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9hY2NvdW50cy91dGlscy9wdWJsaWNLZXlUb0FkZHJlc3MuanM/MGEwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjaGVja3N1bUFkZHJlc3MsIH0gZnJvbSAnLi4vLi4vdXRpbHMvYWRkcmVzcy9nZXRBZGRyZXNzLmpzJztcbmltcG9ydCB7IGtlY2NhazI1NiwgfSBmcm9tICcuLi8uLi91dGlscy9oYXNoL2tlY2NhazI1Ni5qcyc7XG4vKipcbiAqIEBkZXNjcmlwdGlvbiBDb252ZXJ0cyBhbiBFQ0RTQSBwdWJsaWMga2V5IHRvIGFuIGFkZHJlc3MuXG4gKlxuICogQHBhcmFtIHB1YmxpY0tleSBUaGUgcHVibGljIGtleSB0byBjb252ZXJ0LlxuICpcbiAqIEByZXR1cm5zIFRoZSBhZGRyZXNzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHVibGljS2V5VG9BZGRyZXNzKHB1YmxpY0tleSkge1xuICAgIGNvbnN0IGFkZHJlc3MgPSBrZWNjYWsyNTYoYDB4JHtwdWJsaWNLZXkuc3Vic3RyaW5nKDQpfWApLnN1YnN0cmluZygyNik7XG4gICAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcyhgMHgke2FkZHJlc3N9YCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaWNLZXlUb0FkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbImNoZWNrc3VtQWRkcmVzcyIsImtlY2NhazI1NiIsInB1YmxpY0tleVRvQWRkcmVzcyIsInB1YmxpY0tleSIsImFkZHJlc3MiLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidAddressError: () => (/* binding */ InvalidAddressError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass InvalidAddressError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ address }){\n        super(`Address \"${address}\" is invalid.`, {\n            metaMessages: [\n                \"- Address must be a hex value of 20 bytes (40 hex characters).\",\n                \"- Address must match its checksum counterpart.\"\n            ],\n            name: \"InvalidAddressError\"\n        });\n    }\n} //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvYWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzQztBQUMvQixNQUFNQyw0QkFBNEJELCtDQUFTQTtJQUM5Q0UsWUFBWSxFQUFFQyxPQUFPLEVBQUUsQ0FBRTtRQUNyQixLQUFLLENBQUMsQ0FBQyxTQUFTLEVBQUVBLFFBQVEsYUFBYSxDQUFDLEVBQUU7WUFDdENDLGNBQWM7Z0JBQ1Y7Z0JBQ0E7YUFDSDtZQUNEQyxNQUFNO1FBQ1Y7SUFDSjtBQUNKLEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvYWRkcmVzcy5qcz9hMjBjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VFcnJvciB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY2xhc3MgSW52YWxpZEFkZHJlc3NFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBhZGRyZXNzIH0pIHtcbiAgICAgICAgc3VwZXIoYEFkZHJlc3MgXCIke2FkZHJlc3N9XCIgaXMgaW52YWxpZC5gLCB7XG4gICAgICAgICAgICBtZXRhTWVzc2FnZXM6IFtcbiAgICAgICAgICAgICAgICAnLSBBZGRyZXNzIG11c3QgYmUgYSBoZXggdmFsdWUgb2YgMjAgYnl0ZXMgKDQwIGhleCBjaGFyYWN0ZXJzKS4nLFxuICAgICAgICAgICAgICAgICctIEFkZHJlc3MgbXVzdCBtYXRjaCBpdHMgY2hlY2tzdW0gY291bnRlcnBhcnQuJyxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBuYW1lOiAnSW52YWxpZEFkZHJlc3NFcnJvcicsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbIkJhc2VFcnJvciIsIkludmFsaWRBZGRyZXNzRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFkZHJlc3MiLCJtZXRhTWVzc2FnZXMiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseError: () => (/* binding */ BaseError),\n/* harmony export */   setErrorConfig: () => (/* binding */ setErrorConfig)\n/* harmony export */ });\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js\");\n\nlet errorConfig = {\n    getDocsUrl: ({ docsBaseUrl, docsPath = \"\", docsSlug })=>docsPath ? `${docsBaseUrl ?? \"https://viem.sh\"}${docsPath}${docsSlug ? `#${docsSlug}` : \"\"}` : undefined,\n    version: `viem@${_version_js__WEBPACK_IMPORTED_MODULE_0__.version}`\n};\nfunction setErrorConfig(config) {\n    errorConfig = config;\n}\nclass BaseError extends Error {\n    constructor(shortMessage, args = {}){\n        const details = (()=>{\n            if (args.cause instanceof BaseError) return args.cause.details;\n            if (args.cause?.message) return args.cause.message;\n            return args.details;\n        })();\n        const docsPath = (()=>{\n            if (args.cause instanceof BaseError) return args.cause.docsPath || args.docsPath;\n            return args.docsPath;\n        })();\n        const docsUrl = errorConfig.getDocsUrl?.({\n            ...args,\n            docsPath\n        });\n        const message = [\n            shortMessage || \"An error occurred.\",\n            \"\",\n            ...args.metaMessages ? [\n                ...args.metaMessages,\n                \"\"\n            ] : [],\n            ...docsUrl ? [\n                `Docs: ${docsUrl}`\n            ] : [],\n            ...details ? [\n                `Details: ${details}`\n            ] : [],\n            ...errorConfig.version ? [\n                `Version: ${errorConfig.version}`\n            ] : []\n        ].join(\"\\n\");\n        super(message, args.cause ? {\n            cause: args.cause\n        } : undefined);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"BaseError\"\n        });\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.name = args.name ?? this.name;\n        this.shortMessage = shortMessage;\n        this.version = _version_js__WEBPACK_IMPORTED_MODULE_0__.version;\n    }\n    walk(fn) {\n        return walk(this, fn);\n    }\n}\nfunction walk(err, fn) {\n    if (fn?.(err)) return err;\n    if (err && typeof err === \"object\" && \"cause\" in err && err.cause !== undefined) return walk(err.cause, fn);\n    return fn ? null : err;\n} //# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvYmFzZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUM7QUFDdkMsSUFBSUMsY0FBYztJQUNkQyxZQUFZLENBQUMsRUFBRUMsV0FBVyxFQUFFQyxXQUFXLEVBQUUsRUFBRUMsUUFBUSxFQUFHLEdBQUtELFdBQ3JELENBQUMsRUFBRUQsZUFBZSxrQkFBa0IsRUFBRUMsU0FBUyxFQUFFQyxXQUFXLENBQUMsQ0FBQyxFQUFFQSxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUMsR0FDakZDO0lBQ05OLFNBQVMsQ0FBQyxLQUFLLEVBQUVBLGdEQUFPQSxDQUFDLENBQUM7QUFDOUI7QUFDTyxTQUFTTyxlQUFlQyxNQUFNO0lBQ2pDUCxjQUFjTztBQUNsQjtBQUNPLE1BQU1DLGtCQUFrQkM7SUFDM0JDLFlBQVlDLFlBQVksRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUNqQyxNQUFNQyxVQUFVLENBQUM7WUFDYixJQUFJRCxLQUFLRSxLQUFLLFlBQVlOLFdBQ3RCLE9BQU9JLEtBQUtFLEtBQUssQ0FBQ0QsT0FBTztZQUM3QixJQUFJRCxLQUFLRSxLQUFLLEVBQUVDLFNBQ1osT0FBT0gsS0FBS0UsS0FBSyxDQUFDQyxPQUFPO1lBQzdCLE9BQU9ILEtBQUtDLE9BQU87UUFDdkI7UUFDQSxNQUFNVixXQUFXLENBQUM7WUFDZCxJQUFJUyxLQUFLRSxLQUFLLFlBQVlOLFdBQ3RCLE9BQU9JLEtBQUtFLEtBQUssQ0FBQ1gsUUFBUSxJQUFJUyxLQUFLVCxRQUFRO1lBQy9DLE9BQU9TLEtBQUtULFFBQVE7UUFDeEI7UUFDQSxNQUFNYSxVQUFVaEIsWUFBWUMsVUFBVSxHQUFHO1lBQUUsR0FBR1csSUFBSTtZQUFFVDtRQUFTO1FBQzdELE1BQU1ZLFVBQVU7WUFDWkosZ0JBQWdCO1lBQ2hCO2VBQ0lDLEtBQUtLLFlBQVksR0FBRzttQkFBSUwsS0FBS0ssWUFBWTtnQkFBRTthQUFHLEdBQUcsRUFBRTtlQUNuREQsVUFBVTtnQkFBQyxDQUFDLE1BQU0sRUFBRUEsUUFBUSxDQUFDO2FBQUMsR0FBRyxFQUFFO2VBQ25DSCxVQUFVO2dCQUFDLENBQUMsU0FBUyxFQUFFQSxRQUFRLENBQUM7YUFBQyxHQUFHLEVBQUU7ZUFDdENiLFlBQVlELE9BQU8sR0FBRztnQkFBQyxDQUFDLFNBQVMsRUFBRUMsWUFBWUQsT0FBTyxDQUFDLENBQUM7YUFBQyxHQUFHLEVBQUU7U0FDckUsQ0FBQ21CLElBQUksQ0FBQztRQUNQLEtBQUssQ0FBQ0gsU0FBU0gsS0FBS0UsS0FBSyxHQUFHO1lBQUVBLE9BQU9GLEtBQUtFLEtBQUs7UUFBQyxJQUFJVDtRQUNwRGMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXO1lBQ25DQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDWCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDVixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ2MsWUFBWSxHQUFHTCxLQUFLSyxZQUFZO1FBQ3JDLElBQUksQ0FBQ1EsSUFBSSxHQUFHYixLQUFLYSxJQUFJLElBQUksSUFBSSxDQUFDQSxJQUFJO1FBQ2xDLElBQUksQ0FBQ2QsWUFBWSxHQUFHQTtRQUNwQixJQUFJLENBQUNaLE9BQU8sR0FBR0EsZ0RBQU9BO0lBQzFCO0lBQ0EyQixLQUFLQyxFQUFFLEVBQUU7UUFDTCxPQUFPRCxLQUFLLElBQUksRUFBRUM7SUFDdEI7QUFDSjtBQUNBLFNBQVNELEtBQUtFLEdBQUcsRUFBRUQsRUFBRTtJQUNqQixJQUFJQSxLQUFLQyxNQUNMLE9BQU9BO0lBQ1gsSUFBSUEsT0FDQSxPQUFPQSxRQUFRLFlBQ2YsV0FBV0EsT0FDWEEsSUFBSWQsS0FBSyxLQUFLVCxXQUNkLE9BQU9xQixLQUFLRSxJQUFJZCxLQUFLLEVBQUVhO0lBQzNCLE9BQU9BLEtBQUssT0FBT0M7QUFDdkIsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9iYXNlLmpzPzU3ZGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbi5qcyc7XG5sZXQgZXJyb3JDb25maWcgPSB7XG4gICAgZ2V0RG9jc1VybDogKHsgZG9jc0Jhc2VVcmwsIGRvY3NQYXRoID0gJycsIGRvY3NTbHVnLCB9KSA9PiBkb2NzUGF0aFxuICAgICAgICA/IGAke2RvY3NCYXNlVXJsID8/ICdodHRwczovL3ZpZW0uc2gnfSR7ZG9jc1BhdGh9JHtkb2NzU2x1ZyA/IGAjJHtkb2NzU2x1Z31gIDogJyd9YFxuICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICB2ZXJzaW9uOiBgdmllbUAke3ZlcnNpb259YCxcbn07XG5leHBvcnQgZnVuY3Rpb24gc2V0RXJyb3JDb25maWcoY29uZmlnKSB7XG4gICAgZXJyb3JDb25maWcgPSBjb25maWc7XG59XG5leHBvcnQgY2xhc3MgQmFzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHNob3J0TWVzc2FnZSwgYXJncyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGRldGFpbHMgPSAoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGFyZ3MuY2F1c2UgaW5zdGFuY2VvZiBCYXNlRXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3MuY2F1c2UuZGV0YWlscztcbiAgICAgICAgICAgIGlmIChhcmdzLmNhdXNlPy5tZXNzYWdlKVxuICAgICAgICAgICAgICAgIHJldHVybiBhcmdzLmNhdXNlLm1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gYXJncy5kZXRhaWxzO1xuICAgICAgICB9KSgpO1xuICAgICAgICBjb25zdCBkb2NzUGF0aCA9ICgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoYXJncy5jYXVzZSBpbnN0YW5jZW9mIEJhc2VFcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJncy5jYXVzZS5kb2NzUGF0aCB8fCBhcmdzLmRvY3NQYXRoO1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3MuZG9jc1BhdGg7XG4gICAgICAgIH0pKCk7XG4gICAgICAgIGNvbnN0IGRvY3NVcmwgPSBlcnJvckNvbmZpZy5nZXREb2NzVXJsPy4oeyAuLi5hcmdzLCBkb2NzUGF0aCB9KTtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IFtcbiAgICAgICAgICAgIHNob3J0TWVzc2FnZSB8fCAnQW4gZXJyb3Igb2NjdXJyZWQuJyxcbiAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgLi4uKGFyZ3MubWV0YU1lc3NhZ2VzID8gWy4uLmFyZ3MubWV0YU1lc3NhZ2VzLCAnJ10gOiBbXSksXG4gICAgICAgICAgICAuLi4oZG9jc1VybCA/IFtgRG9jczogJHtkb2NzVXJsfWBdIDogW10pLFxuICAgICAgICAgICAgLi4uKGRldGFpbHMgPyBbYERldGFpbHM6ICR7ZGV0YWlsc31gXSA6IFtdKSxcbiAgICAgICAgICAgIC4uLihlcnJvckNvbmZpZy52ZXJzaW9uID8gW2BWZXJzaW9uOiAke2Vycm9yQ29uZmlnLnZlcnNpb259YF0gOiBbXSksXG4gICAgICAgIF0uam9pbignXFxuJyk7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGFyZ3MuY2F1c2UgPyB7IGNhdXNlOiBhcmdzLmNhdXNlIH0gOiB1bmRlZmluZWQpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJkZXRhaWxzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRvY3NQYXRoXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm1ldGFNZXNzYWdlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJzaG9ydE1lc3NhZ2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidmVyc2lvblwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnQmFzZUVycm9yJ1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICAgICAgdGhpcy5kb2NzUGF0aCA9IGRvY3NQYXRoO1xuICAgICAgICB0aGlzLm1ldGFNZXNzYWdlcyA9IGFyZ3MubWV0YU1lc3NhZ2VzO1xuICAgICAgICB0aGlzLm5hbWUgPSBhcmdzLm5hbWUgPz8gdGhpcy5uYW1lO1xuICAgICAgICB0aGlzLnNob3J0TWVzc2FnZSA9IHNob3J0TWVzc2FnZTtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICB9XG4gICAgd2Fsayhmbikge1xuICAgICAgICByZXR1cm4gd2Fsayh0aGlzLCBmbik7XG4gICAgfVxufVxuZnVuY3Rpb24gd2FsayhlcnIsIGZuKSB7XG4gICAgaWYgKGZuPy4oZXJyKSlcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICBpZiAoZXJyICYmXG4gICAgICAgIHR5cGVvZiBlcnIgPT09ICdvYmplY3QnICYmXG4gICAgICAgICdjYXVzZScgaW4gZXJyICYmXG4gICAgICAgIGVyci5jYXVzZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gd2FsayhlcnIuY2F1c2UsIGZuKTtcbiAgICByZXR1cm4gZm4gPyBudWxsIDogZXJyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiIsImVycm9yQ29uZmlnIiwiZ2V0RG9jc1VybCIsImRvY3NCYXNlVXJsIiwiZG9jc1BhdGgiLCJkb2NzU2x1ZyIsInVuZGVmaW5lZCIsInNldEVycm9yQ29uZmlnIiwiY29uZmlnIiwiQmFzZUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInNob3J0TWVzc2FnZSIsImFyZ3MiLCJkZXRhaWxzIiwiY2F1c2UiLCJtZXNzYWdlIiwiZG9jc1VybCIsIm1ldGFNZXNzYWdlcyIsImpvaW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwibmFtZSIsIndhbGsiLCJmbiIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidBytesLengthError: () => (/* binding */ InvalidBytesLengthError),\n/* harmony export */   SizeExceedsPaddingSizeError: () => (/* binding */ SizeExceedsPaddingSizeError),\n/* harmony export */   SliceOffsetOutOfBoundsError: () => (/* binding */ SliceOffsetOutOfBoundsError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass SliceOffsetOutOfBoundsError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ offset, position, size }){\n        super(`Slice ${position === \"start\" ? \"starting\" : \"ending\"} at offset \"${offset}\" is out-of-bounds (size: ${size}).`, {\n            name: \"SliceOffsetOutOfBoundsError\"\n        });\n    }\n}\nclass SizeExceedsPaddingSizeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ size, targetSize, type }){\n        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`, {\n            name: \"SizeExceedsPaddingSizeError\"\n        });\n    }\n}\nclass InvalidBytesLengthError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ size, targetSize, type }){\n        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`, {\n            name: \"InvalidBytesLengthError\"\n        });\n    }\n} //# sourceMappingURL=data.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvZGF0YS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNDO0FBQy9CLE1BQU1DLG9DQUFvQ0QsK0NBQVNBO0lBQ3RERSxZQUFZLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUcsQ0FBRTtRQUNyQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUVELGFBQWEsVUFBVSxhQUFhLFNBQVMsWUFBWSxFQUFFRCxPQUFPLDBCQUEwQixFQUFFRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO1lBQUVDLE1BQU07UUFBOEI7SUFDaks7QUFDSjtBQUNPLE1BQU1DLG9DQUFvQ1AsK0NBQVNBO0lBQ3RERSxZQUFZLEVBQUVHLElBQUksRUFBRUcsVUFBVSxFQUFFQyxJQUFJLEVBQUcsQ0FBRTtRQUNyQyxLQUFLLENBQUMsQ0FBQyxFQUFFQSxLQUFLQyxNQUFNLENBQUMsR0FBR0MsV0FBVyxHQUFHLEVBQUVGLEtBQ25DRyxLQUFLLENBQUMsR0FDTkMsV0FBVyxHQUFHLE9BQU8sRUFBRVIsS0FBSyx3QkFBd0IsRUFBRUcsV0FBVyxFQUFFLENBQUMsRUFBRTtZQUFFRixNQUFNO1FBQThCO0lBQ3JIO0FBQ0o7QUFDTyxNQUFNUSxnQ0FBZ0NkLCtDQUFTQTtJQUNsREUsWUFBWSxFQUFFRyxJQUFJLEVBQUVHLFVBQVUsRUFBRUMsSUFBSSxFQUFHLENBQUU7UUFDckMsS0FBSyxDQUFDLENBQUMsRUFBRUEsS0FBS0MsTUFBTSxDQUFDLEdBQUdDLFdBQVcsR0FBRyxFQUFFRixLQUNuQ0csS0FBSyxDQUFDLEdBQ05DLFdBQVcsR0FBRyxtQkFBbUIsRUFBRUwsV0FBVyxDQUFDLEVBQUVDLEtBQUssY0FBYyxFQUFFSixLQUFLLENBQUMsRUFBRUksS0FBSyxNQUFNLENBQUMsRUFBRTtZQUFFSCxNQUFNO1FBQTBCO0lBQ3ZJO0FBQ0osRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9kYXRhLmpzPzgwMzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZUVycm9yIH0gZnJvbSAnLi9iYXNlLmpzJztcbmV4cG9ydCBjbGFzcyBTbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgb2Zmc2V0LCBwb3NpdGlvbiwgc2l6ZSwgfSkge1xuICAgICAgICBzdXBlcihgU2xpY2UgJHtwb3NpdGlvbiA9PT0gJ3N0YXJ0JyA/ICdzdGFydGluZycgOiAnZW5kaW5nJ30gYXQgb2Zmc2V0IFwiJHtvZmZzZXR9XCIgaXMgb3V0LW9mLWJvdW5kcyAoc2l6ZTogJHtzaXplfSkuYCwgeyBuYW1lOiAnU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yJyB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHNpemUsIHRhcmdldFNpemUsIHR5cGUsIH0pIHtcbiAgICAgICAgc3VwZXIoYCR7dHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke3R5cGVcbiAgICAgICAgICAgIC5zbGljZSgxKVxuICAgICAgICAgICAgLnRvTG93ZXJDYXNlKCl9IHNpemUgKCR7c2l6ZX0pIGV4Y2VlZHMgcGFkZGluZyBzaXplICgke3RhcmdldFNpemV9KS5gLCB7IG5hbWU6ICdTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3InIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQnl0ZXNMZW5ndGhFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBzaXplLCB0YXJnZXRTaXplLCB0eXBlLCB9KSB7XG4gICAgICAgIHN1cGVyKGAke3R5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCl9JHt0eXBlXG4gICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpfSBpcyBleHBlY3RlZCB0byBiZSAke3RhcmdldFNpemV9ICR7dHlwZX0gbG9uZywgYnV0IGlzICR7c2l6ZX0gJHt0eXBlfSBsb25nLmAsIHsgbmFtZTogJ0ludmFsaWRCeXRlc0xlbmd0aEVycm9yJyB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhLmpzLm1hcCJdLCJuYW1lcyI6WyJCYXNlRXJyb3IiLCJTbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm9mZnNldCIsInBvc2l0aW9uIiwic2l6ZSIsIm5hbWUiLCJTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IiLCJ0YXJnZXRTaXplIiwidHlwZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ0b0xvd2VyQ2FzZSIsIkludmFsaWRCeXRlc0xlbmd0aEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntegerOutOfRangeError: () => (/* binding */ IntegerOutOfRangeError),\n/* harmony export */   InvalidBytesBooleanError: () => (/* binding */ InvalidBytesBooleanError),\n/* harmony export */   InvalidHexBooleanError: () => (/* binding */ InvalidHexBooleanError),\n/* harmony export */   InvalidHexValueError: () => (/* binding */ InvalidHexValueError),\n/* harmony export */   SizeOverflowError: () => (/* binding */ SizeOverflowError)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n\nclass IntegerOutOfRangeError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ max, min, signed, size, value }){\n        super(`Number \"${value}\" is not in safe ${size ? `${size * 8}-bit ${signed ? \"signed\" : \"unsigned\"} ` : \"\"}integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`, {\n            name: \"IntegerOutOfRangeError\"\n        });\n    }\n}\nclass InvalidBytesBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(bytes){\n        super(`Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`, {\n            name: \"InvalidBytesBooleanError\"\n        });\n    }\n}\nclass InvalidHexBooleanError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(hex){\n        super(`Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`, {\n            name: \"InvalidHexBooleanError\"\n        });\n    }\n}\nclass InvalidHexValueError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor(value){\n        super(`Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`, {\n            name: \"InvalidHexValueError\"\n        });\n    }\n}\nclass SizeOverflowError extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseError {\n    constructor({ givenSize, maxSize }){\n        super(`Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`, {\n            name: \"SizeOverflowError\"\n        });\n    }\n} //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvZW5jb2RpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQXNDO0FBQy9CLE1BQU1DLCtCQUErQkQsK0NBQVNBO0lBQ2pERSxZQUFZLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFHLENBQUU7UUFDNUMsS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFQSxNQUFNLGlCQUFpQixFQUFFRCxPQUFPLENBQUMsRUFBRUEsT0FBTyxFQUFFLEtBQUssRUFBRUQsU0FBUyxXQUFXLFdBQVcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxjQUFjLEVBQUVGLE1BQU0sQ0FBQyxDQUFDLEVBQUVDLElBQUksSUFBSSxFQUFFRCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUFFSSxNQUFNO1FBQXlCO0lBQ2pOO0FBQ0o7QUFDTyxNQUFNQyxpQ0FBaUNULCtDQUFTQTtJQUNuREUsWUFBWVEsS0FBSyxDQUFFO1FBQ2YsS0FBSyxDQUFDLENBQUMsYUFBYSxFQUFFQSxNQUFNLDhGQUE4RixDQUFDLEVBQUU7WUFDekhGLE1BQU07UUFDVjtJQUNKO0FBQ0o7QUFDTyxNQUFNRywrQkFBK0JYLCtDQUFTQTtJQUNqREUsWUFBWVUsR0FBRyxDQUFFO1FBQ2IsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFQSxJQUFJLDhFQUE4RSxDQUFDLEVBQUU7WUFBRUosTUFBTTtRQUF5QjtJQUM5STtBQUNKO0FBQ08sTUFBTUssNkJBQTZCYiwrQ0FBU0E7SUFDL0NFLFlBQVlLLEtBQUssQ0FBRTtRQUNmLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRUEsTUFBTSxvQkFBb0IsRUFBRUEsTUFBTU8sTUFBTSxDQUFDLDZCQUE2QixDQUFDLEVBQUU7WUFBRU4sTUFBTTtRQUF1QjtJQUNoSTtBQUNKO0FBQ08sTUFBTU8sMEJBQTBCZiwrQ0FBU0E7SUFDNUNFLFlBQVksRUFBRWMsU0FBUyxFQUFFQyxPQUFPLEVBQUUsQ0FBRTtRQUNoQyxLQUFLLENBQUMsQ0FBQyxtQkFBbUIsRUFBRUEsUUFBUSxvQkFBb0IsRUFBRUQsVUFBVSxPQUFPLENBQUMsRUFBRTtZQUFFUixNQUFNO1FBQW9CO0lBQzlHO0FBQ0osRUFDQSxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL2Vycm9ycy9lbmNvZGluZy5qcz9mNzIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VFcnJvciB9IGZyb20gJy4vYmFzZS5qcyc7XG5leHBvcnQgY2xhc3MgSW50ZWdlck91dE9mUmFuZ2VFcnJvciBleHRlbmRzIEJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBtYXgsIG1pbiwgc2lnbmVkLCBzaXplLCB2YWx1ZSwgfSkge1xuICAgICAgICBzdXBlcihgTnVtYmVyIFwiJHt2YWx1ZX1cIiBpcyBub3QgaW4gc2FmZSAke3NpemUgPyBgJHtzaXplICogOH0tYml0ICR7c2lnbmVkID8gJ3NpZ25lZCcgOiAndW5zaWduZWQnfSBgIDogJyd9aW50ZWdlciByYW5nZSAke21heCA/IGAoJHttaW59IHRvICR7bWF4fSlgIDogYChhYm92ZSAke21pbn0pYH1gLCB7IG5hbWU6ICdJbnRlZ2VyT3V0T2ZSYW5nZUVycm9yJyB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW52YWxpZEJ5dGVzQm9vbGVhbkVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihieXRlcykge1xuICAgICAgICBzdXBlcihgQnl0ZXMgdmFsdWUgXCIke2J5dGVzfVwiIGlzIG5vdCBhIHZhbGlkIGJvb2xlYW4uIFRoZSBieXRlcyBhcnJheSBtdXN0IGNvbnRhaW4gYSBzaW5nbGUgYnl0ZSBvZiBlaXRoZXIgYSAwIG9yIDEgdmFsdWUuYCwge1xuICAgICAgICAgICAgbmFtZTogJ0ludmFsaWRCeXRlc0Jvb2xlYW5FcnJvcicsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBJbnZhbGlkSGV4Qm9vbGVhbkVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihoZXgpIHtcbiAgICAgICAgc3VwZXIoYEhleCB2YWx1ZSBcIiR7aGV4fVwiIGlzIG5vdCBhIHZhbGlkIGJvb2xlYW4uIFRoZSBoZXggdmFsdWUgbXVzdCBiZSBcIjB4MFwiIChmYWxzZSkgb3IgXCIweDFcIiAodHJ1ZSkuYCwgeyBuYW1lOiAnSW52YWxpZEhleEJvb2xlYW5FcnJvcicgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEludmFsaWRIZXhWYWx1ZUVycm9yIGV4dGVuZHMgQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcihgSGV4IHZhbHVlIFwiJHt2YWx1ZX1cIiBpcyBhbiBvZGQgbGVuZ3RoICgke3ZhbHVlLmxlbmd0aH0pLiBJdCBtdXN0IGJlIGFuIGV2ZW4gbGVuZ3RoLmAsIHsgbmFtZTogJ0ludmFsaWRIZXhWYWx1ZUVycm9yJyB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU2l6ZU92ZXJmbG93RXJyb3IgZXh0ZW5kcyBCYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgZ2l2ZW5TaXplLCBtYXhTaXplIH0pIHtcbiAgICAgICAgc3VwZXIoYFNpemUgY2Fubm90IGV4Y2VlZCAke21heFNpemV9IGJ5dGVzLiBHaXZlbiBzaXplOiAke2dpdmVuU2l6ZX0gYnl0ZXMuYCwgeyBuYW1lOiAnU2l6ZU92ZXJmbG93RXJyb3InIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY29kaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJCYXNlRXJyb3IiLCJJbnRlZ2VyT3V0T2ZSYW5nZUVycm9yIiwiY29uc3RydWN0b3IiLCJtYXgiLCJtaW4iLCJzaWduZWQiLCJzaXplIiwidmFsdWUiLCJuYW1lIiwiSW52YWxpZEJ5dGVzQm9vbGVhbkVycm9yIiwiYnl0ZXMiLCJJbnZhbGlkSGV4Qm9vbGVhbkVycm9yIiwiaGV4IiwiSW52YWxpZEhleFZhbHVlRXJyb3IiLCJsZW5ndGgiLCJTaXplT3ZlcmZsb3dFcnJvciIsImdpdmVuU2l6ZSIsIm1heFNpemUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\nconst version = \"2.23.2\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS9lcnJvcnMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsVUFBVSxTQUFTLENBQ2hDLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vZXJyb3JzL3ZlcnNpb24uanM/MWJjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9ICcyLjIzLjInO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checksumAddress: () => (/* binding */ checksumAddress),\n/* harmony export */   getAddress: () => (/* binding */ getAddress)\n/* harmony export */ });\n/* harmony import */ var _errors_address_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../errors/address.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/address.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _hash_keccak256_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../hash/keccak256.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var _lru_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lru.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\");\n/* harmony import */ var _isAddress_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isAddress.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js\");\n\n\n\n\n\nconst checksumAddressCache = /*#__PURE__*/ new _lru_js__WEBPACK_IMPORTED_MODULE_0__.LruMap(8192);\nfunction checksumAddress(address_, /**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */ chainId) {\n    if (checksumAddressCache.has(`${address_}.${chainId}`)) return checksumAddressCache.get(`${address_}.${chainId}`);\n    const hexAddress = chainId ? `${chainId}${address_.toLowerCase()}` : address_.substring(2).toLowerCase();\n    const hash = (0,_hash_keccak256_js__WEBPACK_IMPORTED_MODULE_1__.keccak256)((0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.stringToBytes)(hexAddress), \"bytes\");\n    const address = (chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress).split(\"\");\n    for(let i = 0; i < 40; i += 2){\n        if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n            address[i] = address[i].toUpperCase();\n        }\n        if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n            address[i + 1] = address[i + 1].toUpperCase();\n        }\n    }\n    const result = `0x${address.join(\"\")}`;\n    checksumAddressCache.set(`${address_}.${chainId}`, result);\n    return result;\n}\nfunction getAddress(address, /**\n * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n * that relies on EIP-55 checksum encoding (checksum without chainId).\n *\n * It is highly recommended to not use this feature unless you\n * know what you are doing.\n *\n * See more: https://github.com/ethereum/EIPs/issues/1121\n */ chainId) {\n    if (!(0,_isAddress_js__WEBPACK_IMPORTED_MODULE_3__.isAddress)(address, {\n        strict: false\n    })) throw new _errors_address_js__WEBPACK_IMPORTED_MODULE_4__.InvalidAddressError({\n        address\n    });\n    return checksumAddress(address, chainId);\n} //# sourceMappingURL=getAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9hZGRyZXNzL2dldEFkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE4RDtBQUNOO0FBQ1A7QUFDZDtBQUNRO0FBQzNDLE1BQU1LLHVCQUF1QixXQUFXLEdBQUcsSUFBSUYsMkNBQU1BLENBQUM7QUFDL0MsU0FBU0csZ0JBQWdCQyxRQUFRLEVBQ3hDOzs7Ozs7Ozs7Q0FTQyxHQUNEQyxPQUFPO0lBQ0gsSUFBSUgscUJBQXFCSSxHQUFHLENBQUMsQ0FBQyxFQUFFRixTQUFTLENBQUMsRUFBRUMsUUFBUSxDQUFDLEdBQ2pELE9BQU9ILHFCQUFxQkssR0FBRyxDQUFDLENBQUMsRUFBRUgsU0FBUyxDQUFDLEVBQUVDLFFBQVEsQ0FBQztJQUM1RCxNQUFNRyxhQUFhSCxVQUNiLENBQUMsRUFBRUEsUUFBUSxFQUFFRCxTQUFTSyxXQUFXLEdBQUcsQ0FBQyxHQUNyQ0wsU0FBU00sU0FBUyxDQUFDLEdBQUdELFdBQVc7SUFDdkMsTUFBTUUsT0FBT1osNkRBQVNBLENBQUNELG1FQUFhQSxDQUFDVSxhQUFhO0lBQ2xELE1BQU1JLFVBQVUsQ0FBQ1AsVUFBVUcsV0FBV0UsU0FBUyxDQUFDLENBQUMsRUFBRUwsUUFBUSxFQUFFLENBQUMsQ0FBQ1EsTUFBTSxJQUFJTCxVQUFTLEVBQUdNLEtBQUssQ0FBQztJQUMzRixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSSxJQUFJQSxLQUFLLEVBQUc7UUFDNUIsSUFBSUosSUFBSSxDQUFDSSxLQUFLLEVBQUUsSUFBSSxLQUFLLEtBQUtILE9BQU8sQ0FBQ0csRUFBRSxFQUFFO1lBQ3RDSCxPQUFPLENBQUNHLEVBQUUsR0FBR0gsT0FBTyxDQUFDRyxFQUFFLENBQUNDLFdBQVc7UUFDdkM7UUFDQSxJQUFJLENBQUNMLElBQUksQ0FBQ0ksS0FBSyxFQUFFLEdBQUcsSUFBRyxLQUFNLEtBQUtILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLEVBQUU7WUFDOUNILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLEdBQUdILE9BQU8sQ0FBQ0csSUFBSSxFQUFFLENBQUNDLFdBQVc7UUFDL0M7SUFDSjtJQUNBLE1BQU1DLFNBQVMsQ0FBQyxFQUFFLEVBQUVMLFFBQVFNLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDdENoQixxQkFBcUJpQixHQUFHLENBQUMsQ0FBQyxFQUFFZixTQUFTLENBQUMsRUFBRUMsUUFBUSxDQUFDLEVBQUVZO0lBQ25ELE9BQU9BO0FBQ1g7QUFDTyxTQUFTRyxXQUFXUixPQUFPLEVBQ2xDOzs7Ozs7Ozs7Q0FTQyxHQUNEUCxPQUFPO0lBQ0gsSUFBSSxDQUFDSix3REFBU0EsQ0FBQ1csU0FBUztRQUFFUyxRQUFRO0lBQU0sSUFDcEMsTUFBTSxJQUFJeEIsbUVBQW1CQSxDQUFDO1FBQUVlO0lBQVE7SUFDNUMsT0FBT1QsZ0JBQWdCUyxTQUFTUDtBQUNwQyxFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvYWRkcmVzcy9nZXRBZGRyZXNzLmpzPzgyNGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW52YWxpZEFkZHJlc3NFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9ycy9hZGRyZXNzLmpzJztcbmltcG9ydCB7IHN0cmluZ1RvQnl0ZXMsIH0gZnJvbSAnLi4vZW5jb2RpbmcvdG9CeXRlcy5qcyc7XG5pbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tICcuLi9oYXNoL2tlY2NhazI1Ni5qcyc7XG5pbXBvcnQgeyBMcnVNYXAgfSBmcm9tICcuLi9scnUuanMnO1xuaW1wb3J0IHsgaXNBZGRyZXNzIH0gZnJvbSAnLi9pc0FkZHJlc3MuanMnO1xuY29uc3QgY2hlY2tzdW1BZGRyZXNzQ2FjaGUgPSAvKiNfX1BVUkVfXyovIG5ldyBMcnVNYXAoODE5Mik7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tzdW1BZGRyZXNzKGFkZHJlc3NfLCBcbi8qKlxuICogV2FybmluZzogRUlQLTExOTEgY2hlY2tzdW0gYWRkcmVzc2VzIGFyZSBnZW5lcmFsbHkgbm90IGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggdGhlXG4gKiB3aWRlciBFdGhlcmV1bSBlY29zeXN0ZW0sIG1lYW5pbmcgaXQgd2lsbCBicmVhayB3aGVuIHZhbGlkYXRlZCBhZ2FpbnN0IGFuIGFwcGxpY2F0aW9uL3Rvb2xcbiAqIHRoYXQgcmVsaWVzIG9uIEVJUC01NSBjaGVja3N1bSBlbmNvZGluZyAoY2hlY2tzdW0gd2l0aG91dCBjaGFpbklkKS5cbiAqXG4gKiBJdCBpcyBoaWdobHkgcmVjb21tZW5kZWQgdG8gbm90IHVzZSB0aGlzIGZlYXR1cmUgdW5sZXNzIHlvdVxuICoga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXG4gKlxuICogU2VlIG1vcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy8xMTIxXG4gKi9cbmNoYWluSWQpIHtcbiAgICBpZiAoY2hlY2tzdW1BZGRyZXNzQ2FjaGUuaGFzKGAke2FkZHJlc3NffS4ke2NoYWluSWR9YCkpXG4gICAgICAgIHJldHVybiBjaGVja3N1bUFkZHJlc3NDYWNoZS5nZXQoYCR7YWRkcmVzc199LiR7Y2hhaW5JZH1gKTtcbiAgICBjb25zdCBoZXhBZGRyZXNzID0gY2hhaW5JZFxuICAgICAgICA/IGAke2NoYWluSWR9JHthZGRyZXNzXy50b0xvd2VyQ2FzZSgpfWBcbiAgICAgICAgOiBhZGRyZXNzXy5zdWJzdHJpbmcoMikudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBoYXNoID0ga2VjY2FrMjU2KHN0cmluZ1RvQnl0ZXMoaGV4QWRkcmVzcyksICdieXRlcycpO1xuICAgIGNvbnN0IGFkZHJlc3MgPSAoY2hhaW5JZCA/IGhleEFkZHJlc3Muc3Vic3RyaW5nKGAke2NoYWluSWR9MHhgLmxlbmd0aCkgOiBoZXhBZGRyZXNzKS5zcGxpdCgnJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0MDsgaSArPSAyKSB7XG4gICAgICAgIGlmIChoYXNoW2kgPj4gMV0gPj4gNCA+PSA4ICYmIGFkZHJlc3NbaV0pIHtcbiAgICAgICAgICAgIGFkZHJlc3NbaV0gPSBhZGRyZXNzW2ldLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChoYXNoW2kgPj4gMV0gJiAweDBmKSA+PSA4ICYmIGFkZHJlc3NbaSArIDFdKSB7XG4gICAgICAgICAgICBhZGRyZXNzW2kgKyAxXSA9IGFkZHJlc3NbaSArIDFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gYDB4JHthZGRyZXNzLmpvaW4oJycpfWA7XG4gICAgY2hlY2tzdW1BZGRyZXNzQ2FjaGUuc2V0KGAke2FkZHJlc3NffS4ke2NoYWluSWR9YCwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFkZHJlc3MoYWRkcmVzcywgXG4vKipcbiAqIFdhcm5pbmc6IEVJUC0xMTkxIGNoZWNrc3VtIGFkZHJlc3NlcyBhcmUgZ2VuZXJhbGx5IG5vdCBiYWNrd2FyZHMgY29tcGF0aWJsZSB3aXRoIHRoZVxuICogd2lkZXIgRXRoZXJldW0gZWNvc3lzdGVtLCBtZWFuaW5nIGl0IHdpbGwgYnJlYWsgd2hlbiB2YWxpZGF0ZWQgYWdhaW5zdCBhbiBhcHBsaWNhdGlvbi90b29sXG4gKiB0aGF0IHJlbGllcyBvbiBFSVAtNTUgY2hlY2tzdW0gZW5jb2RpbmcgKGNoZWNrc3VtIHdpdGhvdXQgY2hhaW5JZCkuXG4gKlxuICogSXQgaXMgaGlnaGx5IHJlY29tbWVuZGVkIHRvIG5vdCB1c2UgdGhpcyBmZWF0dXJlIHVubGVzcyB5b3VcbiAqIGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxuICpcbiAqIFNlZSBtb3JlOiBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvMTEyMVxuICovXG5jaGFpbklkKSB7XG4gICAgaWYgKCFpc0FkZHJlc3MoYWRkcmVzcywgeyBzdHJpY3Q6IGZhbHNlIH0pKVxuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFkZHJlc3NFcnJvcih7IGFkZHJlc3MgfSk7XG4gICAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcyhhZGRyZXNzLCBjaGFpbklkKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbIkludmFsaWRBZGRyZXNzRXJyb3IiLCJzdHJpbmdUb0J5dGVzIiwia2VjY2FrMjU2IiwiTHJ1TWFwIiwiaXNBZGRyZXNzIiwiY2hlY2tzdW1BZGRyZXNzQ2FjaGUiLCJjaGVja3N1bUFkZHJlc3MiLCJhZGRyZXNzXyIsImNoYWluSWQiLCJoYXMiLCJnZXQiLCJoZXhBZGRyZXNzIiwidG9Mb3dlckNhc2UiLCJzdWJzdHJpbmciLCJoYXNoIiwiYWRkcmVzcyIsImxlbmd0aCIsInNwbGl0IiwiaSIsInRvVXBwZXJDYXNlIiwicmVzdWx0Iiwiam9pbiIsInNldCIsImdldEFkZHJlc3MiLCJzdHJpY3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAddress: () => (/* binding */ isAddress),\n/* harmony export */   isAddressCache: () => (/* binding */ isAddressCache)\n/* harmony export */ });\n/* harmony import */ var _lru_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lru.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\");\n/* harmony import */ var _getAddress_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getAddress.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/getAddress.js\");\n\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\n/** @internal */ const isAddressCache = /*#__PURE__*/ new _lru_js__WEBPACK_IMPORTED_MODULE_0__.LruMap(8192);\nfunction isAddress(address, options) {\n    const { strict = true } = options ?? {};\n    const cacheKey = `${address}.${strict}`;\n    if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey);\n    const result = (()=>{\n        if (!addressRegex.test(address)) return false;\n        if (address.toLowerCase() === address) return true;\n        if (strict) return (0,_getAddress_js__WEBPACK_IMPORTED_MODULE_1__.checksumAddress)(address) === address;\n        return true;\n    })();\n    isAddressCache.set(cacheKey, result);\n    return result;\n} //# sourceMappingURL=isAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9hZGRyZXNzL2lzQWRkcmVzcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW1DO0FBQ2U7QUFDbEQsTUFBTUUsZUFBZTtBQUNyQixjQUFjLEdBQ1AsTUFBTUMsaUJBQWlCLFdBQVcsR0FBRyxJQUFJSCwyQ0FBTUEsQ0FBQyxNQUFNO0FBQ3RELFNBQVNJLFVBQVVDLE9BQU8sRUFBRUMsT0FBTztJQUN0QyxNQUFNLEVBQUVDLFNBQVMsSUFBSSxFQUFFLEdBQUdELFdBQVcsQ0FBQztJQUN0QyxNQUFNRSxXQUFXLENBQUMsRUFBRUgsUUFBUSxDQUFDLEVBQUVFLE9BQU8sQ0FBQztJQUN2QyxJQUFJSixlQUFlTSxHQUFHLENBQUNELFdBQ25CLE9BQU9MLGVBQWVPLEdBQUcsQ0FBQ0Y7SUFDOUIsTUFBTUcsU0FBUyxDQUFDO1FBQ1osSUFBSSxDQUFDVCxhQUFhVSxJQUFJLENBQUNQLFVBQ25CLE9BQU87UUFDWCxJQUFJQSxRQUFRUSxXQUFXLE9BQU9SLFNBQzFCLE9BQU87UUFDWCxJQUFJRSxRQUNBLE9BQU9OLCtEQUFlQSxDQUFDSSxhQUFhQTtRQUN4QyxPQUFPO0lBQ1g7SUFDQUYsZUFBZVcsR0FBRyxDQUFDTixVQUFVRztJQUM3QixPQUFPQTtBQUNYLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9hZGRyZXNzL2lzQWRkcmVzcy5qcz8wOTFiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExydU1hcCB9IGZyb20gJy4uL2xydS5qcyc7XG5pbXBvcnQgeyBjaGVja3N1bUFkZHJlc3MgfSBmcm9tICcuL2dldEFkZHJlc3MuanMnO1xuY29uc3QgYWRkcmVzc1JlZ2V4ID0gL14weFthLWZBLUYwLTldezQwfSQvO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGlzQWRkcmVzc0NhY2hlID0gLyojX19QVVJFX18qLyBuZXcgTHJ1TWFwKDgxOTIpO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQWRkcmVzcyhhZGRyZXNzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBzdHJpY3QgPSB0cnVlIH0gPSBvcHRpb25zID8/IHt9O1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7YWRkcmVzc30uJHtzdHJpY3R9YDtcbiAgICBpZiAoaXNBZGRyZXNzQ2FjaGUuaGFzKGNhY2hlS2V5KSlcbiAgICAgICAgcmV0dXJuIGlzQWRkcmVzc0NhY2hlLmdldChjYWNoZUtleSk7XG4gICAgY29uc3QgcmVzdWx0ID0gKCgpID0+IHtcbiAgICAgICAgaWYgKCFhZGRyZXNzUmVnZXgudGVzdChhZGRyZXNzKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGFkZHJlc3MudG9Mb3dlckNhc2UoKSA9PT0gYWRkcmVzcylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoc3RyaWN0KVxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKSA9PT0gYWRkcmVzcztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkoKTtcbiAgICBpc0FkZHJlc3NDYWNoZS5zZXQoY2FjaGVLZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQWRkcmVzcy5qcy5tYXAiXSwibmFtZXMiOlsiTHJ1TWFwIiwiY2hlY2tzdW1BZGRyZXNzIiwiYWRkcmVzc1JlZ2V4IiwiaXNBZGRyZXNzQ2FjaGUiLCJpc0FkZHJlc3MiLCJhZGRyZXNzIiwib3B0aW9ucyIsInN0cmljdCIsImNhY2hlS2V5IiwiaGFzIiwiZ2V0IiwicmVzdWx0IiwidGVzdCIsInRvTG93ZXJDYXNlIiwic2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/address/isAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isHex: () => (/* binding */ isHex)\n/* harmony export */ });\nfunction isHex(value, { strict = true } = {}) {\n    if (!value) return false;\n    if (typeof value !== \"string\") return false;\n    return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith(\"0x\");\n} //# sourceMappingURL=isHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL2lzSGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxNQUFNQyxLQUFLLEVBQUUsRUFBRUMsU0FBUyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDL0MsSUFBSSxDQUFDRCxPQUNELE9BQU87SUFDWCxJQUFJLE9BQU9BLFVBQVUsVUFDakIsT0FBTztJQUNYLE9BQU9DLFNBQVMsbUJBQW1CQyxJQUFJLENBQUNGLFNBQVNBLE1BQU1HLFVBQVUsQ0FBQztBQUN0RSxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvZGF0YS9pc0hleC5qcz9lYjUzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc0hleCh2YWx1ZSwgeyBzdHJpY3QgPSB0cnVlIH0gPSB7fSkge1xuICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBzdHJpY3QgPyAvXjB4WzAtOWEtZkEtRl0qJC8udGVzdCh2YWx1ZSkgOiB2YWx1ZS5zdGFydHNXaXRoKCcweCcpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNIZXguanMubWFwIl0sIm5hbWVzIjpbImlzSGV4IiwidmFsdWUiLCJzdHJpY3QiLCJ0ZXN0Iiwic3RhcnRzV2l0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   pad: () => (/* binding */ pad),\n/* harmony export */   padBytes: () => (/* binding */ padBytes),\n/* harmony export */   padHex: () => (/* binding */ padHex)\n/* harmony export */ });\n/* harmony import */ var _errors_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../errors/data.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/data.js\");\n\nfunction pad(hexOrBytes, { dir, size = 32 } = {}) {\n    if (typeof hexOrBytes === \"string\") return padHex(hexOrBytes, {\n        dir,\n        size\n    });\n    return padBytes(hexOrBytes, {\n        dir,\n        size\n    });\n}\nfunction padHex(hex_, { dir, size = 32 } = {}) {\n    if (size === null) return hex_;\n    const hex = hex_.replace(\"0x\", \"\");\n    if (hex.length > size * 2) throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({\n        size: Math.ceil(hex.length / 2),\n        targetSize: size,\n        type: \"hex\"\n    });\n    return `0x${hex[dir === \"right\" ? \"padEnd\" : \"padStart\"](size * 2, \"0\")}`;\n}\nfunction padBytes(bytes, { dir, size = 32 } = {}) {\n    if (size === null) return bytes;\n    if (bytes.length > size) throw new _errors_data_js__WEBPACK_IMPORTED_MODULE_0__.SizeExceedsPaddingSizeError({\n        size: bytes.length,\n        targetSize: size,\n        type: \"bytes\"\n    });\n    const paddedBytes = new Uint8Array(size);\n    for(let i = 0; i < size; i++){\n        const padEnd = dir === \"right\";\n        paddedBytes[padEnd ? i : size - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n} //# sourceMappingURL=pad.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL3BhZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9FO0FBQzdELFNBQVNDLElBQUlDLFVBQVUsRUFBRSxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25ELElBQUksT0FBT0YsZUFBZSxVQUN0QixPQUFPRyxPQUFPSCxZQUFZO1FBQUVDO1FBQUtDO0lBQUs7SUFDMUMsT0FBT0UsU0FBU0osWUFBWTtRQUFFQztRQUFLQztJQUFLO0FBQzVDO0FBQ08sU0FBU0MsT0FBT0UsSUFBSSxFQUFFLEVBQUVKLEdBQUcsRUFBRUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEQsSUFBSUEsU0FBUyxNQUNULE9BQU9HO0lBQ1gsTUFBTUMsTUFBTUQsS0FBS0UsT0FBTyxDQUFDLE1BQU07SUFDL0IsSUFBSUQsSUFBSUUsTUFBTSxHQUFHTixPQUFPLEdBQ3BCLE1BQU0sSUFBSUosd0VBQTJCQSxDQUFDO1FBQ2xDSSxNQUFNTyxLQUFLQyxJQUFJLENBQUNKLElBQUlFLE1BQU0sR0FBRztRQUM3QkcsWUFBWVQ7UUFDWlUsTUFBTTtJQUNWO0lBQ0osT0FBTyxDQUFDLEVBQUUsRUFBRU4sR0FBRyxDQUFDTCxRQUFRLFVBQVUsV0FBVyxXQUFXLENBQUNDLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDN0U7QUFDTyxTQUFTRSxTQUFTUyxLQUFLLEVBQUUsRUFBRVosR0FBRyxFQUFFQyxPQUFPLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNuRCxJQUFJQSxTQUFTLE1BQ1QsT0FBT1c7SUFDWCxJQUFJQSxNQUFNTCxNQUFNLEdBQUdOLE1BQ2YsTUFBTSxJQUFJSix3RUFBMkJBLENBQUM7UUFDbENJLE1BQU1XLE1BQU1MLE1BQU07UUFDbEJHLFlBQVlUO1FBQ1pVLE1BQU07SUFDVjtJQUNKLE1BQU1FLGNBQWMsSUFBSUMsV0FBV2I7SUFDbkMsSUFBSyxJQUFJYyxJQUFJLEdBQUdBLElBQUlkLE1BQU1jLElBQUs7UUFDM0IsTUFBTUMsU0FBU2hCLFFBQVE7UUFDdkJhLFdBQVcsQ0FBQ0csU0FBU0QsSUFBSWQsT0FBT2MsSUFBSSxFQUFFLEdBQ2xDSCxLQUFLLENBQUNJLFNBQVNELElBQUlILE1BQU1MLE1BQU0sR0FBR1EsSUFBSSxFQUFFO0lBQ2hEO0lBQ0EsT0FBT0Y7QUFDWCxFQUNBLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvZGF0YS9wYWQuanM/ZWUyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IsIH0gZnJvbSAnLi4vLi4vZXJyb3JzL2RhdGEuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIHBhZChoZXhPckJ5dGVzLCB7IGRpciwgc2l6ZSA9IDMyIH0gPSB7fSkge1xuICAgIGlmICh0eXBlb2YgaGV4T3JCeXRlcyA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBwYWRIZXgoaGV4T3JCeXRlcywgeyBkaXIsIHNpemUgfSk7XG4gICAgcmV0dXJuIHBhZEJ5dGVzKGhleE9yQnl0ZXMsIHsgZGlyLCBzaXplIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhZEhleChoZXhfLCB7IGRpciwgc2l6ZSA9IDMyIH0gPSB7fSkge1xuICAgIGlmIChzaXplID09PSBudWxsKVxuICAgICAgICByZXR1cm4gaGV4XztcbiAgICBjb25zdCBoZXggPSBoZXhfLnJlcGxhY2UoJzB4JywgJycpO1xuICAgIGlmIChoZXgubGVuZ3RoID4gc2l6ZSAqIDIpXG4gICAgICAgIHRocm93IG5ldyBTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3Ioe1xuICAgICAgICAgICAgc2l6ZTogTWF0aC5jZWlsKGhleC5sZW5ndGggLyAyKSxcbiAgICAgICAgICAgIHRhcmdldFNpemU6IHNpemUsXG4gICAgICAgICAgICB0eXBlOiAnaGV4JyxcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGAweCR7aGV4W2RpciA9PT0gJ3JpZ2h0JyA/ICdwYWRFbmQnIDogJ3BhZFN0YXJ0J10oc2l6ZSAqIDIsICcwJyl9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYWRCeXRlcyhieXRlcywgeyBkaXIsIHNpemUgPSAzMiB9ID0ge30pIHtcbiAgICBpZiAoc2l6ZSA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIGlmIChieXRlcy5sZW5ndGggPiBzaXplKVxuICAgICAgICB0aHJvdyBuZXcgU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yKHtcbiAgICAgICAgICAgIHNpemU6IGJ5dGVzLmxlbmd0aCxcbiAgICAgICAgICAgIHRhcmdldFNpemU6IHNpemUsXG4gICAgICAgICAgICB0eXBlOiAnYnl0ZXMnLFxuICAgICAgICB9KTtcbiAgICBjb25zdCBwYWRkZWRCeXRlcyA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhZEVuZCA9IGRpciA9PT0gJ3JpZ2h0JztcbiAgICAgICAgcGFkZGVkQnl0ZXNbcGFkRW5kID8gaSA6IHNpemUgLSBpIC0gMV0gPVxuICAgICAgICAgICAgYnl0ZXNbcGFkRW5kID8gaSA6IGJ5dGVzLmxlbmd0aCAtIGkgLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhZGRlZEJ5dGVzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFkLmpzLm1hcCJdLCJuYW1lcyI6WyJTaXplRXhjZWVkc1BhZGRpbmdTaXplRXJyb3IiLCJwYWQiLCJoZXhPckJ5dGVzIiwiZGlyIiwic2l6ZSIsInBhZEhleCIsInBhZEJ5dGVzIiwiaGV4XyIsImhleCIsInJlcGxhY2UiLCJsZW5ndGgiLCJNYXRoIiwiY2VpbCIsInRhcmdldFNpemUiLCJ0eXBlIiwiYnl0ZXMiLCJwYWRkZWRCeXRlcyIsIlVpbnQ4QXJyYXkiLCJpIiwicGFkRW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   size: () => (/* binding */ size)\n/* harmony export */ });\n/* harmony import */ var _isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */ function size(value) {\n    if ((0,_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value, {\n        strict: false\n    })) return Math.ceil((value.length - 2) / 2);\n    return value.length;\n} //# sourceMappingURL=size.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL3NpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBbUM7QUFDbkM7Ozs7O0NBS0MsR0FDTSxTQUFTQyxLQUFLQyxLQUFLO0lBQ3RCLElBQUlGLGdEQUFLQSxDQUFDRSxPQUFPO1FBQUVDLFFBQVE7SUFBTSxJQUM3QixPQUFPQyxLQUFLQyxJQUFJLENBQUMsQ0FBQ0gsTUFBTUksTUFBTSxHQUFHLEtBQUs7SUFDMUMsT0FBT0osTUFBTUksTUFBTTtBQUN2QixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWJsZS1yb3V0ZXItd2ViLy4vbm9kZV9tb2R1bGVzL0B3YWxsZXRjb25uZWN0L3V0aWxzL25vZGVfbW9kdWxlcy92aWVtL19lc20vdXRpbHMvZGF0YS9zaXplLmpzP2RhNTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIZXggfSBmcm9tICcuL2lzSGV4LmpzJztcbi8qKlxuICogQGRlc2NyaXB0aW9uIFJldHJpZXZlcyB0aGUgc2l6ZSBvZiB0aGUgdmFsdWUgKGluIGJ5dGVzKS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIChoZXggb3IgYnl0ZSBhcnJheSkgdG8gcmV0cmlldmUgdGhlIHNpemUgb2YuXG4gKiBAcmV0dXJucyBUaGUgc2l6ZSBvZiB0aGUgdmFsdWUgKGluIGJ5dGVzKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpemUodmFsdWUpIHtcbiAgICBpZiAoaXNIZXgodmFsdWUsIHsgc3RyaWN0OiBmYWxzZSB9KSlcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCgodmFsdWUubGVuZ3RoIC0gMikgLyAyKTtcbiAgICByZXR1cm4gdmFsdWUubGVuZ3RoO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2l6ZS5qcy5tYXAiXSwibmFtZXMiOlsiaXNIZXgiLCJzaXplIiwidmFsdWUiLCJzdHJpY3QiLCJNYXRoIiwiY2VpbCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   trim: () => (/* binding */ trim)\n/* harmony export */ });\nfunction trim(hexOrBytes, { dir = \"left\" } = {}) {\n    let data = typeof hexOrBytes === \"string\" ? hexOrBytes.replace(\"0x\", \"\") : hexOrBytes;\n    let sliceLength = 0;\n    for(let i = 0; i < data.length - 1; i++){\n        if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\") sliceLength++;\n        else break;\n    }\n    data = dir === \"left\" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\n    if (typeof hexOrBytes === \"string\") {\n        if (data.length === 1 && dir === \"right\") data = `${data}0`;\n        return `0x${data.length % 2 === 1 ? `0${data}` : data}`;\n    }\n    return data;\n} //# sourceMappingURL=trim.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL3RyaW0uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLEtBQUtDLFVBQVUsRUFBRSxFQUFFQyxNQUFNLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNsRCxJQUFJQyxPQUFPLE9BQU9GLGVBQWUsV0FBV0EsV0FBV0csT0FBTyxDQUFDLE1BQU0sTUFBTUg7SUFDM0UsSUFBSUksY0FBYztJQUNsQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsS0FBS0ksTUFBTSxHQUFHLEdBQUdELElBQUs7UUFDdEMsSUFBSUgsSUFBSSxDQUFDRCxRQUFRLFNBQVNJLElBQUlILEtBQUtJLE1BQU0sR0FBR0QsSUFBSSxFQUFFLENBQUNFLFFBQVEsT0FBTyxLQUM5REg7YUFFQTtJQUNSO0lBQ0FGLE9BQ0lELFFBQVEsU0FDRkMsS0FBS00sS0FBSyxDQUFDSixlQUNYRixLQUFLTSxLQUFLLENBQUMsR0FBR04sS0FBS0ksTUFBTSxHQUFHRjtJQUN0QyxJQUFJLE9BQU9KLGVBQWUsVUFBVTtRQUNoQyxJQUFJRSxLQUFLSSxNQUFNLEtBQUssS0FBS0wsUUFBUSxTQUM3QkMsT0FBTyxDQUFDLEVBQUVBLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxFQUFFLEVBQUVBLEtBQUtJLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDLEVBQUVKLEtBQUssQ0FBQyxHQUFHQSxLQUFLLENBQUM7SUFDM0Q7SUFDQSxPQUFPQTtBQUNYLEVBQ0EsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9kYXRhL3RyaW0uanM/NDNmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdHJpbShoZXhPckJ5dGVzLCB7IGRpciA9ICdsZWZ0JyB9ID0ge30pIHtcbiAgICBsZXQgZGF0YSA9IHR5cGVvZiBoZXhPckJ5dGVzID09PSAnc3RyaW5nJyA/IGhleE9yQnl0ZXMucmVwbGFjZSgnMHgnLCAnJykgOiBoZXhPckJ5dGVzO1xuICAgIGxldCBzbGljZUxlbmd0aCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBpZiAoZGF0YVtkaXIgPT09ICdsZWZ0JyA/IGkgOiBkYXRhLmxlbmd0aCAtIGkgLSAxXS50b1N0cmluZygpID09PSAnMCcpXG4gICAgICAgICAgICBzbGljZUxlbmd0aCsrO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgZGF0YSA9XG4gICAgICAgIGRpciA9PT0gJ2xlZnQnXG4gICAgICAgICAgICA/IGRhdGEuc2xpY2Uoc2xpY2VMZW5ndGgpXG4gICAgICAgICAgICA6IGRhdGEuc2xpY2UoMCwgZGF0YS5sZW5ndGggLSBzbGljZUxlbmd0aCk7XG4gICAgaWYgKHR5cGVvZiBoZXhPckJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPT09IDEgJiYgZGlyID09PSAncmlnaHQnKVxuICAgICAgICAgICAgZGF0YSA9IGAke2RhdGF9MGA7XG4gICAgICAgIHJldHVybiBgMHgke2RhdGEubGVuZ3RoICUgMiA9PT0gMSA/IGAwJHtkYXRhfWAgOiBkYXRhfWA7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJpbS5qcy5tYXAiXSwibmFtZXMiOlsidHJpbSIsImhleE9yQnl0ZXMiLCJkaXIiLCJkYXRhIiwicmVwbGFjZSIsInNsaWNlTGVuZ3RoIiwiaSIsImxlbmd0aCIsInRvU3RyaW5nIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertSize: () => (/* binding */ assertSize),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   hexToBigInt: () => (/* binding */ hexToBigInt),\n/* harmony export */   hexToBool: () => (/* binding */ hexToBool),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   hexToString: () => (/* binding */ hexToString)\n/* harmony export */ });\n/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../errors/encoding.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\");\n/* harmony import */ var _data_size_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/size.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/size.js\");\n/* harmony import */ var _data_trim_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../data/trim.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/trim.js\");\n/* harmony import */ var _toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./toBytes.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n\n\n\n\nfunction assertSize(hexOrBytes, { size }) {\n    if ((0,_data_size_js__WEBPACK_IMPORTED_MODULE_0__.size)(hexOrBytes) > size) throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__.SizeOverflowError({\n        givenSize: (0,_data_size_js__WEBPACK_IMPORTED_MODULE_0__.size)(hexOrBytes),\n        maxSize: size\n    });\n}\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */ function fromHex(hex, toOrOpts) {\n    const opts = typeof toOrOpts === \"string\" ? {\n        to: toOrOpts\n    } : toOrOpts;\n    const to = opts.to;\n    if (to === \"number\") return hexToNumber(hex, opts);\n    if (to === \"bigint\") return hexToBigInt(hex, opts);\n    if (to === \"string\") return hexToString(hex, opts);\n    if (to === \"boolean\") return hexToBool(hex, opts);\n    return (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(hex, opts);\n}\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */ function hexToBigInt(hex, opts = {}) {\n    const { signed } = opts;\n    if (opts.size) assertSize(hex, {\n        size: opts.size\n    });\n    const value = BigInt(hex);\n    if (!signed) return value;\n    const size = (hex.length - 2) / 2;\n    const max = (1n << BigInt(size) * 8n - 1n) - 1n;\n    if (value <= max) return value;\n    return value - BigInt(`0x${\"f\".padStart(size * 2, \"f\")}`) - 1n;\n}\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */ function hexToBool(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        assertSize(hex, {\n            size: opts.size\n        });\n        hex = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex);\n    }\n    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex) === \"0x00\") return false;\n    if ((0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(hex) === \"0x01\") return true;\n    throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_1__.InvalidHexBooleanError(hex);\n}\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */ function hexToNumber(hex, opts = {}) {\n    return Number(hexToBigInt(hex, opts));\n}\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */ function hexToString(hex, opts = {}) {\n    let bytes = (0,_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(hex);\n    if (opts.size) {\n        assertSize(bytes, {\n            size: opts.size\n        });\n        bytes = (0,_data_trim_js__WEBPACK_IMPORTED_MODULE_3__.trim)(bytes, {\n            dir: \"right\"\n        });\n    }\n    return new TextDecoder().decode(bytes);\n} //# sourceMappingURL=fromHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolToBytes: () => (/* binding */ boolToBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   numberToBytes: () => (/* binding */ numberToBytes),\n/* harmony export */   stringToBytes: () => (/* binding */ stringToBytes),\n/* harmony export */   toBytes: () => (/* binding */ toBytes)\n/* harmony export */ });\n/* harmony import */ var _errors_base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../errors/base.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/base.js\");\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../data/pad.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var _toHex_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./toHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n\n\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */ function toBytes(value, opts = {}) {\n    if (typeof value === \"number\" || typeof value === \"bigint\") return numberToBytes(value, opts);\n    if (typeof value === \"boolean\") return boolToBytes(value, opts);\n    if ((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(value)) return hexToBytes(value, opts);\n    return stringToBytes(value, opts);\n}\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */ function boolToBytes(value, opts = {}) {\n    const bytes = new Uint8Array(1);\n    bytes[0] = Number(value);\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(bytes, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, {\n            size: opts.size\n        });\n    }\n    return bytes;\n}\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction charCodeToBase16(char) {\n    if (char >= charCodeMap.zero && char <= charCodeMap.nine) return char - charCodeMap.zero;\n    if (char >= charCodeMap.A && char <= charCodeMap.F) return char - (charCodeMap.A - 10);\n    if (char >= charCodeMap.a && char <= charCodeMap.f) return char - (charCodeMap.a - 10);\n    return undefined;\n}\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */ function hexToBytes(hex_, opts = {}) {\n    let hex = hex_;\n    if (opts.size) {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(hex, {\n            size: opts.size\n        });\n        hex = (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(hex, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    let hexString = hex.slice(2);\n    if (hexString.length % 2) hexString = `0${hexString}`;\n    const length = hexString.length / 2;\n    const bytes = new Uint8Array(length);\n    for(let index = 0, j = 0; index < length; index++){\n        const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++));\n        const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++));\n        if (nibbleLeft === undefined || nibbleRight === undefined) {\n            throw new _errors_base_js__WEBPACK_IMPORTED_MODULE_3__.BaseError(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\n        }\n        bytes[index] = nibbleLeft * 16 + nibbleRight;\n    }\n    return bytes;\n}\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */ function numberToBytes(value, opts) {\n    const hex = (0,_toHex_js__WEBPACK_IMPORTED_MODULE_4__.numberToHex)(value, opts);\n    return hexToBytes(hex);\n}\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */ function stringToBytes(value, opts = {}) {\n    const bytes = encoder.encode(value);\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_1__.assertSize)(bytes, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_2__.pad)(bytes, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    return bytes;\n} //# sourceMappingURL=toBytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   boolToHex: () => (/* binding */ boolToHex),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   numberToHex: () => (/* binding */ numberToHex),\n/* harmony export */   stringToHex: () => (/* binding */ stringToHex),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n/* harmony import */ var _errors_encoding_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../errors/encoding.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/errors/encoding.js\");\n/* harmony import */ var _data_pad_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/pad.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var _fromHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n\n\n\nconst hexes = /*#__PURE__*/ Array.from({\n    length: 256\n}, (_v, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */ function toHex(value, opts = {}) {\n    if (typeof value === \"number\" || typeof value === \"bigint\") return numberToHex(value, opts);\n    if (typeof value === \"string\") {\n        return stringToHex(value, opts);\n    }\n    if (typeof value === \"boolean\") return boolToHex(value, opts);\n    return bytesToHex(value, opts);\n}\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */ function boolToHex(value, opts = {}) {\n    const hex = `0x${Number(value)}`;\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_0__.assertSize)(hex, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n            size: opts.size\n        });\n    }\n    return hex;\n}\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */ function bytesToHex(value, opts = {}) {\n    let string = \"\";\n    for(let i = 0; i < value.length; i++){\n        string += hexes[value[i]];\n    }\n    const hex = `0x${string}`;\n    if (typeof opts.size === \"number\") {\n        (0,_fromHex_js__WEBPACK_IMPORTED_MODULE_0__.assertSize)(hex, {\n            size: opts.size\n        });\n        return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n            dir: \"right\",\n            size: opts.size\n        });\n    }\n    return hex;\n}\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */ function numberToHex(value_, opts = {}) {\n    const { signed, size } = opts;\n    const value = BigInt(value_);\n    let maxValue;\n    if (size) {\n        if (signed) maxValue = (1n << BigInt(size) * 8n - 1n) - 1n;\n        else maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    } else if (typeof value_ === \"number\") {\n        maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    const minValue = typeof maxValue === \"bigint\" && signed ? -maxValue - 1n : 0;\n    if (maxValue && value > maxValue || value < minValue) {\n        const suffix = typeof value_ === \"bigint\" ? \"n\" : \"\";\n        throw new _errors_encoding_js__WEBPACK_IMPORTED_MODULE_2__.IntegerOutOfRangeError({\n            max: maxValue ? `${maxValue}${suffix}` : undefined,\n            min: `${minValue}${suffix}`,\n            signed,\n            size,\n            value: `${value_}${suffix}`\n        });\n    }\n    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value).toString(16)}`;\n    if (size) return (0,_data_pad_js__WEBPACK_IMPORTED_MODULE_1__.pad)(hex, {\n        size\n    });\n    return hex;\n}\nconst encoder = /*#__PURE__*/ new TextEncoder();\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */ function stringToHex(value_, opts = {}) {\n    const value = encoder.encode(value_);\n    return bytesToHex(value, opts);\n} //# sourceMappingURL=toHex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: () => (/* binding */ keccak256)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/toBytes.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../encoding/toHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n\nfunction keccak256(value, to_) {\n    const to = to_ || \"hex\";\n    const bytes = (0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256)((0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_1__.isHex)(value, {\n        strict: false\n    }) ? (0,_encoding_toBytes_js__WEBPACK_IMPORTED_MODULE_2__.toBytes)(value) : value);\n    if (to === \"bytes\") return bytes;\n    return (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_3__.toHex)(bytes);\n} //# sourceMappingURL=keccak256.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9oYXNoL2tlY2NhazI1Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFnRDtBQUNQO0FBQ1E7QUFDSjtBQUN0QyxTQUFTSSxVQUFVQyxLQUFLLEVBQUVDLEdBQUc7SUFDaEMsTUFBTUMsS0FBS0QsT0FBTztJQUNsQixNQUFNRSxRQUFRUiw4REFBVUEsQ0FBQ0MscURBQUtBLENBQUNJLE9BQU87UUFBRUksUUFBUTtJQUFNLEtBQUtQLDZEQUFPQSxDQUFDRyxTQUFTQTtJQUM1RSxJQUFJRSxPQUFPLFNBQ1AsT0FBT0M7SUFDWCxPQUFPTCx5REFBS0EsQ0FBQ0s7QUFDakIsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL2hhc2gva2VjY2FrMjU2LmpzP2QwNDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsga2VjY2FrXzI1NiB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvc2hhMyc7XG5pbXBvcnQgeyBpc0hleCB9IGZyb20gJy4uL2RhdGEvaXNIZXguanMnO1xuaW1wb3J0IHsgdG9CeXRlcyB9IGZyb20gJy4uL2VuY29kaW5nL3RvQnl0ZXMuanMnO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tICcuLi9lbmNvZGluZy90b0hleC5qcyc7XG5leHBvcnQgZnVuY3Rpb24ga2VjY2FrMjU2KHZhbHVlLCB0b18pIHtcbiAgICBjb25zdCB0byA9IHRvXyB8fCAnaGV4JztcbiAgICBjb25zdCBieXRlcyA9IGtlY2Nha18yNTYoaXNIZXgodmFsdWUsIHsgc3RyaWN0OiBmYWxzZSB9KSA/IHRvQnl0ZXModmFsdWUpIDogdmFsdWUpO1xuICAgIGlmICh0byA9PT0gJ2J5dGVzJylcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIHJldHVybiB0b0hleChieXRlcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWNjYWsyNTYuanMubWFwIl0sIm5hbWVzIjpbImtlY2Nha18yNTYiLCJpc0hleCIsInRvQnl0ZXMiLCJ0b0hleCIsImtlY2NhazI1NiIsInZhbHVlIiwidG9fIiwidG8iLCJieXRlcyIsInN0cmljdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/hash/keccak256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LruMap: () => (/* binding */ LruMap)\n/* harmony export */ });\n/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */ class LruMap extends Map {\n    constructor(size){\n        super();\n        Object.defineProperty(this, \"maxSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxSize = size;\n    }\n    get(key) {\n        const value = super.get(key);\n        if (super.has(key) && value !== undefined) {\n            this.delete(key);\n            super.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        super.set(key, value);\n        if (this.maxSize && this.size > this.maxSize) {\n            const firstKey = this.keys().next().value;\n            if (firstKey) this.delete(firstKey);\n        }\n        return this;\n    }\n} //# sourceMappingURL=lru.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9scnUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0NBSUMsR0FDTSxNQUFNQSxlQUFlQztJQUN4QkMsWUFBWUMsSUFBSSxDQUFFO1FBQ2QsS0FBSztRQUNMQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFdBQVc7WUFDbkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsT0FBTyxHQUFHUDtJQUNuQjtJQUNBUSxJQUFJQyxHQUFHLEVBQUU7UUFDTCxNQUFNSCxRQUFRLEtBQUssQ0FBQ0UsSUFBSUM7UUFDeEIsSUFBSSxLQUFLLENBQUNDLElBQUlELFFBQVFILFVBQVVLLFdBQVc7WUFDdkMsSUFBSSxDQUFDQyxNQUFNLENBQUNIO1lBQ1osS0FBSyxDQUFDSSxJQUFJSixLQUFLSDtRQUNuQjtRQUNBLE9BQU9BO0lBQ1g7SUFDQU8sSUFBSUosR0FBRyxFQUFFSCxLQUFLLEVBQUU7UUFDWixLQUFLLENBQUNPLElBQUlKLEtBQUtIO1FBQ2YsSUFBSSxJQUFJLENBQUNDLE9BQU8sSUFBSSxJQUFJLENBQUNQLElBQUksR0FBRyxJQUFJLENBQUNPLE9BQU8sRUFBRTtZQUMxQyxNQUFNTyxXQUFXLElBQUksQ0FBQ0MsSUFBSSxHQUFHQyxJQUFJLEdBQUdWLEtBQUs7WUFDekMsSUFBSVEsVUFDQSxJQUFJLENBQUNGLE1BQU0sQ0FBQ0U7UUFDcEI7UUFDQSxPQUFPLElBQUk7SUFDZjtBQUNKLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9scnUuanM/NGYxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1hcCB3aXRoIGEgTFJVIChMZWFzdCByZWNlbnRseSB1c2VkKSBwb2xpY3kuXG4gKlxuICogQGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FjaGVfcmVwbGFjZW1lbnRfcG9saWNpZXMjTFJVXG4gKi9cbmV4cG9ydCBjbGFzcyBMcnVNYXAgZXh0ZW5kcyBNYXAge1xuICAgIGNvbnN0cnVjdG9yKHNpemUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWF4U2l6ZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1heFNpemUgPSBzaXplO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3VwZXIuZ2V0KGtleSk7XG4gICAgICAgIGlmIChzdXBlci5oYXMoa2V5KSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5tYXhTaXplICYmIHRoaXMuc2l6ZSA+IHRoaXMubWF4U2l6ZSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RLZXkgPSB0aGlzLmtleXMoKS5uZXh0KCkudmFsdWU7XG4gICAgICAgICAgICBpZiAoZmlyc3RLZXkpXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxldGUoZmlyc3RLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxydS5qcy5tYXAiXSwibmFtZXMiOlsiTHJ1TWFwIiwiTWFwIiwiY29uc3RydWN0b3IiLCJzaXplIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIm1heFNpemUiLCJnZXQiLCJrZXkiLCJoYXMiLCJ1bmRlZmluZWQiLCJkZWxldGUiLCJzZXQiLCJmaXJzdEtleSIsImtleXMiLCJuZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/lru.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverAddress: () => (/* binding */ recoverAddress)\n/* harmony export */ });\n/* harmony import */ var _accounts_utils_publicKeyToAddress_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../accounts/utils/publicKeyToAddress.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js\");\n/* harmony import */ var _recoverPublicKey_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./recoverPublicKey.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\");\n\n\nasync function recoverAddress({ hash, signature }) {\n    return (0,_accounts_utils_publicKeyToAddress_js__WEBPACK_IMPORTED_MODULE_0__.publicKeyToAddress)(await (0,_recoverPublicKey_js__WEBPACK_IMPORTED_MODULE_1__.recoverPublicKey)({\n        hash: hash,\n        signature\n    }));\n} //# sourceMappingURL=recoverAddress.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvcmVjb3ZlckFkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdGO0FBQ3ZCO0FBQ2xELGVBQWVFLGVBQWUsRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUc7SUFDckQsT0FBT0oseUZBQWtCQSxDQUFDLE1BQU1DLHNFQUFnQkEsQ0FBQztRQUFFRSxNQUFNQTtRQUFNQztJQUFVO0FBQzdFLEVBQ0EsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3RhYmxlLXJvdXRlci13ZWIvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvcmVjb3ZlckFkZHJlc3MuanM/NGExZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwdWJsaWNLZXlUb0FkZHJlc3MgfSBmcm9tICcuLi8uLi9hY2NvdW50cy91dGlscy9wdWJsaWNLZXlUb0FkZHJlc3MuanMnO1xuaW1wb3J0IHsgcmVjb3ZlclB1YmxpY0tleSB9IGZyb20gJy4vcmVjb3ZlclB1YmxpY0tleS5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVjb3ZlckFkZHJlc3MoeyBoYXNoLCBzaWduYXR1cmUsIH0pIHtcbiAgICByZXR1cm4gcHVibGljS2V5VG9BZGRyZXNzKGF3YWl0IHJlY292ZXJQdWJsaWNLZXkoeyBoYXNoOiBoYXNoLCBzaWduYXR1cmUgfSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVjb3ZlckFkZHJlc3MuanMubWFwIl0sIm5hbWVzIjpbInB1YmxpY0tleVRvQWRkcmVzcyIsInJlY292ZXJQdWJsaWNLZXkiLCJyZWNvdmVyQWRkcmVzcyIsImhhc2giLCJzaWduYXR1cmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recoverPublicKey: () => (/* binding */ recoverPublicKey)\n/* harmony export */ });\n/* harmony import */ var _data_isHex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/isHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/data/isHex.js\");\n/* harmony import */ var _encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../encoding/fromHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var _encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding/toHex.js */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\nasync function recoverPublicKey({ hash, signature }) {\n    const hashHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(hash) ? hash : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(hash);\n    const { secp256k1 } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@walletconnect\").then(__webpack_require__.bind(__webpack_require__, /*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/@walletconnect/utils/node_modules/@noble/curves/esm/secp256k1.js\"));\n    const signature_ = (()=>{\n        // typeof signature: `Signature`\n        if (typeof signature === \"object\" && \"r\" in signature && \"s\" in signature) {\n            const { r, s, v, yParity } = signature;\n            const yParityOrV = Number(yParity ?? v);\n            const recoveryBit = toRecoveryBit(yParityOrV);\n            return new secp256k1.Signature((0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(r), (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToBigInt)(s)).addRecoveryBit(recoveryBit);\n        }\n        // typeof signature: `Hex | ByteArray`\n        const signatureHex = (0,_data_isHex_js__WEBPACK_IMPORTED_MODULE_0__.isHex)(signature) ? signature : (0,_encoding_toHex_js__WEBPACK_IMPORTED_MODULE_1__.toHex)(signature);\n        const yParityOrV = (0,_encoding_fromHex_js__WEBPACK_IMPORTED_MODULE_2__.hexToNumber)(`0x${signatureHex.slice(130)}`);\n        const recoveryBit = toRecoveryBit(yParityOrV);\n        return secp256k1.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);\n    })();\n    const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);\n    return `0x${publicKey}`;\n}\nfunction toRecoveryBit(yParityOrV) {\n    if (yParityOrV === 0 || yParityOrV === 1) return yParityOrV;\n    if (yParityOrV === 27) return 0;\n    if (yParityOrV === 28) return 1;\n    throw new Error(\"Invalid yParityOrV value\");\n} //# sourceMappingURL=recoverPublicKey.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhbGxldGNvbm5lY3QvdXRpbHMvbm9kZV9tb2R1bGVzL3ZpZW0vX2VzbS91dGlscy9zaWduYXR1cmUvcmVjb3ZlclB1YmxpY0tleS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBQzBCO0FBQ3RCO0FBQ3RDLGVBQWVJLGlCQUFpQixFQUFFQyxJQUFJLEVBQUVDLFNBQVMsRUFBRztJQUN2RCxNQUFNQyxVQUFVUCxxREFBS0EsQ0FBQ0ssUUFBUUEsT0FBT0YseURBQUtBLENBQUNFO0lBQzNDLE1BQU0sRUFBRUcsU0FBUyxFQUFFLEdBQUcsTUFBTSxpUEFBTztJQUNuQyxNQUFNQyxhQUFhLENBQUM7UUFDaEIsZ0NBQWdDO1FBQ2hDLElBQUksT0FBT0gsY0FBYyxZQUFZLE9BQU9BLGFBQWEsT0FBT0EsV0FBVztZQUN2RSxNQUFNLEVBQUVJLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLE9BQU8sRUFBRSxHQUFHUDtZQUM3QixNQUFNUSxhQUFhQyxPQUFPRixXQUFXRDtZQUNyQyxNQUFNSSxjQUFjQyxjQUFjSDtZQUNsQyxPQUFPLElBQUlOLFVBQVVVLFNBQVMsQ0FBQ2pCLGlFQUFXQSxDQUFDUyxJQUFJVCxpRUFBV0EsQ0FBQ1UsSUFBSVEsY0FBYyxDQUFDSDtRQUNsRjtRQUNBLHNDQUFzQztRQUN0QyxNQUFNSSxlQUFlcEIscURBQUtBLENBQUNNLGFBQWFBLFlBQVlILHlEQUFLQSxDQUFDRztRQUMxRCxNQUFNUSxhQUFhWixpRUFBV0EsQ0FBQyxDQUFDLEVBQUUsRUFBRWtCLGFBQWFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDN0QsTUFBTUwsY0FBY0MsY0FBY0g7UUFDbEMsT0FBT04sVUFBVVUsU0FBUyxDQUFDSSxXQUFXLENBQUNGLGFBQWFHLFNBQVMsQ0FBQyxHQUFHLE1BQU1KLGNBQWMsQ0FBQ0g7SUFDMUY7SUFDQSxNQUFNUSxZQUFZZixXQUNiTCxnQkFBZ0IsQ0FBQ0csUUFBUWdCLFNBQVMsQ0FBQyxJQUNuQ3BCLEtBQUssQ0FBQztJQUNYLE9BQU8sQ0FBQyxFQUFFLEVBQUVxQixVQUFVLENBQUM7QUFDM0I7QUFDQSxTQUFTUCxjQUFjSCxVQUFVO0lBQzdCLElBQUlBLGVBQWUsS0FBS0EsZUFBZSxHQUNuQyxPQUFPQTtJQUNYLElBQUlBLGVBQWUsSUFDZixPQUFPO0lBQ1gsSUFBSUEsZUFBZSxJQUNmLE9BQU87SUFDWCxNQUFNLElBQUlXLE1BQU07QUFDcEIsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFibGUtcm91dGVyLXdlYi8uL25vZGVfbW9kdWxlcy9Ad2FsbGV0Y29ubmVjdC91dGlscy9ub2RlX21vZHVsZXMvdmllbS9fZXNtL3V0aWxzL3NpZ25hdHVyZS9yZWNvdmVyUHVibGljS2V5LmpzPzEzZjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNIZXggfSBmcm9tICcuLi9kYXRhL2lzSGV4LmpzJztcbmltcG9ydCB7IGhleFRvQmlnSW50LCBoZXhUb051bWJlciwgfSBmcm9tICcuLi9lbmNvZGluZy9mcm9tSGV4LmpzJztcbmltcG9ydCB7IHRvSGV4IH0gZnJvbSAnLi4vZW5jb2RpbmcvdG9IZXguanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlY292ZXJQdWJsaWNLZXkoeyBoYXNoLCBzaWduYXR1cmUsIH0pIHtcbiAgICBjb25zdCBoYXNoSGV4ID0gaXNIZXgoaGFzaCkgPyBoYXNoIDogdG9IZXgoaGFzaCk7XG4gICAgY29uc3QgeyBzZWNwMjU2azEgfSA9IGF3YWl0IGltcG9ydCgnQG5vYmxlL2N1cnZlcy9zZWNwMjU2azEnKTtcbiAgICBjb25zdCBzaWduYXR1cmVfID0gKCgpID0+IHtcbiAgICAgICAgLy8gdHlwZW9mIHNpZ25hdHVyZTogYFNpZ25hdHVyZWBcbiAgICAgICAgaWYgKHR5cGVvZiBzaWduYXR1cmUgPT09ICdvYmplY3QnICYmICdyJyBpbiBzaWduYXR1cmUgJiYgJ3MnIGluIHNpZ25hdHVyZSkge1xuICAgICAgICAgICAgY29uc3QgeyByLCBzLCB2LCB5UGFyaXR5IH0gPSBzaWduYXR1cmU7XG4gICAgICAgICAgICBjb25zdCB5UGFyaXR5T3JWID0gTnVtYmVyKHlQYXJpdHkgPz8gdik7XG4gICAgICAgICAgICBjb25zdCByZWNvdmVyeUJpdCA9IHRvUmVjb3ZlcnlCaXQoeVBhcml0eU9yVik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IHNlY3AyNTZrMS5TaWduYXR1cmUoaGV4VG9CaWdJbnQociksIGhleFRvQmlnSW50KHMpKS5hZGRSZWNvdmVyeUJpdChyZWNvdmVyeUJpdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHlwZW9mIHNpZ25hdHVyZTogYEhleCB8IEJ5dGVBcnJheWBcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlSGV4ID0gaXNIZXgoc2lnbmF0dXJlKSA/IHNpZ25hdHVyZSA6IHRvSGV4KHNpZ25hdHVyZSk7XG4gICAgICAgIGNvbnN0IHlQYXJpdHlPclYgPSBoZXhUb051bWJlcihgMHgke3NpZ25hdHVyZUhleC5zbGljZSgxMzApfWApO1xuICAgICAgICBjb25zdCByZWNvdmVyeUJpdCA9IHRvUmVjb3ZlcnlCaXQoeVBhcml0eU9yVik7XG4gICAgICAgIHJldHVybiBzZWNwMjU2azEuU2lnbmF0dXJlLmZyb21Db21wYWN0KHNpZ25hdHVyZUhleC5zdWJzdHJpbmcoMiwgMTMwKSkuYWRkUmVjb3ZlcnlCaXQocmVjb3ZlcnlCaXQpO1xuICAgIH0pKCk7XG4gICAgY29uc3QgcHVibGljS2V5ID0gc2lnbmF0dXJlX1xuICAgICAgICAucmVjb3ZlclB1YmxpY0tleShoYXNoSGV4LnN1YnN0cmluZygyKSlcbiAgICAgICAgLnRvSGV4KGZhbHNlKTtcbiAgICByZXR1cm4gYDB4JHtwdWJsaWNLZXl9YDtcbn1cbmZ1bmN0aW9uIHRvUmVjb3ZlcnlCaXQoeVBhcml0eU9yVikge1xuICAgIGlmICh5UGFyaXR5T3JWID09PSAwIHx8IHlQYXJpdHlPclYgPT09IDEpXG4gICAgICAgIHJldHVybiB5UGFyaXR5T3JWO1xuICAgIGlmICh5UGFyaXR5T3JWID09PSAyNylcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgaWYgKHlQYXJpdHlPclYgPT09IDI4KVxuICAgICAgICByZXR1cm4gMTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgeVBhcml0eU9yViB2YWx1ZScpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVjb3ZlclB1YmxpY0tleS5qcy5tYXAiXSwibmFtZXMiOlsiaXNIZXgiLCJoZXhUb0JpZ0ludCIsImhleFRvTnVtYmVyIiwidG9IZXgiLCJyZWNvdmVyUHVibGljS2V5IiwiaGFzaCIsInNpZ25hdHVyZSIsImhhc2hIZXgiLCJzZWNwMjU2azEiLCJzaWduYXR1cmVfIiwiciIsInMiLCJ2IiwieVBhcml0eSIsInlQYXJpdHlPclYiLCJOdW1iZXIiLCJyZWNvdmVyeUJpdCIsInRvUmVjb3ZlcnlCaXQiLCJTaWduYXR1cmUiLCJhZGRSZWNvdmVyeUJpdCIsInNpZ25hdHVyZUhleCIsInNsaWNlIiwiZnJvbUNvbXBhY3QiLCJzdWJzdHJpbmciLCJwdWJsaWNLZXkiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js\n");

/***/ })

};
;